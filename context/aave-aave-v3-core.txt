Directory structure:
└── aave-aave-v3-core/
    ├── README.md
    ├── CHANGELOG.md
    ├── docker-compose.yml
    ├── Dockerfile
    ├── hardhat.config.ts
    ├── helper-hardhat-config.ts
    ├── lib.tsconfig.json
    ├── LICENSE.md
    ├── package.json
    ├── setup-test-env.sh
    ├── test-wallets.js
    ├── tsconfig.json
    ├── tslint.json
    ├── .gitlab-ci.yml
    ├── .npmrc
    ├── .nvmrc
    ├── .prettierignore
    ├── .prettierrc
    ├── .solcover.js
    ├── certora/
    │   ├── README.md
    │   ├── applyHarness.patch
    │   ├── Makefile
    │   ├── harness/
    │   │   ├── ATokenHarness.sol
    │   │   ├── PoolHarness.sol
    │   │   ├── ReserveConfigurationHarness.sol
    │   │   ├── SimpleERC20.sol
    │   │   ├── StableDebtTokenHarness.sol
    │   │   ├── SymbolicPriceOracle.sol
    │   │   ├── UserConfigurationHarness.sol
    │   │   └── VariableDebtTokenHarness.sol
    │   ├── scripts/
    │   │   ├── verifyAToken.sh
    │   │   ├── verifyPool.sh
    │   │   ├── verifyReserveConfiguration.sh
    │   │   ├── verifyStableTokenCLI.sh
    │   │   ├── verifyUserConfigCLI.sh
    │   │   └── verifyVariableTokenCLI.sh
    │   └── specs/
    │       ├── AToken.spec
    │       ├── pool.spec
    │       ├── ReserveConfiguration.spec
    │       ├── StableDebtToken.spec
    │       ├── UserConfiguration.spec
    │       └── VariableDebtToken.spec
    ├── contracts/
    │   ├── dependencies/
    │   │   ├── chainlink/
    │   │   │   └── AggregatorInterface.sol
    │   │   ├── gnosis/
    │   │   │   └── contracts/
    │   │   │       └── GPv2SafeERC20.sol
    │   │   ├── openzeppelin/
    │   │   │   ├── contracts/
    │   │   │   │   ├── AccessControl.sol
    │   │   │   │   ├── Address.sol
    │   │   │   │   ├── Context.sol
    │   │   │   │   ├── ERC165.sol
    │   │   │   │   ├── ERC20.sol
    │   │   │   │   ├── IAccessControl.sol
    │   │   │   │   ├── IERC165.sol
    │   │   │   │   ├── IERC20.sol
    │   │   │   │   ├── IERC20Detailed.sol
    │   │   │   │   ├── Ownable.sol
    │   │   │   │   ├── SafeCast.sol
    │   │   │   │   ├── SafeERC20.sol
    │   │   │   │   ├── SafeMath.sol
    │   │   │   │   └── Strings.sol
    │   │   │   └── upgradeability/
    │   │   │       ├── AdminUpgradeabilityProxy.sol
    │   │   │       ├── BaseAdminUpgradeabilityProxy.sol
    │   │   │       ├── BaseUpgradeabilityProxy.sol
    │   │   │       ├── Initializable.sol
    │   │   │       ├── InitializableAdminUpgradeabilityProxy.sol
    │   │   │       ├── InitializableUpgradeabilityProxy.sol
    │   │   │       ├── Proxy.sol
    │   │   │       └── UpgradeabilityProxy.sol
    │   │   └── weth/
    │   │       └── WETH9.sol
    │   ├── deployments/
    │   │   └── ReservesSetupHelper.sol
    │   ├── flashloan/
    │   │   ├── base/
    │   │   │   ├── FlashLoanReceiverBase.sol
    │   │   │   ├── FlashLoanSimpleReceiverBase.sol
    │   │   │   └── LICENSE.md
    │   │   └── interfaces/
    │   │       ├── IFlashLoanReceiver.sol
    │   │       ├── IFlashLoanSimpleReceiver.sol
    │   │       └── LICENSE.md
    │   ├── interfaces/
    │   │   ├── IAaveIncentivesController.sol
    │   │   ├── IAaveOracle.sol
    │   │   ├── IACLManager.sol
    │   │   ├── IAToken.sol
    │   │   ├── ICreditDelegationToken.sol
    │   │   ├── IDefaultInterestRateStrategy.sol
    │   │   ├── IDelegationToken.sol
    │   │   ├── IERC20WithPermit.sol
    │   │   ├── IInitializableAToken.sol
    │   │   ├── IInitializableDebtToken.sol
    │   │   ├── IL2Pool.sol
    │   │   ├── IPool.sol
    │   │   ├── IPoolAddressesProvider.sol
    │   │   ├── IPoolAddressesProviderRegistry.sol
    │   │   ├── IPoolConfigurator.sol
    │   │   ├── IPoolDataProvider.sol
    │   │   ├── IPriceOracle.sol
    │   │   ├── IPriceOracleGetter.sol
    │   │   ├── IPriceOracleSentinel.sol
    │   │   ├── IReserveInterestRateStrategy.sol
    │   │   ├── IScaledBalanceToken.sol
    │   │   ├── ISequencerOracle.sol
    │   │   ├── IStableDebtToken.sol
    │   │   ├── IVariableDebtToken.sol
    │   │   └── LICENSE.md
    │   ├── misc/
    │   │   ├── AaveOracle.sol
    │   │   ├── AaveProtocolDataProvider.sol
    │   │   ├── L2Encoder.sol
    │   │   ├── ZeroReserveInterestRateStrategy.sol
    │   │   └── interfaces/
    │   │       ├── IWETH.sol
    │   │       └── LICENSE.md
    │   ├── mocks/
    │   │   ├── flashloan/
    │   │   │   ├── MockFlashLoanReceiver.sol
    │   │   │   └── MockSimpleFlashLoanReceiver.sol
    │   │   ├── helpers/
    │   │   │   ├── MockIncentivesController.sol
    │   │   │   ├── MockL2Pool.sol
    │   │   │   ├── MockPeripheryContract.sol
    │   │   │   ├── MockPool.sol
    │   │   │   ├── MockReserveConfiguration.sol
    │   │   │   └── SelfDestructTransfer.sol
    │   │   ├── oracle/
    │   │   │   ├── PriceOracle.sol
    │   │   │   ├── SequencerOracle.sol
    │   │   │   └── CLAggregators/
    │   │   │       └── MockAggregator.sol
    │   │   ├── tests/
    │   │   │   ├── FlashloanAttacker.sol
    │   │   │   ├── MockReserveInterestRateStrategy.sol
    │   │   │   └── WadRayMathWrapper.sol
    │   │   ├── tokens/
    │   │   │   ├── MintableDelegationERC20.sol
    │   │   │   ├── MintableERC20.sol
    │   │   │   ├── MockATokenRepayment.sol
    │   │   │   └── WETH9Mocked.sol
    │   │   └── upgradeability/
    │   │       ├── MockAToken.sol
    │   │       ├── MockInitializableImplementation.sol
    │   │       ├── MockStableDebtToken.sol
    │   │       └── MockVariableDebtToken.sol
    │   └── protocol/
    │       ├── configuration/
    │       │   ├── ACLManager.sol
    │       │   ├── PoolAddressesProvider.sol
    │       │   ├── PoolAddressesProviderRegistry.sol
    │       │   └── PriceOracleSentinel.sol
    │       ├── libraries/
    │       │   ├── aave-upgradeability/
    │       │   │   ├── BaseImmutableAdminUpgradeabilityProxy.sol
    │       │   │   ├── InitializableImmutableAdminUpgradeabilityProxy.sol
    │       │   │   └── VersionedInitializable.sol
    │       │   ├── configuration/
    │       │   │   ├── ReserveConfiguration.sol
    │       │   │   └── UserConfiguration.sol
    │       │   ├── helpers/
    │       │   │   ├── Errors.sol
    │       │   │   └── Helpers.sol
    │       │   ├── logic/
    │       │   │   ├── BorrowLogic.sol
    │       │   │   ├── BridgeLogic.sol
    │       │   │   ├── CalldataLogic.sol
    │       │   │   ├── ConfiguratorLogic.sol
    │       │   │   ├── EModeLogic.sol
    │       │   │   ├── FlashLoanLogic.sol
    │       │   │   ├── GenericLogic.sol
    │       │   │   ├── IsolationModeLogic.sol
    │       │   │   ├── LiquidationLogic.sol
    │       │   │   ├── PoolLogic.sol
    │       │   │   ├── ReserveLogic.sol
    │       │   │   ├── SupplyLogic.sol
    │       │   │   └── ValidationLogic.sol
    │       │   ├── math/
    │       │   │   ├── MathUtils.sol
    │       │   │   ├── PercentageMath.sol
    │       │   │   └── WadRayMath.sol
    │       │   └── types/
    │       │       ├── ConfiguratorInputTypes.sol
    │       │       └── DataTypes.sol
    │       ├── pool/
    │       │   ├── DefaultReserveInterestRateStrategy.sol
    │       │   ├── L2Pool.sol
    │       │   ├── Pool.sol
    │       │   ├── PoolConfigurator.sol
    │       │   └── PoolStorage.sol
    │       └── tokenization/
    │           ├── AToken.sol
    │           ├── DelegationAwareAToken.sol
    │           ├── StableDebtToken.sol
    │           ├── VariableDebtToken.sol
    │           └── base/
    │               ├── DebtTokenBase.sol
    │               ├── EIP712Base.sol
    │               ├── IncentivizedERC20.sol
    │               ├── MintableIncentivizedERC20.sol
    │               └── ScaledBalanceTokenBase.sol
    ├── helpers/
    │   ├── constants.ts
    │   ├── contracts-helpers.ts
    │   ├── index.ts
    │   ├── misc-utils.ts
    │   ├── tenderly-utils.ts
    │   └── types.ts
    ├── test-suites/
    │   ├── __setup.spec.ts
    │   ├── aave-oracle.spec.ts
    │   ├── aave-protocol-data-provider.spec.ts
    │   ├── acl-manager.spec.ts
    │   ├── addresses-provider-registry.spec.ts
    │   ├── atoken-delegation-aware.spec.ts
    │   ├── atoken-edge.spec.ts
    │   ├── atoken-event-accounting.spec.ts
    │   ├── atoken-events.spec.ts
    │   ├── atoken-modifiers.spec.ts
    │   ├── atoken-permit.spec.ts
    │   ├── atoken-repay.spec.ts
    │   ├── atoken-transfer.spec.ts
    │   ├── bridge-logic.spec.ts
    │   ├── configurator-borrow-cap.spec.ts
    │   ├── configurator-edge.spec.ts
    │   ├── configurator-liquidation-protocol-fee.spec.ts
    │   ├── configurator-modifiers.spec.ts
    │   ├── configurator-rate-strategy.spec.ts
    │   ├── configurator-supply-cap.spec.ts
    │   ├── configurator.spec.ts
    │   ├── debt-token-delegation-permit.spec.ts
    │   ├── emode.spec.ts
    │   ├── emptyrun.coverage.spec.ts
    │   ├── interest-overflow.spec.ts
    │   ├── isolation-mode.spec.ts
    │   ├── liquidation-atoken.spec.ts
    │   ├── liquidation-edge.spec.ts
    │   ├── liquidation-emode-interest.spec.ts
    │   ├── liquidation-emode.spec.ts
    │   ├── liquidation-underlying.spec.ts
    │   ├── liquidation-with-fee.spec.ts
    │   ├── liquidity-indexes.spec.ts
    │   ├── ltv-validation.spec.ts
    │   ├── mint-to-treasury.spec.ts
    │   ├── no-incentives-controller.spec.ts
    │   ├── pausable-pool.spec.ts
    │   ├── pausable-reserve.spec.ts
    │   ├── pool-addresses-provider.spec.ts
    │   ├── pool-authorized-flashloan.spec.ts
    │   ├── pool-drop-reserve.spec.ts
    │   ├── pool-edge.spec.ts
    │   ├── pool-flashloan.spec.ts
    │   ├── pool-get-reserve-address-by-id.spec.ts
    │   ├── pool-l2.spec.ts
    │   ├── pool-normal-flashloan.spec.ts
    │   ├── pool-simple-flashloan.spec.ts
    │   ├── price-oracle-sentinel.spec.ts
    │   ├── rate-strategy.spec.ts
    │   ├── rescue-tokens.spec.ts
    │   ├── reserve-configuration.spec.ts
    │   ├── scenario.spec.ts
    │   ├── siloed-borrowing.spec.ts
    │   ├── stable-debt-token-events.spec.ts
    │   ├── stable-debt-token.spec.ts
    │   ├── subgraph-scenarios.spec.ts
    │   ├── upgradeability.spec.ts
    │   ├── validation-logic.spec.ts
    │   ├── variable-debt-token-events.spec.ts
    │   ├── variable-debt-token.spec.ts
    │   ├── wadraymath.spec.ts
    │   └── helpers/
    │       ├── actions.ts
    │       ├── make-suite.ts
    │       ├── scenario-engine.ts
    │       ├── scenarios/
    │       │   ├── borrow-negatives.json
    │       │   ├── borrow-repay-stable-edge.json
    │       │   ├── borrow-repay-stable.json
    │       │   ├── borrow-repay-variable.json
    │       │   ├── borrow-repayWithPermit-variable.json
    │       │   ├── credit-delegation.json
    │       │   ├── deposit.json
    │       │   ├── rebalance-stable-rate.json
    │       │   ├── set-use-as-collateral.json
    │       │   ├── swap-rate-mode.json
    │       │   ├── withdraw-negatives.json
    │       │   └── withdraw.json
    │       └── utils/
    │           ├── calculations.ts
    │           ├── funds.ts
    │           ├── helpers.ts
    │           ├── tokenization-events.ts
    │           ├── wadraymath.ts
    │           ├── wallets.ts
    │           └── interfaces/
    │               └── index.ts
    ├── .github/
    │   ├── CODEOWNERS
    │   └── workflows/
    │       ├── certora.yml
    │       ├── node.js.yml
    │       └── release.yml
    └── .husky/
        └── pre-commit

================================================
FILE: README.md
================================================
# ⚠️ This repository is DEPRECATED and no longer maintained ⚠️

For the latest Aave V3 code visit the V3 Origin Repository [here](https://github.com/aave-dao/aave-v3-origin).

[![Build pass](https://github.com/aave/aave-v3-core/actions/workflows/node.js.yml/badge.svg)](https://github.com/aave/aave-v3-core/actions/workflows/node.js.yml)
[![codecov](https://codecov.io/gh/aave/aave-v3-core/branch/master/graph/badge.svg?token=U50KN38G67)](https://codecov.io/gh/aave/aave-v3-core)

```
        .///.                .///.     //.            .//  `/////////////-
       `++:++`              .++:++`    :++`          `++:  `++:......---.`
      `/+: -+/`            `++- :+/`    /+/         `/+/   `++.
      /+/   :+/            /+:   /+/    `/+/        /+/`   `++.
  -::/++::`  /+:       -::/++::` `/+:    `++:      :++`    `++/:::::::::.
  -:+++::-`  `/+:      --++/---`  `++-    .++-    -++.     `++/:::::::::.
   -++.       .++-      -++`       .++.    .++.  .++-      `++.
  .++-         -++.    .++.         -++.    -++``++-       `++.
 `++:           :++`  .++-           :++`    :+//+:        `++:----------`
 -/:             :/-  -/:             :/.     ://:         `/////////////-
```

# Aave Protocol v3

This repository contains the smart contracts source code and markets configuration for Aave Protocol V3. The repository uses Docker Compose and Hardhat as development environment for compilation, testing and deployment tasks.

## What is Aave?

Aave is a decentralized non-custodial liquidity markets protocol where users can participate as suppliers or borrowers. Suppliers provide liquidity to the market to earn a passive income, while borrowers are able to borrow in an overcollateralized (perpetually) or undercollateralized (one-block liquidity) fashion.

## Documentation

See the link to the technical paper or visit the Aave Developer docs

- [Technical Paper](./techpaper/Aave_V3_Technical_Paper.pdf)

- [Developer Documentation](https://docs.aave.com/developers/)

## Audits and Formal Verification

You can find all audit reports under the audits folder

V3.0.1 - December 2022

- [PeckShield](./audits/09-12-2022_PeckShield_AaveV3-0-1.pdf)
- [SigmaPrime](./audits/23-12-2022_SigmaPrime_AaveV3-0-1.pdf)

V3 Round 1 - October 2021

- [ABDK](./audits/27-01-2022_ABDK_AaveV3.pdf)
- [OpenZeppelin](./audits/01-11-2021_OpenZeppelin_AaveV3.pdf)
- [Trail of Bits](./audits/07-01-2022_TrailOfBits_AaveV3.pdf)
- [Peckshield](./audits/14-01-2022_PeckShield_AaveV3.pdf)

V3 Round 2 - December 2021

- [SigmaPrime](./audits/27-01-2022_SigmaPrime_AaveV3.pdf)

Formal Verification - November 2021-January 2022

- [Certora](./certora/Aave_V3_Formal_Verification_Report_Jan2022.pdf)

## Connect with the community

You can join the [Discord](http://aave.com/discord) channel or the [Governance Forum](https://governance.aave.com/) to ask questions about the protocol or talk about Aave with other peers.

## Getting Started

You can install `@aave/core-v3` as an NPM package in your Hardhat or Truffle project to import the contracts and interfaces:

`npm install @aave/core-v3`

Import at Solidity files:

```
import {IPool} from "@aave/core-v3/contracts/interfaces/IPool.sol";

contract Misc {

  function supply(address pool, address token, address user, uint256 amount) public {
    IPool(pool).supply(token, amount, user, 0);
    {...}
  }
}
```

The JSON artifacts with the ABI and Bytecode are also included in the bundled NPM package at `artifacts/` directory.

Import JSON file via Node JS `require`:

```
const PoolV3Artifact = require('@aave/core-v3/artifacts/contracts/protocol/pool/Pool.sol/Pool.json');

// Log the ABI into console
console.log(PoolV3Artifact.abi)
```

## Setup

The repository uses Docker Compose to manage sensitive keys and load the configuration. Prior to any action like test or deploy, you must run `docker-compose up` to start the `contracts-env` container, and then connect to the container console via `docker-compose exec contracts-env bash`.

Follow the next steps to setup the repository:

- Install `docker` and `docker-compose`
- Create an environment file named `.env` and fill the next environment variables

```
# Add Alchemy or Infura provider keys, alchemy takes preference at the config level
ALCHEMY_KEY=""
INFURA_KEY=""


# Optional, if you plan to use Tenderly scripts
TENDERLY_PROJECT=""
TENDERLY_USERNAME=""

```

## Test

You can run the full test suite with the following commands:

```
# In one terminal
docker-compose up

# Open another tab or terminal
docker-compose exec contracts-env bash

# A new Bash terminal is prompted, connected to the container
npm run test
```



================================================
FILE: CHANGELOG.md
================================================
# Changelog

## [1.19.4](https://github.com/aave/aave-v3-core/compare/v1.19.3...v1.19.4) (2024-06-19)


### Bug Fixes

* Fix typos on techpaper ([#950](https://github.com/aave/aave-v3-core/issues/950)) ([682e86c](https://github.com/aave/aave-v3-core/commit/682e86c72db644f6992c22f97b0f5ec313ed1f5b))

## [1.19.3](https://github.com/aave/aave-v3-core/compare/v1.19.2...v1.19.3) (2024-03-07)


### Bug Fixes

* Bump version of v3 dependencies ([#938](https://github.com/aave/aave-v3-core/issues/938)) ([64870f0](https://github.com/aave/aave-v3-core/commit/64870f00345c8e10eefd6057bdba66f14ea0682c))

## [1.19.2](https://github.com/aave/aave-v3-core/compare/v1.19.1...v1.19.2) (2023-10-17)


### Bug Fixes

* Fixes solc version of contracts ([#920](https://github.com/aave/aave-v3-core/issues/920)) ([6d6fa53](https://github.com/aave/aave-v3-core/commit/6d6fa53d360b43f492ff5b3c7033f95aee4f1335))

## [1.19.1](https://github.com/aave/aave-v3-core/compare/v1.19.0...v1.19.1) (2023-07-04)


### Bug Fixes

* Fix prepublish step in CI ([#862](https://github.com/aave/aave-v3-core/issues/862)) ([ec2902a](https://github.com/aave/aave-v3-core/commit/ec2902a4a113c6584434d49742ee1a5616070f90))

## [1.19.0](https://github.com/aave/aave-v3-core/compare/v1.18.0...v1.19.0) (2023-07-04)


### Features

* add OpenZeppelin SafeERC20 and Address dependencies ([#859](https://github.com/aave/aave-v3-core/issues/859)) ([493bb4d](https://github.com/aave/aave-v3-core/commit/493bb4dfd3e0a69f7c3fbf468bc8ef310da9960b))


### Bug Fixes

* add natspec docs to flags of reserve configuration map ([#854](https://github.com/aave/aave-v3-core/issues/854)) ([792c23e](https://github.com/aave/aave-v3-core/commit/792c23eed73d3791fde31f6d26c69bc62f3533bf))
* remove initial config of fee params in pool initialize function ([#846](https://github.com/aave/aave-v3-core/issues/846)) ([3bb960b](https://github.com/aave/aave-v3-core/commit/3bb960b92bcb3d58d8bdcd2d2f924340ba812164))
* Soften solidity version of FlashLoanBase contracts ([#861](https://github.com/aave/aave-v3-core/issues/861)) ([364a779](https://github.com/aave/aave-v3-core/commit/364a779efd9a7e42ec1882156d95a62f22ea3fc4))

## [1.18.0](https://github.com/aave/aave-v3-core/compare/v1.17.2...v1.18.0) (2023-06-26)


### Features

* Add zero IR strategy ([#818](https://github.com/aave/aave-v3-core/issues/818)) ([ade6cf8](https://github.com/aave/aave-v3-core/commit/ade6cf86f296ee68e82077ca18a3218096516862))


### Bug Fixes

* communicate correct premium in case of debt-bearing flashloan ([#822](https://github.com/aave/aave-v3-core/issues/822)) ([7b2a284](https://github.com/aave/aave-v3-core/commit/7b2a2840e1bc7e1201fd4ed37cbbd8da967dda11))
* Fix collateral behavior of zero-ltv assets ([#820](https://github.com/aave/aave-v3-core/issues/820)) ([ea48670](https://github.com/aave/aave-v3-core/commit/ea4867086d39f094303916e72e180f99d8149fd5))
* Fix event checks in test cases ([#824](https://github.com/aave/aave-v3-core/issues/824)) ([29ff9b9](https://github.com/aave/aave-v3-core/commit/29ff9b9f89af7cd8255231bc5faf26c3ce0fb7ce))
* linting ([#837](https://github.com/aave/aave-v3-core/issues/837)) ([97cb6ea](https://github.com/aave/aave-v3-core/commit/97cb6ead76ed69dbeae144a47f4dbef807f06082))
* Return final withdraw amount in L2Pool withdraw fn ([#831](https://github.com/aave/aave-v3-core/issues/831)) ([37b4d1f](https://github.com/aave/aave-v3-core/commit/37b4d1f0e770ccb9ebdf50037c81582f3c79c5ee))

## [1.17.2](https://github.com/aave/aave-v3-core/compare/v1.17.1...v1.17.2) (2023-01-31)


### Bug Fixes

* expose error list and types at npm package ([#809](https://github.com/aave/aave-v3-core/issues/809)) ([0334bf2](https://github.com/aave/aave-v3-core/commit/0334bf2d3452aaca256a4855ea9b3c04c74dfe8a))

## [1.17.1](https://github.com/aave/aave-v3-core/compare/v1.17.0...v1.17.1) (2023-01-10)


### Bug Fixes

* Add BUSL to tokenization contracts ([#784](https://github.com/aave/aave-v3-core/issues/784)) ([bf87c52](https://github.com/aave/aave-v3-core/commit/bf87c52825ac1d8847e870bfe238b702b2cdf7b8))
* Fix typos ([#781](https://github.com/aave/aave-v3-core/issues/781)) ([8a39136](https://github.com/aave/aave-v3-core/commit/8a3913607df88afcc4b8cc63f3a876ebac7d148b))

## [1.17.0](https://github.com/aave/aave-v3-core/compare/v1.16.2...v1.17.0) (2022-12-28)


### Features

* add additional flashloan scenario ([8888093](https://github.com/aave/aave-v3-core/commit/88880936a353d3dd5c9556d0fabb3f15ecd01c0c))
* add unit test for reserve configuration ([49d0f4e](https://github.com/aave/aave-v3-core/commit/49d0f4e6baa5b78d31443617456331904db7dfdc))
* bump to beta version ([348ce20](https://github.com/aave/aave-v3-core/commit/348ce204a7b30a9846dbe9637b17e86125137d6f))
* enable and disable flashloans ([bb62572](https://github.com/aave/aave-v3-core/commit/bb625723211944a7325b505caf6199edf4b8ed2a))
* remove borrow enabled requirement ([8b9221b](https://github.com/aave/aave-v3-core/commit/8b9221b822c0ecf1cc84831b51d4137072dc28d3))
* switch bit used for flashloan enabled ([748818f](https://github.com/aave/aave-v3-core/commit/748818f0ef78c94fc45192165cbb3a24c23d63d9))
* updated price oracle sentinel interface ([0457e71](https://github.com/aave/aave-v3-core/commit/0457e7176c89f91700e0aa63691dd0d9580b77db))
* updates and tests ([8d12d79](https://github.com/aave/aave-v3-core/commit/8d12d798cee82ab2d2b210c35a9ca69089b5ded3))


### Bug Fixes

* Add license to L2Pool contract ([#765](https://github.com/aave/aave-v3-core/issues/765)) ([56fd7ba](https://github.com/aave/aave-v3-core/commit/56fd7ba792e084518c2852cc6158f214cfd3eb2e))
* add validation to simpleFlashLoan ([bf652c2](https://github.com/aave/aave-v3-core/commit/bf652c2837d1403977e9cbc50e623dee21c5fcf4))
* Avoid emitting events when balanceIncrease is zero ([#745](https://github.com/aave/aave-v3-core/issues/745)) ([43f34c9](https://github.com/aave/aave-v3-core/commit/43f34c90400d02f3959beeec21038464d924242a))
* Capitalize license name of contracts ([fba69f0](https://github.com/aave/aave-v3-core/commit/fba69f087131abcb5945f6e817d5c7acb51badfa))
* CEI to fix reentrancy risk with reentrant tokens (eg ERC777) ([#704](https://github.com/aave/aave-v3-core/issues/704)) ([7fbdc6e](https://github.com/aave/aave-v3-core/commit/7fbdc6ea5f657072fbdf9494db07f1769c38c1d9))
* check revert msg and event emission ([284b492](https://github.com/aave/aave-v3-core/commit/284b49221e1947f689fd63da7c845f6b9c641f8b))
* Complete interfaces of IReserveInterestRateStrategy and IPoolDataProvider ([#766](https://github.com/aave/aave-v3-core/issues/766)) ([a00dda8](https://github.com/aave/aave-v3-core/commit/a00dda8faf464f6b0d338cf7e902e5931e0edbea))
* Fix condition of full liquidation of collateral ([#753](https://github.com/aave/aave-v3-core/issues/753)) ([56bcf5d](https://github.com/aave/aave-v3-core/commit/56bcf5d1ef378e9e5e7d09bcdb0bc42b4a1b645d))
* Fix docs param in burnScaled ([6b504d4](https://github.com/aave/aave-v3-core/commit/6b504d4bced83e1ac64ab552d082387de042e5af))
* Fix param of IAToken function ([1cb9ba1](https://github.com/aave/aave-v3-core/commit/1cb9ba198650c8582e12657c0ac9b21fa379ff06))
* Fix test of inaccuracy when liquidationProtocolFee is on ([7d8b7bf](https://github.com/aave/aave-v3-core/commit/7d8b7bf5acf016e541beaa36e2e82783ff74b846))
* Fix typo in docs ([#752](https://github.com/aave/aave-v3-core/issues/752)) ([9ccb1ab](https://github.com/aave/aave-v3-core/commit/9ccb1ab3c175d1e71404e875e623f1d161fd17e7))
* Install the last package of periphery for the rewards contract update ([066259a](https://github.com/aave/aave-v3-core/commit/066259a79444b097da911021d120e1fe4a000ad6))
* make InterestRateStrategy contract inheritable ([d06f8f2](https://github.com/aave/aave-v3-core/commit/d06f8f22296f44673b15f2b71df8d17a70b1ea88))
* make InterestRateStrategy contract inheritable ([0311475](https://github.com/aave/aave-v3-core/commit/0311475614ed7a6c4befba99a7567ee27454f942))
* Make transferOnLiq() virtual ([6968062](https://github.com/aave/aave-v3-core/commit/6968062ba1129b0e88ddb60408d235329a913fc9))
* Minimize the IAaveIncentivesController with only the handleAction ([a33f931](https://github.com/aave/aave-v3-core/commit/a33f93119f53d01c69b9c65a20d552e19a175e76))
* modify interface versions to support all minor 0.8.x vers ([9e95439](https://github.com/aave/aave-v3-core/commit/9e954393ea6c50aa00318e7f96a5867d0f49a460))
* Optimize logic for atoken self-transfers ([6c3154e](https://github.com/aave/aave-v3-core/commit/6c3154eedb5e543bd564953058c40b7f19b42d41))
* reentrancy in liquidationCall ([cd508a7](https://github.com/aave/aave-v3-core/commit/cd508a713d3cdd4e09c514fe0c47cf8f51383b07))
* Reformat code ([84b900c](https://github.com/aave/aave-v3-core/commit/84b900ce583eb8b1174357c05882e4a9f1854c38))
* remove formatting conflicts ([4c2cda0](https://github.com/aave/aave-v3-core/commit/4c2cda0f63326d986a7a7e68da32f9570623a450))
* remove gitignore update ([d7aa26a](https://github.com/aave/aave-v3-core/commit/d7aa26af60d2b9f34c95316fe42c17f51115630b))
* remove unrelated change ([a5ce86a](https://github.com/aave/aave-v3-core/commit/a5ce86a350f428e4a89bd0867254c7a898c72ca3))
* solution to fix liquidation failed case. ([623730b](https://github.com/aave/aave-v3-core/commit/623730b3db4146281a11c5424938d339c4005357))
* streamline test ([516e0e8](https://github.com/aave/aave-v3-core/commit/516e0e81263b2133c8640836ffa08afb112aacfa))
* typo ([#717](https://github.com/aave/aave-v3-core/issues/717)) ([9666e99](https://github.com/aave/aave-v3-core/commit/9666e9912c956950e6a4682df5e381999411840b))
* typos ([#715](https://github.com/aave/aave-v3-core/issues/715)) ([7dd869f](https://github.com/aave/aave-v3-core/commit/7dd869f68bbdb07ac94cf671bdf93c392c65af60))
* update comment for setReserveFlashLoaning ([9d84549](https://github.com/aave/aave-v3-core/commit/9d84549a0a1e91246da0312068a59e37413f5aa8))
* update deploy and periphery dependencies ([078fa28](https://github.com/aave/aave-v3-core/commit/078fa28584484209a0a1fac44cbc6ae827b719f6))
* update hardhat dependencies and fix test-suite error codes ([#739](https://github.com/aave/aave-v3-core/issues/739)) ([a54692a](https://github.com/aave/aave-v3-core/commit/a54692a54eddf2c0d5531de86ae298c491a2b192))

## [1.16.2](https://github.com/aave/aave-v3-core/compare/v1.16.1...v1.16.2) (2022-07-28)


### Features

* bump ci node.js to 16 ([82a11d2](https://github.com/aave/aave-v3-core/commit/82a11d2f4b7a2b747def6a5bfe1a52fd5a30a9ee))
* set to hardhat 2.10.0 and ethers to 5.6.9 ([9b50898](https://github.com/aave/aave-v3-core/commit/9b50898f6dbace6c2228e4bd41c081ff4afa7324))


### Bug Fixes

* dependencies ([f844a45](https://github.com/aave/aave-v3-core/commit/f844a4596b22fd16ec2516fa1e72c6d223481710))
* load market test data correctly, fix atoken/debt token names ([72d1264](https://github.com/aave/aave-v3-core/commit/72d1264d1e6a285663828e37c52b9078525ca291))
* remove npm ci cache, bump gas reporter to fixed version 1.0.8 set ethers to fixed version 5.6.1 ([bbb2dfd](https://github.com/aave/aave-v3-core/commit/bbb2dfde6c754c4e0552e78f43c5c09a6474805f))
* upgrade periphery and deploy library to latest version ([902b48a](https://github.com/aave/aave-v3-core/commit/902b48aca1b53435fb302c0ba462c79beb1b57b8))
* use ethers 5.5.3 to prevent different @ethersproject/bignumber version ([5411930](https://github.com/aave/aave-v3-core/commit/541193012dfd3c7ee1cb0dc2dfc11db091876145))


### Miscellaneous Chores

* release 1.16.2 ([32901d1](https://github.com/aave/aave-v3-core/commit/32901d1e541b38e2273ae896c43323a02a2ed744))

### [1.16.1](https://www.github.com/aave/aave-v3-core/compare/v1.16.0...v1.16.1) (2022-04-05)


### Bug Fixes

* add comment for undocumentted parameter ([ba0e4ee](https://www.github.com/aave/aave-v3-core/commit/ba0e4ee72cc3060fc55294aeac0a7bbb9caf3087))
* Add helpers for proxy contracts (eip1967 slots) ([d82be43](https://www.github.com/aave/aave-v3-core/commit/d82be4350d1778c269b5f7d875bdf5025fcff0bd))
* Fix ts type of contract in tests ([12373ca](https://www.github.com/aave/aave-v3-core/commit/12373ca09d4e2cec32546dc87285d516c1d9f261))

## [1.16.0](https://www.github.com/aave/aave-v3-core/compare/v1.15.0...v1.16.0) (2022-03-15)


### Features

* updated price oracle sentinel interface ([f6b71f5](https://www.github.com/aave/aave-v3-core/commit/f6b71f508db2a9a6f966bc6d606198eebaaefbb9))


### Bug Fixes

* Fix docstrings of ISequencerOracle ([4391fd4](https://www.github.com/aave/aave-v3-core/commit/4391fd4c8f29fb81c966fd4510df89d0acdb8404))

## [1.15.0](https://www.github.com/aave/aave-v3-core/compare/v1.14.2...v1.15.0) (2022-03-04)


### Features

* add owner constructor parameter to contracts that inherits Ownable to support CREATE2 factory deployment ([b6cc245](https://www.github.com/aave/aave-v3-core/commit/b6cc245b7e78e7d27b7af3e045cceff58e477231))
* bump beta deploy package ([fbcf885](https://www.github.com/aave/aave-v3-core/commit/fbcf885269285b36b54cc741da7922d257255a44))
* refactored executeLiquidationCall function ([63e43ef](https://www.github.com/aave/aave-v3-core/commit/63e43eff1c36a8d7e96c86f9655e7af31fe7e81f))


### Bug Fixes

* add owner parameters to test suites ([6e96821](https://www.github.com/aave/aave-v3-core/commit/6e968212d088ab6c9911b85dc454e4b989db7d6f))
* Move reservesData param to the beginning of the param list ([0872cb4](https://www.github.com/aave/aave-v3-core/commit/0872cb4c30e79566f09a0320168d0bd1f5111a29))

### [1.14.2](https://www.github.com/aave/aave-v3-core/compare/v1.14.1...v1.14.2) (2022-03-02)


### Bug Fixes

* Replace `...PriceAddress` with `...PriceSource` ([10a8667](https://www.github.com/aave/aave-v3-core/commit/10a8667b08c2e3daa1d87b1a7348154081c3903d))
* Use `EModeLogic::isInEModeCategory` in `executeLiquidationCall` ([28f72fe](https://www.github.com/aave/aave-v3-core/commit/28f72fe82496044d23d4ea3f20298cec9918404b))

### [1.14.1](https://www.github.com/aave/aave-v3-core/compare/v1.14.0...v1.14.1) (2022-03-01)


### Bug Fixes

* Improve consistency of function naming of CalldataLogic ([1a5517d](https://www.github.com/aave/aave-v3-core/commit/1a5517d28b531d673e6ac81e59b552d1280e7d7e))
* Use memory instead of storage in `getLiquidationBonus` ([deccf52](https://www.github.com/aave/aave-v3-core/commit/deccf529ad8d300f8a0e768cc8d9bf6d48b7699f))

## [1.14.0](https://www.github.com/aave/aave-v3-core/compare/v1.13.1...v1.14.0) (2022-02-21)


### Features

* clean dependencies and upgrade child dependencies ([7ca97ca](https://www.github.com/aave/aave-v3-core/commit/7ca97ca4cd6e9aad74583a4a1ca5ebe3fae44c64))
* removed obsolete files for the certora tools ([d7e0e7c](https://www.github.com/aave/aave-v3-core/commit/d7e0e7c37c0741b54afde3354d0be4a619fafde5))


### Bug Fixes

* `reserves` renamed to `reservesData` or `reservesList` when fitting ([3a6b928](https://www.github.com/aave/aave-v3-core/commit/3a6b928abb9ad6920582064704673e84f4b543dd))
* Cleanup naming and remove duplicate tests ([6ed5891](https://www.github.com/aave/aave-v3-core/commit/6ed589163ae30b235206dc571b98091f08dc5bad))
* Fix typo in package contributors tag ([14a3b6d](https://www.github.com/aave/aave-v3-core/commit/14a3b6d503d71d080c145e7fbcdacbe68b2b11ba))
* Moved getUserAccountData logic to PoolLogic to minimize contract size ([b07bdab](https://www.github.com/aave/aave-v3-core/commit/b07bdab921705788f38e130f75a10a1444cbc6b1))
* Natspec for `IPool::swapBorrowRateMode()` ([5b016fc](https://www.github.com/aave/aave-v3-core/commit/5b016fc699ef816204cf1e0fe1178285f53cf83c))
* Place interface extension declaration at the end ([19c015e](https://www.github.com/aave/aave-v3-core/commit/19c015ec76efc229da6b59fafa9f640d56e7f157))
* Rename reserves to reservesList ([4b0af0b](https://www.github.com/aave/aave-v3-core/commit/4b0af0bbb200e76dfedc7adf923c80e74fae37cb))
* Revert dependencies to last working state ([ff4d987](https://www.github.com/aave/aave-v3-core/commit/ff4d98765cea9b07f3e61f5b5e0efc472a06addc))
* typo in tech paper ([d6b9cbc](https://www.github.com/aave/aave-v3-core/commit/d6b9cbc55adf88c4cb7dd6df11941167fd119b3d))
* Update contributors etc in package.json ([60fc967](https://www.github.com/aave/aave-v3-core/commit/60fc967fa8037bb856c0c39c1e433fabafab255c))
* Update gas optimization numbers ([8719929](https://www.github.com/aave/aave-v3-core/commit/8719929597742e697cd8824cd29d9a786f3ec0eb))

### [1.13.1](https://www.github.com/aave/aave-v3-core/compare/v1.13.0...v1.13.1) (2022-01-27)


### Bug Fixes

* Add virtual to getReserveNormalizedIncome function ([bc10fd2](https://www.github.com/aave/aave-v3-core/commit/bc10fd24750680e83e3d4abb54bf452998fa0e0d))
* Mark all functions as virtual ([f6932b3](https://www.github.com/aave/aave-v3-core/commit/f6932b3d8c0055caf4ed1a191ec64676f4e68ad1))

## [1.13.0](https://www.github.com/aave/aave-v3-core/compare/v1.12.0...v1.13.0) (2022-01-25)


### Features

* bump @aave/deploy-v3 ([430c9d3](https://www.github.com/aave/aave-v3-core/commit/430c9d3eebfafc6349ead5860016e25ff43fb547))

## [1.12.0](https://www.github.com/aave/aave-v3-core/compare/v1.11.1...v1.12.0) (2022-01-25)


### Features

* bump @aave/deploy-v3 version ([85ec0fe](https://www.github.com/aave/aave-v3-core/commit/85ec0fe7cb45ae227b74ceb53c9088612034a3dc))


### Bug Fixes

* missing library at test, add updated deploy beta package ([67a5c80](https://www.github.com/aave/aave-v3-core/commit/67a5c80f04d0bcdd2dfa01c4b2d18a8a82dd222e))

### [1.11.1](https://www.github.com/aave/aave-v3-core/compare/v1.11.0...v1.11.1) (2022-01-25)


### Bug Fixes

* Add natspec and handle naming ([1f5c8a9](https://www.github.com/aave/aave-v3-core/commit/1f5c8a9daeeb58e25049d315127c37b3b92cee74))
* Adding literal params struct to initReserve ([43cced7](https://www.github.com/aave/aave-v3-core/commit/43cced7b155fa8cd714f5a088f5bf0b24ba6dc4e))
* Change function modifier of MAX_NUMBER_RESERVES to pure ([dc34a67](https://www.github.com/aave/aave-v3-core/commit/dc34a67d390e66ce77622d0c8ce80edd572fe9c6))
* Error library ([475eb1d](https://www.github.com/aave/aave-v3-core/commit/475eb1d73755d1ab8eb997feb0ebfa7f15f9893a))
* fix comments ([b90b888](https://www.github.com/aave/aave-v3-core/commit/b90b888726beed2032b6c0ba84d797cf90aef2e5))
* Move `dropReserve` logic to PoolLogic ([169d72c](https://www.github.com/aave/aave-v3-core/commit/169d72c58135b49b1236fd7fe9478adf1053efe9))
* Move `initReserve` and `getReservesList` to PoolLogic ([b0ef5e4](https://www.github.com/aave/aave-v3-core/commit/b0ef5e4ed8ff4aa2d1a872f23899a1e81476b6ba))
* Move availableLiqudity assignment in DefaultReserveInterestRateStrategy ([8c82d9d](https://www.github.com/aave/aave-v3-core/commit/8c82d9d87566ec2bacb705e2918ebb6e916d13b6))
* Move comment up in validationlogic ([cbdaa30](https://www.github.com/aave/aave-v3-core/commit/cbdaa3080f43ea53bcc4afa9636735eff1deb175))
* Move getters back to Pool, rename execute for functions called by pool ([106b617](https://www.github.com/aave/aave-v3-core/commit/106b6174c40086347de907f17dbf65f7535d69f3))
* Naming Atoken to AToken ([0d50841](https://www.github.com/aave/aave-v3-core/commit/0d508413f9ddba280ff32db6898d3927f1219bda))
* Remove unneeded comment ([1cb2324](https://www.github.com/aave/aave-v3-core/commit/1cb2324e11138c08d908d8cda7460f8598005cd1))
* Remove unneeded comment ([4134d89](https://www.github.com/aave/aave-v3-core/commit/4134d89707e5dec310fcb1f6945d1692d7a9cf5c))
* Remove unneeded fields in FlashLoanLocalVars struct ([9cb3a05](https://www.github.com/aave/aave-v3-core/commit/9cb3a05efdcb388ff7329480f26de8b3cc38d249))
* Remove unneeded import of interface in Pool ([cc49160](https://www.github.com/aave/aave-v3-core/commit/cc4916049d394fbadf63568b3ddaef74b531d087))
* Rename flashloanRepayment internal funciton to _flashloanRepayment ([3e18b8a](https://www.github.com/aave/aave-v3-core/commit/3e18b8ad2a80776f47f72c6c9bb5dfe620400e82))
* Replace > 0 with != 0 ([7bc9926](https://www.github.com/aave/aave-v3-core/commit/7bc99264a76453f04ac7754595ec643317b0763e))
* Simplify `executeRepay` ([6ab4a44](https://www.github.com/aave/aave-v3-core/commit/6ab4a44d601c71784a3af47d0d3f2c1d0f09b3f4))
* update comments ([5f09cf9](https://www.github.com/aave/aave-v3-core/commit/5f09cf90792d1e8aa71168de4822f4f4b29da0a8))
* Update deploy version ([a99e5b4](https://www.github.com/aave/aave-v3-core/commit/a99e5b458e4264ec1b583d7bbeafc12fde9a0ba5))
* Update import order in PoolLogic ([40447cd](https://www.github.com/aave/aave-v3-core/commit/40447cd10c1925ce5daea74f0d201c571128cab6))
* Update natspec ([f60a451](https://www.github.com/aave/aave-v3-core/commit/f60a451508f8c96a6c9dad55a2f5b43812feb721))
* Update ordering in `FlashLoanRepaymentParams` ([93dd9ea](https://www.github.com/aave/aave-v3-core/commit/93dd9eadd3f8e0deef5b91ff36f038d14b89e8f6))

## [1.11.0](https://www.github.com/aave/aave-v3-core/compare/v1.10.0...v1.11.0) (2022-01-23)


### Features

* Add rescueTokens functionality for Pool and AToken ([047edf8](https://www.github.com/aave/aave-v3-core/commit/047edf8a3cbb93d2d61f25b7954be9599ee96fd7))


### Bug Fixes

* Add getter for `_stableRateExcessOffset` ([3586ebb](https://www.github.com/aave/aave-v3-core/commit/3586ebbe2df893332c791ad9aa1bf049240d8c25))
* Fix contract docstrings ([802a4bd](https://www.github.com/aave/aave-v3-core/commit/802a4bd428edeff446cf0fca2696f4f7ad2a97cd))
* Fix imports order ([5d237a4](https://www.github.com/aave/aave-v3-core/commit/5d237a4e7e4259b28a50052ba106961a38911220))
* Re-add the abstract modifier to base tokenization contracts ([52abb3f](https://www.github.com/aave/aave-v3-core/commit/52abb3f81a420ed233422d7caee87beda8e8f31e))
* Remove blank space ([0c208fa](https://www.github.com/aave/aave-v3-core/commit/0c208fa3555c481667fa507ebfec1863a9bc39f9))
* Remove rescueTokensFromAToken from Pool ([1a32301](https://www.github.com/aave/aave-v3-core/commit/1a32301881993888b880e077236de90493338cde))
* Revert chainId renaming ([c4283d5](https://www.github.com/aave/aave-v3-core/commit/c4283d5fe062c4af5a6c37effa95df67efd7bd57))
* Update comment ([94c4cfb](https://www.github.com/aave/aave-v3-core/commit/94c4cfbd95d45e772d6348bdcde7e212a5651ea6))
* Update natspec and test ([39363e4](https://www.github.com/aave/aave-v3-core/commit/39363e4dd659899163619b62ef4fd2818a58f620))
* Update natspec for `calculateInterestRates()` ([b22150b](https://www.github.com/aave/aave-v3-core/commit/b22150b8da8ba0a51845264e367b1935456b0ba7))
* Update test name ([f6319b9](https://www.github.com/aave/aave-v3-core/commit/f6319b94d0db7a65ca7763115b29845f78dd5ae4))

## [1.10.0](https://www.github.com/aave/aave-v3-core/compare/v1.9.0...v1.10.0) (2022-01-12)


### Features

* fix tests missing module. add deployments dir to gitignore ([4e2c5e8](https://www.github.com/aave/aave-v3-core/commit/4e2c5e8334060941741375053ee2da4e6de3ed98))
* moved IncentivizedERC20 to the base folder ([1d5ed55](https://www.github.com/aave/aave-v3-core/commit/1d5ed55a613d52290263a87f863e423d054871f2))
* refactored premium to protocol in updateFlashloanPremiumTotal ([6349f4b](https://www.github.com/aave/aave-v3-core/commit/6349f4bdc16665350f421d535ac1e8126ba6741e))
* refactored premiumTotal in updateFlashloanPremiumToProtocol ([6b9f82c](https://www.github.com/aave/aave-v3-core/commit/6b9f82cb7cc267b932b92afce124e22cc22e523a))
* update comment ([7d6ccfb](https://www.github.com/aave/aave-v3-core/commit/7d6ccfb1b2ee35e59177d5bd289bce1bbe167b14))


### Bug Fixes

* Add `userTotalDebt` variable and refactor fix ([f9794f1](https://www.github.com/aave/aave-v3-core/commit/f9794f1f2494b7a4d569b947c14c01d6d6f678f6))
* Add amount cache in premium calc of executeFlashLoan ([785ba09](https://www.github.com/aave/aave-v3-core/commit/785ba097f930d35fe98fb52888bc43939a5ab356))
* Add checks to turn off borrowing. ([f9ec711](https://www.github.com/aave/aave-v3-core/commit/f9ec71142186d2d3abc6d9d090920cb2abd03d20))
* Add error message ([18ae21f](https://www.github.com/aave/aave-v3-core/commit/18ae21f2d345de64f5c7272c2023ac3c4d3eadb6))
* add failing tests ([254a021](https://www.github.com/aave/aave-v3-core/commit/254a0212dfd083dad58aadd0f9081b503d1f1eee))
* Add id to register and unregister events ([c196b71](https://www.github.com/aave/aave-v3-core/commit/c196b71241833db95205925c42ef29afc6f5b343))
* Add indexed params to MarketIdSet event ([74062fc](https://www.github.com/aave/aave-v3-core/commit/74062fcfb3e735b3430723d2d8e15ac67347a502))
* Add new event AddressSetAsProxy for imple address updates ([e4a15fb](https://www.github.com/aave/aave-v3-core/commit/e4a15fbecdfcaa2bc6a988b02af33ea43c99508d))
* Add override modifier to underlyingAsset getter ([be4702c](https://www.github.com/aave/aave-v3-core/commit/be4702c0ca9e3f310bf25875f574162cb2f4f153))
* Add percentage range check of liquidationFee in Configurator ([2d5330b](https://www.github.com/aave/aave-v3-core/commit/2d5330b37b248aa3f7e36713588eeff2c961cace))
* Add range check for new reserve factor ([9863a47](https://www.github.com/aave/aave-v3-core/commit/9863a47eac0a84e8b64469f5a597759b8c542633))
* add test for setting interest rate on unlistest asset ([09c04d2](https://www.github.com/aave/aave-v3-core/commit/09c04d241c087ea084f69701fca004adf282d165))
* Add underlying getter in debtToken interfaces ([498b860](https://www.github.com/aave/aave-v3-core/commit/498b860f7ff0588b9e58b793376d3b132bbcf498))
* add validation to set interest rates ([f623d9a](https://www.github.com/aave/aave-v3-core/commit/f623d9afe64035ef45d1f75b8693bb51e5a967cf))
* Add visibility accessors to StableDebtToken state variables ([9faa22f](https://www.github.com/aave/aave-v3-core/commit/9faa22f91343cbfd2eac5d3ac917432692871f07))
* Add visibility accessors to state variables of mocks ([b76dcb7](https://www.github.com/aave/aave-v3-core/commit/b76dcb731fc473aaef91141580ae4fd3d479deed))
* address provider staticcall get implementation ([d2b1a32](https://www.github.com/aave/aave-v3-core/commit/d2b1a322b34ab7e055f5c60142db917367e629fe))
* Change order of condition in validateHFAndLtv for gas saving ([34145bf](https://www.github.com/aave/aave-v3-core/commit/34145bf33225f6185a558a9eff965aac87803fb4))
* check asset for zero address ([cdaa90c](https://www.github.com/aave/aave-v3-core/commit/cdaa90cb231e2799513d1bf20125dbf8de1f973b))
* Clean tests ([d47b777](https://www.github.com/aave/aave-v3-core/commit/d47b777f9459ca8d55983096305cf78e4ccf59c6))
* consistent get, set order ([ccb634a](https://www.github.com/aave/aave-v3-core/commit/ccb634ae26d12ecdb15ed4a50b906a089089ab0c))
* Enhance reserves listing function in Pool ([2303871](https://www.github.com/aave/aave-v3-core/commit/2303871378a9ef5f123fc64756d30f6f9c2c2002))
* failing test ([82758e9](https://www.github.com/aave/aave-v3-core/commit/82758e96c6ae97745cd76558139a67b88eae4fb7))
* Fix ChainlinkAggregator intergration in AaveOracle ([44af5fe](https://www.github.com/aave/aave-v3-core/commit/44af5fe4b0b1378ca0767f821d443275b1bc6875))
* Fix docstrings ([a6b1a02](https://www.github.com/aave/aave-v3-core/commit/a6b1a0286980814dc7ba8c7f4f326a6c4bda3d64))
* Fix error from merge conflicts ([b0bea4c](https://www.github.com/aave/aave-v3-core/commit/b0bea4c8e4e4b62795f823d796a45418df786ed9))
* Fix error in a revert message of test cases ([abaaa2c](https://www.github.com/aave/aave-v3-core/commit/abaaa2c71b191c5637f97f5c9d0d637b33141ef7))
* Fix error in docstring ([a9aec4a](https://www.github.com/aave/aave-v3-core/commit/a9aec4a582875979e8d5271a67c45a72e8297b78))
* Fix error in test case ([4fb8037](https://www.github.com/aave/aave-v3-core/commit/4fb80372bf68c6740b8d5dc143719d4efb0585c7))
* Fix error in test from merge conflicts ([c7512ed](https://www.github.com/aave/aave-v3-core/commit/c7512ed0ea3d8b5932df461475292fa4b86ac14d))
* Fix error name INVALID_RESERVE_FACTOR ([3785b38](https://www.github.com/aave/aave-v3-core/commit/3785b389db2588ff731e9eeab234fa96e498024d))
* Fix errors constants in types.ts ([cdc6b26](https://www.github.com/aave/aave-v3-core/commit/cdc6b2663ac4798d46894a36473ff751223d811e))
* Fix errors in constants from merge conflicts ([4831638](https://www.github.com/aave/aave-v3-core/commit/4831638687daf4567bf825e4ee0ff905ae6b426a))
* Fix errors of merge conflicts ([b684547](https://www.github.com/aave/aave-v3-core/commit/b684547f2517397fe4dade7f30b050186f4d3d94))
* Fix grammar spell typos in docstrings ([3868ead](https://www.github.com/aave/aave-v3-core/commit/3868eadd9c6c01fcfd407247e718737bfef9d608))
* Fix MockAggregator code ([67d29f5](https://www.github.com/aave/aave-v3-core/commit/67d29f553f9ad7d53435aea0c40221372efa5bf2))
* Fix test, fetching artifact from local typechain ([da07b87](https://www.github.com/aave/aave-v3-core/commit/da07b87b3073ade16312f30935b46459a3859082))
* Fix typo in constant value ([71dc37c](https://www.github.com/aave/aave-v3-core/commit/71dc37cb70113aca1d9d0450a833786ac22d8237))
* Fix typo in docstring ([70a4a51](https://www.github.com/aave/aave-v3-core/commit/70a4a512caad3e83a462eac79d84c9dec3060ef3))
* Fix typos in docstrings ([51b95e0](https://www.github.com/aave/aave-v3-core/commit/51b95e0f1d26f61a16480e773fb65f3881fc663c))
* Fix typos in docstrings ([80ad248](https://www.github.com/aave/aave-v3-core/commit/80ad248732c1b9377955b811b2f3b2515c22b6eb))
* Fix typos in docstrings ([d3aa941](https://www.github.com/aave/aave-v3-core/commit/d3aa9413ae29010385f02d878ef4450f6fb8fd0e))
* Improve readability of LiquidationLogic constants ([79896d5](https://www.github.com/aave/aave-v3-core/commit/79896d5292aeef177eedda5dabd287988d3b8c45))
* improve set config readability ([a9dd99f](https://www.github.com/aave/aave-v3-core/commit/a9dd99fc69b960594261420152e0c5e4a979a0be))
* interest-rate-strategy-range-checks ([adf2f4c](https://www.github.com/aave/aave-v3-core/commit/adf2f4c341c36c559c555897162f34991824a008))
* Make flashloan premium to protocol a fraction of total premium ([d24c962](https://www.github.com/aave/aave-v3-core/commit/d24c96297013c122380b115a1ad5e8552a655097))
* Mark proxyAddress as indexed in AddressSetAsProxy event ([bddabad](https://www.github.com/aave/aave-v3-core/commit/bddabadb50bfee7f4d2f050a05893f1edcd7d07f))
* Move IChainlinkAggregator to dependencies and rename it to official name ([6099f84](https://www.github.com/aave/aave-v3-core/commit/6099f84733fbfe8c4738e0cd8c7b4637d8e8f0a9))
* Move up validation of executeFlashloan ([4b64705](https://www.github.com/aave/aave-v3-core/commit/4b6470574c81d2da10937bf2922a9bed9cf762f6))
* Naming of excess variables + introduction of constant for stable ratio ([37c2a63](https://www.github.com/aave/aave-v3-core/commit/37c2a63063b74bacf47a1f7059b1978f61b59750))
* Remove .solhint.json ([972ec21](https://www.github.com/aave/aave-v3-core/commit/972ec21552400b2ca29beb9a7e4b4680f742f82b))
* remove console logs ([2cd4dcc](https://www.github.com/aave/aave-v3-core/commit/2cd4dccdb0d6994dfbad60a4d3e18678dfd0fe96))
* Remove external hacky getProxyImplementation function ([62a25c8](https://www.github.com/aave/aave-v3-core/commit/62a25c8f4d50a5ff38c960a00962d5ec220b94f8))
* Remove getUserCurrentDebtMemory() helper function ([f2dc371](https://www.github.com/aave/aave-v3-core/commit/f2dc37148d13e7d217bcc3458c703fc98c7c90ca))
* Remove not needed ProxyImplementationSet event ([002ebda](https://www.github.com/aave/aave-v3-core/commit/002ebdac6a6665529886149765f550c46bf4c589))
* Remove redundant functions in WadRayMath lib ([5f0f035](https://www.github.com/aave/aave-v3-core/commit/5f0f0352efc69c19751b58b0dbcfc61370296992))
* Remove references to DataTypes inside itself ([e5abd90](https://www.github.com/aave/aave-v3-core/commit/e5abd90f36594f0bce3d5303a7a870ca0f98afad))
* Remove unneeded _getUnderlyingAsset() ([f2af600](https://www.github.com/aave/aave-v3-core/commit/f2af60004d4be0bb0ef6fd69070723f3f2527d69))
* Remove unneeded constants for tests ([27130ac](https://www.github.com/aave/aave-v3-core/commit/27130ac8e9d61303f8723e24f442d662e957eb54))
* Remove unneeded debug console ([4654be0](https://www.github.com/aave/aave-v3-core/commit/4654be065b270150456a1d7b06d217d15ef3d521))
* Remove unneeded import in PoolStorage ([361cc39](https://www.github.com/aave/aave-v3-core/commit/361cc390f540a029df6fc587802581d2dc616fac))
* Remove unneeded local variables ([a718549](https://www.github.com/aave/aave-v3-core/commit/a718549425f45cd6bc5bce52381fadefa80fa5ac))
* Remove unneeded vars for validateHFAndLtv ([8b32e45](https://www.github.com/aave/aave-v3-core/commit/8b32e45867405e8792ae1c50f08d4eb18272c032))
* Remove unused commented value ([9179670](https://www.github.com/aave/aave-v3-core/commit/917967002858662cd2164699f3852610dbc5ea97))
* Removes not needed BytesLib library ([43db2f6](https://www.github.com/aave/aave-v3-core/commit/43db2f6479d8e10629fc5f8b213d4cbc9be430f5))
* Rename last test helper with utilizationRate naming ([8acfc1a](https://www.github.com/aave/aave-v3-core/commit/8acfc1a40683bb6a051de7a4c7784baf24f1c209))
* Rename utilizationRate for usageRation in contracts ([b9e46eb](https://www.github.com/aave/aave-v3-core/commit/b9e46ebd1ac1e9144cc0db70bd9bfcbcb70725e5))
* Replace INCORRECT_ADDRESSES_PROVIDER for INVALID_ADDRESSES_PROVIDER ([be99a3c](https://www.github.com/aave/aave-v3-core/commit/be99a3ca8e150f749739838f7d058108ee07c56d))
* Replace INVALID_PARAMS_EMODE_CATEGORY for INVALID_EMODE_CATEGORY_PARAMS ([e4e922b](https://www.github.com/aave/aave-v3-core/commit/e4e922b52ec9f4a3b57d746830b02d636c07c19d))
* Replace INVALID_PARAMS_RESERVE for INVALID_RESERVE_PARAMS ([b6bb1cc](https://www.github.com/aave/aave-v3-core/commit/b6bb1ccbd3def686f90b32ae0e2685fbb304f696))
* Replace NO_STABLE_RATE_LOAN_IN_RESERVE for NO_STABLE_RATE_DEBT ([43cf2a1](https://www.github.com/aave/aave-v3-core/commit/43cf2a1d3634282073a3a7671443434587eb5f28))
* Replace NO_VARIABLE_RATE_LOAN_IN_RESERVE for NO_VARIABLE_RATE_DEBT ([df9658f](https://www.github.com/aave/aave-v3-core/commit/df9658f0e4bc663b7bc89e4f818f75a46a76f8b3))
* Replace unneeded inline if with expect ([d0d24b8](https://www.github.com/aave/aave-v3-core/commit/d0d24b8474c9c9ca0a28131f3a9a7aed6f618db0))
* Replace updateIsolationModeTotalDebt with a reset function ([35b4346](https://www.github.com/aave/aave-v3-core/commit/35b4346d5cf3f8054ce13ff8c69e369311f68f7e))
* Revert renaming of ValidationLogic constants ([b6fc891](https://www.github.com/aave/aave-v3-core/commit/b6fc891b211698db7d2b0d615d28ace84f47b5f7))
* Revert renaming of ValidationLogic constants ([52fc81a](https://www.github.com/aave/aave-v3-core/commit/52fc81ab447de19437e614535b027f409845fe8f))
* Revert variable rename of usageRatio ([66f51fd](https://www.github.com/aave/aave-v3-core/commit/66f51fd4fa18c7ffa1e9f98fe72aa50c3db22ee1))
* Simplify test using object destructuring ([98b7d73](https://www.github.com/aave/aave-v3-core/commit/98b7d73e2d766606148278ca94b3bb3ad44ea9eb))
* Simplify updateImpl logic ([da14cbf](https://www.github.com/aave/aave-v3-core/commit/da14cbf3ddfc7afcf590a4df95f3c81c411f4097))
* Update naming of EXCESS constants ([064a4d4](https://www.github.com/aave/aave-v3-core/commit/064a4d4131f53ba9e3be457ecf86bd902af769a6))


### Miscellaneous Chores

* release 1.10.0 ([734f83a](https://www.github.com/aave/aave-v3-core/commit/734f83abe0385760489185aa7fb7e773a41ab8b8))

## [1.9.0](https://www.github.com/aave/aave-v3-core/compare/v1.8.0...v1.9.0) (2021-12-26)


### Features

* add event test ([d5fe4bb](https://www.github.com/aave/aave-v3-core/commit/d5fe4bb5afd7d5cc1dfe47ef0700c5dd4cfce5ea))
* added additional functions to IAToken for EIP2612 ([df8ee61](https://www.github.com/aave/aave-v3-core/commit/df8ee614e460cf804fcaf1dcd8b9e5f1de0ef406))
* added event to DelegationAwareAToken ([f5fd1b6](https://www.github.com/aave/aave-v3-core/commit/f5fd1b654d598ff9b2170dafcba6d28f88a391ae))
* added indexed to the ICreditDelegation event ([0a3d365](https://www.github.com/aave/aave-v3-core/commit/0a3d36546683949a6dc8002db814827507847abc))
* replaced SafeERC20 with GPv2SafeERC20 ([fe4ae41](https://www.github.com/aave/aave-v3-core/commit/fe4ae41aa2bb1583b430595decc4fddd6e60d137))


### Bug Fixes

* Add comment to BorrowLogic ([2ae309d](https://www.github.com/aave/aave-v3-core/commit/2ae309dbad85dedf1313a898a0bd558eeb447b64))
* add else ([4bdbd7f](https://www.github.com/aave/aave-v3-core/commit/4bdbd7f56b4bdf7d3fdf421a7a2f21a0cdcb7b31))
* Add explicit access level for variables ([8fb2e3c](https://www.github.com/aave/aave-v3-core/commit/8fb2e3c3102bc42aab9aaec8f77a1bea6463b6da))
* Add mode to FlashLoan event ([956c809](https://www.github.com/aave/aave-v3-core/commit/956c809749a83d4fa79ffa1cfc8d7bd06348b442))
* Add natspec to `executeLiquidationCall` ([9bb5289](https://www.github.com/aave/aave-v3-core/commit/9bb5289465ffaf0edc32c6f733f4c7eccecf2f5a))
* Add repay with atoken ux issue ([b464cf5](https://www.github.com/aave/aave-v3-core/commit/b464cf55fe9dbfa918b3832f033e635595212247))
* Avoid finalizeTransfer with 0 value transfer ([d6bf261](https://www.github.com/aave/aave-v3-core/commit/d6bf261f4fc08bfd8bd1a4b3e3b4ed140430a01a))
* Cache result to not recompute for event ([b342d2f](https://www.github.com/aave/aave-v3-core/commit/b342d2f7f0f9fc05b5e7d9dc21e17183219b6d19))
* Change  to  in Pool for V2 compatibility ([932c5a0](https://www.github.com/aave/aave-v3-core/commit/932c5a0dc02c22f4a9c20384a9912e2780fcbae8))
* Clean cumulateToLiqIndex and add comments ([d6e90dc](https://www.github.com/aave/aave-v3-core/commit/d6e90dcd92e2f1536323648fb66c018a8811d97d))
* Fix `income` -> `debt` in `getNormalizedDebt` natspec. ([9e6b183](https://www.github.com/aave/aave-v3-core/commit/9e6b1831f3f814fca46e19d6761bda9a7cd07f66))
* Fix differences between IPool and Pool ([8beefda](https://www.github.com/aave/aave-v3-core/commit/8beefda3d19c3814196052575332342a5b23be08))
* Fix docstrings ([93c2d95](https://www.github.com/aave/aave-v3-core/commit/93c2d954937172dedd3a794a0e58627b7aaa1dc0))
* Fix docstrings ([c55bb04](https://www.github.com/aave/aave-v3-core/commit/c55bb04725b4a1ed6c87a0f5092669d55e306afc))
* Fix typo ([df40063](https://www.github.com/aave/aave-v3-core/commit/df400636ac915f19b642a830b8ba86969837ac2d))
* Fix typo in setReserveFreeze function name ([da72c39](https://www.github.com/aave/aave-v3-core/commit/da72c391f8ddef9a200e5b9203c1cfbd29986ca6))
* Fix variable name of event in ReserveLogic ([40b9bb8](https://www.github.com/aave/aave-v3-core/commit/40b9bb814e5b89e19b50cb73a274646901dd2a00))
* Gas optimization UserConfiguration ([af00927](https://www.github.com/aave/aave-v3-core/commit/af009272000e82aa2af78ec871373a57e2f1dbf5))
* Handle code style issues ([af3743b](https://www.github.com/aave/aave-v3-core/commit/af3743b108ebeca4f7185a79b6ce6d7ca988075c))
* Improve code readability of ReserveLogic ([ae1476d](https://www.github.com/aave/aave-v3-core/commit/ae1476daf53cf24262fdd9628e0fa4df9bf15a47))
* Improve readability of initial values of variables ([592b21d](https://www.github.com/aave/aave-v3-core/commit/592b21d831b0dc2a6e3e998701ea4e3a4b13c401))
* Include 100% as valid premiums ([c6b3347](https://www.github.com/aave/aave-v3-core/commit/c6b33472ed4f2ba6ebcf5a0b1aa3826c066aa7bd))
* Make test engine not stop at first failure ([84eaf29](https://www.github.com/aave/aave-v3-core/commit/84eaf29afeffb720194d95b6ed86cb91273bf763))
* Move up event in IVariableDebtToken ([f536538](https://www.github.com/aave/aave-v3-core/commit/f536538e6b7d6f97b24ff353c32e301c1b11d1ec))
* move up require ([d47afa2](https://www.github.com/aave/aave-v3-core/commit/d47afa2da264bb4ec81957ebdc787052ce7d0079))
* Re-add `getUserCurrentDebtMemory()` ([7742985](https://www.github.com/aave/aave-v3-core/commit/7742985319be5df5a11d6740a712c2017f64dcf6))
* Refactor variable calc in StableDebtToken ([4ed69b4](https://www.github.com/aave/aave-v3-core/commit/4ed69b4a8ad17cfc8defe19e7049db88f1cd0cf8))
* Remove case, created separate issue ([0082fd8](https://www.github.com/aave/aave-v3-core/commit/0082fd82eacfe61f32efce03fe99f464a3992eec))
* remove IAaveIncentivesController casting ([9805add](https://www.github.com/aave/aave-v3-core/commit/9805add3405965badb9803ab68c8b7f73b0989ab))
* Remove redundant casting for block.timestamp ([941539f](https://www.github.com/aave/aave-v3-core/commit/941539f0a3b72598a0ff556ba2b5889cfe0f08ff))
* Remove redundant unneeded variable ([703782c](https://www.github.com/aave/aave-v3-core/commit/703782cb7c1d353239bec219b474f3ee30b0c063))
* Remove unneeded `delegator` param from delegationWithSig typehash ([dcf7c36](https://www.github.com/aave/aave-v3-core/commit/dcf7c36dc2df66283f29c72738872c1e3e992a43))
* Remove unneeded imports in contracts ([48f9e89](https://www.github.com/aave/aave-v3-core/commit/48f9e89ee21fe0637e970fd1bbcd662c74ab5147))
* Remove unneededv variable in cumulateToLiqIndex ([75e7fdc](https://www.github.com/aave/aave-v3-core/commit/75e7fdcd4cf9b5112bb22fb3c4e6b03b33db4907))
* removed invalid imports ([659b82c](https://www.github.com/aave/aave-v3-core/commit/659b82cf93d3a032a9ad746a7f0fdf02f06ecd60))
* rename admin variable ([5199283](https://www.github.com/aave/aave-v3-core/commit/5199283c5ac4e93260ad416920fb28aa8896ce5a))
* Replace `rateMode` with `interestRateMode` and precise dataype ([806f161](https://www.github.com/aave/aave-v3-core/commit/806f16172bb718366417ef9e519b0fe5b9d04595))
* Replace factor with multiplier for clarity ([085ad0c](https://www.github.com/aave/aave-v3-core/commit/085ad0c8df62ac60a25f74c722fcd822c1f09107))
* Replace HALF_PERCENT with HALF_PERCENTAGE_FACTOR ([4fb45ec](https://www.github.com/aave/aave-v3-core/commit/4fb45ec34d4d86f75b94e2d284942ac69d62e8db))
* Replace Helper.toUint128 with OZ SafeCast ([3916735](https://www.github.com/aave/aave-v3-core/commit/391673546fbf7de6199822b60a49787498a26978))
* Rever simplification of cumulateToLiqIndex due to precision loss ([585c9c4](https://www.github.com/aave/aave-v3-core/commit/585c9c41525a8df7c6b13aa37fa07c860a03bd27))
* set config map to zero on init ([ea40ee1](https://www.github.com/aave/aave-v3-core/commit/ea40ee1608b7ffe60ae03154403b77fdc20933de))
* Simplify condition in SupplyLogic ([6487f29](https://www.github.com/aave/aave-v3-core/commit/6487f29892706390cae8fd46b10de24ca67281db))
* Simplify cumulateToLiqIndex in ReserveLogic ([53a95c8](https://www.github.com/aave/aave-v3-core/commit/53a95c809764a3acdb6f6e5d1845aea0d7de5a27))
* swap name ([ebd3622](https://www.github.com/aave/aave-v3-core/commit/ebd3622b28b18d8d7adbcd5f285a3c13a180db8f))
* Typo in liquidation-emode.spec.ts ([97e0acc](https://www.github.com/aave/aave-v3-core/commit/97e0acc5515641ef936cbb3284b4e2f9811a27f6))
* update admin to internal ([7d19d29](https://www.github.com/aave/aave-v3-core/commit/7d19d295c66c5e19c58cec87082e1905116dc196))
* Update test with new delegationWithSig typehash ([fea83f3](https://www.github.com/aave/aave-v3-core/commit/fea83f39d433ff1e624a39878686ddf661eb66fe))
* Use `next` prefix for isolation mode total debt ([5ffeecd](https://www.github.com/aave/aave-v3-core/commit/5ffeecdd6e376ff341d6f633e36be53c2cbc43b1))

## [1.8.0](https://www.github.com/aave/aave-v3-core/compare/v1.7.0...v1.8.0) (2021-12-16)


### Features

* added natspec comments, changed function param names to uniform with the other functions ([dda5bde](https://www.github.com/aave/aave-v3-core/commit/dda5bde0b901df2fdadd41cba332652f20dc3796))
* clarify mint and burn comment in interface ([03041ef](https://www.github.com/aave/aave-v3-core/commit/03041ef2189dbd5ed5344df09a6d3acf5caff0b6))
* refactored setReserveBorrowing, setReserveStableRateBorrowing, fixed tests ([6749233](https://www.github.com/aave/aave-v3-core/commit/6749233881b49e7f1d93b991ce1b8f850382c5b7))


### Bug Fixes

* Add 0 division check to wadDiv and rayDiv. ([ea80f22](https://www.github.com/aave/aave-v3-core/commit/ea80f22e6aeb51d0eab96785113aa5b802346e9d))
* Add better natspec for ConfiguratorLogic ([5cdfcdf](https://www.github.com/aave/aave-v3-core/commit/5cdfcdfe67ffbaccaf565385ad13588f99865145))
* Add better natspec for EModeLogic ([816d566](https://www.github.com/aave/aave-v3-core/commit/816d566224b4df116016e60a7e841cb0c5826949))
* Add comments about BaseCurrency to IPriceOracleGetter ([60ff953](https://www.github.com/aave/aave-v3-core/commit/60ff953ba9b4bdacb9a2acf5bbfcefd69e87e84d))
* Add docstrings for SequencerOracle ([9557272](https://www.github.com/aave/aave-v3-core/commit/955727288ef62e0a1e59ffdd3babb0b211a70a40))
* Add docstrings to PriceOracleSentinel ([368c77f](https://www.github.com/aave/aave-v3-core/commit/368c77f15e644e00e53a73f92294cf52a17d91b7))
* Add event emission to natspec ([ec28a38](https://www.github.com/aave/aave-v3-core/commit/ec28a384fad9d42cc308c5a894358f81f11034bd))
* Add explicit error message for LTV == 0 before division. ([d8d1694](https://www.github.com/aave/aave-v3-core/commit/d8d1694deb12a24f0638fb5990951f0daa574731))
* Add functions docs of `IPoolAddressesProvider` ([36a543b](https://www.github.com/aave/aave-v3-core/commit/36a543b3856a075d197e108717f4aa020f06fa1c))
* Add IAaveOracle interface ([ed03e30](https://www.github.com/aave/aave-v3-core/commit/ed03e3097aaae33c202d042bd6bb0f1d9a03eb26))
* Add literal syntax to setEModeCategory ([4ab27c3](https://www.github.com/aave/aave-v3-core/commit/4ab27c3a78f882175032417019073b6574e28d91))
* Add missing docstrings of the IACLManager ([84bcffc](https://www.github.com/aave/aave-v3-core/commit/84bcffce40ecfec73b43ce0f4263b60629fa9d87))
* Add test and zero div check to percentageDiv ([d914c9d](https://www.github.com/aave/aave-v3-core/commit/d914c9dc4502e1f166d0c1cc26c7c95628d34db6))
* Added `first` to natspec `_getFirstAssetAsCollateralId()` ([1b6a1df](https://www.github.com/aave/aave-v3-core/commit/1b6a1dfb80b6a254753af01fcfa60b9d8a891d62))
* additional check in isUsingAsCollateralOne() to avoid revert if collateralData == 0 ([49638cb](https://www.github.com/aave/aave-v3-core/commit/49638cb0874050443281c6cb30959891b6d32268))
* Change access control to setGracePeriod ([d9c2630](https://www.github.com/aave/aave-v3-core/commit/d9c26306b4f573422584453437c8f8d1b777f484))
* Clean code style of FlashLoan mocks ([6fe84b6](https://www.github.com/aave/aave-v3-core/commit/6fe84b6bd385195e5d5cac299a1458e33489f643))
* Clean code style of mocks ([60a03e3](https://www.github.com/aave/aave-v3-core/commit/60a03e38157ed8c64fab8efd073d72e183f17a7b))
* Consolidate BorrowingOnReserve events into 1 ([110c5d0](https://www.github.com/aave/aave-v3-core/commit/110c5d01bd321be8f101202c5ca3c38822928701))
* Enhance clarity of WadRayMath constants ([b7244c1](https://www.github.com/aave/aave-v3-core/commit/b7244c181f3649e94a6c8a085c1d3156556883f7))
* Fix and clean halfWad and halfRay values ([5f5dff4](https://www.github.com/aave/aave-v3-core/commit/5f5dff43a826209bc22a8a4562dbbb40c782e06a))
* Fix BridgeLogic natspec ([71be75e](https://www.github.com/aave/aave-v3-core/commit/71be75eb0362c214b4a28292455d9faaf473d24a))
* Fix PoolAddresesProvider docstrings ([30d757f](https://www.github.com/aave/aave-v3-core/commit/30d757f45d4eec26285df513e9b914aa4964985d))
* Fix typo in `IAaveOracle` natspec ([1f02c09](https://www.github.com/aave/aave-v3-core/commit/1f02c090b7922f9a08ad6e5bc29d350b2736060b))
* Fix typo in `LiquidationLogic` natspec ([3729466](https://www.github.com/aave/aave-v3-core/commit/37294662bbb6a8ff77c0c48ad3d0d09e554ade8f))
* Fix typos in docstrings ([167da26](https://www.github.com/aave/aave-v3-core/commit/167da26e4db23a9ca6b30940d633d4472a1348e4))
* Fix typos in natspec docs ([e29d46f](https://www.github.com/aave/aave-v3-core/commit/e29d46f9ff816f085140a70fcb41d4785a1c85fd))
* Format public immutable variable name with MACRO case ([c90b040](https://www.github.com/aave/aave-v3-core/commit/c90b04093f770e32febb3fb88e26a199c0b2316b))
* increased the data size of id and i to uint16 ([3d7fc2b](https://www.github.com/aave/aave-v3-core/commit/3d7fc2bf8ff001d203e64bde826f3f77da552cea))
* Make `_pool` public of AToken and DebtToken ([014da25](https://www.github.com/aave/aave-v3-core/commit/014da25b4f13ea9c83b468099e71b5eceff2f98c))
* Make addressesProvider of AaveOracle public ([69b3eca](https://www.github.com/aave/aave-v3-core/commit/69b3ecacc7e953c43a32764b4bcaad0da1c822cb))
* Make gracePeriod and sequencerOracle configurables ([3c6352f](https://www.github.com/aave/aave-v3-core/commit/3c6352fa3907407e46c1df6d9338cd638d974ece))
* Make Pool `_addressesProvider` public ([762d79e](https://www.github.com/aave/aave-v3-core/commit/762d79e033be02a0a67dbf47447688de1cd08167))
* Merge conflict in stable-debt-token.spec.ts ([78a6198](https://www.github.com/aave/aave-v3-core/commit/78a61982db5d58e0ee6a5ee0b3bcf2173a264a07))
* Minor merge conflict ([0df5e80](https://www.github.com/aave/aave-v3-core/commit/0df5e80a4a7e983231b7cb23be458f53b3f572b6))
* Move the optimization after the operation condition ([c6a785f](https://www.github.com/aave/aave-v3-core/commit/c6a785f2cd1f93f147a9c5a799648b61f4381541))
* naming consistency and stable debt event fix ([7f17123](https://www.github.com/aave/aave-v3-core/commit/7f17123ee4c59157a1a6f02746dd9790e4420db8))
* Optimize setUseReserveAsCollateral whenthere is no state change ([55445f2](https://www.github.com/aave/aave-v3-core/commit/55445f21ea27d8248ecad60a3230d28c48c9581a))
* remove console.log ([e279cda](https://www.github.com/aave/aave-v3-core/commit/e279cda79676b2c6d92a4ccbb737d71dc062fee9))
* Remove duplicated code in LiquidationLogic ([2189ba4](https://www.github.com/aave/aave-v3-core/commit/2189ba4446e843645ed3b2add8153881088bfbb4))
* Remove unneeded comments ([9ec0ec4](https://www.github.com/aave/aave-v3-core/commit/9ec0ec4b79a29b060743bbdd700559d6d7159469))
* Remove unneeded contract file ([6f480ec](https://www.github.com/aave/aave-v3-core/commit/6f480ecb2eb0325aabab25e6b902e83d22f77755))
* remove unused variable ([87fc0bb](https://www.github.com/aave/aave-v3-core/commit/87fc0bb492df1ef82b71a765f48b9913024d2875))
* Rename PoolConfigurator setter events ([53b40ce](https://www.github.com/aave/aave-v3-core/commit/53b40ce81d0b539be6b415ed75d1e419137b9fbc))
* Rename setter functions names ([449f42d](https://www.github.com/aave/aave-v3-core/commit/449f42d91fd0c08342412f08e3e3b1f3638ba953))
* set package-lock.json ([299d2f9](https://www.github.com/aave/aave-v3-core/commit/299d2f9ea3d62190004caca0dafa243089a262b3))
* Typo in flashloanlogic natspec ([4e36f6f](https://www.github.com/aave/aave-v3-core/commit/4e36f6f2d58411c9bc51f59058a80349a171a3de))
* Unify reserveCount and maxReserve to uint16 ([b6e2b35](https://www.github.com/aave/aave-v3-core/commit/b6e2b351f15cad9de45dcd3cf1e6a0686b64aad9))
* update .npmrc ([9cfe79c](https://www.github.com/aave/aave-v3-core/commit/9cfe79c3752959c7a22fcfb07b74d4c960c8ccf2))
* Update comments in validation-logic.spec.ts ([3b5c039](https://www.github.com/aave/aave-v3-core/commit/3b5c03973446c817860401ef255bcb5455d2676b))
* Update executeRepay to compute interest correctly for repaying with aTokens ([abf0e0c](https://www.github.com/aave/aave-v3-core/commit/abf0e0cf6da5bd9f6d91c505fda3580e4467c87e))
* Update function naming ([594b929](https://www.github.com/aave/aave-v3-core/commit/594b92985fb62831e8b4ee72a6ad4dfd5730eb05))
* Update natspec docs for FlashLoanLogic ([4b02b3e](https://www.github.com/aave/aave-v3-core/commit/4b02b3e6cf2f4f1c3f7f583652b3b9ff3a41b94e))
* Update variable packing of `ReserveData` ([7765624](https://www.github.com/aave/aave-v3-core/commit/77656242fd9e61c2080f938e7514d719c0015a91))
* Update wording of token update functions in ConfiguratorLogic ([2dd1551](https://www.github.com/aave/aave-v3-core/commit/2dd15513c1930d739aff0b14e2c94770b0e38004))
* use @aave/deploy-v3@1.7.1 library and load typechain locally instead of deploy-v3, to fix unsynced artifacts ([6904746](https://www.github.com/aave/aave-v3-core/commit/690474641fef8efa0dd95f645cb3e9b8d4eab3e5))
* Use `checkNoSuppliers` instead of `CheckNoDepositors` ([88aff43](https://www.github.com/aave/aave-v3-core/commit/88aff43cebb660689c6fcdd84560a5ebe9f98911))
* use already calculated value instead of re-calculating ([c0743f9](https://www.github.com/aave/aave-v3-core/commit/c0743f95890eb6e6c0ee873775b81aa952b55753))
* Use cache to get `aTokenAddress` in bridge logic ([e41ec39](https://www.github.com/aave/aave-v3-core/commit/e41ec395182296ee1226ed4b57914abdd3321fa0))
* Use literal syntax for struct params ([7baf196](https://www.github.com/aave/aave-v3-core/commit/7baf196bf51ad60a09d477e325537fdffe6f8465))

## [1.7.0](https://www.github.com/aave/aave-v3-core/compare/v1.6.0...v1.7.0) (2021-12-01)


### Features

* Add decimals to MockAggregator to match Chainlink Aggregator interface ([4cf1dac](https://www.github.com/aave/aave-v3-core/commit/4cf1dacd70f11a0c7103ade68bb05c907e846b2d))
* added handleRepayment() in flashloan and liqCall ([6c43820](https://www.github.com/aave/aave-v3-core/commit/6c438201c6ee95b6dc3895b904213b975ce3905d))


### Bug Fixes

* fixed handleRepayment() in flashloan ([80a19bb](https://www.github.com/aave/aave-v3-core/commit/80a19bb7e0d92af0604e67dc6586a0f376bf91a4))

## [1.6.0](https://www.github.com/aave/aave-v3-core/compare/v1.5.2...v1.6.0) (2021-11-27)


### Features

* reduced the number of optimizer runs ([8562a91](https://www.github.com/aave/aave-v3-core/commit/8562a911d04ede756a703be60f985d1916805d46))
* reorganized PoolStorage for gas savings ([87776f7](https://www.github.com/aave/aave-v3-core/commit/87776f757d58ddf20b99cdce752e068602f38389))


### Bug Fixes

* Add `useATokens` param to `Repay` event ([beec3f8](https://www.github.com/aave/aave-v3-core/commit/beec3f86bf1e4024dc74583bb386851b3d212963))
* Add additional constraint to use `eModeAssetPrice` ([ec42295](https://www.github.com/aave/aave-v3-core/commit/ec422953ca60110d98aa3c7c8930f70d88d5b294))
* Add check to `Pool::initializer()` ([8f2b426](https://www.github.com/aave/aave-v3-core/commit/8f2b426962a11c3e289301a341bcdf170b3e763f))
* Add clean ups to VariableDebtToken test ([bc4f314](https://www.github.com/aave/aave-v3-core/commit/bc4f314c85ac59ea84244108e6fc6f7c22d3fb74))
* Add cleanup to StableDebtToken test ([d1eeaa5](https://www.github.com/aave/aave-v3-core/commit/d1eeaa51d19b1e45bfa564fb51e5bd69623450db))
* Add cleanups in eMode tests ([fbf80a8](https://www.github.com/aave/aave-v3-core/commit/fbf80a8092c5807a281ab95b6e54f85790dda9b4))
* Add extra input to MockPoolInherited test deployment ([e7944dc](https://www.github.com/aave/aave-v3-core/commit/e7944dc1f92ea6fada5a31031d3628c7682da0d7))
* Add minor gas optimization for executeFlashLoan ([0d737f5](https://www.github.com/aave/aave-v3-core/commit/0d737f5041649a27a2d97148e625e1d3b211d0e3))
* Add natspec comments to IncentivizedERC20 ([722a8e7](https://www.github.com/aave/aave-v3-core/commit/722a8e7b5c3a2e14f639e6491cb264b8d305508a))
* Add precision to debt ceiling comment ([3d43c02](https://www.github.com/aave/aave-v3-core/commit/3d43c02a8d014e33619ad5d375d1baeac4448cb8))
* Add test exploiting pricing issue ([3457fb8](https://www.github.com/aave/aave-v3-core/commit/3457fb829d094a45f6d056c9893ad0c3b1bef465))
* Add test for incorrect init of pool ([b3cebaf](https://www.github.com/aave/aave-v3-core/commit/b3cebaf6180340378e37257c6ac4e4adab444e2f))
* Bumped Node JS version of Dockerfile to 16 stable version. Update package-lock. ([f0c8787](https://www.github.com/aave/aave-v3-core/commit/f0c8787725ff3fc77b02cf92928f6e79207a93ff))
* Change visibility of `name()` in IncentivizedERC20 ([467a5c1](https://www.github.com/aave/aave-v3-core/commit/467a5c110552bf4ec71449cccc2bb8fd9201806b))
* Do multiplication before devision for `currentStableBorrowRate` ([ca177fb](https://www.github.com/aave/aave-v3-core/commit/ca177fbe5860ae360e4ebf8e93712fa84b1ab2e4))
* Fix typo on credit delegation test case ([0b6a65b](https://www.github.com/aave/aave-v3-core/commit/0b6a65bb109665b1d74bcdc5c5fd04c38dfa4721))
* Handle minor merge issue ([36488c9](https://www.github.com/aave/aave-v3-core/commit/36488c9e86a15bc66047ddf09505dbcf29f79324))
* Make `_addressesProvider` immutable in `Pool` ([b41feab](https://www.github.com/aave/aave-v3-core/commit/b41feabd504c8da527db7fc1e3867519b2c7334e))
* Make `_nonces` internal and add `nonces` getter ([f3d1817](https://www.github.com/aave/aave-v3-core/commit/f3d18176f6250ac255287acaf86aae8f04c22e77))
* Make `MAX_RESERVES_COUNT` constant ([04ced7f](https://www.github.com/aave/aave-v3-core/commit/04ced7fd5582af588ebdcf4d2f755db8998d1b75))
* MockPoolInherited wrong return value on `MAX_NUMBER_RESERVES` ([b724a73](https://www.github.com/aave/aave-v3-core/commit/b724a73790b8fcad67e33df10217da448a4cf953))
* Move `_nonces` to IncentivizedERC20 ([54eb024](https://www.github.com/aave/aave-v3-core/commit/54eb024bef45a8d77a5f856cf1866024d282da7e))
* Move list length check to front of `validateFlashloan` function ([f485be5](https://www.github.com/aave/aave-v3-core/commit/f485be5d9f87d85cef65d816e708741437586280))
* Pair `_avgStableBorrowRate` and `_totalSupplyTimestamp` ([b6c9372](https://www.github.com/aave/aave-v3-core/commit/b6c937292dd7bb2c91eec05940170ac902701a09))
* Refactor tokens, move domain separator function to IncentivizedERC20 ([c033f9d](https://www.github.com/aave/aave-v3-core/commit/c033f9d4d83c08f75b63b972ca02fca27d6afc45))
* Removal of unneeded struct ([262dc7a](https://www.github.com/aave/aave-v3-core/commit/262dc7a525b3e6794b96b904189696773e3787c5))
* Remove unneeded fields from `AvailableCollateralToLiquidateLocalVars` ([f9088b6](https://www.github.com/aave/aave-v3-core/commit/f9088b65a6b3a5c6875f0176f32bda99caf63ee9))
* setup npm registry without file ([91fdc99](https://www.github.com/aave/aave-v3-core/commit/91fdc99b02dffb4924c5078d894f2ca180d8e23c))
* Simplify `_getFirstAssetAsCollateralId()` ([dffc2f6](https://www.github.com/aave/aave-v3-core/commit/dffc2f63275c6d4be780dc4199adace662afb585))
* source setup env for coverage ([fd7de34](https://www.github.com/aave/aave-v3-core/commit/fd7de34862f678aeac426634ba48b1c0afd65f7d))
* Update `user` to `onBehalfOf` for VariabelDebtToken ([7ff840f](https://www.github.com/aave/aave-v3-core/commit/7ff840f36a12ae19372c1f83b9d2ee01ae30de5b))
* Update package.json ([49a8c39](https://www.github.com/aave/aave-v3-core/commit/49a8c39e6137f31aa7a4e05a6ca2556532ddab20))
* update v3 deploy dev dependency to latest deployment scripts ([2aa8f5c](https://www.github.com/aave/aave-v3-core/commit/2aa8f5c3364c518890a12366f4ed6c8747dfe4bc))
* update v3 dev dependencies ([9cb6a47](https://www.github.com/aave/aave-v3-core/commit/9cb6a47393d676d16bd928e8cce5f90db14892ad))
* Use cached value for asset unit instead of recomputation ([335927c](https://www.github.com/aave/aave-v3-core/commit/335927c0493772f68968feb0477d0fad348e5b59))

### [1.5.2](https://www.github.com/aave/aave-v3-core/compare/v1.5.1...v1.5.2) (2021-11-12)


### Bug Fixes

* fix releasepipeline ([5dc309d](https://www.github.com/aave/aave-v3-core/commit/5dc309d08120d3cf2ddea44e53f56b6c29fdfca6))

### [1.5.1](https://www.github.com/aave/aave-v3-core/compare/v1.5.0...v1.5.1) (2021-11-12)


### Bug Fixes

* fix ci workflow file ([5520c8f](https://www.github.com/aave/aave-v3-core/commit/5520c8fb3ab959f3167755cee7642e3ea184eac9))

## [1.5.0](https://www.github.com/aave/aave-v3-core/compare/v1.4.0...v1.5.0) (2021-11-12)


### Features

* updated solidity version ([7891ac6](https://www.github.com/aave/aave-v3-core/commit/7891ac6a9063e9d042333aa16589126e10fcb67d))


### Bug Fixes

* Add comment + gasoptimization for flashloans ([546fe84](https://www.github.com/aave/aave-v3-core/commit/546fe84771345d612d42a91ef434188194b26a3b))
* Add comment to elaborate on unusual flow in flashloan simple ([5f41c07](https://www.github.com/aave/aave-v3-core/commit/5f41c07c19e36e195114c63702808607de6a5f9c))
* Add configuration cache to save gas ([e5b9c2a](https://www.github.com/aave/aave-v3-core/commit/e5b9c2a8e52084f58548d11609ccebdf0e40bf52))
* Fix reentrance attack in `flashLoanSimple` ([1e98320](https://www.github.com/aave/aave-v3-core/commit/1e98320efce9e4a2de8da59c6c416e49a10d9ce5))
* Move `interestRateMode` cast below state update ([9732e6f](https://www.github.com/aave/aave-v3-core/commit/9732e6f1e61fa010401126651c615e911da2af57))
* Simplify flow for `mintToTreasury` ([8385f6b](https://www.github.com/aave/aave-v3-core/commit/8385f6b6c6dfd2e3e0b02b09ca7a8b6970ba6868))

## [1.4.0](https://www.github.com/aave/aave-v3-core/compare/v1.3.0...v1.4.0) (2021-11-09)


### Features

* added public debt ceiling decimal constant, added getter to DataProvider ([52918e2](https://www.github.com/aave/aave-v3-core/commit/52918e2f98e3e9ce65fca8df19596ec577213b26))

## [1.3.0](https://www.github.com/aave/aave-v3-core/compare/v1.2.1...v1.3.0) (2021-11-09)


### Features

* added borrowable in isolation configuration, fixed tests ([8755279](https://www.github.com/aave/aave-v3-core/commit/87552797a8776f38e869aff7e0c3a1f9d70a7950))
* Added missing legacy methods ([3a2fc3f](https://www.github.com/aave/aave-v3-core/commit/3a2fc3f50dbcc7f3552554b04f6b33f51657a107))
* finalized implementation, fixed tests ([c9bb800](https://www.github.com/aave/aave-v3-core/commit/c9bb8002498e8638b63528d63cea4d8fefcbcdb2))
* initial implementation ([043bcde](https://www.github.com/aave/aave-v3-core/commit/043bcdec992a7196348881fa3bfef1ac8cb9e0b7))


### Bug Fixes

* improved condition in rayToWad() ([3eec7b3](https://www.github.com/aave/aave-v3-core/commit/3eec7b3093249e6d07861434298ff0e9716c3c44))

### [1.2.1](https://www.github.com/aave/aave-v3-core/compare/v1.2.0...v1.2.1) (2021-10-19)


### Bug Fixes

* Added view to getEModeCategoryData method in pool interface ([b3ebdcc](https://www.github.com/aave/aave-v3-core/commit/b3ebdcc53fe0220285cbd42ada2240ffbbaf9158))

## [1.2.0](https://www.github.com/aave/aave-v3-core/compare/v1.1.0...v1.2.0) (2021-10-18)


### Features

* Add `onlyAssetListingOrPoolAdmins` modifier to `setAssetSources` ([6bb8a1c](https://www.github.com/aave/aave-v3-core/commit/6bb8a1c06a1167941068656fec64bfd9ea18c0ce))
* Add bridge protocol fee + fix tests for update ([bc4b554](https://www.github.com/aave/aave-v3-core/commit/bc4b554403b245bbcb1be3d2b4546d001a9175e7))
* Add simple flashloan of 1 asset ([dbc5c9e](https://www.github.com/aave/aave-v3-core/commit/dbc5c9e1a9f3f8913ab8f1da16844ac4e62caf86))
* added setIncentivesController ([8c027f4](https://www.github.com/aave/aave-v3-core/commit/8c027f4048bfa8c0bd859296e441906e9f3c0de3))
* added the data provider to the addresses provider ([5f3abbc](https://www.github.com/aave/aave-v3-core/commit/5f3abbc8eaf216603ba2dfbd007ef5452905e50d))
* finalize implementation ([1e72d0b](https://www.github.com/aave/aave-v3-core/commit/1e72d0bcf5dd4a4facefa716f095fc3d97c02f22))
* fixed calculations in ValidationLogic and BorrowLogic ([5b507bd](https://www.github.com/aave/aave-v3-core/commit/5b507bd8b911e1a3a5cd8529413a3c6071a0ebb7))
* fixed setDebtCeiling, added tests ([6ef9683](https://www.github.com/aave/aave-v3-core/commit/6ef968352655ac9e958ddf53ab0748e68e2160a6))
* increased debt ceiling field capacity ([541f970](https://www.github.com/aave/aave-v3-core/commit/541f97056bb7e4fdb1f8645c386b68b9818ae7a4))
* refactored PoolDataProvider functions in the addresses provider, fixed _checkNoLiquidity ([10300d4](https://www.github.com/aave/aave-v3-core/commit/10300d40832cfb94df83064879036e36994b57a4))
* refactored the pool variable to immutable in atoken/debt tokens ([8e4d226](https://www.github.com/aave/aave-v3-core/commit/8e4d2265edd7f322e785a10ae61f67ded93d6fcb))
* renamed simpleFlashloan and data structure ([9cc4d0c](https://www.github.com/aave/aave-v3-core/commit/9cc4d0c301325d1b113fb6ebaa51a0087d811c75))
* Uniform permission of `AaveOracle` ([f471b0f](https://www.github.com/aave/aave-v3-core/commit/f471b0f9156cb93f1ec70fc94961d900a3b6927c))


### Bug Fixes

* Add `getActive` check on assets in flashloan. ([740aeaf](https://www.github.com/aave/aave-v3-core/commit/740aeafdee25cb48fbf7a6a170ccc7893857c6ab))
* added public vars to interface for periphery usage ([8af6d0a](https://www.github.com/aave/aave-v3-core/commit/8af6d0aed5de659676db5b920267596454d8678d))
* added view to the getDataProvider function interface ([0e6ee36](https://www.github.com/aave/aave-v3-core/commit/0e6ee361604ad0309a1cf83abd40c82d41bb9611))
* correct package lock ([7965e0e](https://www.github.com/aave/aave-v3-core/commit/7965e0e4c264d63b71fc357b8de16cd06d6615a4))
* Fix 0.8.7 version throughout the contracts ([6d97be8](https://www.github.com/aave/aave-v3-core/commit/6d97be80c2ba3c9d608bb690e4b5e1dacb174c07))
* fix calculation bug in isolation mode ([8de2424](https://www.github.com/aave/aave-v3-core/commit/8de2424d475ac707c4b51e0b7bec5674746f5049))
* Fix convention naming for constants ([193e3ab](https://www.github.com/aave/aave-v3-core/commit/193e3ab8b4255b0f152bae2a98530b812d2b3c53))
* Fix declaration shadowing of mock contract ([7872ecb](https://www.github.com/aave/aave-v3-core/commit/7872ecbf67db4ed2e0e2314aebdb2919b692974a))
* Fix doc in `StableDebtToken` ([9494299](https://www.github.com/aave/aave-v3-core/commit/9494299d7f9652e2c20adf5e03f42f8dcc4cfaf1))
* Fix inheritance of mock contracts ([5bb62ad](https://www.github.com/aave/aave-v3-core/commit/5bb62ad59ddd97c1444d6d28f9b8764889238c08))
* Fix simple flash loan test to use new function name ([9036580](https://www.github.com/aave/aave-v3-core/commit/9036580d7e1e6d5302d984f1fc6e82ff01ee3bfe))
* Fix stack too deep for unoptimized compile of PoolConfigurator ([ef14f03](https://www.github.com/aave/aave-v3-core/commit/ef14f031e0a20bd7284e0a5ff96c889d3a005925))
* fixed condition on supply and transfer, added tests ([6081003](https://www.github.com/aave/aave-v3-core/commit/6081003fd6bc09c27aa5dfb7642dea3a1051b122))
* fixed isolation mode condition ([9672442](https://www.github.com/aave/aave-v3-core/commit/96724422b59517b0307d746a71c8f609208a4317))
* fixed the calculation for isolationModeTotalDebt ([68bf644](https://www.github.com/aave/aave-v3-core/commit/68bf644803a1d89ac5f650b2031a1896bf7fd5e0))
* Follow `check-effects-interactions` pattern more strictly ([7e7980a](https://www.github.com/aave/aave-v3-core/commit/7e7980a19dee98ecca7f13767fcc192ae0629bfb))
* Mark the initialization functions as `external` ([e037467](https://www.github.com/aave/aave-v3-core/commit/e037467b555dd83a3419ee0bd8f1743bfa4b1551))
* Move flashloans to separate library ([9308e97](https://www.github.com/aave/aave-v3-core/commit/9308e9797b1097334df7cf4745a335804b229dd0))
* package lock with correct node version ([3d2f5b6](https://www.github.com/aave/aave-v3-core/commit/3d2f5b61057f06f3990951e86cd8017b1b4fa6bf))
* Reintroduced check for max repayment on behalf ([c351627](https://www.github.com/aave/aave-v3-core/commit/c351627cfc218b99c9f0354c58cefb9edb2e68a2))
* Remove comment from `FlashLoanLogic` ([774c326](https://www.github.com/aave/aave-v3-core/commit/774c326a4b128f3816e6c2f4a924f6f8a5adc460))
* Remove old call ([a82d303](https://www.github.com/aave/aave-v3-core/commit/a82d3039653ec9574a6c9ae1637307fcfb1a63da))
* Remove unneded return value of `AToken.transferUnderlyingTo` ([5f30b38](https://www.github.com/aave/aave-v3-core/commit/5f30b38dd5b5a719c72da466ac56aac3a407fd7c))
* Remove unneded use of `SafeMath` ([a9584f8](https://www.github.com/aave/aave-v3-core/commit/a9584f84e2acf11ec1b7cdb09b6f5fe0b1ff5873))
* Remove unneeded check at validateRepay ([6d3d73f](https://www.github.com/aave/aave-v3-core/commit/6d3d73ff6cbde45ac13065cae1af799888ef524a))
* Remove unneeded storage variable from PoolConfigurator ([af8f695](https://www.github.com/aave/aave-v3-core/commit/af8f695aa371cb8e6d7a3a9ac0fac53da07a412e))
* Remove unneeded use of function params ([d0d8980](https://www.github.com/aave/aave-v3-core/commit/d0d898003791c8f3df184a12e070f25e4dbad9ff))
* Remove unused `PC_INVALID_DEBT_CEILING_ASSET_ALREADY_SUPPLIED` ([c68b67a](https://www.github.com/aave/aave-v3-core/commit/c68b67a8843e12da02b762cff4e73935e2d42d5f))
* Remove unused imports from BorrowLogic ([7b019c0](https://www.github.com/aave/aave-v3-core/commit/7b019c0fdbc1e5daf6e9214a03bcf43b979343c6))
* Remove unused inports from FlashLoanLogic ([0aa3a39](https://www.github.com/aave/aave-v3-core/commit/0aa3a3926e5a0e3bc97c31d72643dd51fbdd17f1))
* Remove unused variable + readability ([00c2e66](https://www.github.com/aave/aave-v3-core/commit/00c2e66d78451be2f0874586e9357915359ad682))
* Rename `_checkNoLiquidity` to `_checkNoDepositors` ([95fb785](https://www.github.com/aave/aave-v3-core/commit/95fb7853a0e216e2716a5ed3cdd14eb134120ad5))
* Rename arguments for `backUnbacked` in library ([6ca57a1](https://www.github.com/aave/aave-v3-core/commit/6ca57a1fb0067c265b2697f52721e412a2342961))
* Rename Percentage to BPs for argument in `backUnbacked` ([94eaf83](https://www.github.com/aave/aave-v3-core/commit/94eaf83df951a134a70add4c5fdc326db806a356))
* Replace assembly for chainId ([777d04a](https://www.github.com/aave/aave-v3-core/commit/777d04a1bd1790e768f474e9ae68590d1adf7e6e))
* Set `MAX_VALID_DEBT_CEILING` = `2^40 - 1` ([fa4c485](https://www.github.com/aave/aave-v3-core/commit/fa4c485a53cd497cf58e5a772a171ee0fb5ecbe2))
* Update `calculateCompoundedInterest` to increase precision ([dcbb583](https://www.github.com/aave/aave-v3-core/commit/dcbb583231d57790c1decceaa6a5f73d852734ad))
* Update comments in FlashLoanLogic ([7fee95c](https://www.github.com/aave/aave-v3-core/commit/7fee95c0608bdf87a7535b62e5495585af2840b4))
* Update doc for `getDebtCeiling` ([3d0e0cb](https://www.github.com/aave/aave-v3-core/commit/3d0e0cb742ec9a36782db24c0b976377c71506ce))
* Update IPool doc for `backUnbacked` ([6ffc157](https://www.github.com/aave/aave-v3-core/commit/6ffc15703175de2974b957c98d5663f001f71251))
* Update precision in isolationDebt check ([7fbf7b6](https://www.github.com/aave/aave-v3-core/commit/7fbf7b67080ffe54d0d235ff1a686f45ec9c530b))
* update the max MAX_VALID_DEBT_CEILING ([16d9aa8](https://www.github.com/aave/aave-v3-core/commit/16d9aa8a0e7dae3edd59ca3012523b7eefe2ef9b))
* Update visibility of tokenization ([128a947](https://www.github.com/aave/aave-v3-core/commit/128a947d91ccca05645e6f2a40f2917c977e7d8f))
* updated hardhat config ([2129dc0](https://www.github.com/aave/aave-v3-core/commit/2129dc0cc45de1895a0a030e5abf9174730fd303))

## [1.1.0](https://www.github.com/aave/aave-v3-core/compare/v1.0.3...v1.1.0) (2021-09-28)


### Features

* Add `unbackedMintCap` to control unbacked atokens minting ([bde09e3](https://www.github.com/aave/aave-v3-core/commit/bde09e30dea092f442c2bbf14a94bb04e15dea62))
* Add asset listing admin role ([3c3cd50](https://www.github.com/aave/aave-v3-core/commit/3c3cd50873c379d1b126c523039a36532ae16f1c))
* Add eMode category getters on Pool ([1e5a4e2](https://www.github.com/aave/aave-v3-core/commit/1e5a4e26e1c9d6b2084dbbe9936d1c60db485249))
* Add flag for OperationValidator at ReserveConfig, add renaming ([6515d1d](https://www.github.com/aave/aave-v3-core/commit/6515d1de492f9532363b6f303ffd6c6a810bd175))
* Add getReserveEModeCategory at DataProvider ([268dac1](https://www.github.com/aave/aave-v3-core/commit/268dac16779745fc54bbef9b7a11f5c563cdae37))
* Add initial contract to validate operations ([d6af2e5](https://www.github.com/aave/aave-v3-core/commit/d6af2e5caa9ab714bb7091ee5553a8582ec9cf2c))
* Add new onlyAssetListingOrPoolAdmin for initReserves ([9d36fa5](https://www.github.com/aave/aave-v3-core/commit/9d36fa56327e110c1d954b183046e1ea983b55a6))
* Add test cases ([0814ac2](https://www.github.com/aave/aave-v3-core/commit/0814ac29f5318e0f7eca0a02cf523c684c1bc74b))
* Add test cases for category emode registration ([31ab296](https://www.github.com/aave/aave-v3-core/commit/31ab296db37e0e934b761cf5527c609c0e7d90fc))
* Add tests for edge cases of `supply` function ([30d5f83](https://www.github.com/aave/aave-v3-core/commit/30d5f83d1478925865d175824fafd0fef20e9d89))
* Add tests for the new unbackedMint cap control ([ad92076](https://www.github.com/aave/aave-v3-core/commit/ad9207672a66f0e9c9bff5c43b77ee84ba96aadc))
* added optimal stable to variable debt ratio ([e0a9756](https://www.github.com/aave/aave-v3-core/commit/e0a9756822a42f8d990ee4ce466b9300b1f3f6eb))
* added validation and events on eMode categories configuration ([fdf483b](https://www.github.com/aave/aave-v3-core/commit/fdf483bd70d95146e12d781bf55875e72b0137e3))
* Initial OperationalValidator integration ([5088148](https://www.github.com/aave/aave-v3-core/commit/5088148abd402153535180ddd6a3841b8e6b9198))
* refactored InterestRateStrategy, fixed conditions ([5196636](https://www.github.com/aave/aave-v3-core/commit/51966363ae3ce6cab7a532d3f2b3ab5180295046))
* removal of the rate oracle, initial implementation, tests fixed ([1f5b953](https://www.github.com/aave/aave-v3-core/commit/1f5b9530b39a6c5ea1f8edbdfdf3d34b5c43192f))
* Rename `OperationalValidator` to `PriceOracleSentinel` ([9004f49](https://www.github.com/aave/aave-v3-core/commit/9004f49775fa4c57b07a259f3b660298cdef855c))


### Bug Fixes

* Add additional checks to liquidation tests ([e06c74f](https://www.github.com/aave/aave-v3-core/commit/e06c74fceeeb33211363e0cb1cf0e2f5549933f4))
* Add check for previous index ([3cfc67c](https://www.github.com/aave/aave-v3-core/commit/3cfc67c9c9a9dffb78ee63aed9e2c48fa9c8a75b))
* Add checks for avaiable liquidity in liqudations ([80cb24d](https://www.github.com/aave/aave-v3-core/commit/80cb24ddd72cd075c488f16f1a697e907ece6d30))
* Add cleanups and fixes to tests ([ccd5a96](https://www.github.com/aave/aave-v3-core/commit/ccd5a961e2e0eb6d73d5f0e696383b762daf1f3e))
* Add fixes to OperationalValidator contracts ([829be88](https://www.github.com/aave/aave-v3-core/commit/829be8826c84fa67fce6745b5768dbee5127e5e4))
* Add tests for `ASSET_LISTING_ADMIN` role ([84aa268](https://www.github.com/aave/aave-v3-core/commit/84aa26830124fee2fa4479e8ed3fc16ccbd38024))
* Cap supply utilization at borrow utilization ([5e79c48](https://www.github.com/aave/aave-v3-core/commit/5e79c48f9d9d10492166a8801f34f0a73114affb))
* Fix `supply` function  error at `SupplyLogic` lib. ([6c112e8](https://www.github.com/aave/aave-v3-core/commit/6c112e89a271003acb8ed3a33fcb6a9f9bc2c196))
* Fix docs of `ACLManager` contract ([acfebe8](https://www.github.com/aave/aave-v3-core/commit/acfebe8e685e1b980fc74be5f9f16d73ea4aeeec))
* Fix docs of OperationValidator contract ([213094c](https://www.github.com/aave/aave-v3-core/commit/213094cebf281c3d2e84affcfc448b74677cca0c))
* Fix duplicated code at `validateHF` ([6a30bbb](https://www.github.com/aave/aave-v3-core/commit/6a30bbb46cad3d1330db5174f47dcc0dc7b169c2))
* Fix liquidityAdded in BridgeLogic backUnbacked ([68764ee](https://www.github.com/aave/aave-v3-core/commit/68764ee1d539495f6beaf3df545806f466e710fd))
* Fix package-lock ([5e37eeb](https://www.github.com/aave/aave-v3-core/commit/5e37eeba93ee371261286322d757f1a6fb113d01))
* Fix some comments on contracts ([973e644](https://www.github.com/aave/aave-v3-core/commit/973e6447bb49981f66791fa3be48475a9c0e4b25))
* Fix tests ([506d339](https://www.github.com/aave/aave-v3-core/commit/506d339f6fc958484b3b09095bb5bebb6ee5a230))
* fixed borrow condition, removed conditions on transfer/deposit/use as collateral ([8dbe7e4](https://www.github.com/aave/aave-v3-core/commit/8dbe7e4d186c834eca1a80e3d01d9d939ddd2038))
* fixed calculation of the avg ltv/liq threshold in eMode ([0534f47](https://www.github.com/aave/aave-v3-core/commit/0534f47dfc16ba3a3f7f1c274b80de662ca54b72))
* fixed error after merging the main branch ([83f385f](https://www.github.com/aave/aave-v3-core/commit/83f385fc1fdcac9f87aaa94614bcda3020578fb0))
* fixed logic for the stable rate offset, fixed tests ([c319929](https://www.github.com/aave/aave-v3-core/commit/c31992993519a5b964656093b034de6b4fa91a3d))
* fixed validateSetUserEMode ([750fd34](https://www.github.com/aave/aave-v3-core/commit/750fd349e8c52726d505844fa47376c8784d7109))
* Improve readability and fix docs of `BridgeLogic` ([2c48e7e](https://www.github.com/aave/aave-v3-core/commit/2c48e7e64cc7a2de53e54865b11ecefbe0acedea))
* Initial interest rate fix ([350c528](https://www.github.com/aave/aave-v3-core/commit/350c528354d3cbb55f66458b812395d31fc12d95))
* Move `isBorrowAllowed` higher up in `validateBorrow` ([93a447c](https://www.github.com/aave/aave-v3-core/commit/93a447c2a18e17a5067b47dbe7e724970d9eff9b))
* npm dependencies ([2a366f7](https://www.github.com/aave/aave-v3-core/commit/2a366f7f708803137c7dab2916e524709a7afc83))
* refactored PriceOracleSentinel, valdiation conditions, removed reserve config ([e112db9](https://www.github.com/aave/aave-v3-core/commit/e112db92acbaf3a41f2197a7b270b5b42d1586b7))
* Remove AToken totalSupply from interest computation ([9b779e9](https://www.github.com/aave/aave-v3-core/commit/9b779e9ead03fc919f7fa6f38c6dbe361d47198f))
* Remove deployOperationalValidator import ([3152285](https://www.github.com/aave/aave-v3-core/commit/3152285ae7e7bbb126ff41a403bd6f7a13767607))
* Remove deprecated code of contracts ([282b629](https://www.github.com/aave/aave-v3-core/commit/282b6297e7276b579cd59ff182d670ebf9aeca12))
* removed unnecessary overflow check ([4d9861d](https://www.github.com/aave/aave-v3-core/commit/4d9861d94d5531104f95af625cffead15f603d4d))
* removed useAsCollateral flag in supply ([891da9b](https://www.github.com/aave/aave-v3-core/commit/891da9bdeccc6c09e8b65472618370725030fbc9))
* Rename variable `rate-strategy.spec.ts` ([f7fbdac](https://www.github.com/aave/aave-v3-core/commit/f7fbdac5fa0eea659ba4da6c5f87eae6e82fec51))
* Revert renaming back to SequencerOracle ([53ab533](https://www.github.com/aave/aave-v3-core/commit/53ab533d0c4c56d59002e4efcc8f3c4ae5c44f10))
* Update `rate-strategy.spec.ts` to use strategy two ([31335e0](https://www.github.com/aave/aave-v3-core/commit/31335e0ff373d343b7bb2887a499e66ea2b7cff4))
* Update and fix contracts docs ([171acdf](https://www.github.com/aave/aave-v3-core/commit/171acdf711b243234c1baa350c30485e58f9f4f3))
* Update comments in IPool ([3e32f07](https://www.github.com/aave/aave-v3-core/commit/3e32f07f9966c97242035580f1f6672bba27cd7a))
* Update operation-validator reserve getters ([bcdc91d](https://www.github.com/aave/aave-v3-core/commit/bcdc91d134403f49b15f13a07c996e22ff7da844))
* Update tests for new interest rate calculation ([a37d9a1](https://www.github.com/aave/aave-v3-core/commit/a37d9a10591b5b39f63731a3d8257d024a540538))
* Upgrade  library to make it work with london hf. ([c1e6fec](https://www.github.com/aave/aave-v3-core/commit/c1e6fecbcffa7d6160a896ec00d3cedb248cfa8c))
* use nextVariableBorrowIndex instead of nextLiquidityIndex on repayValidation ([cf9007c](https://www.github.com/aave/aave-v3-core/commit/cf9007c78d6e2eaaa9816309ebc44f160c53ed3c))

### [1.0.3](https://www.github.com/aave/aave-v3-core/compare/v1.0.2...v1.0.3) (2021-09-17)


### Miscellaneous Chores

* release 1.0.3 ([003569a](https://www.github.com/aave/aave-v3-core/commit/003569a1c336f9396715c306be78f1973348ca5c))

### [1.0.2](https://www.github.com/aave/aave-v3-core/compare/v1.0.1...v1.0.2) (2021-09-15)


### Bug Fixes

* add repository field and fix publishConfig at package.json ([76b90e7](https://www.github.com/aave/aave-v3-core/commit/76b90e7780b602a48cbbd388a99a742dc24978a5))

### [1.0.1](https://www.github.com/aave/aave-v3-core/compare/v1.0.0...v1.0.1) (2021-09-15)


### Bug Fixes

* set release please to run at master ([599fe87](https://www.github.com/aave/aave-v3-core/commit/599fe870a95ab46b1db6869b8339a65871e10e57))

## 1.0.0 (2021-09-14)


### Features

* Add `virtual` on Pool and Configurator `getRevision` functions ([ddd4ac5](https://www.github.com/aave/aave-v3-core/commit/ddd4ac5f76e3dc5b99c58068e823c1a7930e2d8c))
* Add `wadraymath.ts` to support wad and ray math on ethers bignumber ([cc468df](https://www.github.com/aave/aave-v3-core/commit/cc468df58ca1408279ec32a69c8feadc1d63d4d9))
* add coverage, fix merge issues ([cfd2afd](https://www.github.com/aave/aave-v3-core/commit/cfd2afdc1a32d53317a65b50e48df82b4e97540a))
* add coverage.json to gitignore ([8613ddd](https://www.github.com/aave/aave-v3-core/commit/8613ddd9d2d72e46ed76511e9a54f1c479f78b19))
* Add fix in WETH9Mocked ([615ca0b](https://www.github.com/aave/aave-v3-core/commit/615ca0be8da2f80e9d5420f65af65a3954ca2786))
* add liquidation protocol fee to configuration ([1207d63](https://www.github.com/aave/aave-v3-core/commit/1207d63ea6080039be63067894af25cc6e203d47))
* Add missing cases for `DefaultReserveInterestRateStrategy` ([08d6c63](https://www.github.com/aave/aave-v3-core/commit/08d6c636c561df8727a36e25a810a1613242f982))
* Add missing cases for `LiqudationLogic` ([5fa09f5](https://www.github.com/aave/aave-v3-core/commit/5fa09f5a7cced188fa6cbc459b6c6ec3ecb34af2))
* Add missing cases for `ValidationLogic` ([c8703d4](https://www.github.com/aave/aave-v3-core/commit/c8703d423070720cd8abbaca2db69275cb39a4b9))
* Add receive function as fallback in Proxy contract ([9bf567e](https://www.github.com/aave/aave-v3-core/commit/9bf567ece620b3a5f58fd55c175446c40b0f57a9))
* Change lendingpool path to pool ([f344193](https://www.github.com/aave/aave-v3-core/commit/f344193cfa7ef1b3a041267763b51ace6bc489d1))
* Fix small compiler warnings ([6f86981](https://www.github.com/aave/aave-v3-core/commit/6f86981447cdc64d4607de3efb0ac423dce2b060))
* initial implementation ([34786a9](https://www.github.com/aave/aave-v3-core/commit/34786a9ec9b80de21252db608455a17600915143))
* liquidation fee based on bonus amount ([6ca1b1e](https://www.github.com/aave/aave-v3-core/commit/6ca1b1ec759bd7e5eadb137e385c872ebf980120))
* liquidation protocol fee and tests ([1a86b77](https://www.github.com/aave/aave-v3-core/commit/1a86b77652f2af4ff4bc21be1c9dce923df313e2))
* re-add temporary test script ([7ddeb7a](https://www.github.com/aave/aave-v3-core/commit/7ddeb7ad26e11ea90d2f71cde9ffad8940b6b879))
* refactor and simplify the market configuration ([eeb9e7a](https://www.github.com/aave/aave-v3-core/commit/eeb9e7a4a09afbbfa34737d6057875675ea68e7e))
* Remove `LendingPool` references of contracts ([702a8d3](https://www.github.com/aave/aave-v3-core/commit/702a8d374e0cd91dc0eea03a8225444aca502385))
* Remove `LendingPool` references of tasks, helpers and tests ([6fdde99](https://www.github.com/aave/aave-v3-core/commit/6fdde99e042062d20edae46b1e75863b5657f777))
* remove adapter scripts ([259c2cb](https://www.github.com/aave/aave-v3-core/commit/259c2cb010da2b7a3fcec1d489e73da6501e4d1f))
* remove adapters ([253c63e](https://www.github.com/aave/aave-v3-core/commit/253c63e339bc0d75319869b344cb9e3accd470c6))
* remove amm test scripts ([9f00d44](https://www.github.com/aave/aave-v3-core/commit/9f00d44927c373757721017b43a89eb6e46328c9))
* remove dev tasks ([3693feb](https://www.github.com/aave/aave-v3-core/commit/3693febe46786b755503d6116de7deca69c8790d))
* Remove LendingPoolCollateralManager references ([270f1fe](https://www.github.com/aave/aave-v3-core/commit/270f1fe1d881531385a21f5f00e2b369711ea524))
* remove multi market support ([3b6e9c5](https://www.github.com/aave/aave-v3-core/commit/3b6e9c5212795f17c3d99b1a4a8945be1575fb30))
* Remove references to `LENDING_POOL` of Errors lib ([59b5104](https://www.github.com/aave/aave-v3-core/commit/59b510494880bb134812c6ecf4e0c796ed360477))
* Remove references to `LendingPool` of `Pool` contract ([9919194](https://www.github.com/aave/aave-v3-core/commit/9919194ce6735cfea33ca77df7f6633f5c6fb297))
* Remove references to LendingPool ([39a7077](https://www.github.com/aave/aave-v3-core/commit/39a707781ad710009a6ef730cc1e81f56324a8cd))
* remove safemath in all the core contracts ([eaf0ab8](https://www.github.com/aave/aave-v3-core/commit/eaf0ab8ebfde0c156ac9f0db581fbe04afe7dd62))
* remove tasks, update config, tests working ([28a2f87](https://www.github.com/aave/aave-v3-core/commit/28a2f876c6047fecca95fb093b054299eaa18a48))
* remove UiPoolDataProvider ([e6b5d55](https://www.github.com/aave/aave-v3-core/commit/e6b5d5513ac096a4a7edf7a82d3bcca34f79b192))
* remove un-used code ([a370115](https://www.github.com/aave/aave-v3-core/commit/a37011563f1ed81f7cfe66a2c220d4155df5e963))
* Remove unneeded `public` modifier from contract constructors ([207dd42](https://www.github.com/aave/aave-v3-core/commit/207dd42d66b144a7c85aa2268772ea3868e5a0a6))
* Remove unneeded returning value in Pool function ([c8b8ba0](https://www.github.com/aave/aave-v3-core/commit/c8b8ba03fcc55081824588783f8fa5bcbeaf76f2))
* remove ununsed smart contracts ([13faee9](https://www.github.com/aave/aave-v3-core/commit/13faee96ffc42b49087ebbadbfe16e946585d701))
* remove unused imports and variables ([09e72f2](https://www.github.com/aave/aave-v3-core/commit/09e72f20fe1d219f3ce418a3b7f648916f3bb778))
* Remove unused pause functions from Pool contract ([024b389](https://www.github.com/aave/aave-v3-core/commit/024b389c9ddc66ab743335cef22260829317e3ee))
* remove verify flag ([6da1acf](https://www.github.com/aave/aave-v3-core/commit/6da1acfa245b24081087af10ab4f23e3e0765da7))
* remove WalletBalanceProvider ([efa9df9](https://www.github.com/aave/aave-v3-core/commit/efa9df9b518059d38e1c6fb33c1602ec137759ef))
* remove weth gateway ([a6583c4](https://www.github.com/aave/aave-v3-core/commit/a6583c44769628f2583b97b336ba237b1c8577dc))
* removed console.log and commented test script ([c14b725](https://www.github.com/aave/aave-v3-core/commit/c14b7256db812d320c9e59cb81363802d91343a3))
* Rename `getLendingPool()` of PoolAddresesProvider ([2b94692](https://www.github.com/aave/aave-v3-core/commit/2b9469250d51449e3d76d48240b00621d52c783f))
* Rename `getLendingPoolCollateralManager()` of AddressesProvider ([e318492](https://www.github.com/aave/aave-v3-core/commit/e318492afc748d6e2274aa2e86281adc380ba638))
* Rename `getLendingPoolConfigurator()` of PoolAddressesProvider ([6a34932](https://www.github.com/aave/aave-v3-core/commit/6a3493223fcbf2d96a7ee1bc9de1bc2c9cf519bd))
* Rename `getLendingRateOracle()` of PoolAddressesProvider ([e50413e](https://www.github.com/aave/aave-v3-core/commit/e50413ef6da1c9db4cea63a4efa4b0fc5674c9b4))
* Rename `setLendingPoolCollateralManager()` of AddressesProvider ([b79b168](https://www.github.com/aave/aave-v3-core/commit/b79b1684da9604ac9011381c7a34d8587275dafe))
* Rename `setLendingPoolConfiguratorImpl()` of PoolAddressesProvider ([475fbe1](https://www.github.com/aave/aave-v3-core/commit/475fbe12323781011cd1345fa7073991bd83634e))
* Rename `setLendingPoolImpl()` of PoolAddressesProvider ([d3070f0](https://www.github.com/aave/aave-v3-core/commit/d3070f00c1e2f5d097c473ba740b2264ad165428))
* Rename `setLendingRateOracle()` of PoolAddresesProvider ([2988f28](https://www.github.com/aave/aave-v3-core/commit/2988f28feebe1ddba38c342ee68bd3ccaa29f1a8))
* Rename LendingPool to Pool on contracts ([8c4297e](https://www.github.com/aave/aave-v3-core/commit/8c4297e66d37cd9eede64c9b74d1c31ad67c70c7))
* Rename LendingPoolAddressesProvider to PoolAddressesProvider ([396ce87](https://www.github.com/aave/aave-v3-core/commit/396ce873a0f80371ad145593386161576d69532f))
* Rename LendingPoolAddressesProviderRegistry ([d39e18c](https://www.github.com/aave/aave-v3-core/commit/d39e18c5ffbbbf7819dce9f02c5a058f4e10b1eb))
* Rename LendingPoolCollateralManager ([aa00d30](https://www.github.com/aave/aave-v3-core/commit/aa00d300a74bcd0e27e2f202153cd0e2d7a74231))
* Rename LendingPoolConfigurator ([eea90d8](https://www.github.com/aave/aave-v3-core/commit/eea90d86ac8630d1357c0525bf1c549647fa32e1))
* Rename LendingPoolHarnessForVariableDebtToken ([d06d3ac](https://www.github.com/aave/aave-v3-core/commit/d06d3accd8b08df9462073772aa73c9cf59c03df))
* Rename LendingPoolStorage ([5f9b1ea](https://www.github.com/aave/aave-v3-core/commit/5f9b1eab1e4e77d95187e048c0256b2b681b2bf5))
* Rename LendingRateOracle to RateOracle ([a9c34b1](https://www.github.com/aave/aave-v3-core/commit/a9c34b1f179077422a8519555763f48aaad4a37d))
* Rename LendingRateOracle to RateOracle in contracts ([49f14d3](https://www.github.com/aave/aave-v3-core/commit/49f14d3f8ed02a8a835375d0031167dd4a9d39af))
* simplify pacakage.json ([b169a8e](https://www.github.com/aave/aave-v3-core/commit/b169a8e45ef1524e24af87b32d14467c5f4cd458))
* Split pool logic into libraries ([a78e6cc](https://www.github.com/aave/aave-v3-core/commit/a78e6cce0fc50ce5dfe9fb1d8ed3bcac4a3163f4))
* Split PoolConfigurator logic into library ([dee8fe5](https://www.github.com/aave/aave-v3-core/commit/dee8fe5b5f9c4081f8f2286d0bac778543ffa7f4))
* update dependencies ([d9ec325](https://www.github.com/aave/aave-v3-core/commit/d9ec3258e90caa0ca37240f840688a6354103b36))
* update IAToken interface with treasury getter ([2b481cb](https://www.github.com/aave/aave-v3-core/commit/2b481cb9203b2d3c3a8f1fb29b62676f0c8db99a))
* Update README ([c42b691](https://www.github.com/aave/aave-v3-core/commit/c42b691f362745145cd7715377d424fd70f22b85))
* updated genericlogic ([6a25b22](https://www.github.com/aave/aave-v3-core/commit/6a25b22b6455c62b6191143f268bde95c9d66d70))


### Bug Fixes

* add markets folder to prettier linting ([52abdf1](https://www.github.com/aave/aave-v3-core/commit/52abdf1fdbbe39cfd63247466f812d5b38f9e143))
* Add minimal comments to PoolBaseLogic and PoolHelperLogic ([68e077b](https://www.github.com/aave/aave-v3-core/commit/68e077be631485c06919f4ce30c5d838c815ffd6))
* Add minor changes to contract docs ([4f393aa](https://www.github.com/aave/aave-v3-core/commit/4f393aa2bb643524a850f55eda5a908fb529c0e4))
* add test-amm folder to prettier ([bc34d1d](https://www.github.com/aave/aave-v3-core/commit/bc34d1dc1c28a135f0b57420e6ca957f24235eca))
* Additional context in test name in `interest-overflow.spec.ts` ([c177a81](https://www.github.com/aave/aave-v3-core/commit/c177a810765fdc2b2ce1c7bfe32b8f63b2765d07))
* Clean package.json scripts ([4802cab](https://www.github.com/aave/aave-v3-core/commit/4802cab74d07e68c114f9a527cef147d9d5540c8))
* comment unused `getWalletProvider()` in `1__general.ts` ([0c3ac70](https://www.github.com/aave/aave-v3-core/commit/0c3ac7077cdb7d35caa6a8f39c102019aa156af5))
* Fix CI actions ([11027c8](https://www.github.com/aave/aave-v3-core/commit/11027c8ff834a189cc96d1191e0b0d8551042499))
* Fix deployment token helper test ([644d4df](https://www.github.com/aave/aave-v3-core/commit/644d4df7ecb7fdbc4437b6588253e64365c73f50))
* Fix docs typos in `AaveOracle` ([9622097](https://www.github.com/aave/aave-v3-core/commit/9622097b2bfc9597aca93163cd8e1926a885bd54))
* Fix docs typos of `protocol/configuration` package ([d679c22](https://www.github.com/aave/aave-v3-core/commit/d679c22dad424c76527e77abf2cbb8f76ce9972f))
* Fix errors in atoken repay tests ([d056de8](https://www.github.com/aave/aave-v3-core/commit/d056de8c0664415b91a826c44479c01410215ce3))
* Fix Mock contract name ([af0f9a8](https://www.github.com/aave/aave-v3-core/commit/af0f9a8206b4debea9dff94341a81529f4a38361))
* Fix some docs typos of `FlashLoan` package ([eb0d5d8](https://www.github.com/aave/aave-v3-core/commit/eb0d5d81505783ca58fadd23d1cc62999feb4b23))
* Fix test cases of `atoken-permit.spec.ts` ([0e0c68d](https://www.github.com/aave/aave-v3-core/commit/0e0c68de972f727ad39f36acc3e0392f42ada28e))
* Fix the `Transfer` emission code ([f51ef2c](https://www.github.com/aave/aave-v3-core/commit/f51ef2cb5fd7593fce03fb5829abd055d764a9c9))
* Fix typo of `FlashloanPremiumToProcolUpdated` event ([108e203](https://www.github.com/aave/aave-v3-core/commit/108e2038accb0c4fb399961c7b9c1bdd113f775e))
* Fix typos on imports declarations ([d29cbf5](https://www.github.com/aave/aave-v3-core/commit/d29cbf5d7c76ad1fc8a85ccd8831b8ea4af7d9e3))
* fixed flashloans tests ([d9d1890](https://www.github.com/aave/aave-v3-core/commit/d9d1890bafd31db0fd877cdf355e3b269e9f3110))
* fixed getIncentivesController inheritance chain ([4d27d55](https://www.github.com/aave/aave-v3-core/commit/4d27d558091b736c79790b6057019ed496817f6d))
* fixed github action targets ([500c448](https://www.github.com/aave/aave-v3-core/commit/500c44848851bffb39ece1a49f60e6aa885098d9))
* folder name ([dd67c22](https://www.github.com/aave/aave-v3-core/commit/dd67c22c7b2ea2597a54bfa42219df0977115110))
* formatting ([6c787df](https://www.github.com/aave/aave-v3-core/commit/6c787dfcc5c3f33ebe633a1aaeb2dd51ebf8f0fb))
* formatting ([8a2f45b](https://www.github.com/aave/aave-v3-core/commit/8a2f45b949b49d2827825b89b17379a82f99fb3e))
* Inconsistency in coverage runs ([cfc3caf](https://www.github.com/aave/aave-v3-core/commit/cfc3cafb891248e2ebe7e77ac2f55794711f92c7))
* Make `GenericLogic` internal ([e7ff741](https://www.github.com/aave/aave-v3-core/commit/e7ff741792c198d186c4f48a25531c8aa2896661))
* Make `ReserveLogic` internal ([6598274](https://www.github.com/aave/aave-v3-core/commit/6598274afd35761ca95c1240ec82a268c3659463))
* Make `ValidationLogic` library internal ([e1d1a01](https://www.github.com/aave/aave-v3-core/commit/e1d1a01e96bc245338b914e13e4bb2fdf8f4b749))
* Make `WadRayMath` and `PercentageMath` unchecked ([1a81ecf](https://www.github.com/aave/aave-v3-core/commit/1a81ecf3fcbf51d15e2f63099e976139bed42243))
* meet formatting ([650f771](https://www.github.com/aave/aave-v3-core/commit/650f771ee6f1b3ff13931c11dd2fd7c50568701b))
* Minor changes to docs ([dfc4b36](https://www.github.com/aave/aave-v3-core/commit/dfc4b3674173310ea7a427893865a74095aef756))
* minor cleanup in `atoken-edge.spec.ts` ([b17310e](https://www.github.com/aave/aave-v3-core/commit/b17310ede6424dd19461210704826ce4ae2f5da4))
* Move `dropReserve()` into `PoolHelperLogic` library ([38a9904](https://www.github.com/aave/aave-v3-core/commit/38a990498a0407585e75ac757a67fec368a30186))
* Move `finalizeTransfer()` from `Pool` into `PoolBaseLogic` library ([053d9ed](https://www.github.com/aave/aave-v3-core/commit/053d9edeca2ea0070135a7a7c1e22a53d91db732))
* Move `flashLoan()` from `Pool` to `PoolBaseLogic` library ([f9af312](https://www.github.com/aave/aave-v3-core/commit/f9af312e9111ce1f46ea9c9664299717d3a4fdf9))
* package.json formatting ([5162360](https://www.github.com/aave/aave-v3-core/commit/5162360477490f45ad9e5d2474598af8c58885ba))
* Reducing compiler warnings for mocks ([8adf3b4](https://www.github.com/aave/aave-v3-core/commit/8adf3b4f8893ecdb39bbb6b04c6ff5846f9128da))
* Refactor docstrings and imports to handle inheritance ([b943f9f](https://www.github.com/aave/aave-v3-core/commit/b943f9f4e58187eb4b4615196fc1fe38b24f140b))
* Refactor in `actions` to support effective gas price after London. ([d98fa47](https://www.github.com/aave/aave-v3-core/commit/d98fa47445099696e5a345f4403214567fbf8f4c))
* Remove `impossible` cases. Reasoning added to notion notes ([2e733be](https://www.github.com/aave/aave-v3-core/commit/2e733be24dcab8c62ccc12568804c4524fdada9e))
* remove blank file ([0286af5](https://www.github.com/aave/aave-v3-core/commit/0286af52c3f5b430180e56a4277a99d1fc3e2891))
* Remove comment mentioning `refreshDebt()` from `ReserveLogic.sol` ([5ddd74e](https://www.github.com/aave/aave-v3-core/commit/5ddd74eaa774a86dd6404234871635d641aedce2))
* Remove commented test file ([88d329e](https://www.github.com/aave/aave-v3-core/commit/88d329e63c29ece06dd263c52d771cd3dd653342))
* remove coverage.json ([915c4a7](https://www.github.com/aave/aave-v3-core/commit/915c4a7c041aaead6f940244fb70c74999d676e3))
* Remove explicit return values from `IReserveInterestRateStrategy` ([3107e2a](https://www.github.com/aave/aave-v3-core/commit/3107e2a76c55732e9e0314f8884b021a70f6dc41))
* Remove imports of `ethers` subpaths ([c731f77](https://www.github.com/aave/aave-v3-core/commit/c731f77cfd59079c167d76997215697e567b46f1))
* Remove last references to `lending` ([81aa4ce](https://www.github.com/aave/aave-v3-core/commit/81aa4ce392bd8454639f4cb02dd6314235dee07d))
* Remove last references to `LendingPool ([940352e](https://www.github.com/aave/aave-v3-core/commit/940352e53ce2cf399b99eb52dc61c7ffdc7375d8))
* Remove receive function from Proxy ([2b45a89](https://www.github.com/aave/aave-v3-core/commit/2b45a8952578765db55c025d5f71597e1e079d50))
* Remove StringLib contract since its unused ([fdb5d85](https://www.github.com/aave/aave-v3-core/commit/fdb5d852bcf1eb59a24353cd63b1096226a2b9a7))
* Remove unnecessary read ([ba61546](https://www.github.com/aave/aave-v3-core/commit/ba61546230954b98b16763b857e2bf53f42615c3))
* Remove unneeded code in MockAggregator ([a0bb375](https://www.github.com/aave/aave-v3-core/commit/a0bb375c2775575e89c8f68fe9eea79587b6cb09))
* Remove unneeded constant ([1c34b8c](https://www.github.com/aave/aave-v3-core/commit/1c34b8ca7d7af904dbb1c8e2a1806dbdac9e44da))
* Remove unused `UserConfiguration` from `Pool` ([5ffc46c](https://www.github.com/aave/aave-v3-core/commit/5ffc46cc9916442b8c0992c561e9dcbbe3c78e2e))
* Remove unused code from `deployments` contracts ([495e145](https://www.github.com/aave/aave-v3-core/commit/495e145824880397512c8cdf87b9f933b9517a94))
* Remove unused imports from `Pool` ([a6e01a5](https://www.github.com/aave/aave-v3-core/commit/a6e01a54f90b88f1dd75e3a33f77a9b08774b7ac))
* Remove unused imports of test files ([8d6782b](https://www.github.com/aave/aave-v3-core/commit/8d6782be9bc55823eacd5e8b72b7332c61c91302))
* Rename `PoolBaseLogic` library functions ([df1f197](https://www.github.com/aave/aave-v3-core/commit/df1f19780b8a88a0d6a3585e82fb6339091fd3f9))
* Rename two tests ([78b891b](https://www.github.com/aave/aave-v3-core/commit/78b891b9a2559cbfcb436f56f84eddbbfc63b5b3))
* replaced buidler references with hardhat, removed unused buidlerevm network references ([8543ff2](https://www.github.com/aave/aave-v3-core/commit/8543ff29fc6d6e3b004a18faef455dacac4fda80))
* Undo contracts code change ([b1f296e](https://www.github.com/aave/aave-v3-core/commit/b1f296e8b99ea58d8f3d040245b9ccb3dad8837c))
* Update [@return](https://www.github.com/return) doc in `IScaledBalancetoken` ([c0e9987](https://www.github.com/aave/aave-v3-core/commit/c0e9987ae26a55b3ba17e96ce0962c8c14f488af))
* Update [@return](https://www.github.com/return) doc in `LiquidationLogic` ([1998cc2](https://www.github.com/aave/aave-v3-core/commit/1998cc2500d6f15f00aea8c0a1dc5efc5a1b6d6d))
* Update [@return](https://www.github.com/return) doc in `ReserveConfiguration` ([5afa498](https://www.github.com/aave/aave-v3-core/commit/5afa498b8523f32fafa322c71421bbc8b5bc4364))
* Update `MockIncentivesController` to get of compiler warnings ([dd7bf6c](https://www.github.com/aave/aave-v3-core/commit/dd7bf6c917e9817e5eec97e791f3aac85de98d47))
* Update doc in `Helpers` ([9797019](https://www.github.com/aave/aave-v3-core/commit/9797019635701656c73ab6f5293bc1171aea2d04))
* Update docs in `ReserveLogic` ([3bfe674](https://www.github.com/aave/aave-v3-core/commit/3bfe674c699f4a1d564b3818db327ae7bd280813))
* Update docs in `ValidationLogic` ([9298d56](https://www.github.com/aave/aave-v3-core/commit/9298d56b3ebe69dfdca165871c6386e7e7b9c699))
* update hardfork and tsconfig ([0723f20](https://www.github.com/aave/aave-v3-core/commit/0723f201da643de71e6f286d8e8bb25e69f38678))
* Update hardhat and set hardfork to london ([7534c84](https://www.github.com/aave/aave-v3-core/commit/7534c849bb698aabb72d0b28a83a08f1bfcdec6f))
* Update package-lock.json ([e35f02b](https://www.github.com/aave/aave-v3-core/commit/e35f02ba9ccf9a876bc4ef8a17aff173319bcf80))
* update to 0.7.6 ([7f55456](https://www.github.com/aave/aave-v3-core/commit/7f55456ffe13a1ea8d83fe05e9dae2d926091037))
* Update to 0.8.6 ([932f591](https://www.github.com/aave/aave-v3-core/commit/932f591e8fe8c8d07565997421a04c3467195c9e))
* update variable names ([0bf6132](https://www.github.com/aave/aave-v3-core/commit/0bf613268ab3307c4e05f3a4033f1f352302faf9))
* update variable names, remove duplicate variable ([3789669](https://www.github.com/aave/aave-v3-core/commit/37896690c1f73afe23bf06858928e29a1236a793))
* Use fresh rateOracle instead of replacing old in `deployment-token-helper.spec.ts` ([d7e28e4](https://www.github.com/aave/aave-v3-core/commit/d7e28e4cd71bcce1084c75d873a40dceca72436c))
* Use mock incentives controller instead of none ([9ffce12](https://www.github.com/aave/aave-v3-core/commit/9ffce12a0d84daae66f9efb009d9db9ec8fdc87b))
* Use struct for execute repay params ([9172681](https://www.github.com/aave/aave-v3-core/commit/91726816423128d284c0bc21c1d30f72e6d734dc))
* Use struct for helper variables in execute borrow ([53a9ce8](https://www.github.com/aave/aave-v3-core/commit/53a9ce89d99c35a4d0c9986182bcbad1b3fcf491))
* Use struct for variables in `_executeWithdraw()` ([30ffa88](https://www.github.com/aave/aave-v3-core/commit/30ffa888d13e01494011c9e573b903dd90ce0a2c))



================================================
FILE: docker-compose.yml
================================================
version: '3.5'

services:
  contracts-env:
    env_file:
      - .env
    build:
      context: ./
    working_dir: /src
    command: npm run run-env
    volumes:
      - ./:/src
    environment:
      MNEMONIC: ${MNEMONIC}
      ETHERSCAN_KEY: ${ETHERSCAN_KEY}
      INFURA_KEY: ${INFURA_KEY}
      ETHERSCAN_NETWORK: ${ETHERSCAN_NETWORK}
      TENDERLY_PROJECT: ${TENDERLY_PROJECT}
      TENDERLY_USERNAME: ${TENDERLY_USERNAME}
      ALCHEMY_KEY: ${ALCHEMY_KEY}
      TENDERLY_FORK_ID: ${TENDERLY_FORK_ID}
      TENDERLY_HEAD_ID: ${TENDERLY_HEAD_ID}
      DEFENDER_API_KEY: ${DEFENDER_API_KEY}
      DEFENDER_SECRET_KEY: ${DEFENDER_SECRET_KEY}



================================================
FILE: Dockerfile
================================================
FROM ethereum/solc:0.6.12 as build-deps

FROM node:16

USER node

COPY --from=build-deps /usr/bin/solc /usr/bin/solc



================================================
FILE: hardhat.config.ts
================================================
import path from 'path';
import { HardhatUserConfig } from 'hardhat/types';
// @ts-ignore
import { accounts } from './test-wallets.js';
import { COVERAGE_CHAINID, HARDHAT_CHAINID } from './helpers/constants';
import { buildForkConfig } from './helper-hardhat-config';

require('dotenv').config();

import '@nomicfoundation/hardhat-toolbox';
import 'hardhat-deploy';
import '@tenderly/hardhat-tenderly';
import 'hardhat-contract-sizer';
import 'hardhat-dependency-compiler';
import '@nomicfoundation/hardhat-chai-matchers';

import { DEFAULT_NAMED_ACCOUNTS } from '@aave/deploy-v3';

const DEFAULT_BLOCK_GAS_LIMIT = 12450000;
const HARDFORK = 'london';

const hardhatConfig = {
  gasReporter: {
    enabled: true,
  },
  contractSizer: {
    alphaSort: true,
    runOnCompile: false,
    disambiguatePaths: false,
  },
  solidity: {
    // Docs for the compiler https://docs.soliditylang.org/en/v0.8.10/using-the-compiler.html
    version: '0.8.10',
    settings: {
      optimizer: {
        enabled: true,
        runs: 100000,
      },
      evmVersion: 'london',
    },
  },
  typechain: {
    outDir: 'types',
    target: 'ethers-v5',
  },
  mocha: {
    timeout: 0,
    bail: true,
  },
  tenderly: {
    project: process.env.TENDERLY_PROJECT || '',
    username: process.env.TENDERLY_USERNAME || '',
    forkNetwork: '1', //Network id of the network we want to fork
  },
  networks: {
    coverage: {
      url: 'http://localhost:8555',
      chainId: COVERAGE_CHAINID,
      throwOnTransactionFailures: true,
      throwOnCallFailures: true,
    },
    hardhat: {
      hardfork: HARDFORK,
      blockGasLimit: DEFAULT_BLOCK_GAS_LIMIT,
      gas: DEFAULT_BLOCK_GAS_LIMIT,
      gasPrice: 8000000000,
      chainId: HARDHAT_CHAINID,
      throwOnTransactionFailures: true,
      throwOnCallFailures: true,
      forking: buildForkConfig(),
      allowUnlimitedContractSize: true,
      accounts: accounts.map(({ secretKey, balance }: { secretKey: string; balance: string }) => ({
        privateKey: secretKey,
        balance,
      })),
    },
    ganache: {
      url: 'http://ganache:8545',
      accounts: {
        mnemonic: 'fox sight canyon orphan hotel grow hedgehog build bless august weather swarm',
        path: "m/44'/60'/0'/0",
        initialIndex: 0,
        count: 20,
      },
    },
  },
  namedAccounts: {
    ...DEFAULT_NAMED_ACCOUNTS,
  },
  external: {
    contracts: [
      {
        artifacts: './temp-artifacts',
        deploy: 'node_modules/@aave/deploy-v3/dist/deploy',
      },
    ],
  },
};

export default hardhatConfig;



================================================
FILE: helper-hardhat-config.ts
================================================
// @ts-ignore
import { HardhatNetworkForkingUserConfig, HardhatUserConfig } from 'hardhat/types';
import { eEthereumNetwork, iParamsPerNetwork } from './helpers/types';

require('dotenv').config();

const INFURA_KEY = process.env.INFURA_KEY || '';
const ALCHEMY_KEY = process.env.ALCHEMY_KEY || '';
const TENDERLY_FORK_ID = process.env.TENDERLY_FORK_ID || '';
const FORK = process.env.FORK || '';
const FORK_BLOCK_NUMBER = process.env.FORK_BLOCK_NUMBER
  ? parseInt(process.env.FORK_BLOCK_NUMBER)
  : 0;

const GWEI = 1000 * 1000 * 1000;

export const buildForkConfig = (): HardhatNetworkForkingUserConfig | undefined => {
  let forkMode: HardhatNetworkForkingUserConfig | undefined;
  if (FORK) {
    forkMode = {
      url: NETWORKS_RPC_URL[FORK as eEthereumNetwork],
    };
    if (FORK_BLOCK_NUMBER || BLOCK_TO_FORK[FORK as eEthereumNetwork]) {
      forkMode.blockNumber = FORK_BLOCK_NUMBER || BLOCK_TO_FORK[FORK as eEthereumNetwork];
    }
  }
  return forkMode;
};

export const NETWORKS_RPC_URL: iParamsPerNetwork<string> = {
  [eEthereumNetwork.kovan]: ALCHEMY_KEY
    ? `https://eth-kovan.alchemyapi.io/v2/${ALCHEMY_KEY}`
    : `https://kovan.infura.io/v3/${INFURA_KEY}`,
  [eEthereumNetwork.ropsten]: ALCHEMY_KEY
    ? `https://eth-ropsten.alchemyapi.io/v2/${ALCHEMY_KEY}`
    : `https://ropsten.infura.io/v3/${INFURA_KEY}`,
  [eEthereumNetwork.main]: ALCHEMY_KEY
    ? `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`
    : `https://mainnet.infura.io/v3/${INFURA_KEY}`,
  [eEthereumNetwork.coverage]: 'http://localhost:8555',
  [eEthereumNetwork.hardhat]: 'http://localhost:8545',
  [eEthereumNetwork.tenderlyMain]: `https://rpc.tenderly.co/fork/${TENDERLY_FORK_ID}`,
};

export const BLOCK_TO_FORK: iParamsPerNetwork<number | undefined> = {
  [eEthereumNetwork.main]: 12406069,
  [eEthereumNetwork.kovan]: undefined,
  [eEthereumNetwork.ropsten]: undefined,
  [eEthereumNetwork.coverage]: undefined,
  [eEthereumNetwork.hardhat]: undefined,
  [eEthereumNetwork.tenderlyMain]: 12406069,
};



================================================
FILE: lib.tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es2020",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "outDir": "dist/",
    "importHelpers": false,
    "declaration": true,
    "declarationMap": true,
    "declarationDir": "dist/types",
    "typeRoots": ["./typechain/*.d.ts", "./node_modules/@types"]
  },
  "include": ["helpers", "types", "hardhat.config.ts"]
}



================================================
FILE: LICENSE.md
================================================
Business Source License 1.1

License text copyright (c) 2017 MariaDB Corporation Ab, All Rights Reserved.
"Business Source License" is a trademark of MariaDB Corporation Ab.

---

Parameters

Licensor: Aave

Licensed Work: Aave V3 Core. The Licensed Work is (c) 2022 Aave

Additional Use Grant: Any uses listed and defined at this [LICENSE](./LICENSE.md)

Change Date: The earlier of 27 January 2023 or a date specified at v3-license-date.aave.eth

Change License: MIT

---

Terms

The Licensor hereby grants you the right to copy, modify, create derivative
works, redistribute, and make non-production use of the Licensed Work. The
Licensor may make an Additional Use Grant, above, permitting limited
production use.

Effective on the Change Date, or the fourth anniversary of the first publicly
available distribution of a specific version of the Licensed Work under this
License, whichever comes first, the Licensor hereby grants you rights under
the terms of the Change License, and the rights granted in the paragraph
above terminate.

If your use of the Licensed Work does not comply with the requirements
currently in effect as described in this License, you must purchase a
commercial license from the Licensor, its affiliated entities, or authorized
resellers, or you must refrain from using the Licensed Work.

All copies of the original and modified Licensed Work, and derivative works
of the Licensed Work, are subject to this License. This License applies
separately for each version of the Licensed Work and the Change Date may vary
for each version of the Licensed Work released by Licensor.

You must conspicuously display this License on each original or modified copy
of the Licensed Work. If you receive the Licensed Work in original or
modified form from a third party, the terms and conditions set forth in this
License apply to your use of that work.

Any use of the Licensed Work in violation of this License will automatically
terminate your rights under this License for the current and all other
versions of the Licensed Work.

This License does not grant you any right in any trademark or logo of
Licensor or its affiliates (provided that you may use a trademark or logo of
Licensor as expressly required by this License).

TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
AN "AS IS" BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
TITLE.

MariaDB hereby grants you permission to use this License’s text to license
your works, and to refer to it using the trademark "Business Source License",
as long as you comply with the Covenants of Licensor below.

---

Covenants of Licensor

In consideration of the right to use this License’s text and the "Business
Source License" name and trademark, Licensor covenants to MariaDB, and to all
other recipients of the licensed work to be provided by Licensor:

1. To specify as the Change License the GPL Version 2.0 or any later version,
   or a license that is compatible with GPL Version 2.0 or a later version,
   where "compatible" means that software provided under the Change License can
   be included in a program with software provided under GPL Version 2.0 or a
   later version. Licensor may specify additional Change Licenses without
   limitation.

2. To either: (a) specify an additional grant of rights to use that does not
   impose any additional restriction on the right granted in this License, as
   the Additional Use Grant; or (b) insert the text "None".

3. To specify a Change Date.

4. Not to modify this License in any other way.

---

Notice

The Business Source License (this document, or the "License") is not an Open
Source license. However, the Licensed Work will eventually be made available
under an Open Source License, as stated in this License.



================================================
FILE: package.json
================================================
{
  "name": "@aave/core-v3",
  "version": "1.19.4",
  "description": "Aave Protocol V3 core smart contracts",
  "files": [
    "contracts",
    "artifacts",
    "types",
    "dist"
  ],
  "main": "dist/helpers/index.js",
  "engines": {
    "node": ">=16.0.0"
  },
  "scripts": {
    "size": "npm run compile && npm run hardhat size-contracts",
    "run-env": "npm i && tail -f /dev/null",
    "hardhat": "hardhat",
    "compile": "SKIP_LOAD=true hardhat compile",
    "compile:clean": "npm run ci:clean && npm run compile",
    "console:fork": "FORK=main hardhat console",
    "prettier:check": "prettier -c .",
    "prettier:write": "prettier -w .",
    "coverage": ". ./setup-test-env.sh && COVERAGE=true npx hardhat coverage --temp temp-artifacts --testfiles test-suites/emptyrun.coverage.ts && rm -rf coverage.json coverage/ && COVERAGE=true npx hardhat coverage --temp temp-artifacts --testfiles 'test-suites/*.spec.ts'",
    "test": ". ./setup-test-env.sh && TS_NODE_TRANSPILE_ONLY=1 hardhat test test-suites/*.spec.ts",
    "test-scenarios": ". ./setup-test-env.sh && npx hardhat test test-suites/__setup.spec.ts test-suites/scenario.spec.ts",
    "test-l2pool": ". ./setup-test-env.sh && npx hardhat test test-suites/__setup.spec.ts test-suites/pool-l2.spec.ts",
    "test-subgraph:scenarios": ". ./setup-test-env.sh  && hardhat --network hardhatevm_docker test test-suites/__setup.spec.ts test-suites/subgraph-scenarios.spec.ts",
    "ci:test": ". ./setup-test-env.sh  && npm run test",
    "ci:clean": "rm -rf ./artifacts ./cache ./types ./temp-artifacts",
    "prepare": "husky install",
    "build": "tsc --project lib.tsconfig.json",
    "prepublish": "npm run compile && npm run build"
  },
  "devDependencies": {
    "@aave/deploy-v3": "1.56.1",
    "@aave/periphery-v3": "2.5.1",
    "@ethersproject/bignumber": "^5.6.2",
    "@nomicfoundation/hardhat-chai-matchers": "1.0.5",
    "@nomicfoundation/hardhat-toolbox": "^2.0.0",
    "@tenderly/hardhat-tenderly": "1.1.0-beta.5",
    "@types/chai": "4.2.11",
    "@types/lowdb": "1.0.9",
    "@types/node": "14.0.5",
    "bluebird": "^3.7.2",
    "dotenv": "8.2.0",
    "eth-sig-util": "2.5.3",
    "ethereumjs-util": "7.0.2",
    "hardhat": "2.12.2",
    "hardhat-contract-sizer": "2.0.3",
    "hardhat-dependency-compiler": "1.1.2",
    "hardhat-deploy": "0.11.12",
    "husky": "8.0.3",
    "jsondiffpatch": "0.4.1",
    "lint-staged": "13.1.0",
    "prettier": "2.8.4",
    "prettier-plugin-solidity": "1.1.3",
    "ts-node": "8.10.2",
    "tslint": "6.1.2",
    "tslint-config-prettier": "1.18.0",
    "tslint-plugin-prettier": "2.3.0",
    "typescript": "^4.5.0"
  },
  "author": "Aave",
  "contributors": [
    "Emilio Frangella <emilio@aave.com>",
    "Miguel Martinez <miguel@aave.com>",
    "Steven Valeri <steven@aave.com>",
    "David Racero <david.k@aave.com>",
    "Lasse Herskind <lasse@aave.com>",
    "Mark Hinschberger <mark@aave.com>",
    "Peter Michael <peter.dev@aave.com>",
    "Pol Sendra <pol@aave.com>"
  ],
  "license": "BUSL-1.1",
  "keywords": [
    "aave",
    "protocol",
    "protocol-v3",
    "core-v3",
    "ethereum",
    "solidity"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/aave/aave-v3-core"
  },
  "lint-staged": {
    "*.{ts,js,md,sol}": "prettier --write"
  }
}



================================================
FILE: setup-test-env.sh
================================================
#!/bin/bash

# @dev
# This bash script setups the needed artifacts to use
# the @aave/deploy-v3 package as source of deployment
# scripts for testing or coverage purposes.
#
# A separate  artifacts directory was created 
# due at running tests all external artifacts
# located at /artifacts are deleted,  causing
# the deploy library to not find the external
# artifacts. 

echo "[BASH] Setting up testnet environment"

if [ ! "$COVERAGE" = true ]; then
    # remove hardhat and artifacts cache
    npm run ci:clean

    # compile @aave/core-v3 contracts
    npm run compile
else
    echo "[BASH] Skipping compilation to keep coverage artifacts"
fi

# Copy artifacts into separate directory to allow
# the hardhat-deploy library load all artifacts without duplicates 
mkdir -p temp-artifacts
cp -r artifacts/* temp-artifacts

# Import external @aave/periphery artifacts
mkdir -p temp-artifacts/periphery
cp -r node_modules/@aave/periphery-v3/artifacts/contracts/* temp-artifacts/periphery

# Import external @aave/deploy artifacts
mkdir -p temp-artifacts/deploy
cp -r node_modules/@aave/deploy-v3/artifacts/contracts/* temp-artifacts/deploy

# Export MARKET_NAME variable to use Aave market as testnet deployment setup
export MARKET_NAME="Test"
export ENABLE_REWARDS="false"
echo "[BASH] Testnet environment ready"


================================================
FILE: test-wallets.js
================================================
const balance = '1000000000000000000000000';

module.exports = {
  accounts: [
    {
      secretKey: '0xc5e8f61d1ab959b397eecc0a37a6517b8e67a0e7cf1f4bce5591f3ed80199122',
      balance,
    },
    {
      secretKey: '0xd49743deccbccc5dc7baa8e69e5be03298da8688a15dd202e20f15d5e0e9a9fb',
      balance,
    },
    {
      secretKey: '0x23c601ae397441f3ef6f1075dcb0031ff17fb079837beadaf3c84d96c6f3e569',
      balance,
    },
    {
      secretKey: '0xee9d129c1997549ee09c0757af5939b2483d80ad649a0eda68e8b0357ad11131',
      balance,
    },
    {
      secretKey: '0x87630b2d1de0fbd5044eb6891b3d9d98c34c8d310c852f98550ba774480e47cc',
      balance,
    },
    {
      secretKey: '0x275cc4a2bfd4f612625204a20a2280ab53a6da2d14860c47a9f5affe58ad86d4',
      balance,
    },
    {
      secretKey: '0xaee25d55ce586148a853ca83fdfacaf7bc42d5762c6e7187e6f8e822d8e6a650',
      balance,
    },
    {
      secretKey: '0xa2e0097c961c67ec197b6865d7ecea6caffc68ebeb00e6050368c8f67fc9c588',
      balance,
    },
  ],
};



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es2019",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "outDir": "dist",
    "noImplicitAny": false,
    "resolveJsonModule": true,
    "declaration": true,
    "declarationDir": "./types"
  },
  "include": ["./scripts", "./test-suites", "./tasks", "./helpers"],
  "files": [
    "./hardhat.config.ts",
    "node_modules/@nomiclabs/hardhat-etherscan/src/type-extensions.ts",
    "node_modules/hardhat-gas-reporter/src/type-extensions.ts"
  ]
}



================================================
FILE: tslint.json
================================================
{
  "extends": ["tslint-config-prettier"],
  "rulesDirectory": ["tslint-plugin-prettier"],
  "rules": {
    "prettier": true,
    "max-line-length": [true, 100],
    "import-name": false
  },
  "linterOptions": {
    "exclude": ["src/migration/**", "src/contracts/ABI/**"]
  }
}



================================================
FILE: .gitlab-ci.yml
================================================
stages:
  - checks
  - prepare
  - publish

variables:
  IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}

lint:
  stage: checks
  tags:
    - aave-build-runner
  before_script:
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml build
  script:
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml run contracts-env npm run prettier:check
  after_script:
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml run contracts-env npm run ci:clean
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml down

test:
  stage: checks
  tags:
    - aave-build-runner
  before_script:
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml build
  script:
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml run contracts-env npm run ci:test
  after_script:
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml run contracts-env npm run ci:clean
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml down
  only:
    - master
    - merge_requests
deploy-mainnet-fork:
  tags:
    - aave-build-runner
  stage: checks
  before_script:
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml build
  script:
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml run contracts-env npm run aave:fork:main
  after_script:
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml run contracts-env npm run ci:clean
    - docker-compose -p ${CI_JOB_ID} -f docker-compose.test.yml down
  only:
    - master
    - merge_requests

certora-test:
  stage: checks
  image: python:latest
  before_script:
    - apt-get update || apt-get update
    - apt-get install -y software-properties-common
    - pip3 install certora-cli
    - wget https://github.com/ethereum/solidity/releases/download/v0.6.12/solc-static-linux
    - chmod +x solc-static-linux
    - mv solc-static-linux /usr/bin/solc
    - export PATH=$PATH:/usr/bin/solc/solc-static-linux
  script:
    - certoraRun specs/harness/StableDebtTokenHarness.sol:StableDebtTokenHarness --solc_args "['--optimize']" --verify StableDebtTokenHarness:specs/StableDebtToken.spec --settings -assumeUnwindCond,-b=4 --cache StableDebtToken --cloud
    - certoraRun specs/harness/UserConfigurationHarness.sol --verify UserConfigurationHarness:specs/UserConfiguration.spec --solc_args "['--optimize']" --settings -useBitVectorTheory --cache UserConfiguration --cloud
    - certoraRun contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken specs/harness/PoolHarnessForVariableDebtToken.sol --solc_args "['--optimize']" --link VariableDebtToken:POOL=PoolHarnessForVariableDebtToken --verify VariableDebtToken:specs/VariableDebtToken.spec --settings -assumeUnwindCond,-useNonLinearArithmetic,-b=4 --cache VariableDebtToken --cloud
  only:
    - master
    - merge_requests

prepare:
  stage: prepare
  tags:
    - docker-builder
  script:
    - docker build -t ${IMAGE} .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push ${IMAGE}
  only:
    - master

publish:
  image: ${IMAGE}
  tags:
    - docker
  stage: publish
  script:
    - npm ci
    - echo //registry.npmjs.org/:_authToken=${NPM_V2_PACKAGES_TOKEN} > .npmrc
    - npm run compile
    - ${VERSION}
    - npm publish --access public
  only:
    - master



================================================
FILE: .npmrc
================================================
engine-strict=true
save-exact=true


================================================
FILE: .nvmrc
================================================
v16.13.0



================================================
FILE: .prettierignore
================================================
artifacts
cache
node_modules
types
deployments
temp-artifacts
dist
Certora
*.json
CHANGELOG.md
.prettierignore
.solcover.js


================================================
FILE: .prettierrc
================================================
{
  "printWidth": 100,
  "trailingComma": "es5",
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "overrides": [
    {
      "files": "*.ts",
      "options": {
        "bracketSpacing": true
      }
    },
    {
      "files": "*.sol",
      "options": {
        "semi": true,
        "printWidth": 100
      }
    }
  ]
}



================================================
FILE: .solcover.js
================================================
const accounts = require(`./test-wallets.js`).accounts;
const cp = require('child_process');

module.exports = {
  configureYulOptimizer: true,
  skipFiles: ['./mocks', './interfaces', './dependencies'],
  mocha: {
    enableTimeouts: false,
  },
  providerOptions: {
    accounts,
  },
  onCompileComplete: function () {
    console.log('onCompileComplete hook');
    cp.execSync('. ./setup-test-env.sh', {stdio: 'inherit'});
  },
};



================================================
FILE: certora/README.md
================================================
# Running the certora verification tool

These instructions detail the process for running CVT on the (TODO: example) contracts.

Documentation for CVT and the specification language are available
[here](https://certora.atlassian.net/wiki/spaces/CPD/overview)

## Running the verification

The scripts in the `certora/scripts` directory are used to submit verification
jobs to the Certora verification service. These scripts should be run from the
root directory; for example by running

```sh
sh certora/scripts/verifyExampleContract.sh <arguments>
```

TODO: update example above, and add any special information for this customer's
setup

After the job is complete, the results will be available on
[the staging Certora portal](https://vaas-stg.certora.com/) (by default, the
scripts run on our staging cloud).

## Adapting to changes

Some of our rules require the code to be simplified in various ways. Our
primary tool for performing these simplifications is to run verification on a
contract that extends the original contracts and overrides some of the methods.
These "harness" contracts can be found in the `certora/harness` directory.

This pattern does require some modifications to the original code: some methods
need to be made virtual or public, for example. These changes are handled by
applying a patch to the code before verification.

When one of the `verify` scripts is executed, it first applies the patch file
`certora/applyHarness.patch` to the `contracts` directory, placing the output
in the `certora/munged` directory. We then verify the contracts in the
`certora/munged` directory.

If the original contracts change, it is possible to create a conflict with the
patch. In this case, the verify scripts will report an error message and output
rejected changes in the `munged` directory. After merging the changes, run
`make record` in the `certora` directory; this will regenerate the patch file,
which can then be checked into git.

Note: there have been reports of unexpected behavior on mac, see
[issue CUST-62](https://certora.atlassian.net/browse/CUST-62?atlOrigin=eyJpIjoiZWI1MGFjNGZkZGE0NGFlNjkwYjUwYjY2NmE4ZmQ1OTIiLCJwIjoiaiJ9).




================================================
FILE: certora/applyHarness.patch
================================================
diff -ruN .gitignore .gitignore
--- .gitignore	1970-01-01 02:00:00
+++ .gitignore	2023-01-25 13:43:43
@@ -0,0 +1,2 @@
+*
+!.gitignore
diff -ruN protocol/tokenization/AToken.sol protocol/tokenization/AToken.sol
--- protocol/tokenization/AToken.sol	2023-01-29 12:42:35
+++ protocol/tokenization/AToken.sol	2023-01-29 12:49:56
@@ -71,16 +71,16 @@
 
     _domainSeparator = _calculateDomainSeparator();
 
-    emit Initialized(
-      underlyingAsset,
-      address(POOL),
-      treasury,
-      address(incentivesController),
-      aTokenDecimals,
-      aTokenName,
-      aTokenSymbol,
-      params
-    );
+    // emit Initialized(
+    //   underlyingAsset,
+    //   address(POOL),
+    //   treasury,
+    //   address(incentivesController),
+    //   aTokenDecimals,
+    //   aTokenName,
+    //   aTokenSymbol,
+    //   params
+    // );
   }
 
   /// @inheritdoc IAToken
diff -ruN protocol/tokenization/StableDebtToken.sol protocol/tokenization/StableDebtToken.sol
--- protocol/tokenization/StableDebtToken.sol	2023-01-11 13:38:21
+++ protocol/tokenization/StableDebtToken.sol	2023-01-29 12:50:20
@@ -336,7 +336,7 @@
    * @param avgRate The average rate at which the total supply increases
    * @return The debt balance of the user since the last burn/mint action
    */
-  function _calcTotalSupply(uint256 avgRate) internal view returns (uint256) {
+  function _calcTotalSupply(uint256 avgRate) internal virtual view returns (uint256) {
     uint256 principalSupply = super.totalSupply();
 
     if (principalSupply == 0) {



================================================
FILE: certora/Makefile
================================================
default: help

PATCH         = applyHarness.patch
CONTRACTS_DIR = ../contracts
MUNGED_DIR    = munged

help:
	@echo "usage:"
	@echo "  make clean:  remove all generated files (those ignored by git)"
	@echo "  make $(MUNGED_DIR): create $(MUNGED_DIR) directory by applying the patch file to $(CONTRACTS_DIR)"
	@echo "  make record: record a new patch file capturing the differences between $(CONTRACTS_DIR) and $(MUNGED_DIR)"

munged:  $(wildcard $(CONTRACTS_DIR)/*.sol) $(PATCH)
	rm -rf $@
	cp -r $(CONTRACTS_DIR) $@
	patch -p0 -d $@ < $(PATCH)

record:
	diff -ruN $(CONTRACTS_DIR) $(MUNGED_DIR) | sed 's+\.\./contracts/++g' | sed 's+munged/++g' > $(PATCH)

clean:
	git clean -fdX
	touch $(PATCH)




================================================
FILE: certora/harness/ATokenHarness.sol
================================================
// SPDX-License-Identifier: agpl-3.0
pragma solidity 0.8.10;

import {Pool} from '../munged/protocol/pool/Pool.sol';
import {AToken} from '../munged/protocol/tokenization/AToken.sol';
import {WadRayMath} from '../munged/protocol/libraries/math/WadRayMath.sol';

/**
 * @title Certora harness for Aave ERC20 AToken
 *
 * @dev Certora's harness contract for the verification of Aave ERC20 AToken.
 */
contract ATokenHarness is AToken {

using WadRayMath for uint256;

  constructor(Pool pool) public AToken(pool) {}

  function scaledTotalSupply() public view override returns (uint256) {
    uint256 val = super.scaledTotalSupply();
    return val;
  }

  function additionalData(address user) public view returns (uint128) {
    return _userState[user].additionalData;
  }
  
  function scaledBalanceOfToBalanceOf(uint256 bal) public view returns (uint256) {
    return bal.rayMul(POOL.getReserveNormalizedIncome(_underlyingAsset));
  }
}


================================================
FILE: certora/harness/PoolHarness.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.10;

import {Pool} from '../munged/protocol/pool/Pool.sol';
import {DataTypes} from '../munged/protocol/libraries/types/DataTypes.sol';
import {ReserveLogic} from '../munged/protocol/libraries/logic/ReserveLogic.sol';
import {IPoolAddressesProvider} from '../munged/interfaces/IPoolAddressesProvider.sol';

contract PoolHarness is Pool {
    
    using ReserveLogic for DataTypes.ReserveData;
    using ReserveLogic for DataTypes.ReserveCache;

    constructor(IPoolAddressesProvider provider) public Pool(provider){}

    function getCurrScaledVariableDebt(address asset) public view returns (uint256){
        DataTypes.ReserveData storage reserve = _reserves[asset];
        DataTypes.ReserveCache memory reserveCache = reserve.cache();
        return reserveCache.currScaledVariableDebt;
    }
}



================================================
FILE: certora/harness/ReserveConfigurationHarness.sol
================================================
pragma solidity 0.8.10;
pragma experimental ABIEncoderV2;

import {ReserveConfiguration} from '../munged/protocol/libraries/configuration/ReserveConfiguration.sol';
import {DataTypes} from '../munged/protocol/libraries/types/DataTypes.sol';

contract ReserveConfigurationHarness {
    DataTypes.ReserveConfigurationMap public reservesConfig;
    mapping(uint256 => uint256) public intSettersUpperBounds;
    mapping(uint256 => uint256) public intSetterslowerBounds;
    mapping(uint256 => uint256) public boolSettersCompare;
    
    // Sets the Loan to Value of the reserve
    function setLtv(uint256 ltv) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setLtv(configNew, ltv);
        reservesConfig.data = configNew.data;
    }

    // Gets the Loan to Value of the reserve
    function getLtv() public view returns (uint256) {
        return ReserveConfiguration.getLtv(reservesConfig);
    }

    // Sets the liquidation threshold of the reserve
    function setLiquidationThreshold(uint256 threshold) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setLiquidationThreshold(configNew, threshold);
        reservesConfig.data = configNew.data;
    }

    // Gets the liquidation threshold of the reserve
    function getLiquidationThreshold() public view returns (uint256) {
        return ReserveConfiguration.getLiquidationThreshold(reservesConfig);
    }

    // Sets the liquidation bonus of the reserve
    function setLiquidationBonus(uint256 bonus) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setLiquidationBonus(configNew, bonus);
        reservesConfig.data = configNew.data;
    }

    // Gets the liquidation bonus of the reserve
    function getLiquidationBonus() public view returns (uint256) {
        return ReserveConfiguration.getLiquidationBonus(reservesConfig);
    }

    // Sets the decimals of the underlying asset of the reserve
    function setDecimals(uint256 decimals) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setDecimals(configNew, decimals);
        reservesConfig.data = configNew.data;
    }

    // Gets the decimals of the underlying asset of the reserve
    function getDecimals() public view returns (uint256) {
        return ReserveConfiguration.getDecimals(reservesConfig);
    }

    // Sets the active state of the reserve
    function setActive(bool active) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setActive(configNew, active);
        reservesConfig.data = configNew.data;
    }

    // Gets the active state of the reserve
    function getActive() public view returns (bool) {
        return ReserveConfiguration.getActive(reservesConfig);
    }

    // Sets the frozen state of the reserve
    function setFrozen(bool frozen) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setFrozen(configNew, frozen);
        reservesConfig.data = configNew.data;
    }

    // Gets the frozen state of the reserve
    function getFrozen() public view returns (bool) {
        return ReserveConfiguration.getFrozen(reservesConfig);
    }

    // Sets the paused state of the reserve
    function setPaused(bool paused) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setPaused(configNew, paused);
        reservesConfig.data = configNew.data;
    }

    // Gets the paused state of the reserve
    function getPaused() public view returns (bool) {
        return ReserveConfiguration.getPaused(reservesConfig);
    }

    // Sets the borrowable in isolation flag for the reserve.
    function setBorrowableInIsolation(bool borrowable) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setBorrowableInIsolation(configNew, borrowable);
        reservesConfig.data = configNew.data;
    }

    // Gets the borrowable in isolation flag for the reserve.
    function getBorrowableInIsolation() public view returns (bool) {
        return ReserveConfiguration.getBorrowableInIsolation(reservesConfig);
    }

    // Sets the siloed borrowing flag for the reserve.
    function setSiloedBorrowing(bool siloed) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setSiloedBorrowing(configNew, siloed);
        reservesConfig.data = configNew.data;
    }

    // Gets the siloed borrowing flag for the reserve.
    function getSiloedBorrowing() public view returns (bool) {
        return ReserveConfiguration.getSiloedBorrowing(reservesConfig);
    }

    // Enables or disables borrowing on the reserve
    function setBorrowingEnabled(bool enabled) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setBorrowingEnabled(configNew, enabled);
        reservesConfig.data = configNew.data;
    }

    // Gets the borrowing state of the reserve
    function getBorrowingEnabled() public view returns (bool) {
        return ReserveConfiguration.getBorrowingEnabled(reservesConfig);
    }

    // Enables or disables stable rate borrowing on the reserve
    function setStableRateBorrowingEnabled(bool enabled) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setStableRateBorrowingEnabled(configNew, enabled);
        reservesConfig.data = configNew.data;
    }

    // Gets the stable rate borrowing state of the reserve
    function getStableRateBorrowingEnabled() public view returns (bool) {
        return ReserveConfiguration.getStableRateBorrowingEnabled(reservesConfig);
    }

    // Sets the reserve factor of the reserve
    function setReserveFactor(uint256 reserveFactor) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setReserveFactor(configNew, reserveFactor);
        reservesConfig.data = configNew.data;
    }

    // Gets the reserve factor of the reserve
    function getReserveFactor() public view returns (uint256) {
        return ReserveConfiguration.getReserveFactor(reservesConfig);
    }

    // Sets the borrow cap of the reserve
    function setBorrowCap(uint256 borrowCap) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setBorrowCap(configNew, borrowCap);
        reservesConfig.data = configNew.data;
    }

    // Gets the borrow cap of the reserve
    function getBorrowCap() public view returns (uint256) {
        return ReserveConfiguration.getBorrowCap(reservesConfig);
    }

    // Sets the supply cap of the reserve
    function setSupplyCap(uint256 supplyCap) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setSupplyCap(configNew, supplyCap);
        reservesConfig.data = configNew.data;
    }

    // Gets the supply cap of the reserve
    function getSupplyCap() public view returns (uint256) {
        return ReserveConfiguration.getSupplyCap(reservesConfig);
    }

    // Sets the debt ceiling in isolation mode for the asset
    function setDebtCeiling(uint256 ceiling) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setDebtCeiling(configNew, ceiling);
        reservesConfig.data = configNew.data;
    }

    // Gets the debt ceiling for the asset if the asset is in isolation mode
    function getDebtCeiling() public view returns (uint256) {
        return ReserveConfiguration.getDebtCeiling(reservesConfig);
    }

    // Sets the liquidation protocol fee of the reserve
    function setLiquidationProtocolFee(uint256 liquidationProtocolFee) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setLiquidationProtocolFee(configNew, liquidationProtocolFee);
        reservesConfig.data = configNew.data;
    }

    // Gets the liquidation protocol fee
    function getLiquidationProtocolFee() public view returns (uint256) {
        return ReserveConfiguration.getLiquidationProtocolFee(reservesConfig);
    }

    // Sets the unbacked mint cap of the reserve
    function setUnbackedMintCap(uint256 unbackedMintCap) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setUnbackedMintCap(configNew, unbackedMintCap);
        reservesConfig.data = configNew.data;
    }

    // Gets the unbacked mint cap of the reserve
    function getUnbackedMintCap() public view returns (uint256) {
        return ReserveConfiguration.getUnbackedMintCap(reservesConfig);
    }

    // Sets the eMode asset category
    function setEModeCategory(uint256 category) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setEModeCategory(configNew, category);
        reservesConfig.data = configNew.data;
    }

    // Gets the eMode asset category
    function getEModeCategory() public view returns (uint256) {
        return ReserveConfiguration.getEModeCategory(reservesConfig);
    }

    // Sets the flashloanble flag for the reserve
    function setFlashLoanEnabled(bool flashLoanEnabled) public {
        DataTypes.ReserveConfigurationMap memory configNew = reservesConfig;
        ReserveConfiguration.setFlashLoanEnabled(configNew, flashLoanEnabled);
        reservesConfig.data = configNew.data;
    }

    // Gets the flashloanable flag for the reserve
    function getFlashLoanEnabled() public view returns (bool) {
        return ReserveConfiguration.getFlashLoanEnabled(reservesConfig);
    }

    // returns the entire data in form of unit256
    function getData() public view returns (uint256) {
        return reservesConfig.data;
    }

    // Executes a setter of an int parameter according to the given id
    function executeIntSetterById(uint256 id, uint256 val) public {
        require(id >= 0 && id <= 10);
        if (id == 0) {
        setLtv(val);
        } else if (id == 1) {
        setLiquidationThreshold(val);
        } else if (id == 2) {
        setLiquidationBonus(val);
        } else if (id == 3) {
        setDecimals(val);
        } else if (id == 4) {
        setReserveFactor(val);
        } else if (id == 5) {
        setBorrowCap(val);
        } else if (id == 6) {
        setSupplyCap(val);
        } else if (id == 7) {
        setLiquidationProtocolFee(val);
        } else if (id == 8) {
        setEModeCategory(val);
        } else if (id == 9) {
        setUnbackedMintCap(val);
        } else {
        setDebtCeiling(val);
        }
    }

    // Executes a getter of an int parameter according to the given id
    function executeIntGetterById(uint256 id) public view returns(uint256) {
        require(id >= 0 && id <= 10);
        if (id == 0) {
        return getLtv();
        } else if (id == 1) {
        return getLiquidationThreshold();
        } else if (id == 2) {
        return getLiquidationBonus();
        } else if (id == 3) {
        return getDecimals();
        } else if (id == 4) {
        return getReserveFactor();
        } else if (id == 5) {
        return getBorrowCap();
        } else if (id == 6) {
        return getSupplyCap();
        } else if (id == 7) {
        return getLiquidationProtocolFee();
        } else if (id == 8) {
        return getEModeCategory();
        } else if (id == 9) {
        return getUnbackedMintCap();
        } else {
        return getDebtCeiling();
        }
    }

    // Executes a setter of a bool parameter according to the given id
    function executeBoolSetterById(uint256 id, bool val) public {
        require(id >= 0 && id <= 5);
        if (id == 0) {
        setActive(val);
        } else if (id == 1) {
        setFrozen(val);
        } else if (id == 2) {
        setBorrowingEnabled(val);
        } else if (id == 3) {
        setStableRateBorrowingEnabled(val);
        } else if (id == 4) {
        setPaused(val);
        } else {
        setBorrowableInIsolation(val);
        }
    }

    // Executes a getter of a bool parameter according to the given id
    function executeBoolGetterById(uint256 id) public view returns(bool) {
        require(id >= 0 && id <= 5);
        if (id == 0) {
        return getActive();
        } else if (id == 1) {
        return getFrozen();
        } else if (id == 2) {
        return getBorrowingEnabled();
        } else if (id == 3) {
        return getStableRateBorrowingEnabled();
        } else if (id == 4) {
        return getPaused();
        } else {
        return getBorrowableInIsolation();
        }
    }
}


================================================
FILE: certora/harness/SimpleERC20.sol
================================================
// SPDX-License-Identifier: agpl-3.0
pragma solidity 0.8.10;

import {IERC20} from '../munged/dependencies/openzeppelin/contracts/IERC20.sol';
/**
A simple ERC implementation used as the underlying_asset for the verification process.
 */
contract SimpleERC20 is IERC20 {
    uint256 t;
    mapping (address => uint256) b;
    mapping (address => mapping (address => uint256)) a;

    function add(uint a, uint b) internal pure returns (uint256) {
        uint c = a +b;
        require (c >= a);
        return c;
    }
    
    function sub(uint a, uint b) internal pure returns (uint256) {
        require (a>=b);
        return a-b;
    }

    function totalSupply() external override view returns (uint256) {
        return t;
    }
    
    function balanceOf(address account) external override view returns (uint256) {
        return b[account];
    }
    
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        b[msg.sender] = sub(b[msg.sender], amount);
        b[recipient] = add(b[recipient], amount);
        return true;
    }
 
    function allowance(address owner, address spender) external override view returns (uint256) {
        return a[owner][spender];
    }
    
    function approve(address spender, uint256 amount) external override returns (bool) {
        a[msg.sender][spender] = amount;
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external override returns (bool) {
        b[sender] = sub(b[sender], amount);
        b[recipient] = add(b[recipient], amount);
        a[sender][msg.sender] = sub(a[sender][msg.sender], amount);
        return true;
    }
}


================================================
FILE: certora/harness/StableDebtTokenHarness.sol
================================================
pragma solidity 0.8.10;

import {StableDebtToken} from '../munged/protocol/tokenization/StableDebtToken.sol';
import {IncentivizedERC20} from '../munged/protocol/tokenization/base/IncentivizedERC20.sol';
import {IPool} from '../munged/interfaces/IPool.sol';
// import {WadRayMath} from '../munged/protocol/libraries/math/WadRayMath.sol';
// import {MathUtils} from '../munged/protocol/libraries/math/MathUtils.sol';

contract StableDebtTokenHarness is StableDebtToken {

    // using WadRayMath for uint256;

    constructor(IPool pool) public StableDebtToken(pool) {}

    /**
    Simplification: The user accumulates no interest (the balance increase is always 0).
    */
    function balanceOf(address account) public view override returns (uint256) {
        return IncentivizedERC20.balanceOf(account);
    }


    function additionalData(address user) public view returns (uint128) {
        return _userState[user].additionalData;
    }

    function debtTotalSupply() public view returns (uint256) {
        return super.totalSupply();
    }

    // function scaledBalanceOfToBalanceOf(uint256 bal) public pure returns (uint256) {
    //     uint256 rate; uint40 lastUpdateTimestamp; uint256 currentTimestamp;
    //     return bal.rayMul(MathUtils.calculateCompoundedInterest(rate, lastUpdateTimestamp, currentTimestamp));
    // }
}



================================================
FILE: certora/harness/SymbolicPriceOracle.sol
================================================
pragma solidity 0.8.10;
pragma solidity 0.8.10;

import {IPriceOracleGetter} from "../munged/interfaces/IPriceOracleGetter.sol";

contract SymbolicPriceOracle is IPriceOracleGetter {
      
    address public base;  
    uint256 public unit;
    mapping (address => uint256) public price;
    
    function BASE_CURRENCY() external view returns (address) {
        return base;
    }

  function BASE_CURRENCY_UNIT() external override view returns (uint256) {
      return unit;
  }

  function getAssetPrice(address asset) external view override  returns (uint256) {
      return price[asset]; 
  }
}


================================================
FILE: certora/harness/UserConfigurationHarness.sol
================================================
pragma solidity 0.8.10;
pragma experimental ABIEncoderV2;

import {UserConfiguration} from '../munged/protocol/libraries/configuration/UserConfiguration.sol';
import {DataTypes} from '../munged/protocol/libraries/types/DataTypes.sol';
import {PoolStorage} from '../munged/protocol/pool/PoolStorage.sol';

/*
A wrapper contract for calling functions from the library UserConfiguration.
*/
contract UserConfigurationHarness is PoolStorage {
    DataTypes.UserConfigurationMap public usersConfig;
    
    // Sets if the user is borrowing the reserve identified by reserveIndex
    function setBorrowing(uint256 reserveIndex, bool borrowing) public {
        UserConfiguration.setBorrowing(usersConfig, reserveIndex, borrowing);
    }

    //Sets if the user is using as collateral the reserve identified by reserveIndex
    function setUsingAsCollateral(uint256 reserveIndex, bool _usingAsCollateral) public {
        UserConfiguration.setUsingAsCollateral(usersConfig, reserveIndex, _usingAsCollateral);
    }

    // Returns if a user has been using the reserve for borrowing or as collateral
    function isUsingAsCollateralOrBorrowing(uint256 reserveIndex) public view returns (bool) {
        return UserConfiguration.isUsingAsCollateralOrBorrowing(usersConfig, reserveIndex);
    }

    // Validate a user has been using the reserve for borrowing
    function isBorrowing(uint256 reserveIndex) public view returns (bool) {
        return UserConfiguration.isBorrowing(usersConfig, reserveIndex);
    }

    // Validate a user has been using the reserve as collateral
    function isUsingAsCollateral(uint256 reserveIndex) public view returns (bool) {
        return UserConfiguration.isUsingAsCollateral(usersConfig, reserveIndex);
    }

    // Checks if a user has been supplying only one reserve as collateral
    function isUsingAsCollateralOne() public view returns (bool) {
        return UserConfiguration.isUsingAsCollateralOne(usersConfig);
    }

    // Checks if a user has been supplying any reserve as collateral
    function isUsingAsCollateralAny() public view returns (bool) {
        return UserConfiguration.isUsingAsCollateralAny(usersConfig);
    }
    
    // Checks if a user has been borrowing only one asset
    function isBorrowingOne() public view returns (bool) {
        return UserConfiguration.isBorrowingOne(usersConfig);
    }

    // Checks if a user has been borrowing from any reserve
    function isBorrowingAny() public view returns (bool) {
        return UserConfiguration.isBorrowingAny(usersConfig);
    }

    // Checks if a user has not been using any reserve for borrowing or supply
    function isEmpty() public view returns (bool) {
        return UserConfiguration.isEmpty(usersConfig);
    }

    // Returns the Isolation Mode state of the user
    function getIsolationModeState() 
        public view returns (bool, address, uint256) {
        return UserConfiguration.getIsolationModeState(usersConfig, _reserves, _reservesList);
    }

    // Returns the siloed borrowing state for the user
    function getSiloedBorrowingState() public view returns (bool, address) {
        return UserConfiguration.getSiloedBorrowingState(usersConfig, _reserves, _reservesList);
    }
}



================================================
FILE: certora/harness/VariableDebtTokenHarness.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.10;

import {VariableDebtToken} from '../munged/protocol/tokenization/VariableDebtToken.sol';
import {WadRayMath} from '../munged/protocol/libraries/math/WadRayMath.sol';
import {IPool} from '../munged/interfaces/IPool.sol';

contract VariableDebtTokenHarness is VariableDebtToken {

using WadRayMath for uint256;

    constructor(IPool pool) public VariableDebtToken(pool) {}

    function scaledBalanceOfToBalanceOf(uint256 bal) public view returns (uint256) {
        return bal.rayMul(POOL.getReserveNormalizedVariableDebt(_underlyingAsset));
    }
}



================================================
FILE: certora/scripts/verifyAToken.sh
================================================
certoraRun certora/harness/SimpleERC20.sol \
            certora/harness/ATokenHarness.sol \
    --verify ATokenHarness:certora/specs/AToken.spec \
    --link ATokenHarness:_underlyingAsset=SimpleERC20 \
    --optimistic_loop \
    --solc solc8.10 \
    --cloud \
    --msg "aToken spec - all rules" 


================================================
FILE: certora/scripts/verifyPool.sh
================================================
certoraRun certora/harness/PoolHarness.sol \
              certora/harness/ATokenHarness.sol \
              certora/harness/StableDebtTokenHarness.sol \
              certora/munged/protocol/tokenization/VariableDebtToken.sol \
  --verify PoolHarness:certora/specs/pool.spec \
  --link ATokenHarness:POOL=PoolHarness \
  --settings -t=600 --settings -superOptimisticReturnsize=true \
  --settings -mediumTimeout=700,-depth=40 \
  --optimistic_loop \
  --solc solc8.10 \
  --cloud \
  --rules $1 \
  --msg "Pool"


================================================
FILE: certora/scripts/verifyReserveConfiguration.sh
================================================
certoraRun certora/harness/ReserveConfigurationHarness.sol \
    --verify ReserveConfigurationHarness:certora/specs/ReserveConfiguration.spec \
    --settings -useBitVectorTheory \
    --optimistic_loop \
    --solc solc8.10 \
    --cloud \
    --msg "ReserveConfiguration"


================================================
FILE: certora/scripts/verifyStableTokenCLI.sh
================================================
certoraRun certora/harness/StableDebtTokenHarness.sol:StableDebtTokenHarness \
    --verify StableDebtTokenHarness:certora/specs/StableDebtToken.spec \
    --settings -assumeUnwindCond,-b=4 \
    --cache StableToken \
    --solc solc8.10 \
    --cloud \
    --msg "stableTokenCLI"


================================================
FILE: certora/scripts/verifyUserConfigCLI.sh
================================================
certoraRun certora/harness/UserConfigurationHarness.sol \
    --verify UserConfigurationHarness:certora/specs/UserConfiguration.spec \
    --settings -useBitVectorTheory \
    --optimistic_loop \
    --solc solc8.10 \
    --cloud \
    --msg "UserConfiguration All spec" 


================================================
FILE: certora/scripts/verifyVariableTokenCLI.sh
================================================
certoraRun certora/harness/VariableDebtTokenHarness.sol \
    --verify VariableDebtTokenHarness:certora/specs/VariableDebtToken.spec \
    --optimistic_loop \
    --solc solc8.10 \
    --cloud \
    --msg "variable debt token" 


================================================
FILE: certora/specs/AToken.spec
================================================
/**

- values of gRNI passing: ray, 2 * ray

*/

using SimpleERC20 as _underlyingAsset

methods { 
    nonces(address) returns (uint256) envfree
    allowance(address, address) returns (uint256) envfree
	handleAction(address, uint256, uint256) => NONDET 
	getReserveNormalizedIncome(address u) returns (uint256) => gRNI()
	balanceOf(address) returns (uint256) envfree
	additionalData(address) returns uint128 envfree
	finalizeTransfer(address, address, address, uint256, uint256, uint256) => NONDET

	scaledTotalSupply() returns (uint256)
	scaledBalanceOf(address) returns (uint256)
    scaledBalanceOfToBalanceOf(uint256)returns (uint256) envfree
}

definition ray() returns uint = 1000000000000000000000000000;
definition half_ray() returns uint = ray() / 2;
definition bound() returns uint = ((gRNI() / ray()) + 1 ) / 2;

/*
Due to rayDiv and RayMul Rounding (+ 0.5) - blance could increase by (gRNI() / Ray() + 1) / 2.
*/
definition bounded_error_eq(uint x, uint y, uint scale) returns bool = x <= y + (bound() * scale) && x + (bound() * scale) >= y;

ghost sumAllBalance() returns uint256 {
    init_state axiom sumAllBalance() == 0;
}

// summerization for scaledBlanaceOf -> regularBalanceOf + 0.5 (canceling the rayMul)
ghost gRNI() returns uint256 {
	axiom gRNI() == 7 * ray();
}

hook Sstore _userState[KEY address a].balance uint128 balance (uint128 old_balance) STORAGE {
    havoc sumAllBalance assuming sumAllBalance@new() == sumAllBalance@old() + balance - old_balance;
}

invariant totalSupplyEqualsSumAllBalance(env e)
    totalSupply(e) == scaledBalanceOfToBalanceOf(sumAllBalance())
    filtered { f -> !f.isView }
    {
        preserved mint(address caller, address onBehalfOf, uint256 amount, uint256 index) with (env e2) {
            require index == gRNI();
        }
        preserved burn(address from, address receiverOfUnderlying, uint256 amount, uint256 index) with (env e3) {
            require index == gRNI();
        }
    }

// Rule to verify that permit sets the allowance correctly.
rule permitIntegrity(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) 
{
    env e;
    uint256 nonceBefore = nonces(owner);
    permit(e, owner, spender, value, deadline, v, r, s);
    assert allowance(owner, spender) == value;
    assert nonces(owner) == nonceBefore + 1;
}

// can't mint zero Tokens
rule mintArgsPositive(address user, uint256 amount, uint256 index) 
{
    env e;
	address caller;
    mint@withrevert(e, caller, user, amount, index);
    assert amount == 0 => lastReverted;
}

/**
Check that each possible operation changes the balance of at most two users
*/
rule balanceOfChange(address a, address b, address c, method f ) filtered { f ->  !f.isView }
{
	env e;
	require a!=b && a!=c && b!=c;
	uint256 balanceABefore = balanceOf(a);
	uint256 balanceBBefore = balanceOf(b);
	uint256 balanceCBefore = balanceOf(c);
	 
	calldataarg arg;
	f(e, arg); 

	uint256 balanceAAfter = balanceOf(a);
	uint256 balanceBAfter = balanceOf(b);
	uint256 balanceCAfter = balanceOf(c);

	assert ( balanceABefore == balanceAAfter || balanceBBefore == balanceBAfter || balanceCBefore == balanceCAfter);
}

/**
Mint to user u amount of x tokens, increases his balanceOf the underlying asset by x and
AToken total suplly should increase.
*/
rule integrityMint(address a, address b, uint256 x) 
{
	env e;
	uint256 indexRay = gRNI();

	uint256 underlyingBalanceBefore = balanceOf(a);
	uint256 atokenBlanceBefore = scaledBalanceOf(e, a);
	uint256 totalATokenSupplyBefore = scaledTotalSupply(e);

	mint(e,b,a,x,indexRay);
	
	uint256 underlyingBalanceAfter = balanceOf(a);
	uint256 atokenBlanceAfter = scaledBalanceOf(e, a);
	uint256 totalATokenSupplyAfter = scaledTotalSupply(e);

	assert atokenBlanceAfter - atokenBlanceBefore == totalATokenSupplyAfter - totalATokenSupplyBefore;
	assert totalATokenSupplyAfter > totalATokenSupplyBefore;
	assert bounded_error_eq(underlyingBalanceAfter, underlyingBalanceBefore+x, 1);
}

/*
Mint is additive, can performed either all at once or gradually
mint(u,x); mint(u,y) ~ mint(u,x+y) at the same initial state
*/
rule additiveMint(address a, address b, address c, uint256 x, uint256 y) 
{
	env e;
	uint256 indexRay = gRNI();
	require(balanceOf(a) == balanceOf(b) && a != b);
	uint256 balanceScenario0 = balanceOf(a);
	// storage initialStorage = lastStorage;
	mint(e,c,a,x,indexRay);
	mint(e,c,a,y,indexRay);
	uint256 balanceScenario1 = balanceOf(a);
	// mint(e,c, a, x+y ,indexRay) at initialStorage;
	mint(e, c, b, x+y ,indexRay);

	uint256 balanceScenario2 = balanceOf(b);
	assert bounded_error_eq(balanceScenario1, balanceScenario2, 3), "mint is not additive";
}

/* 
	transfers amount from _userState[from].balance to _userState[to].balance
	while balance of returns _userState[account].balance normalized by gNRI();
	transfer is incentivizedERC20
*/
rule integrityTransfer(address from, address to, uint256 amount)
{
	env e;
	require e.msg.sender == from;
	address other; // for any address including from, to, currentContract the underlying asset balance should stay the same
	
	uint256 balanceBeforeFrom = balanceOf(from);
	uint256 balanceBeforeTo = balanceOf(to);
	uint256 underlyingBeforeOther =  _underlyingAsset.balanceOf(e, other);
	
	transfer(e, to, amount);
	
	uint256 balanceAfterFrom = balanceOf(from);
	uint256 balanceAfterTo = balanceOf(to);
	uint256 underlyingAfterOther =  _underlyingAsset.balanceOf(e, other);
	
	assert underlyingAfterOther == underlyingBeforeOther, "unexpected change in underlying asserts";
	
	if (from != to) {
		assert bounded_error_eq(balanceAfterFrom, balanceBeforeFrom - amount, 1) &&
	 		bounded_error_eq(balanceAfterTo, balanceBeforeTo + amount, 1), "unexpected balance of from/to, when from!=to";
	} else {
		assert balanceAfterFrom == balanceAfterTo , "unexpected balance of from/to, when from==to";
	}
}


/*
Transfer is additive, can performed either all at once or gradually
transfer(from,to,x); transfer(from,to,y) ~ transfer(from,to,x+y) at the same initial state
*/
rule additiveTransfer(address from1, address from2, address to1, address to2, uint256 x, uint256 y)
{
	env e1;
	env e2;
    uint256 indexRay = gRNI();
	require (from1 != from2 && to1 != to2 && from1 != to2 && from2 != to1 && 
	        (from1 == to1 <=> from2 == to2) &&
			 balanceOf(from1) == balanceOf(from2) && balanceOf(to1) == balanceOf(to2));

	require e1.msg.sender == from1;
	require e2.msg.sender == from2;
	transfer(e1, to1, x);
	transfer(e1, to1, y);
	uint256 balanceFromScenario1 = balanceOf(from1);
	uint256 balanceToScenario1 = balanceOf(to1);

	transfer(e2, to2, x+y);
	
	uint256 balanceFromScenario2 = balanceOf(from2);
	uint256 balanceToScenario2 = balanceOf(to2);
	
	assert 	bounded_error_eq(balanceFromScenario1, balanceFromScenario2, 3)  &&
	 		bounded_error_eq(balanceToScenario1, balanceToScenario2, 3), "transfer is not additive";
}


/*
Burn scaled amount of Atoken from 'user' and transfers amount of the underlying asset to 'to'.
*/
rule integrityBurn(address user, address to, uint256 amount)
{
	env e;
	uint256 indexRay = gRNI();

	require user != currentContract;
	uint256 balanceBeforeUser = balanceOf(user);
	uint256 balanceBeforeTo = balanceOf(to);
	uint256 underlyingBeforeTo =  _underlyingAsset.balanceOf(e, to);
	uint256 underlyingBeforeUser =  _underlyingAsset.balanceOf(e, user);
	uint256 underlyingBeforeSystem =  _underlyingAsset.balanceOf(e, currentContract);
	uint256 totalSupplyBefore = totalSupply(e); 

	burn(e, user, to, amount, indexRay);
	
	uint256 balanceAfterUser = balanceOf(user);
	uint256 balanceAfterTo = balanceOf(to);
	uint256 underlyingAfterTo =  _underlyingAsset.balanceOf(e, to);
	uint256 underlyingAfterUser =  _underlyingAsset.balanceOf(e, user);
	uint256 underlyingAfterSystem =  _underlyingAsset.balanceOf(e, currentContract);
	uint256 totalSupplyAfter = totalSupply(e);

	if (user != to) {
		assert balanceAfterTo == balanceBeforeTo && // balanceOf To should not change
		bounded_error_eq(underlyingBeforeUser, underlyingAfterUser, 1), "integrity break on user!=to";
	}

	if (to != currentContract) {
		assert bounded_error_eq(underlyingAfterSystem, underlyingBeforeSystem - amount, 1) && // system transfer underlying_asset
		bounded_error_eq(underlyingAfterTo,  underlyingBeforeTo + amount, 1) , "integrity break on to!=currentContract";
	} else {
		assert underlyingAfterSystem == underlyingBeforeSystem, "integrity break on to==currentContract";
	} 

    assert bounded_error_eq(totalSupplyAfter, totalSupplyBefore - amount, 1), "total supply integrity"; // total supply reduced
    assert bounded_error_eq(balanceAfterUser, balanceBeforeUser - amount, 1), "integrity break";  // user burns ATokens to recieve underlying
}

/*
Burn is additive, can performed either all at once or gradually
burn(from,to,x,index); burn(from,to,y,index) ~ burn(from,to,x+y,index) at the same initial state
*/
rule additiveBurn(address user1, address user2, address to1, address to2, uint256 x, uint256 y) 
{
	env e;
	uint256 indexRay = gRNI();
	require (user1 != user2 && to1 != to2 && user1 != to2 && user2 != to1 && 
	        (user1 == to1 <=> user2 == to2) &&
			 balanceOf(user1) == balanceOf(user2) && balanceOf(to1) == balanceOf(to2));
	require user1 != currentContract && user2 != currentContract;

	sinvoke burn(e, user1, to1, x, indexRay);
	sinvoke burn(e, user1, to1, y, indexRay);
	uint256 balanceUserScenario1 = balanceOf(user1);
	
	sinvoke burn(e, user2, to2, x+y, indexRay);
	uint256 balanceUserScenario2 = balanceOf(user2);
	
	assert 	bounded_error_eq(balanceUserScenario1, balanceUserScenario2, 3), "burn is not additive";
}

/*
Burning one user atokens should have no effect on other users that are not involved in the action.
*/
rule burnNoChangeToOther(address user, address recieverOfUnderlying, uint256 amount, uint256 index, address other) 
{
  
	require other != user && other != recieverOfUnderlying;
	
	env e;
	uint256 otherDataBefore = additionalData(other);
	uint256 otherBalanceBefore = balanceOf(other);
	
	burn(e, user, recieverOfUnderlying, amount, index);
	
	uint256 otherDataAfter = additionalData(other);
	uint256 otherBalanceAfter = balanceOf(other);

	assert otherDataBefore == otherDataAfter && 
	       otherBalanceBefore == otherBalanceAfter;
}

/*
Minting ATokens for a user should have no effect on other users that are not involved in the action.
*/
rule mintNoChangeToOther(address user, uint256 amount, uint256 index, address other)
{
	require other != user;

	env e;
	uint128 otherDataBefore = additionalData(other);
	uint256 otherBalanceBefore = balanceOf(other);
	address caller; 
	mint(e, caller, user, amount, index);

	uint128 otherDataAfter = additionalData(other);
	uint256 otherBalanceAfter = balanceOf(other);

	assert otherBalanceBefore == otherBalanceAfter && otherDataBefore == otherDataAfter;
}



/**
Check that the changes to total supply are coherent with the changes to balance
*/
// rule integrityBalanceOfTotalSupply(address a, address b, method f)
// {
// 	env e;
// 	require a!=b;
// 	uint256 balanceABefore = balanceOf(e,a);
// 	uint256 balanceBBefore = balanceOf(e,b);
// 	uint256 totalSupplyBefore = totalSupply(e);
	 
// 	calldataarg arg;
// 	sinvoke f(e, arg); 

// 	uint256 balanceAAfter = balanceOf(e,a);
// 	uint256 balanceBAfter = balanceOf(e,b);

// 	uint256 totalSupplyAfter = totalSupply(e);

// 	assert (balanceAAfter != balanceABefore && balanceBAfter != balanceBBefore) =>
// 	    ( (balanceAAfter - balanceABefore) + (balanceBAfter - balanceBBefore)  == totalSupplyAfter - totalSupplyBefore);
// 	require f.selector != transferFrom(address,address,uint256).selector &&
// 	        f.selector != transfer(address,uint256).selector &&
// 	        f.selector != transferOnLiquidation(address,address,uint256).selector;
// 	assert (balanceAAfter != balanceABefore &&  balanceBAfter == balanceBBefore ) =>
// 	    ( (balanceAAfter - balanceABefore)   == totalSupplyAfter - totalSupplyBefore);
		
// }



================================================
FILE: certora/specs/pool.spec
================================================
/*
    This is a Specification File for Smart Contract Verification with the Certora Prover.
    This file is run with scripts/verifyPool.sh
*/

/*
    Declaration of contracts used in the spec
*/
using ATokenHarness as _aToken
// using StableDebtTokenHarness as _stable
// using VariableDebtToken as _variable
// using SimpleERC20 as _asset
// using SymbolicPriceOracle as priceOracle

/*

Methods Summerizations and Enviroment-Free (e.g relative to e.msg variables) Declarations 

*/

methods {

	//Pool
	getReserveList(uint256 index) returns (address) envfree
	getReserveDataIndex(address token) returns (uint256) envfree
	getReservesCount() returns (uint256) envfree
	handleAction(address, uint256, uint256) => NONDET
	getConfigurationData(address) returns uint256 envfree
	getUserEMode(address) returns uint256 envfree
	getAssetEMode(address) returns uint256 envfree
	getAssetId(address) returns uint16 envfree
	reserveAddressById(uint256) returns address envfree
	isActiveReserve(address asset) returns bool envfree
	isFrozenReserve(address asset) returns bool envfree
	isPausedReserve(address asset) returns bool envfree
	isBorrowableReserve(address) returns bool envfree
	isStableRateBorrowableReserve(address) returns bool envfree
	getReserveATokenAddress(address) returns address envfree
	getReserveStableDebtTokenAddress(address) returns address envfree
	getReserveVariableDebtTokenAddress(address) returns address envfree
	getReserveLiquidityIndex(address) returns uint256 envfree
	getReserveCurrentLiquidityRate(address) returns uint256 envfree
	getReserveVariableBorrowIndex(address) returns uint256 envfree
	getReserveCurrentVariableBorrowRate(address) returns uint256 envfree
	getReserveCurrentStableBorrowRate(address) returns uint256 envfree 
	getATokenTotalSupply(address) returns uint256 envfree
	getReserveSupplyCap(address) returns uint256 envfree
	mockUserAccountData() returns (uint256, uint256, uint256, uint256, uint256, bool) => NONDET
	mockHealthFactor() returns (uint256, bool) => NONDET
	getAssetPrice(address) returns uint256 => NONDET
	getPriceOracle() returns address => ALWAYS(2)
	getPriceOracleSentinel() returns address => ALWAYS(4)
	isBorrowAllowed() returns bool => NONDET

    // PoolHarness
    getCurrScaledVariableDebt(address) returns (uint256) envfree

	// math
	rayMul(uint256 a, uint256 b) returns uint256 => rayMulSummariztion(a, b)
	rayDiv(uint256 a, uint256 b) returns uint256 => rayDivSummariztion(a, b)
	calculateLinearInterest(uint256, uint40) returns uint256 => ALWAYS(1000000000000000000000000000)  // this is not good dont use this
	calculateCompoundedInterest(uint256 x, uint40 t0, uint256 t1) returns uint256 => calculateCompoundedInterestSummary(x, t0, t1);

	// ERC20
	transfer(address, uint256) returns bool => DISPATCHER(true)
	transferFrom(address, address, uint256) returns bool => DISPATCHER(true)
	approve(address, uint256) returns bool => DISPATCHER(true)
	mint(address, uint256) returns bool => DISPATCHER(true)
	burn(uint256) => DISPATCHER(true)
	balanceOf(address) returns uint256 => DISPATCHER(true)

	// ATOKEN
	mint(address user, uint256 amount, uint256 index) returns(bool) => DISPATCHER(true)
	burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) => DISPATCHER(true)
	mintToTreasury(uint256 amount, uint256 index) => DISPATCHER(true)
	transferOnLiquidation(address from, address to, uint256 value) => DISPATCHER(true)
	transferUnderlyingTo(address user, uint256 amount) => DISPATCHER(true)
	handleRepayment(address user, uint256 amount) => DISPATCHER(true)
	permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) => DISPATCHER(true)
	
	//Debt Tokens
	_variable.scaledTotalSupply() => DISPATCHER(true)
	
	// StableDebt
	mint(address user, address onBehalfOf, uint256 amount, uint256 rate) => DISPATCHER(true)
	burn(address user, uint256 amount) => DISPATCHER(true)
	getSupplyData() returns (uint256, uint256, uint256, uint40) => DISPATCHER(true)
	
	//variableDebt
	burn(address user, uint256 amount, uint256 index) => DISPATCHER(true)

	// ReserveConfiguration
	mockGetEModeCategory() returns uint256 => CONSTANT
	mockGetActive() returns bool => CONSTANT
    mockGetFrozen() returns bool => CONSTANT
    mockGetBorrowingEnabled() returns bool => CONSTANT
    mockGetStableRateBorrowingEnabled() returns bool => CONSTANT
    mockGetPaused() returns bool => CONSTANT
	mockGetReserveFactor() returns uint256 => CONSTANT
	mockGetBorrowCap() returns uint256 => CONSTANT
	mockGetBorrowableInIsolation() returns bool => CONSTANT
	mockGetLtv() returns uint256 => CONSTANT
	mockGetSupplyCap() returns uint256 => ALWAYS(100000000000000000000000000000000000000000000000000)
}

/* definitions and functions to be used within the spec file */

definition RAY() returns uint256 = 10^27;
definition IS_UINT256(uint256 x) returns bool = ((x >= 0) && (x <= max_uint256));

function first_term(uint256 x, uint256 y) returns uint256 { return x; }
ghost mapping(uint256 => mapping(uint256 => uint256)) calculateCompoundedInterestSummaryValues;
function calculateCompoundedInterestSummary(uint256 rate, uint40 t0, uint256 t1) returns uint256
{
	uint256 deltaT = t1 - t0;
	if (deltaT == 0)
	{
		return RAY();
	}
	if (rate == RAY())
	{
		return RAY();
	}
	if (rate >= RAY())
	{
		require calculateCompoundedInterestSummaryValues[rate][deltaT] >= rate;
	}
	else{
		require calculateCompoundedInterestSummaryValues[rate][deltaT] < rate;
	}
	return calculateCompoundedInterestSummaryValues[rate][deltaT];
}

ghost mapping(uint256 => mapping(uint256 => uint256)) rayMulSummariztionValues;
ghost mapping(uint256 => mapping(uint256 => uint256)) rayDivSummariztionValues;

function rayMulSummariztion(uint256 x, uint256 y) returns uint256
{
	if (x == 0) || (y == 0)
	{
		return 0;
	}
	if (x == RAY())
	{
		return y;
	}
	if (y == RAY())
	{
		return x;
	}
	
	if (y > x)
	{
		if (y > RAY())
		{
			require rayMulSummariztionValues[y][x] >= x;
		}
		if (x > RAY())
		{
			require rayMulSummariztionValues[y][x] >= y;
		}
		return rayMulSummariztionValues[y][x];
	}
	else{
		if (x > RAY())
		{
			require rayMulSummariztionValues[x][y] >= y;
		}
		if (y > RAY())
		{
			require rayMulSummariztionValues[x][y] >= x;
		}
		return rayMulSummariztionValues[x][y];
	}
}

function rayDivSummariztion(uint256 x, uint256 y) returns uint256
{
	if (x == 0)
	{
		return 0;
	}
	if (y == RAY())
	{
		return x;
	}
	if (y == x)
	{
		return RAY();
	}
	require y > RAY() => rayDivSummariztionValues[x][y] <= x;
	require y < RAY() => x <= rayDivSummariztionValues[x][y];
	return rayDivSummariztionValues[x][y];
}

// The borrowing index should monotonically increasing
rule getReserveNormalizedVariableDebtCheck()
{
	env e1;
	calldataarg args;
	calldataarg args2;
    address asset; uint256 amount; address onBehalfOf; uint16 referralCode;
    require asset != _aToken;
	uint256 oldIndex = getReserveNormalizedVariableDebt(e1, args);
    uint256 totalDebtBefore = getCurrScaledVariableDebt(asset);
	supply(e1, asset, amount, onBehalfOf, referralCode);
	uint256 newIndex = getReserveNormalizedVariableDebt(e1, args);
	assert totalDebtBefore != 0 => newIndex >= oldIndex;
}

// withdrawing a sum (part1 + part2) should not revert if withdrawing the two parts seperately does not revert
// !!! Times out !!!
// rule withdrawCheck()
// {
// 	env e;
// 	address to;
// 	address asset;
// 	uint256 part1;
// 	uint256 part2;
// 	storage init = lastStorage;
// 	withdraw(e, asset, part1, to);
// 	withdraw(e, asset, part2, to);
// 	withdraw@withrevert(e, asset, part1 + part2, to) at init;
// 	assert !lastReverted;
// }

// The liquidity index should not give different result if we called mintToTreasury before a function (flashloan)
// !!! Times out !!!
// rule accruToTreasury()
// {
// 	env e;
// 	calldataarg args;
// 	calldataarg args2;
// 	calldataarg args3;
// 	storage init = lastStorage;
// 	mintToTreasury(e, args);
// 	flashLoan(e, args2);
// 	//mintToTreasury(e, args);
// 	uint256 withMintBefore = getReserveNormalizedIncome(e, args3);
// 	flashLoan(e, args2) at init;
// 	//mintToTreasury(e, args);
// 	uint256 withoutMintBefore = getReserveNormalizedIncome(e, args3);
// 	assert withoutMintBefore == withMintBefore;
// }


================================================
FILE: certora/specs/ReserveConfiguration.spec
================================================
methods {
    setLtv(uint256) envfree
    getLtv() returns (uint256) envfree
    setLiquidationThreshold(uint256) envfree
    getLiquidationThreshold() returns (uint256) envfree
    setLiquidationBonus(uint256) envfree
    getLiquidationBonus() returns (uint256) envfree
    setDecimals(uint256) envfree
    getDecimals() returns (uint256) envfree
    setActive(bool) envfree
    getActive() returns (bool) envfree
    setFrozen(bool) envfree
    getFrozen() returns (bool) envfree
    setPaused(bool) envfree
    getPaused() returns (bool) envfree
    setBorrowableInIsolation(bool) envfree
    getBorrowableInIsolation() returns (bool) envfree
    setSiloedBorrowing(bool) envfree
    getSiloedBorrowing() envfree
    setBorrowingEnabled(bool) envfree
    getBorrowingEnabled() returns (bool) envfree
    setStableRateBorrowingEnabled(bool) envfree
    getStableRateBorrowingEnabled() returns (bool) envfree
    setReserveFactor(uint256) envfree
    getReserveFactor() returns (uint256) envfree
    setBorrowCap(uint256) envfree
    getBorrowCap() returns (uint256) envfree
    setSupplyCap(uint256) envfree
    getSupplyCap() returns (uint256) envfree
    setDebtCeiling(uint256) envfree
    getDebtCeiling() returns (uint256) envfree
    setLiquidationProtocolFee(uint256) envfree
    getLiquidationProtocolFee() returns (uint256) envfree
    setUnbackedMintCap(uint256) envfree
    getUnbackedMintCap() returns (uint256) envfree
    setEModeCategory(uint256) envfree
    getEModeCategory() returns (uint256) envfree
    setFlashLoanEnabled(bool) envfree
    getFlashLoanEnabled() returns (bool) envfree
    getFlags() returns (bool, bool, bool, bool, bool) envfree
    getParams() returns (uint256, uint256, uint256, uint256, uint256, uint256) envfree
    getCaps() returns (uint256, uint256) envfree

    init_state() envfree
    getData() returns uint256 envfree
    xorWithReserve(uint256) returns uint256 envfree 
    initMaps() envfree
    
    getIntSetterLowerBound(uint256) returns uint256 envfree
    getIntSetterUpperBound(uint256) returns uint256 envfree
    executeIntSetterById(uint256, uint256) envfree
    executeIntGetterById(uint256) returns uint256 envfree

    getBoolSetterCompare(uint256) returns uint256 envfree
    executeBoolSetterById(uint256, bool) envfree
    executeBoolGetterById(uint256) returns bool envfree
}


// checks the integrity of set LTV function and correct retrieval of the corresponding getter.
rule setLtvIntegrity(uint256 ltv) {
    setLtv(ltv);
    assert getLtv() == ltv;
}

// checks the integrity of set LiquidationThreshold function and correct retrieval of the corresponding getter.
rule setLiquidationThresholdIntegrity(uint256 threshold) {
    setLiquidationThreshold(threshold);
    assert getLiquidationThreshold() == threshold;
}

// checks the integrity of set LiquidationBonus function and correct retrieval of the corresponding getter.
rule setLiquidationBonusIntegrity(uint256 bonus) {
    setLiquidationBonus(bonus);
    assert getLiquidationBonus() == bonus;
}

// checks the integrity of set Decimals function and correct retrieval of the corresponding getter.
rule setDecimalsIntegrity(uint256 decimals) {
    setDecimals(decimals);
    assert getDecimals() == decimals;
}

// checks the integrity of set Active function and correct retrieval of the corresponding getter.
rule setActiveIntegrity(bool active) {
    setActive(active);
    assert getActive() == active;
}

// checks the integrity of set Frozen function and correct retrieval of the corresponding getter.
rule setFrozenIntegrity(bool frozen) {
    setFrozen(frozen);
    assert getFrozen() == frozen;
}

// checks the integrity of set Paused function and correct retrieval of the corresponding getter.
rule setPausedIntegrity(bool paused) {
    setPaused(paused);
    assert getPaused() == paused;
}

// checks the integrity of set BorrowableInIsolation function and correct retrieval of the corresponding getter.
rule setBorrowableInIsolationIntegrity(bool borrowable) {
    setBorrowableInIsolation(borrowable);
    assert getBorrowableInIsolation() == borrowable;
}

// checks the integrity of set SiloedBorrowing function and correct retrieval of the corresponding getter.
rule setSiloedBorrowingIntegrity(bool siloed) {
    setSiloedBorrowing(siloed);
    assert getSiloedBorrowing() == siloed;
}

// checks the integrity of set BorrowingEnabled function and correct retrieval of the corresponding getter.
rule setBorrowingEnabledIntegrity(bool enabled) {
    setBorrowingEnabled(enabled);
    assert getBorrowingEnabled() == enabled;
}

// checks the integrity of set StableRateBorrowingEnabled function and correct retrieval of the corresponding getter.
rule setStableRateBorrowingEnabledIntegrity(bool enabled) {
    setStableRateBorrowingEnabled(enabled);
    assert getStableRateBorrowingEnabled() == enabled;
}

// checks the integrity of set ReserveFactor function and correct retrieval of the corresponding getter.
rule setReserveFactorIntegrity(uint256 reserveFactor) {
    setReserveFactor(reserveFactor);
    assert getReserveFactor() == reserveFactor;
}

// checks the integrity of set BorrowCap function and correct retrieval of the corresponding getter.
rule setBorrowCapIntegrity(uint256 borrowCap) {
    setBorrowCap(borrowCap);
    assert getBorrowCap() == borrowCap;
}

// checks the integrity of set SupplyCap function and correct retrieval of the corresponding getter.
rule setSupplyCapIntegrity(uint256 supplyCap) {
    setSupplyCap(supplyCap);
    assert getSupplyCap() == supplyCap;
}

// checks the integrity of set DebtCeiling function and correct retrieval of the corresponding getter.
rule setDebtCeilingIntegrity(uint256 ceiling) {
    setDebtCeiling(ceiling);
    assert getDebtCeiling() == ceiling;
}

// checks the integrity of set LiquidationProtocolFee function and correct retrieval of the corresponding getter.
rule setLiquidationProtocolFeeIntegrity(uint256 liquidationProtocolFee) {
    setLiquidationProtocolFee(liquidationProtocolFee);
    assert getLiquidationProtocolFee() == liquidationProtocolFee;
}

// checks the integrity of set UnbackedMintCap function and correct retrieval of the corresponding getter.
rule setUnbackedMintCapIntegrity(uint256 unbackedMintCap) {
    setUnbackedMintCap(unbackedMintCap);
    assert getUnbackedMintCap() == unbackedMintCap;
}

// checks the integrity of set EModeCategory function and correct retrieval of the corresponding getter.
rule setEModeCategoryIntegrity(uint256 category) {
    setEModeCategory(category);
    assert getEModeCategory() == category;
}

// checks for independence of int parameters - if one parameter is being set, non of the others is being changed
rule integrityAndIndependencyOfIntSetters(uint256 funcId, uint256 otherFuncId, uint256 val) {
    
    require 0 <= funcId && funcId <= 10;
    require 0 <= otherFuncId && otherFuncId <= 10;
    uint256 valueBefore = executeIntGetterById(funcId);
    uint256 otherValueBefore = executeIntGetterById(otherFuncId);

    executeIntSetterById(funcId, val);

    uint256 valueAfter = executeIntGetterById(funcId);
    uint256 otherValueAfter = executeIntGetterById(otherFuncId);

    assert valueAfter == val;
    assert (otherFuncId != funcId => otherValueAfter == otherValueBefore);
}

// checks for independence of bool parameters - if one parameter is being set, non of the others is being changed
rule integrityAndIndependencyOfBoolSetters(uint256 funcId, uint256 otherFuncId, bool val) {
    
    require 0 <= funcId && funcId <= 10;
    require 0 <= otherFuncId && otherFuncId <= 10;
    bool valueBefore = executeBoolGetterById(funcId);
    bool otherValueBefore = executeBoolGetterById(otherFuncId);
    
    executeBoolSetterById(funcId, val);

    bool valueAfter = executeBoolGetterById(funcId);
    bool otherValueAfter = executeBoolGetterById(otherFuncId);

    assert valueAfter == val;
    assert (otherFuncId != funcId => otherValueAfter == otherValueBefore);
}



================================================
FILE: certora/specs/StableDebtToken.spec
================================================
methods {
    calculateCompoundedInterest(uint256 r, uint40 t0, uint256 t1) returns (uint256) => calculateCompoundedInterestSummary(r, t0, t1)
	additionalData(address) returns uint128 envfree
	getAverageStableRate() returns uint256 envfree
	handleAction(address, uint256, uint256) => NONDET
    // scaledBalanceOfToBalanceOf(uint256) returns (uint256) envfree

	rayMul(uint256 x, uint256 y) returns (uint256) => rayMulSummariztion(x, y)
	rayDiv(uint256 x, uint256 y) returns (uint256) => rayDivSummariztion(x, y)
}

definition RAY() returns uint = 1000000000000000000000000000;

definition disAllowedFunctions(method f) returns bool = 
            f.selector == transfer(address, uint256).selector ||
            f.selector == allowance(address, address).selector ||
            f.selector == approve(address, uint256).selector ||
            f.selector == transferFrom(address, address, uint256).selector ||
            f.selector == increaseAllowance(address, uint256).selector ||
            f.selector == decreaseAllowance(address, uint256).selector;

ghost mapping(uint256 => mapping(uint256 => uint256)) calculateCompoundedInterestSummaryValues;
function calculateCompoundedInterestSummary(uint256 rate, uint40 t0, uint256 t1) returns uint256
{
	uint256 deltaT = t1 - t0;
	if (deltaT == 0)
	{
		return RAY();
	}
	if (rate == RAY())
	{
		return RAY();
	}
	if (rate >= RAY())
	{
		require calculateCompoundedInterestSummaryValues[rate][deltaT] >= rate;
	}
	else{
		require calculateCompoundedInterestSummaryValues[rate][deltaT] < rate;
	}
	return calculateCompoundedInterestSummaryValues[rate][deltaT];
}

ghost mapping(uint256 => mapping(uint256 => uint256)) rayMulSummariztionValues;
function rayMulSummariztion(uint256 x, uint256 y) returns uint256
{
	if (x == 0) || (y == 0)
	{
		return 0;
	}
	if (x == RAY())
	{
		return y;
	}
	if (y == RAY())
	{
		return x;
	}
	
	if (y > x)
	{
		if (y > RAY())
		{
			require rayMulSummariztionValues[y][x] >= x;
		}
		if (x > RAY())
		{
			require rayMulSummariztionValues[y][x] >= y;
		}
		return rayMulSummariztionValues[y][x];
	}
	else{
		if (x > RAY())
		{
			require rayMulSummariztionValues[x][y] >= y;
		}
		if (y > RAY())
		{
			require rayMulSummariztionValues[x][y] >= x;
		}
		return rayMulSummariztionValues[x][y];
	}
}

ghost mapping(uint256 => mapping(uint256 => uint256)) rayDivSummariztionValues;
function rayDivSummariztion(uint256 x, uint256 y) returns uint256
{
	if (x == 0)
	{
		return 0;
	}
	if (y == RAY())
	{
		return x;
	}
	if (y == x)
	{
		return RAY();
	}
	require y > RAY() => rayDivSummariztionValues[x][y] <= x;
	// require y < RAY() => rayDivSummariztionValues[x][y] =< x;
	return rayDivSummariztionValues[x][y];
}


ghost symbolicCompundInterest(uint256, uint40) returns uint256 {
    axiom forall uint256 x. forall uint40 t. symbolicCompundInterest(x, t) >= 1;
}

// ghost symbolic_compund_interest(uint256, uint40, uint256) returns uint256 {
//     axiom forall uint256 x. forall uint40 t1. forall uint256 t2. symbolic_compund_interest(x, t1, t2) >= 10;
// }

ghost sumAllBalance() returns uint256 {
    init_state axiom sumAllBalance() == 0;
}

hook Sstore _userState[KEY address a].balance uint128 balance (uint128 old_balance) STORAGE {
  havoc sumAllBalance assuming sumAllBalance@new() == sumAllBalance@old() + balance - old_balance;
}
hook Sload uint128 balance _userState[KEY address a].balance  STORAGE {
  require sumAllBalance() >= balance;
}

// invariant totalSupplyEqualsSumAllBalance(env e)
//     totalSupply(e) <= scaledBalanceOfToBalanceOf(sumAllBalance())
//     filtered { f -> !f.isView && !disAllowedFunctions(f) }


invariant principalLessThanBalance(env e, address user)
    principalBalanceOf(e, user) <= balanceOf(e, user)
    filtered { f -> !disAllowedFunctions(f) }

/**
Burning user u amount of x tokens, decreases his balanceOf the user by x. 
(balance is decreased by x and not scaled x because of the summarization to one ray)
*/
rule integrityBurn(address a, uint256 x) {
	env e;
	require getIncentivesController(e) == 0;
	uint256 index;
	uint256 balancebefore = balanceOf(e, a);
	burn(e,a,x);
	
	uint256 balanceAfter = balanceOf(e, a);
	assert balanceAfter == balancebefore - x;
}

/**
Mint to user u amount of x tokens, increases his balanceOf the user by x. 
(balance is increased by x and not scaled x because of the summarization to one ray)
*/
rule integrityMint(address a, uint256 x) {
	env e;
	address delegatedUser;
	require getIncentivesController(e) == 0;
	uint256 index;
	uint256 balancebefore = balanceOf(e,a);
	mint(e, delegatedUser, a, x, index);
	
	uint256 balanceAfter = balanceOf(e,a);
	assert balanceAfter == balancebefore+x;
}

// lastUpdated timestamp must be in the past.
rule integrityTimeStamp(address user, method f) 
    filtered { f ->  !f.isView && !disAllowedFunctions(f) }
{
	env e;
	require getUserLastUpdated(e, user) <= e.block.timestamp;
	calldataarg arg;
    f(e,arg);
	assert getUserLastUpdated(e, user) <= e.block.timestamp;
}

rule integrityDelegationWithSig(address delegator, address delegatee, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) {
    env e;
    uint256 oldNonce = nonces(e, delegator);
    delegationWithSig(e, delegator, delegatee, value, deadline, v, r, s);
    assert nonces(e, delegator) == oldNonce + 1 && borrowAllowance(e, delegator, delegatee) == value;
}

/*
Burn is additive, can performed either all at once or gradually
burn(from,to,x,index); burn(from,to,y,index) ~ burn(from,to,x+y,index) at the same initial state
*/
rule additiveBurn(address a, uint256 x,  uint256 y) {
	env e;
	storage initialStorage = lastStorage;
	burn(e, a, x);
	burn(e, a, y);
	uint256 balanceScenario1 = balanceOf(e, a);
	uint256 t = x + y;
	burn(e, a, t) at initialStorage;

	uint256 balanceScenario2 = balanceOf(e, a);
	assert balanceScenario1 == balanceScenario2, "burn is not additive";
}

// minting and then buring Variable Debt Token should have no effect on the users balance
rule inverseMintBurn(address a, address delegatedUser, uint256 amount, uint256 rate) {
	env e;
	uint256 balancebefore = balanceOf(e, a);
	mint(e, delegatedUser, a, amount, rate);
	burn(e, a, amount);
	uint256 balanceAfter = balanceOf(e, a);
	assert balancebefore == balanceAfter, "burn is not the inverse of mint";
}

// Only the pool with burn or mint operation can change the total supply. (assuming the getReserveNormalizedVariableDebt is not changed)
rule whoChangeTotalSupply(method f)
    filtered { f ->  !f.isView && !disAllowedFunctions(f) }
{
    env e;
    uint256 oldTotalSupply = totalSupply(e);
    calldataarg args;
    f(e, args);
    uint256 newTotalSupply = totalSupply(e);
    assert oldTotalSupply != newTotalSupply => 
           (e.msg.sender == POOL(e) && 
           (f.selector == burn(address, uint256).selector || 
            f.selector == mint(address, address, uint256, uint256).selector));
}

// only delegationWithSig operation can change the nonce.
rule nonceChangePermits(method f) 
    filtered { f ->  !f.isView && !disAllowedFunctions(f) } 
{
    env e;
    address user;
    uint256 oldNonce = nonces(e, user);
    calldataarg args;
    f(e, args);
    uint256 newNonce = nonces(e, user);
    assert oldNonce != newNonce => f.selector == delegationWithSig(address, address, uint256, uint256, uint8, bytes32, bytes32).selector;
}

/*
Mint is additive, can performed either all at once or gradually
mint(u,x,index); mint(u,y,index) ~ mint(u,x+y,index) at the same initial state
*/
rule additiveMint(address a, uint256 x, uint256 y) {
	env e;
	address delegatedUser;
	require getIncentivesController(e) == 0;
	require getUserStableRate(e, a) == 0;
	uint256 index;
	storage initialStorage = lastStorage;
	mint(e, delegatedUser, a, x, index);
	mint(e, delegatedUser, a, y, index);
	uint256 balanceScenario1 = balanceOf(e, a);
	
	uint256 t = x + y;
	mint(e, delegatedUser, a, t ,index) at initialStorage;
	
	uint256 balanceScenario2 = balanceOf(e, a);
	assert balanceScenario1 == balanceScenario2, "mint is not additive";
}

/*
Each operation of Stable Debt Token can change at most one user's balance.
*/
rule balanceOfChange(address a, address b, method f) 
    filtered { f ->  !f.isView && !disAllowedFunctions(f) }
{
	env e;
	require a != b;
	uint256 balanceABefore = balanceOf(e, a);
	uint256 balanceBBefore = balanceOf(e, b);
	 
	calldataarg arg;
    f(e, arg); 

	uint256 balanceAAfter = balanceOf(e, a);
	uint256 balanceBAfter = balanceOf(e, b);
	
	assert (balanceABefore == balanceAAfter || balanceBBefore == balanceBAfter);
}

// Buring zero amount of tokens should have no effect.
rule burnZeroDoesntChangeBalance(address u) {
	env e;
	uint256 balanceBefore = balanceOf(e, u);
	burn(e, u, 0);
	uint256 balanceAfter = balanceOf(e, u);
	assert balanceBefore == balanceAfter;
}

/*
Burning one user atokens should have no effect on other users that are not involved in the action.
*/
rule burnNoChangeToOther(address user, uint256 amount, address other) {
  
	require other != user;
	
	env e;
	uint256 otherDataBefore = additionalData(other);
	uint256 otherBalanceBefore = balanceOf(e, other);
	
	burn(e, user, amount);
	
	uint256 otherDataAfter = additionalData(other);
	uint256 otherBalanceAfter = balanceOf(e, other);

	assert otherDataBefore == otherDataAfter && 
	       otherBalanceBefore == otherBalanceAfter;
}

/*
Minting ATokens for a user should have no effect on other users that are not involved in the action.
*/
rule mintNoChangeToOther(address user, address onBehalfOf, uint256 amount, uint256 rate, address other) {
	require other != user && other != onBehalfOf;

	env e;
	uint128 userDataBefore = additionalData(user);
	uint128 otherDataBefore = additionalData(other);
	uint256 userBalanceBefore = balanceOf(e, user);
	uint256 otherBalanceBefore = balanceOf(e, other);

	mint(e, user, onBehalfOf, amount, rate);

  uint128 userDataAfter = additionalData(user);
	uint128 otherDataAfter = additionalData(other);
	uint256 userBalanceAfter = balanceOf(e, user);
	uint256 otherBalanceAfter = balanceOf(e, other);

	if (user != onBehalfOf) {
		assert userBalanceBefore == userBalanceAfter && userDataBefore == userDataAfter; 
	}

	assert otherBalanceBefore == otherBalanceAfter && otherDataBefore == otherDataAfter;
}

/*
Ensuring that the defined disallowed functions revert in any case.
*/
rule disallowedFunctionalities(method f)
    filtered { f -> disAllowedFunctions(f) }
{
    env e; calldataarg args;
    f@withrevert(e, args);
    assert lastReverted;
}

/*
By finding a violation, this rule checks that one can burn when there totalSupply is zero.
It is commented out since it should fail 
rule canBurnAtZero() {
	env e;
	address user;
	require totalSupply(e) == 0;
	uint256 userRate = additionalData(user);
	uint256 previousPrincipalBalance;
    uint256 newPrincipalBalance;
    uint256 diff;
	previousPrincipalBalance, newPrincipalBalance, diff =  _calculateBalanceIncrease(e,user);
	uint256 amount; 
	invoke burn(e,user,amount);
	assert amount>0 => lastReverted;
}
*/



================================================
FILE: certora/specs/UserConfiguration.spec
================================================
methods {
    setBorrowing(uint256, bool) envfree
    setUsingAsCollateral(uint256, bool) envfree
    isUsingAsCollateralOrBorrowing(uint256) returns bool envfree
    isBorrowing(uint256) returns bool envfree
    isUsingAsCollateral(uint256) returns bool envfree
	isUsingAsCollateralOne() returns bool envfree
    isUsingAsCollateralAny() returns bool envfree
    isBorrowingOne() returns (bool) envfree
    isBorrowingAny() returns bool envfree
    isEmpty() returns bool envfree    
    getIsolationModeState() returns (bool, address, uint256) envfree
    getSiloedBorrowingState() returns (bool, address) envfree
	isIsolated() returns bool envfree

}


// checks the integrity of set Borrowing function and correct retrieval of the corresponding getter
rule setBorrowing(uint256 reserveIndex, bool borrowing)
{	
	setBorrowing(reserveIndex, borrowing);
	assert isBorrowing(reserveIndex) == borrowing, "unexpected result";
}

// checks that changes made to a specific borrowing asset doesnt effect the other assets
rule setBorrowingNoChangeToOther(uint256 reserveIndex, uint256 reserveIndexOther, bool borrowing)
{
    // reserveIndexOther info
	bool otherReserveBorrowingBefore =  isBorrowing(reserveIndexOther);
	bool otherReserveCollateralBefore = isUsingAsCollateral(reserveIndexOther);

	setBorrowing(reserveIndex, borrowing);
	
    // reserveIndex info
    bool ReserveBorrowingAfter =  isBorrowing(reserveIndex);
    // reserveIndexOther info
    bool otherReserveBorrowingAfter = isBorrowing(reserveIndexOther);
	bool otherReserveCollateralAfter = isUsingAsCollateral(reserveIndexOther);

    assert (reserveIndex != reserveIndexOther => 
                (otherReserveBorrowingAfter == otherReserveBorrowingBefore && 
                otherReserveCollateralAfter == otherReserveCollateralBefore));
}

// checks the integrity of set UsingAsCollateral function and correct retrieval of the corresponding getter
rule  setUsingAsCollateral(uint256 reserveIndex, bool usingAsCollateral)
{
	setUsingAsCollateral(reserveIndex, usingAsCollateral);
	assert isUsingAsCollateral(reserveIndex) == usingAsCollateral;
}

// checks that changes made to a specific borrowing asset doesnt effect the other assets
rule setCollateralNoChangeToOther(uint256 reserveIndex, uint256 reserveIndexOther, bool usingAsCollateral)
{
    // reserveIndexOther info
	bool otherReserveBorrowingBefore =  isBorrowing(reserveIndexOther);
	bool otherReserveCollateralBefore = isUsingAsCollateral(reserveIndexOther);

	setUsingAsCollateral(reserveIndex, usingAsCollateral);
	
    // reserveIndex info
    bool ReserveBorrowingAfter =  isBorrowing(reserveIndex);
    // reserveIndexOther info
    bool otherReserveBorrowingAfter = isBorrowing(reserveIndexOther);
	bool otherReserveCollateralAfter = isUsingAsCollateral(reserveIndexOther);

    assert (reserveIndex != reserveIndexOther => 
                (otherReserveBorrowingAfter == otherReserveBorrowingBefore && 
                otherReserveCollateralAfter == otherReserveCollateralBefore));
}

// // isUsingAsCollateralOrBorrowing <=> isBorrowing || isUsingAsCollateral
// rule IntegrityOfisUsingAsCollateralOrBorrowing(uint256 reserveIndex, bool borrowing, bool usingAsCollateral){
// 	bool reserveBorrowing =  isBorrowing(reserveIndex);
// 	bool reserveCollateral = isUsingAsCollateral(reserveIndex);
//     bool borrowingOrCollateral = isUsingAsCollateralOrBorrowing(reserveIndex);
//     assert ((reserveBorrowing || reserveCollateral) <=> borrowingOrCollateral);
// }

invariant isUsingAsCollateralOrBorrowing(uint256 reserveIndex ) 
	(isUsingAsCollateral(reserveIndex) || isBorrowing(reserveIndex)) <=>  isUsingAsCollateralOrBorrowing(reserveIndex) 

// // if at 1 asset is used as collateral and isUsingAsCollateralOne, then any other asset is not used as collateral
// rule integrityOfisUsingAsCollateralOne(uint256 reserveIndex, uint256 reserveIndexOther){
//     bool reserveCollateral = isUsingAsCollateral(reserveIndex);
//     bool reserveCollateralOther = isUsingAsCollateral(reserveIndexOther);
//     assert reserveCollateral && isUsingAsCollateralOne() => !reserveCollateralOther || reserveIndexOther == reserveIndex;
// }

invariant integrityOfisUsingAsCollateralOne(uint256 reserveIndex, uint256 reserveIndexOther)
    isUsingAsCollateral(reserveIndex) && isUsingAsCollateralOne() => 
        !isUsingAsCollateral(reserveIndexOther) || reserveIndexOther == reserveIndex

// // if at least 1 asset is used as collateral, isUsingAsCollateralAny is true
// // ** not implmented yet - if isUsingAsCollateralAny is true then there exist at least 1 asset that is being used as collateral
// rule integrityOfisUsingAsCollateralAny(uint256 reserveIndex){
//     bool reserveCollateral = isUsingAsCollateral(reserveIndex);
//     assert reserveCollateral => isUsingAsCollateralAny();
//     // assert exists uint256 index. isUsingAsCollateralAny() => isUsingAsCollateral(index);
// }

invariant integrityOfisUsingAsCollateralAny(uint256 reserveIndex)
    isUsingAsCollateral(reserveIndex) => isUsingAsCollateralAny()

// // if at 1 asset is used for borrowing and isBorrowingOne, then any other asset is not used for borrowing
// rule integrityOfisBorrowingOne(uint256 reserveIndex, uint256 reserveIndexOther){
//     bool reserveBorrowing = isBorrowing(reserveIndex);
//     bool reserveBorrowingOther = isBorrowing(reserveIndexOther);
//     assert reserveBorrowing && isBorrowingOne() => !reserveBorrowingOther || reserveIndexOther == reserveIndex;
// }

invariant integrityOfisBorrowingOne(uint256 reserveIndex, uint256 reserveIndexOther)
    isBorrowing(reserveIndex) && isBorrowingOne() => !isBorrowing(reserveIndexOther) || reserveIndexOther == reserveIndex

// // if at least 1 asset is borrowed, isBorrowing is true
// // ** not implmented yet - if isBorrowingAny is true then there exist at least 1 asset that is being used for borrowing
// rule integrityOfisBorrowingAny(uint256 reserveIndex){
//     bool reserveBorrowing = isBorrowing(reserveIndex);
//     assert reserveBorrowing => isBorrowingAny();
//     // assert exists uint256 index. isBorrowingAny() => isBorrowing(index);
// }

invariant integrityOfisBorrowingAny(uint256 reserveIndex)
    isBorrowing(reserveIndex) => isBorrowingAny()

// // if user data is empty then for any index neither borrowing nor collateral is set
// rule integrityOfEmpty(uint256 reserveIndex){
//     bool borrowingOrCollateral = isUsingAsCollateralOrBorrowing(reserveIndex);
//     bool anyBorrowed = isBorrowingAny();
//     assert isEmpty() => !borrowingOrCollateral;
// }

invariant integrityOfEmpty(uint256 reserveIndex) 
	 isEmpty() => !isBorrowingAny() && !isUsingAsCollateralOrBorrowing(reserveIndex)

// invariant notEmpty(uint256 reserveIndex) 
// 	(isBorrowingAny() ||  isUsingAsCollateral(reserveIndex)) => !isEmpty()

// if IsolationModeState is active then there must be exactly one asset register as collateral.
// note that this is a necessary requirement, but it is not sufficient.
rule integrityOfIsolationModeState(){
    bool existExactlyOneCollateral = isUsingAsCollateralOne();
    bool answer; address asset; uint256 ceiling;
    answer, asset, ceiling = getIsolationModeState();
    assert answer => existExactlyOneCollateral;
}

// invariant integrityOfIsolationModeState(calldataarg args)
//     !isUsingAsCollateralOne() => !isIsolated()

// if IsolationModeState is active then there must be exactly one asset register as collateral.
// note that this is a necessary requirement, but it is not sufficient.
rule integrityOfSiloedBorrowingState(){
    bool existExactlyOneBorrow = isBorrowingOne();
    bool answer; address asset;
    answer, asset = getSiloedBorrowingState();
    assert answer => existExactlyOneBorrow;
}

// invariant integrityOfSiloedBorrowingState(calldataarg args)
//     !isBorrowingOne() => !isSiloed()


================================================
FILE: certora/specs/VariableDebtToken.spec
================================================
methods {
	// summarization for elimination the raymul operation in balance of and totalSupply.
	getReserveNormalizedVariableDebt(address asset) returns (uint256) => gRNVB()
	setAdditionalData(address user, uint128 data) envfree
    handleAction(address, uint256, uint256) => NONDET
    scaledBalanceOfToBalanceOf(uint256) returns (uint256) envfree
    balanceOf(address) returns (uint256) envfree
}

definition ray() returns uint = 1000000000000000000000000000;
definition bound() returns uint = ((gRNVB() / ray()) + 1 ) / 2;
// summerization for scaledBlanaceOf -> regularBalanceOf + 0.5 (canceling the rayMul)
ghost gRNVB() returns uint256 {
	axiom gRNVB() == 7 * ray();
}
/*
Due to rayDiv and RayMul Rounding (+ 0.5) - blance could increase by (gRNI() / Ray() + 1) / 2.
*/
definition bounded_error_eq(uint x, uint y, uint scale) returns bool = x <= y + (bound() * scale) && x + (bound() * scale) >= y;



definition disAllowedFunctions(method f) returns bool = 
            f.selector == transfer(address, uint256).selector ||
            f.selector == allowance(address, address).selector ||
            f.selector == approve(address, uint256).selector ||
            f.selector == transferFrom(address, address, uint256).selector ||
            f.selector == increaseAllowance(address, uint256).selector ||
            f.selector == decreaseAllowance(address, uint256).selector;


ghost sumAllBalance() returns uint256 {
    init_state axiom sumAllBalance() == 0;
}

hook Sstore _userState[KEY address a].balance uint128 balance (uint128 old_balance) STORAGE {
  havoc sumAllBalance assuming sumAllBalance@new() == sumAllBalance@old() + balance - old_balance;
}

invariant totalSupplyEqualsSumAllBalance(env e)
    totalSupply(e) == scaledBalanceOfToBalanceOf(sumAllBalance())
    filtered { f -> !f.isView && !disAllowedFunctions(f) }
    {
        preserved mint(address user, address onBehalfOf, uint256 amount, uint256 index) with (env e2) {
            require index == gRNVB();
        }
        preserved burn(address from, uint256 amount, uint256 index) with (env e3) {
            require index == gRNVB();
        }
    }


// Only the pool with burn or mint operation can change the total supply. (assuming the getReserveNormalizedVariableDebt is not changed)
rule whoChangeTotalSupply(method f) 
    filtered { f ->  !f.isView && !disAllowedFunctions(f) } 
{
    env e;
    uint256 oldTotalSupply = totalSupply(e);
    calldataarg args;
    f(e, args);
    uint256 newTotalSupply = totalSupply(e);
    assert oldTotalSupply != newTotalSupply => 
           (e.msg.sender == POOL(e) && 
           (f.selector == burn(address, uint256, uint256).selector || 
            f.selector == mint(address, address, uint256, uint256).selector));
}

/*
Each operation of Variable Debt Token can change at most one user's balance.
*/
rule balanceOfChange(address a, address b, method f) 
    filtered { f ->  !f.isView && !disAllowedFunctions(f) }
{
	env e;
	require a != b;
	uint256 balanceABefore = balanceOf(a);
	uint256 balanceBBefore = balanceOf(b);
	 
	calldataarg arg;
    f(e, arg); 

	uint256 balanceAAfter = balanceOf(a);
	uint256 balanceBAfter = balanceOf(b);
	
	assert (balanceABefore == balanceAAfter || balanceBBefore == balanceBAfter);
}

// only delegationWithSig operation can change the nonce.
rule nonceChangePermits(method f) 
    filtered { f ->  !f.isView && !disAllowedFunctions(f) } 
{
    env e;
    address user;
    uint256 oldNonce = nonces(e, user);
    calldataarg args;
    f(e, args);
    uint256 newNonce = nonces(e, user);
    assert oldNonce != newNonce => f.selector == delegationWithSig(address, address, uint256, uint256, uint8, bytes32, bytes32).selector;
}

// minting and then buring Variable Debt Token should have no effect on the users balance
rule inverseMintBurn(address a, address delegatedUser, uint256 amount, uint256 index) {
	env e;
	uint256 balancebefore = balanceOf(a);
	mint(e, delegatedUser, a, amount, index);
	burn(e, a, amount, index);
	uint256 balanceAfter = balanceOf(a);
	assert balancebefore == balanceAfter, "burn is not the inverse of mint";
}

rule integrityDelegationWithSig(address delegator, address delegatee, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) {
    env e;
    uint256 oldNonce = nonces(e, delegator);
    delegationWithSig(e, delegator, delegatee, value, deadline, v, r, s);
    assert nonces(e, delegator) == oldNonce + 1 && borrowAllowance(e, delegator, delegatee) == value;
}

/**
Burning user u amount of amount tokens, decreases his balanceOf the user by amount. 
(balance is decreased by amount and not scaled amount because of the summarization to one ray)
*/
rule integrityOfBurn(address u, uint256 amount) {
	env e;
	uint256 index = gRNVB();
	uint256 balanceBeforeUser = balanceOf(u);
	uint256 totalSupplyBefore = totalSupply(e); 

	burn(e, u, amount, index);
	
	uint256 balanceAfterUser = balanceOf(u);
	uint256 totalSupplyAfter = totalSupply(e);

    assert bounded_error_eq(totalSupplyAfter, totalSupplyBefore - amount, 1), "total supply integrity"; // total supply reduced
    assert bounded_error_eq(balanceAfterUser, balanceBeforeUser - amount, 1), "integrity break";  // user burns ATokens to recieve underlying
}

/*
Burn is additive, can performed either all at once or gradually
burn(from,to,x,index); burn(from,to,y,index) ~ burn(from,to,x+y,index) at the same initial state
*/
rule additiveBurn(address user1, address user2, uint256 x, uint256 y) {
	env e;
	uint256 index = gRNVB();
    require (user1 != user2  && balanceOf(user1) == balanceOf(user2));
	require user1 != currentContract && user2 != currentContract;

    burn(e, user1, x, index);
	burn(e, user1, y, index);
	uint256 balanceScenario1 = balanceOf(user1);

	burn(e, user2, x+y, index);
	uint256 balanceScenario2 = balanceOf(user2);

    assert bounded_error_eq(balanceScenario1, balanceScenario2, 3), "burn is not additive";
	// assert balanceScenario1 == balanceScenario2, "burn is not additive";
}

/*
Mint is additive, can performed either all at once or gradually
mint(from,to,x,index); mint(from,to,y,index) ~ mint(from,to,x+y,index) at the same initial state
*/
rule additiveMint(address user1, address user2, address user3, uint256 x, uint256 y) {
	env e;
	uint256 index = gRNVB();
    require (user1 != user2  && balanceOf(user1) == balanceOf(user2));

    mint(e, user3, user1, x, index);
	mint(e, user3, user1, y, index);
	uint256 balanceScenario1 = balanceOf(user1);

	mint(e, user3, user2, x+y, index);
	uint256 balanceScenario2 = balanceOf(user2);

    assert bounded_error_eq(balanceScenario1, balanceScenario2, 3), "burn is not additive";
	// assert balanceScenario1 == balanceScenario2, "burn is not additive";
}

/**
Mint to user u amount of x tokens, increases his balanceOf the user by x. 
(balance is increased by x and not scaled x because of the summarization to one ray)
*/
rule integrityMint(address a, uint256 x) {
	env e;
	address delegatedUser;
	uint256 index = gRNVB();
	uint256 underlyingBalanceBefore = balanceOf(a);
	uint256 atokenBlanceBefore = scaledBalanceOf(e, a);
	uint256 totalATokenSupplyBefore = scaledTotalSupply(e);
	mint(e, delegatedUser, a, x, index);
	
	uint256 underlyingBalanceAfter = balanceOf(a);
	uint256 atokenBlanceAfter = scaledBalanceOf(e, a);
	uint256 totalATokenSupplyAfter = scaledTotalSupply(e);

	assert atokenBlanceAfter - atokenBlanceBefore == totalATokenSupplyAfter - totalATokenSupplyBefore;
	assert totalATokenSupplyAfter > totalATokenSupplyBefore;
    assert bounded_error_eq(underlyingBalanceAfter, underlyingBalanceBefore+x, 1);
    // assert balanceAfter == balancebefore+x;
}

// Buring zero amount of tokens should have no effect.
rule burnZeroDoesntChangeBalance(address u, uint256 index) {
	env e;
	uint256 balanceBefore = balanceOf(u);
	invoke burn(e, u, 0, index);
	uint256 balanceAfter = balanceOf(u);
	assert balanceBefore == balanceAfter;
}

/*
Burning one user atokens should have no effect on other users that are not involved in the action.
*/
rule burnNoChangeToOther(address user, uint256 amount, uint256 index, address other) {
  
	require other != user;
	
	env e;
	uint256 otherBalanceBefore = balanceOf(other);
	
	burn(e, user, amount, index);
	
	uint256 otherBalanceAfter = balanceOf(other);

	assert otherBalanceBefore == otherBalanceAfter;
}

/*
Minting ATokens for a user should have no effect on other users that are not involved in the action.
*/
rule mintNoChangeToOther(address user, address onBehalfOf, uint256 amount, uint256 index, address other) {
	require other != user && other != onBehalfOf;

	env e;
	uint256 userBalanceBefore = balanceOf(user);
	uint256 otherBalanceBefore = balanceOf(other);

	mint(e, user, onBehalfOf, amount, index);

  	uint256 userBalanceAfter = balanceOf(user);
	uint256 otherBalanceAfter = balanceOf(other);

	if (user != onBehalfOf) {
		assert userBalanceBefore == userBalanceAfter ; 
	}

	assert otherBalanceBefore == otherBalanceAfter ;
}

/*
Ensuring that the defined disallowed functions revert in any case.
*/
rule disallowedFunctionalities(method f)
    filtered { f -> disAllowedFunctions(f) }
{
    env e; calldataarg args;
    f@withrevert(e, args);
    assert lastReverted;
}


================================================
FILE: contracts/dependencies/chainlink/AggregatorInterface.sol
================================================
// SPDX-License-Identifier: MIT
// Chainlink Contracts v0.8
pragma solidity ^0.8.0;

interface AggregatorInterface {
  function latestAnswer() external view returns (int256);

  function latestTimestamp() external view returns (uint256);

  function latestRound() external view returns (uint256);

  function getAnswer(uint256 roundId) external view returns (int256);

  function getTimestamp(uint256 roundId) external view returns (uint256);

  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);

  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);
}



================================================
FILE: contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol
================================================
// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity ^0.8.0;

import {IERC20} from '../../openzeppelin/contracts/IERC20.sol';

/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library
/// @author Gnosis Developers
/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.
library GPv2SafeERC20 {
  /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts
  /// also when the token returns `false`.
  function safeTransfer(IERC20 token, address to, uint256 value) internal {
    bytes4 selector_ = token.transfer.selector;

    // solhint-disable-next-line no-inline-assembly
    assembly {
      let freeMemoryPointer := mload(0x40)
      mstore(freeMemoryPointer, selector_)
      mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))
      mstore(add(freeMemoryPointer, 36), value)

      if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {
        returndatacopy(0, 0, returndatasize())
        revert(0, returndatasize())
      }
    }

    require(getLastTransferResult(token), 'GPv2: failed transfer');
  }

  /// @dev Wrapper around a call to the ERC20 function `transferFrom` that
  /// reverts also when the token returns `false`.
  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
    bytes4 selector_ = token.transferFrom.selector;

    // solhint-disable-next-line no-inline-assembly
    assembly {
      let freeMemoryPointer := mload(0x40)
      mstore(freeMemoryPointer, selector_)
      mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))
      mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))
      mstore(add(freeMemoryPointer, 68), value)

      if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {
        returndatacopy(0, 0, returndatasize())
        revert(0, returndatasize())
      }
    }

    require(getLastTransferResult(token), 'GPv2: failed transferFrom');
  }

  /// @dev Verifies that the last return was a successful `transfer*` call.
  /// This is done by checking that the return data is either empty, or
  /// is a valid ABI encoded boolean.
  function getLastTransferResult(IERC20 token) private view returns (bool success) {
    // NOTE: Inspecting previous return data requires assembly. Note that
    // we write the return data to memory 0 in the case where the return
    // data size is 32, this is OK since the first 64 bytes of memory are
    // reserved by Solidy as a scratch space that can be used within
    // assembly blocks.
    // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>
    // solhint-disable-next-line no-inline-assembly
    assembly {
      /// @dev Revert with an ABI encoded Solidity error with a message
      /// that fits into 32-bytes.
      ///
      /// An ABI encoded Solidity error has the following memory layout:
      ///
      /// ------------+----------------------------------
      ///  byte range | value
      /// ------------+----------------------------------
      ///  0x00..0x04 |        selector("Error(string)")
      ///  0x04..0x24 |      string offset (always 0x20)
      ///  0x24..0x44 |                    string length
      ///  0x44..0x64 | string value, padded to 32-bytes
      function revertWithMessage(length, message) {
        mstore(0x00, '\x08\xc3\x79\xa0')
        mstore(0x04, 0x20)
        mstore(0x24, length)
        mstore(0x44, message)
        revert(0x00, 0x64)
      }

      switch returndatasize()
      // Non-standard ERC20 transfer without return.
      case 0 {
        // NOTE: When the return data size is 0, verify that there
        // is code at the address. This is done in order to maintain
        // compatibility with Solidity calling conventions.
        // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>
        if iszero(extcodesize(token)) {
          revertWithMessage(20, 'GPv2: not a contract')
        }

        success := 1
      }
      // Standard ERC20 transfer returning boolean success value.
      case 32 {
        returndatacopy(0, 0, returndatasize())

        // NOTE: For ABI encoding v1, any non-zero value is accepted
        // as `true` for a boolean. In order to stay compatible with
        // OpenZeppelin's `SafeERC20` library which is known to work
        // with the existing ERC20 implementation we care about,
        // make sure we return success for any non-zero return value
        // from the `transfer*` call.
        success := iszero(iszero(mload(0)))
      }
      default {
        revertWithMessage(31, 'GPv2: malformed transfer result')
      }
    }
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/AccessControl.sol
================================================
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import './IAccessControl.sol';
import './Context.sol';
import './Strings.sol';
import './ERC165.sol';

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
  struct RoleData {
    mapping(address => bool) members;
    bytes32 adminRole;
  }

  mapping(bytes32 => RoleData) private _roles;

  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

  /**
   * @dev Modifier that checks that an account has a specific role. Reverts
   * with a standardized message including the required role.
   *
   * The format of the revert reason is given by the following regular expression:
   *
   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
   *
   * _Available since v4.1._
   */
  modifier onlyRole(bytes32 role) {
    _checkRole(role, _msgSender());
    _;
  }

  /**
   * @dev See {IERC165-supportsInterface}.
   */
  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
    return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
  }

  /**
   * @dev Returns `true` if `account` has been granted `role`.
   */
  function hasRole(bytes32 role, address account) public view override returns (bool) {
    return _roles[role].members[account];
  }

  /**
   * @dev Revert with a standard message if `account` is missing `role`.
   *
   * The format of the revert reason is given by the following regular expression:
   *
   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
   */
  function _checkRole(bytes32 role, address account) internal view {
    if (!hasRole(role, account)) {
      revert(
        string(
          abi.encodePacked(
            'AccessControl: account ',
            Strings.toHexString(uint160(account), 20),
            ' is missing role ',
            Strings.toHexString(uint256(role), 32)
          )
        )
      );
    }
  }

  /**
   * @dev Returns the admin role that controls `role`. See {grantRole} and
   * {revokeRole}.
   *
   * To change a role's admin, use {_setRoleAdmin}.
   */
  function getRoleAdmin(bytes32 role) public view override returns (bytes32) {
    return _roles[role].adminRole;
  }

  /**
   * @dev Grants `role` to `account`.
   *
   * If `account` had not been already granted `role`, emits a {RoleGranted}
   * event.
   *
   * Requirements:
   *
   * - the caller must have ``role``'s admin role.
   */
  function grantRole(
    bytes32 role,
    address account
  ) public virtual override onlyRole(getRoleAdmin(role)) {
    _grantRole(role, account);
  }

  /**
   * @dev Revokes `role` from `account`.
   *
   * If `account` had been granted `role`, emits a {RoleRevoked} event.
   *
   * Requirements:
   *
   * - the caller must have ``role``'s admin role.
   */
  function revokeRole(
    bytes32 role,
    address account
  ) public virtual override onlyRole(getRoleAdmin(role)) {
    _revokeRole(role, account);
  }

  /**
   * @dev Revokes `role` from the calling account.
   *
   * Roles are often managed via {grantRole} and {revokeRole}: this function's
   * purpose is to provide a mechanism for accounts to lose their privileges
   * if they are compromised (such as when a trusted device is misplaced).
   *
   * If the calling account had been granted `role`, emits a {RoleRevoked}
   * event.
   *
   * Requirements:
   *
   * - the caller must be `account`.
   */
  function renounceRole(bytes32 role, address account) public virtual override {
    require(account == _msgSender(), 'AccessControl: can only renounce roles for self');

    _revokeRole(role, account);
  }

  /**
   * @dev Grants `role` to `account`.
   *
   * If `account` had not been already granted `role`, emits a {RoleGranted}
   * event. Note that unlike {grantRole}, this function doesn't perform any
   * checks on the calling account.
   *
   * [WARNING]
   * ====
   * This function should only be called from the constructor when setting
   * up the initial roles for the system.
   *
   * Using this function in any other way is effectively circumventing the admin
   * system imposed by {AccessControl}.
   * ====
   */
  function _setupRole(bytes32 role, address account) internal virtual {
    _grantRole(role, account);
  }

  /**
   * @dev Sets `adminRole` as ``role``'s admin role.
   *
   * Emits a {RoleAdminChanged} event.
   */
  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
    bytes32 previousAdminRole = getRoleAdmin(role);
    _roles[role].adminRole = adminRole;
    emit RoleAdminChanged(role, previousAdminRole, adminRole);
  }

  function _grantRole(bytes32 role, address account) private {
    if (!hasRole(role, account)) {
      _roles[role].members[account] = true;
      emit RoleGranted(role, account, _msgSender());
    }
  }

  function _revokeRole(bytes32 role, address account) private {
    if (hasRole(role, account)) {
      _roles[role].members[account] = false;
      emit RoleRevoked(role, account, _msgSender());
    }
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/Address.sol
================================================
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
  /**
   * @dev Returns true if `account` is a contract.
   *
   * [IMPORTANT]
   * ====
   * It is unsafe to assume that an address for which this function returns
   * false is an externally-owned account (EOA) and not a contract.
   *
   * Among others, `isContract` will return false for the following
   * types of addresses:
   *
   *  - an externally-owned account
   *  - a contract in construction
   *  - an address where a contract will be created
   *  - an address where a contract lived, but was destroyed
   * ====
   */
  function isContract(address account) internal view returns (bool) {
    // This method relies on extcodesize, which returns 0 for contracts in
    // construction, since the code is only stored at the end of the
    // constructor execution.

    uint256 size;
    assembly {
      size := extcodesize(account)
    }
    return size > 0;
  }

  /**
   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
   * `recipient`, forwarding all available gas and reverting on errors.
   *
   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
   * of certain opcodes, possibly making contracts go over the 2300 gas limit
   * imposed by `transfer`, making them unable to receive funds via
   * `transfer`. {sendValue} removes this limitation.
   *
   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
   *
   * IMPORTANT: because control is transferred to `recipient`, care must be
   * taken to not create reentrancy vulnerabilities. Consider using
   * {ReentrancyGuard} or the
   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
   */
  function sendValue(address payable recipient, uint256 amount) internal {
    require(address(this).balance >= amount, 'Address: insufficient balance');

    (bool success, ) = recipient.call{value: amount}('');
    require(success, 'Address: unable to send value, recipient may have reverted');
  }

  /**
   * @dev Performs a Solidity function call using a low level `call`. A
   * plain `call` is an unsafe replacement for a function call: use this
   * function instead.
   *
   * If `target` reverts with a revert reason, it is bubbled up by this
   * function (like regular Solidity function calls).
   *
   * Returns the raw returned data. To convert to the expected return value,
   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
   *
   * Requirements:
   *
   * - `target` must be a contract.
   * - calling `target` with `data` must not revert.
   *
   * _Available since v3.1._
   */
  function functionCall(address target, bytes memory data) internal returns (bytes memory) {
    return functionCall(target, data, 'Address: low-level call failed');
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
   * `errorMessage` as a fallback revert reason when `target` reverts.
   *
   * _Available since v3.1._
   */
  function functionCall(
    address target,
    bytes memory data,
    string memory errorMessage
  ) internal returns (bytes memory) {
    return functionCallWithValue(target, data, 0, errorMessage);
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
   * but also transferring `value` wei to `target`.
   *
   * Requirements:
   *
   * - the calling contract must have an ETH balance of at least `value`.
   * - the called Solidity function must be `payable`.
   *
   * _Available since v3.1._
   */
  function functionCallWithValue(
    address target,
    bytes memory data,
    uint256 value
  ) internal returns (bytes memory) {
    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');
  }

  /**
   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
   * with `errorMessage` as a fallback revert reason when `target` reverts.
   *
   * _Available since v3.1._
   */
  function functionCallWithValue(
    address target,
    bytes memory data,
    uint256 value,
    string memory errorMessage
  ) internal returns (bytes memory) {
    require(address(this).balance >= value, 'Address: insufficient balance for call');
    require(isContract(target), 'Address: call to non-contract');

    (bool success, bytes memory returndata) = target.call{value: value}(data);
    return verifyCallResult(success, returndata, errorMessage);
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
   * but performing a static call.
   *
   * _Available since v3.3._
   */
  function functionStaticCall(
    address target,
    bytes memory data
  ) internal view returns (bytes memory) {
    return functionStaticCall(target, data, 'Address: low-level static call failed');
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
   * but performing a static call.
   *
   * _Available since v3.3._
   */
  function functionStaticCall(
    address target,
    bytes memory data,
    string memory errorMessage
  ) internal view returns (bytes memory) {
    require(isContract(target), 'Address: static call to non-contract');

    (bool success, bytes memory returndata) = target.staticcall(data);
    return verifyCallResult(success, returndata, errorMessage);
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
   * but performing a delegate call.
   *
   * _Available since v3.4._
   */
  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
   * but performing a delegate call.
   *
   * _Available since v3.4._
   */
  function functionDelegateCall(
    address target,
    bytes memory data,
    string memory errorMessage
  ) internal returns (bytes memory) {
    require(isContract(target), 'Address: delegate call to non-contract');

    (bool success, bytes memory returndata) = target.delegatecall(data);
    return verifyCallResult(success, returndata, errorMessage);
  }

  /**
   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
   * revert reason using the provided one.
   *
   * _Available since v4.3._
   */
  function verifyCallResult(
    bool success,
    bytes memory returndata,
    string memory errorMessage
  ) internal pure returns (bytes memory) {
    if (success) {
      return returndata;
    } else {
      // Look for revert reason and bubble it up if present
      if (returndata.length > 0) {
        // The easiest way to bubble the revert reason is using memory via assembly

        assembly {
          let returndata_size := mload(returndata)
          revert(add(32, returndata), returndata_size)
        }
      } else {
        revert(errorMessage);
      }
    }
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/Context.sol
================================================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
  function _msgSender() internal view virtual returns (address payable) {
    return payable(msg.sender);
  }

  function _msgData() internal view virtual returns (bytes memory) {
    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
    return msg.data;
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/ERC165.sol
================================================
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import './IERC165.sol';

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
  /**
   * @dev See {IERC165-supportsInterface}.
   */
  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
    return interfaceId == type(IERC165).interfaceId;
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/ERC20.sol
================================================
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import './Context.sol';
import './IERC20.sol';
import './SafeMath.sol';
import './Address.sol';

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20 {
  using SafeMath for uint256;
  using Address for address;

  mapping(address => uint256) private _balances;

  mapping(address => mapping(address => uint256)) private _allowances;

  uint256 private _totalSupply;

  string private _name;
  string private _symbol;
  uint8 private _decimals;

  /**
   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with
   * a default value of 18.
   *
   * To select a different value for {decimals}, use {_setupDecimals}.
   *
   * All three of these values are immutable: they can only be set once during
   * construction.
   */
  constructor(string memory name, string memory symbol) {
    _name = name;
    _symbol = symbol;
    _decimals = 18;
  }

  /**
   * @dev Returns the name of the token.
   */
  function name() public view returns (string memory) {
    return _name;
  }

  /**
   * @dev Returns the symbol of the token, usually a shorter version of the
   * name.
   */
  function symbol() public view returns (string memory) {
    return _symbol;
  }

  /**
   * @dev Returns the number of decimals used to get its user representation.
   * For example, if `decimals` equals `2`, a balance of `505` tokens should
   * be displayed to a user as `5,05` (`505 / 10 ** 2`).
   *
   * Tokens usually opt for a value of 18, imitating the relationship between
   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is
   * called.
   *
   * NOTE: This information is only used for _display_ purposes: it in
   * no way affects any of the arithmetic of the contract, including
   * {IERC20-balanceOf} and {IERC20-transfer}.
   */
  function decimals() public view returns (uint8) {
    return _decimals;
  }

  /**
   * @dev See {IERC20-totalSupply}.
   */
  function totalSupply() public view override returns (uint256) {
    return _totalSupply;
  }

  /**
   * @dev See {IERC20-balanceOf}.
   */
  function balanceOf(address account) public view override returns (uint256) {
    return _balances[account];
  }

  /**
   * @dev See {IERC20-transfer}.
   *
   * Requirements:
   *
   * - `recipient` cannot be the zero address.
   * - the caller must have a balance of at least `amount`.
   */
  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  /**
   * @dev See {IERC20-allowance}.
   */
  function allowance(
    address owner,
    address spender
  ) public view virtual override returns (uint256) {
    return _allowances[owner][spender];
  }

  /**
   * @dev See {IERC20-approve}.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
  function approve(address spender, uint256 amount) public virtual override returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  /**
   * @dev See {IERC20-transferFrom}.
   *
   * Emits an {Approval} event indicating the updated allowance. This is not
   * required by the EIP. See the note at the beginning of {ERC20};
   *
   * Requirements:
   * - `sender` and `recipient` cannot be the zero address.
   * - `sender` must have a balance of at least `amount`.
   * - the caller must have allowance for ``sender``'s tokens of at least
   * `amount`.
   */
  function transferFrom(
    address sender,
    address recipient,
    uint256 amount
  ) public virtual override returns (bool) {
    _transfer(sender, recipient, amount);
    _approve(
      sender,
      _msgSender(),
      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')
    );
    return true;
  }

  /**
   * @dev Atomically increases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {IERC20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
    return true;
  }

  /**
   * @dev Atomically decreases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {IERC20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   * - `spender` must have allowance for the caller of at least
   * `subtractedValue`.
   */
  function decreaseAllowance(
    address spender,
    uint256 subtractedValue
  ) public virtual returns (bool) {
    _approve(
      _msgSender(),
      spender,
      _allowances[_msgSender()][spender].sub(
        subtractedValue,
        'ERC20: decreased allowance below zero'
      )
    );
    return true;
  }

  /**
   * @dev Moves tokens `amount` from `sender` to `recipient`.
   *
   * This is internal function is equivalent to {transfer}, and can be used to
   * e.g. implement automatic token fees, slashing mechanisms, etc.
   *
   * Emits a {Transfer} event.
   *
   * Requirements:
   *
   * - `sender` cannot be the zero address.
   * - `recipient` cannot be the zero address.
   * - `sender` must have a balance of at least `amount`.
   */
  function _transfer(address sender, address recipient, uint256 amount) internal virtual {
    require(sender != address(0), 'ERC20: transfer from the zero address');
    require(recipient != address(0), 'ERC20: transfer to the zero address');

    _beforeTokenTransfer(sender, recipient, amount);

    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');
    _balances[recipient] = _balances[recipient].add(amount);
    emit Transfer(sender, recipient, amount);
  }

  /** @dev Creates `amount` tokens and assigns them to `account`, increasing
   * the total supply.
   *
   * Emits a {Transfer} event with `from` set to the zero address.
   *
   * Requirements
   *
   * - `to` cannot be the zero address.
   */
  function _mint(address account, uint256 amount) internal virtual {
    require(account != address(0), 'ERC20: mint to the zero address');

    _beforeTokenTransfer(address(0), account, amount);

    _totalSupply = _totalSupply.add(amount);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }

  /**
   * @dev Destroys `amount` tokens from `account`, reducing the
   * total supply.
   *
   * Emits a {Transfer} event with `to` set to the zero address.
   *
   * Requirements
   *
   * - `account` cannot be the zero address.
   * - `account` must have at least `amount` tokens.
   */
  function _burn(address account, uint256 amount) internal virtual {
    require(account != address(0), 'ERC20: burn from the zero address');

    _beforeTokenTransfer(account, address(0), amount);

    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');
    _totalSupply = _totalSupply.sub(amount);
    emit Transfer(account, address(0), amount);
  }

  /**
   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
   *
   * This is internal function is equivalent to `approve`, and can be used to
   * e.g. set automatic allowances for certain subsystems, etc.
   *
   * Emits an {Approval} event.
   *
   * Requirements:
   *
   * - `owner` cannot be the zero address.
   * - `spender` cannot be the zero address.
   */
  function _approve(address owner, address spender, uint256 amount) internal virtual {
    require(owner != address(0), 'ERC20: approve from the zero address');
    require(spender != address(0), 'ERC20: approve to the zero address');

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }

  /**
   * @dev Sets {decimals} to a value other than the default one of 18.
   *
   * WARNING: This function should only be called from the constructor. Most
   * applications that interact with token contracts will not expect
   * {decimals} to ever change, and may work incorrectly if it does.
   */
  function _setupDecimals(uint8 decimals_) internal {
    _decimals = decimals_;
  }

  /**
   * @dev Hook that is called before any transfer of tokens. This includes
   * minting and burning.
   *
   * Calling conditions:
   *
   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
   * will be to transferred to `to`.
   * - when `from` is zero, `amount` tokens will be minted for `to`.
   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
   * - `from` and `to` are never both zero.
   *
   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
   */
  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/IAccessControl.sol
================================================
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
  /**
   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
   *
   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
   * {RoleAdminChanged} not being emitted signaling this.
   *
   * _Available since v3.1._
   */
  event RoleAdminChanged(
    bytes32 indexed role,
    bytes32 indexed previousAdminRole,
    bytes32 indexed newAdminRole
  );

  /**
   * @dev Emitted when `account` is granted `role`.
   *
   * `sender` is the account that originated the contract call, an admin role
   * bearer except when using {AccessControl-_setupRole}.
   */
  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

  /**
   * @dev Emitted when `account` is revoked `role`.
   *
   * `sender` is the account that originated the contract call:
   *   - if using `revokeRole`, it is the admin role bearer
   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
   */
  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

  /**
   * @dev Returns `true` if `account` has been granted `role`.
   */
  function hasRole(bytes32 role, address account) external view returns (bool);

  /**
   * @dev Returns the admin role that controls `role`. See {grantRole} and
   * {revokeRole}.
   *
   * To change a role's admin, use {AccessControl-_setRoleAdmin}.
   */
  function getRoleAdmin(bytes32 role) external view returns (bytes32);

  /**
   * @dev Grants `role` to `account`.
   *
   * If `account` had not been already granted `role`, emits a {RoleGranted}
   * event.
   *
   * Requirements:
   *
   * - the caller must have ``role``'s admin role.
   */
  function grantRole(bytes32 role, address account) external;

  /**
   * @dev Revokes `role` from `account`.
   *
   * If `account` had been granted `role`, emits a {RoleRevoked} event.
   *
   * Requirements:
   *
   * - the caller must have ``role``'s admin role.
   */
  function revokeRole(bytes32 role, address account) external;

  /**
   * @dev Revokes `role` from the calling account.
   *
   * Roles are often managed via {grantRole} and {revokeRole}: this function's
   * purpose is to provide a mechanism for accounts to lose their privileges
   * if they are compromised (such as when a trusted device is misplaced).
   *
   * If the calling account had been granted `role`, emits a {RoleRevoked}
   * event.
   *
   * Requirements:
   *
   * - the caller must be `account`.
   */
  function renounceRole(bytes32 role, address account) external;
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/IERC165.sol
================================================
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
  /**
   * @dev Returns true if this contract implements the interface defined by
   * `interfaceId`. See the corresponding
   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
   * to learn more about how these ids are created.
   *
   * This function call must use less than 30 000 gas.
   */
  function supportsInterface(bytes4 interfaceId) external view returns (bool);
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/IERC20.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
  /**
   * @dev Returns the amount of tokens in existence.
   */
  function totalSupply() external view returns (uint256);

  /**
   * @dev Returns the amount of tokens owned by `account`.
   */
  function balanceOf(address account) external view returns (uint256);

  /**
   * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transfer(address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */
  function allowance(address owner, address spender) external view returns (uint256);

  /**
   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
  function approve(address spender, uint256 amount) external returns (bool);

  /**
   * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Emitted when `value` tokens are moved from one account (`from`) to
   * another (`to`).
   *
   * Note that `value` may be zero.
   */
  event Transfer(address indexed from, address indexed to, uint256 value);

  /**
   * @dev Emitted when the allowance of a `spender` for an `owner` is set by
   * a call to {approve}. `value` is the new allowance.
   */
  event Approval(address indexed owner, address indexed spender, uint256 value);
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IERC20} from './IERC20.sol';

interface IERC20Detailed is IERC20 {
  function name() external view returns (string memory);

  function symbol() external view returns (string memory);

  function decimals() external view returns (uint8);
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/Ownable.sol
================================================
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import './Context.sol';

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
  address private _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  /**
   * @dev Initializes the contract setting the deployer as the initial owner.
   */
  constructor() {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }

  /**
   * @dev Returns the address of the current owner.
   */
  function owner() public view returns (address) {
    return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(_owner == _msgSender(), 'Ownable: caller is not the owner');
    _;
  }

  /**
   * @dev Leaves the contract without owner. It will not be possible to call
   * `onlyOwner` functions anymore. Can only be called by the current owner.
   *
   * NOTE: Renouncing ownership will leave the contract without an owner,
   * thereby removing any functionality that is only available to the owner.
   */
  function renounceOwnership() public virtual onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }

  /**
   * @dev Transfers ownership of the contract to a new account (`newOwner`).
   * Can only be called by the current owner.
   */
  function transferOwnership(address newOwner) public virtual onlyOwner {
    require(newOwner != address(0), 'Ownable: new owner is the zero address');
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/SafeCast.sol
================================================
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)
pragma solidity ^0.8.0;

/**
 * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
 * checks.
 *
 * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
 * easily result in undesired exploitation or bugs, since developers usually
 * assume that overflows raise errors. `SafeCast` restores this intuition by
 * reverting the transaction when such an operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 *
 * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing
 * all math on `uint256` and `int256` and then downcasting.
 */
library SafeCast {
  /**
   * @dev Returns the downcasted uint224 from uint256, reverting on
   * overflow (when the input is greater than largest uint224).
   *
   * Counterpart to Solidity's `uint224` operator.
   *
   * Requirements:
   *
   * - input must fit into 224 bits
   */
  function toUint224(uint256 value) internal pure returns (uint224) {
    require(value <= type(uint224).max, "SafeCast: value doesn't fit in 224 bits");
    return uint224(value);
  }

  /**
   * @dev Returns the downcasted uint128 from uint256, reverting on
   * overflow (when the input is greater than largest uint128).
   *
   * Counterpart to Solidity's `uint128` operator.
   *
   * Requirements:
   *
   * - input must fit into 128 bits
   */
  function toUint128(uint256 value) internal pure returns (uint128) {
    require(value <= type(uint128).max, "SafeCast: value doesn't fit in 128 bits");
    return uint128(value);
  }

  /**
   * @dev Returns the downcasted uint96 from uint256, reverting on
   * overflow (when the input is greater than largest uint96).
   *
   * Counterpart to Solidity's `uint96` operator.
   *
   * Requirements:
   *
   * - input must fit into 96 bits
   */
  function toUint96(uint256 value) internal pure returns (uint96) {
    require(value <= type(uint96).max, "SafeCast: value doesn't fit in 96 bits");
    return uint96(value);
  }

  /**
   * @dev Returns the downcasted uint64 from uint256, reverting on
   * overflow (when the input is greater than largest uint64).
   *
   * Counterpart to Solidity's `uint64` operator.
   *
   * Requirements:
   *
   * - input must fit into 64 bits
   */
  function toUint64(uint256 value) internal pure returns (uint64) {
    require(value <= type(uint64).max, "SafeCast: value doesn't fit in 64 bits");
    return uint64(value);
  }

  /**
   * @dev Returns the downcasted uint32 from uint256, reverting on
   * overflow (when the input is greater than largest uint32).
   *
   * Counterpart to Solidity's `uint32` operator.
   *
   * Requirements:
   *
   * - input must fit into 32 bits
   */
  function toUint32(uint256 value) internal pure returns (uint32) {
    require(value <= type(uint32).max, "SafeCast: value doesn't fit in 32 bits");
    return uint32(value);
  }

  /**
   * @dev Returns the downcasted uint16 from uint256, reverting on
   * overflow (when the input is greater than largest uint16).
   *
   * Counterpart to Solidity's `uint16` operator.
   *
   * Requirements:
   *
   * - input must fit into 16 bits
   */
  function toUint16(uint256 value) internal pure returns (uint16) {
    require(value <= type(uint16).max, "SafeCast: value doesn't fit in 16 bits");
    return uint16(value);
  }

  /**
   * @dev Returns the downcasted uint8 from uint256, reverting on
   * overflow (when the input is greater than largest uint8).
   *
   * Counterpart to Solidity's `uint8` operator.
   *
   * Requirements:
   *
   * - input must fit into 8 bits.
   */
  function toUint8(uint256 value) internal pure returns (uint8) {
    require(value <= type(uint8).max, "SafeCast: value doesn't fit in 8 bits");
    return uint8(value);
  }

  /**
   * @dev Converts a signed int256 into an unsigned uint256.
   *
   * Requirements:
   *
   * - input must be greater than or equal to 0.
   */
  function toUint256(int256 value) internal pure returns (uint256) {
    require(value >= 0, 'SafeCast: value must be positive');
    return uint256(value);
  }

  /**
   * @dev Returns the downcasted int128 from int256, reverting on
   * overflow (when the input is less than smallest int128 or
   * greater than largest int128).
   *
   * Counterpart to Solidity's `int128` operator.
   *
   * Requirements:
   *
   * - input must fit into 128 bits
   *
   * _Available since v3.1._
   */
  function toInt128(int256 value) internal pure returns (int128) {
    require(
      value >= type(int128).min && value <= type(int128).max,
      "SafeCast: value doesn't fit in 128 bits"
    );
    return int128(value);
  }

  /**
   * @dev Returns the downcasted int64 from int256, reverting on
   * overflow (when the input is less than smallest int64 or
   * greater than largest int64).
   *
   * Counterpart to Solidity's `int64` operator.
   *
   * Requirements:
   *
   * - input must fit into 64 bits
   *
   * _Available since v3.1._
   */
  function toInt64(int256 value) internal pure returns (int64) {
    require(
      value >= type(int64).min && value <= type(int64).max,
      "SafeCast: value doesn't fit in 64 bits"
    );
    return int64(value);
  }

  /**
   * @dev Returns the downcasted int32 from int256, reverting on
   * overflow (when the input is less than smallest int32 or
   * greater than largest int32).
   *
   * Counterpart to Solidity's `int32` operator.
   *
   * Requirements:
   *
   * - input must fit into 32 bits
   *
   * _Available since v3.1._
   */
  function toInt32(int256 value) internal pure returns (int32) {
    require(
      value >= type(int32).min && value <= type(int32).max,
      "SafeCast: value doesn't fit in 32 bits"
    );
    return int32(value);
  }

  /**
   * @dev Returns the downcasted int16 from int256, reverting on
   * overflow (when the input is less than smallest int16 or
   * greater than largest int16).
   *
   * Counterpart to Solidity's `int16` operator.
   *
   * Requirements:
   *
   * - input must fit into 16 bits
   *
   * _Available since v3.1._
   */
  function toInt16(int256 value) internal pure returns (int16) {
    require(
      value >= type(int16).min && value <= type(int16).max,
      "SafeCast: value doesn't fit in 16 bits"
    );
    return int16(value);
  }

  /**
   * @dev Returns the downcasted int8 from int256, reverting on
   * overflow (when the input is less than smallest int8 or
   * greater than largest int8).
   *
   * Counterpart to Solidity's `int8` operator.
   *
   * Requirements:
   *
   * - input must fit into 8 bits.
   *
   * _Available since v3.1._
   */
  function toInt8(int256 value) internal pure returns (int8) {
    require(
      value >= type(int8).min && value <= type(int8).max,
      "SafeCast: value doesn't fit in 8 bits"
    );
    return int8(value);
  }

  /**
   * @dev Converts an unsigned uint256 into a signed int256.
   *
   * Requirements:
   *
   * - input must be less than or equal to maxInt256.
   */
  function toInt256(uint256 value) internal pure returns (int256) {
    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive
    require(value <= uint256(type(int256).max), "SafeCast: value doesn't fit in an int256");
    return int256(value);
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/SafeERC20.sol
================================================
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import './IERC20.sol';
import './Address.sol';

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
  using Address for address;

  function safeTransfer(IERC20 token, address to, uint256 value) internal {
    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
  }

  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
    _callOptionalReturn(
      token,
      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
    );
  }

  /**
   * @dev Deprecated. This function has issues similar to the ones found in
   * {IERC20-approve}, and its usage is discouraged.
   *
   * Whenever possible, use {safeIncreaseAllowance} and
   * {safeDecreaseAllowance} instead.
   */
  function safeApprove(IERC20 token, address spender, uint256 value) internal {
    // safeApprove should only be called when setting an initial allowance,
    // or when resetting it to zero. To increase and decrease it, use
    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
    require(
      (value == 0) || (token.allowance(address(this), spender) == 0),
      'SafeERC20: approve from non-zero to non-zero allowance'
    );
    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
  }

  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
    uint256 newAllowance = token.allowance(address(this), spender) + value;
    _callOptionalReturn(
      token,
      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)
    );
  }

  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
    unchecked {
      uint256 oldAllowance = token.allowance(address(this), spender);
      require(oldAllowance >= value, 'SafeERC20: decreased allowance below zero');
      uint256 newAllowance = oldAllowance - value;
      _callOptionalReturn(
        token,
        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)
      );
    }
  }

  /**
   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
   * on the return value: the return value is optional (but if data is returned, it must not be false).
   * @param token The token targeted by the call.
   * @param data The call data (encoded using abi.encode or one of its variants).
   */
  function _callOptionalReturn(IERC20 token, bytes memory data) private {
    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
    // the target address contains contract code and also asserts for success in the low-level call.

    bytes memory returndata = address(token).functionCall(data, 'SafeERC20: low-level call failed');
    if (returndata.length > 0) {
      // Return data is optional
      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');
    }
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/SafeMath.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/// @title Optimized overflow and underflow safe math operations
/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost
library SafeMath {
  /// @notice Returns x + y, reverts if sum overflows uint256
  /// @param x The augend
  /// @param y The addend
  /// @return z The sum of x and y
  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
    unchecked {
      require((z = x + y) >= x);
    }
  }

  /// @notice Returns x - y, reverts if underflows
  /// @param x The minuend
  /// @param y The subtrahend
  /// @return z The difference of x and y
  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
    unchecked {
      require((z = x - y) <= x);
    }
  }

  /// @notice Returns x - y, reverts if underflows
  /// @param x The minuend
  /// @param y The subtrahend
  /// @param message The error msg
  /// @return z The difference of x and y
  function sub(uint256 x, uint256 y, string memory message) internal pure returns (uint256 z) {
    unchecked {
      require((z = x - y) <= x, message);
    }
  }

  /// @notice Returns x * y, reverts if overflows
  /// @param x The multiplicand
  /// @param y The multiplier
  /// @return z The product of x and y
  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
    unchecked {
      require(x == 0 || (z = x * y) / x == y);
    }
  }

  /// @notice Returns x / y, reverts if overflows - no specific check, solidity reverts on division by 0
  /// @param x The numerator
  /// @param y The denominator
  /// @return z The product of x and y
  function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
    return x / y;
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/contracts/Strings.sol
================================================
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
  bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';

  /**
   * @dev Converts a `uint256` to its ASCII `string` decimal representation.
   */
  function toString(uint256 value) internal pure returns (string memory) {
    // Inspired by OraclizeAPI's implementation - MIT licence
    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

    if (value == 0) {
      return '0';
    }
    uint256 temp = value;
    uint256 digits;
    while (temp != 0) {
      digits++;
      temp /= 10;
    }
    bytes memory buffer = new bytes(digits);
    while (value != 0) {
      digits -= 1;
      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
      value /= 10;
    }
    return string(buffer);
  }

  /**
   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
   */
  function toHexString(uint256 value) internal pure returns (string memory) {
    if (value == 0) {
      return '0x00';
    }
    uint256 temp = value;
    uint256 length = 0;
    while (temp != 0) {
      length++;
      temp >>= 8;
    }
    return toHexString(value, length);
  }

  /**
   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
   */
  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
    bytes memory buffer = new bytes(2 * length + 2);
    buffer[0] = '0';
    buffer[1] = 'x';
    for (uint256 i = 2 * length + 1; i > 1; --i) {
      buffer[i] = _HEX_SYMBOLS[value & 0xf];
      value >>= 4;
    }
    require(value == 0, 'Strings: hex length insufficient');
    return string(buffer);
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/upgradeability/AdminUpgradeabilityProxy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import './BaseAdminUpgradeabilityProxy.sol';

/**
 * @title AdminUpgradeabilityProxy
 * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for
 * initializing the implementation, admin, and init data.
 */
contract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {
  /**
   * Contract constructor.
   * @param _logic address of the initial implementation.
   * @param _admin Address of the proxy administrator.
   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
   * It should include the signature and the parameters of the function to be called, as described in
   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
   */
  constructor(
    address _logic,
    address _admin,
    bytes memory _data
  ) payable UpgradeabilityProxy(_logic, _data) {
    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));
    _setAdmin(_admin);
  }

  /**
   * @dev Only fall back when the sender is not the admin.
   */
  function _willFallback() internal override(BaseAdminUpgradeabilityProxy, Proxy) {
    BaseAdminUpgradeabilityProxy._willFallback();
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/upgradeability/BaseAdminUpgradeabilityProxy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import './UpgradeabilityProxy.sol';

/**
 * @title BaseAdminUpgradeabilityProxy
 * @dev This contract combines an upgradeability proxy with an authorization
 * mechanism for administrative tasks.
 * All external functions in this contract must be guarded by the
 * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity
 * feature proposal that would enable this to be done automatically.
 */
contract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {
  /**
   * @dev Emitted when the administration has been transferred.
   * @param previousAdmin Address of the previous admin.
   * @param newAdmin Address of the new admin.
   */
  event AdminChanged(address previousAdmin, address newAdmin);

  /**
   * @dev Storage slot with the admin of the contract.
   * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is
   * validated in the constructor.
   */
  bytes32 internal constant ADMIN_SLOT =
    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;

  /**
   * @dev Modifier to check whether the `msg.sender` is the admin.
   * If it is, it will run the function. Otherwise, it will delegate the call
   * to the implementation.
   */
  modifier ifAdmin() {
    if (msg.sender == _admin()) {
      _;
    } else {
      _fallback();
    }
  }

  /**
   * @return The address of the proxy admin.
   */
  function admin() external ifAdmin returns (address) {
    return _admin();
  }

  /**
   * @return The address of the implementation.
   */
  function implementation() external ifAdmin returns (address) {
    return _implementation();
  }

  /**
   * @dev Changes the admin of the proxy.
   * Only the current admin can call this function.
   * @param newAdmin Address to transfer proxy administration to.
   */
  function changeAdmin(address newAdmin) external ifAdmin {
    require(newAdmin != address(0), 'Cannot change the admin of a proxy to the zero address');
    emit AdminChanged(_admin(), newAdmin);
    _setAdmin(newAdmin);
  }

  /**
   * @dev Upgrade the backing implementation of the proxy.
   * Only the admin can call this function.
   * @param newImplementation Address of the new implementation.
   */
  function upgradeTo(address newImplementation) external ifAdmin {
    _upgradeTo(newImplementation);
  }

  /**
   * @dev Upgrade the backing implementation of the proxy and call a function
   * on the new implementation.
   * This is useful to initialize the proxied contract.
   * @param newImplementation Address of the new implementation.
   * @param data Data to send as msg.data in the low level call.
   * It should include the signature and the parameters of the function to be called, as described in
   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
   */
  function upgradeToAndCall(
    address newImplementation,
    bytes calldata data
  ) external payable ifAdmin {
    _upgradeTo(newImplementation);
    (bool success, ) = newImplementation.delegatecall(data);
    require(success);
  }

  /**
   * @return adm The admin slot.
   */
  function _admin() internal view returns (address adm) {
    bytes32 slot = ADMIN_SLOT;
    //solium-disable-next-line
    assembly {
      adm := sload(slot)
    }
  }

  /**
   * @dev Sets the address of the proxy admin.
   * @param newAdmin Address of the new proxy admin.
   */
  function _setAdmin(address newAdmin) internal {
    bytes32 slot = ADMIN_SLOT;
    //solium-disable-next-line
    assembly {
      sstore(slot, newAdmin)
    }
  }

  /**
   * @dev Only fall back when the sender is not the admin.
   */
  function _willFallback() internal virtual override {
    require(msg.sender != _admin(), 'Cannot call fallback function from the proxy admin');
    super._willFallback();
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import './Proxy.sol';
import '../contracts/Address.sol';

/**
 * @title BaseUpgradeabilityProxy
 * @dev This contract implements a proxy that allows to change the
 * implementation address to which it will delegate.
 * Such a change is called an implementation upgrade.
 */
contract BaseUpgradeabilityProxy is Proxy {
  /**
   * @dev Emitted when the implementation is upgraded.
   * @param implementation Address of the new implementation.
   */
  event Upgraded(address indexed implementation);

  /**
   * @dev Storage slot with the address of the current implementation.
   * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is
   * validated in the constructor.
   */
  bytes32 internal constant IMPLEMENTATION_SLOT =
    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;

  /**
   * @dev Returns the current implementation.
   * @return impl Address of the current implementation
   */
  function _implementation() internal view override returns (address impl) {
    bytes32 slot = IMPLEMENTATION_SLOT;
    //solium-disable-next-line
    assembly {
      impl := sload(slot)
    }
  }

  /**
   * @dev Upgrades the proxy to a new implementation.
   * @param newImplementation Address of the new implementation.
   */
  function _upgradeTo(address newImplementation) internal {
    _setImplementation(newImplementation);
    emit Upgraded(newImplementation);
  }

  /**
   * @dev Sets the implementation address of the proxy.
   * @param newImplementation Address of the new implementation.
   */
  function _setImplementation(address newImplementation) internal {
    require(
      Address.isContract(newImplementation),
      'Cannot set a proxy implementation to a non-contract address'
    );

    bytes32 slot = IMPLEMENTATION_SLOT;

    //solium-disable-next-line
    assembly {
      sstore(slot, newImplementation)
    }
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/upgradeability/Initializable.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title Initializable
 *
 * @dev Helper contract to support initializer functions. To use it, replace
 * the constructor with a function that has the `initializer` modifier.
 * WARNING: Unlike constructors, initializer functions must be manually
 * invoked. This applies both to deploying an Initializable contract, as well
 * as extending an Initializable contract via inheritance.
 * WARNING: When used with inheritance, manual care must be taken to not invoke
 * a parent initializer twice, or ensure that all initializers are idempotent,
 * because this is not dealt with automatically as with constructors.
 */
contract Initializable {
  /**
   * @dev Indicates that the contract has been initialized.
   */
  bool private initialized;

  /**
   * @dev Indicates that the contract is in the process of being initialized.
   */
  bool private initializing;

  /**
   * @dev Modifier to use in the initializer function of a contract.
   */
  modifier initializer() {
    require(
      initializing || isConstructor() || !initialized,
      'Contract instance has already been initialized'
    );

    bool isTopLevelCall = !initializing;
    if (isTopLevelCall) {
      initializing = true;
      initialized = true;
    }

    _;

    if (isTopLevelCall) {
      initializing = false;
    }
  }

  /// @dev Returns true if and only if the function is running in the constructor
  function isConstructor() private view returns (bool) {
    // extcodesize checks the size of the code stored in an address, and
    // address returns the current address. Since the code is still not
    // deployed when running a constructor, any checks on its code size will
    // yield zero, making it an effective way to detect if a contract is
    // under construction or not.
    uint256 cs;
    //solium-disable-next-line
    assembly {
      cs := extcodesize(address())
    }
    return cs == 0;
  }

  // Reserved storage space to allow for layout changes in the future.
  uint256[50] private ______gap;
}



================================================
FILE: contracts/dependencies/openzeppelin/upgradeability/InitializableAdminUpgradeabilityProxy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import './BaseAdminUpgradeabilityProxy.sol';
import './InitializableUpgradeabilityProxy.sol';

/**
 * @title InitializableAdminUpgradeabilityProxy
 * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for
 * initializing the implementation, admin, and init data.
 */
contract InitializableAdminUpgradeabilityProxy is
  BaseAdminUpgradeabilityProxy,
  InitializableUpgradeabilityProxy
{
  /**
   * Contract initializer.
   * @param logic address of the initial implementation.
   * @param admin Address of the proxy administrator.
   * @param data Data to send as msg.data to the implementation to initialize the proxied contract.
   * It should include the signature and the parameters of the function to be called, as described in
   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
   */
  function initialize(address logic, address admin, bytes memory data) public payable {
    require(_implementation() == address(0));
    InitializableUpgradeabilityProxy.initialize(logic, data);
    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));
    _setAdmin(admin);
  }

  /**
   * @dev Only fall back when the sender is not the admin.
   */
  function _willFallback() internal override(BaseAdminUpgradeabilityProxy, Proxy) {
    BaseAdminUpgradeabilityProxy._willFallback();
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import './BaseUpgradeabilityProxy.sol';

/**
 * @title InitializableUpgradeabilityProxy
 * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing
 * implementation and init data.
 */
contract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {
  /**
   * @dev Contract initializer.
   * @param _logic Address of the initial implementation.
   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
   * It should include the signature and the parameters of the function to be called, as described in
   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
   */
  function initialize(address _logic, bytes memory _data) public payable {
    require(_implementation() == address(0));
    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));
    _setImplementation(_logic);
    if (_data.length > 0) {
      (bool success, ) = _logic.delegatecall(_data);
      require(success);
    }
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/upgradeability/Proxy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title Proxy
 * @dev Implements delegation of calls to other contracts, with proper
 * forwarding of return values and bubbling of failures.
 * It defines a fallback function that delegates all calls to the address
 * returned by the abstract _implementation() internal function.
 */
abstract contract Proxy {
  /**
   * @dev Fallback function.
   * Will run if no other function in the contract matches the call data.
   * Implemented entirely in `_fallback`.
   */
  fallback() external payable {
    _fallback();
  }

  /**
   * @return The Address of the implementation.
   */
  function _implementation() internal view virtual returns (address);

  /**
   * @dev Delegates execution to an implementation contract.
   * This is a low level function that doesn't return to its internal call site.
   * It will return to the external caller whatever the implementation returns.
   * @param implementation Address to delegate.
   */
  function _delegate(address implementation) internal {
    //solium-disable-next-line
    assembly {
      // Copy msg.data. We take full control of memory in this inline assembly
      // block because it will not return to Solidity code. We overwrite the
      // Solidity scratch pad at memory position 0.
      calldatacopy(0, 0, calldatasize())

      // Call the implementation.
      // out and outsize are 0 because we don't know the size yet.
      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)

      // Copy the returned data.
      returndatacopy(0, 0, returndatasize())

      switch result
      // delegatecall returns 0 on error.
      case 0 {
        revert(0, returndatasize())
      }
      default {
        return(0, returndatasize())
      }
    }
  }

  /**
   * @dev Function that is run as the first thing in the fallback function.
   * Can be redefined in derived contracts to add functionality.
   * Redefinitions must call super._willFallback().
   */
  function _willFallback() internal virtual {}

  /**
   * @dev fallback implementation.
   * Extracted to enable manual triggering.
   */
  function _fallback() internal {
    _willFallback();
    _delegate(_implementation());
  }
}



================================================
FILE: contracts/dependencies/openzeppelin/upgradeability/UpgradeabilityProxy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import './BaseUpgradeabilityProxy.sol';

/**
 * @title UpgradeabilityProxy
 * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing
 * implementation and init data.
 */
contract UpgradeabilityProxy is BaseUpgradeabilityProxy {
  /**
   * @dev Contract constructor.
   * @param _logic Address of the initial implementation.
   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
   * It should include the signature and the parameters of the function to be called, as described in
   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
   */
  constructor(address _logic, bytes memory _data) payable {
    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));
    _setImplementation(_logic);
    if (_data.length > 0) {
      (bool success, ) = _logic.delegatecall(_data);
      require(success);
    }
  }
}



================================================
FILE: contracts/dependencies/weth/WETH9.sol
================================================
// Copyright (C) 2015, 2016, 2017 Dapphub

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

pragma solidity ^0.8.10;

contract WETH9 {
  string public name = 'Wrapped Ether';
  string public symbol = 'WETH';
  uint8 public decimals = 18;

  event Approval(address indexed src, address indexed guy, uint256 wad);
  event Transfer(address indexed src, address indexed dst, uint256 wad);
  event Deposit(address indexed dst, uint256 wad);
  event Withdrawal(address indexed src, uint256 wad);

  mapping(address => uint256) public balanceOf;
  mapping(address => mapping(address => uint256)) public allowance;

  receive() external payable {
    deposit();
  }

  function deposit() public payable {
    balanceOf[msg.sender] += msg.value;
    emit Deposit(msg.sender, msg.value);
  }

  function withdraw(uint256 wad) public {
    require(balanceOf[msg.sender] >= wad);
    balanceOf[msg.sender] -= wad;
    payable(msg.sender).transfer(wad);
    emit Withdrawal(msg.sender, wad);
  }

  function totalSupply() public view returns (uint256) {
    return address(this).balance;
  }

  function approve(address guy, uint256 wad) public returns (bool) {
    allowance[msg.sender][guy] = wad;
    emit Approval(msg.sender, guy, wad);
    return true;
  }

  function transfer(address dst, uint256 wad) public returns (bool) {
    return transferFrom(msg.sender, dst, wad);
  }

  function transferFrom(address src, address dst, uint256 wad) public returns (bool) {
    require(balanceOf[src] >= wad);

    if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max) {
      require(allowance[src][msg.sender] >= wad);
      allowance[src][msg.sender] -= wad;
    }

    balanceOf[src] -= wad;
    balanceOf[dst] += wad;

    emit Transfer(src, dst, wad);

    return true;
  }
}

/*
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<http://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<http://www.gnu.org/philosophy/why-not-lgpl.html>.

*/



================================================
FILE: contracts/deployments/ReservesSetupHelper.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {PoolConfigurator} from '../protocol/pool/PoolConfigurator.sol';
import {Ownable} from '../dependencies/openzeppelin/contracts/Ownable.sol';

/**
 * @title ReservesSetupHelper
 * @author Aave
 * @notice Deployment helper to setup the assets risk parameters at PoolConfigurator in batch.
 * @dev The ReservesSetupHelper is an Ownable contract, so only the deployer or future owners can call this contract.
 */
contract ReservesSetupHelper is Ownable {
  struct ConfigureReserveInput {
    address asset;
    uint256 baseLTV;
    uint256 liquidationThreshold;
    uint256 liquidationBonus;
    uint256 reserveFactor;
    uint256 borrowCap;
    uint256 supplyCap;
    bool stableBorrowingEnabled;
    bool borrowingEnabled;
    bool flashLoanEnabled;
  }

  /**
   * @notice External function called by the owner account to setup the assets risk parameters in batch.
   * @dev The Pool or Risk admin must transfer the ownership to ReservesSetupHelper before calling this function
   * @param configurator The address of PoolConfigurator contract
   * @param inputParams An array of ConfigureReserveInput struct that contains the assets and their risk parameters
   */
  function configureReserves(
    PoolConfigurator configurator,
    ConfigureReserveInput[] calldata inputParams
  ) external onlyOwner {
    for (uint256 i = 0; i < inputParams.length; i++) {
      configurator.configureReserveAsCollateral(
        inputParams[i].asset,
        inputParams[i].baseLTV,
        inputParams[i].liquidationThreshold,
        inputParams[i].liquidationBonus
      );

      if (inputParams[i].borrowingEnabled) {
        configurator.setReserveBorrowing(inputParams[i].asset, true);

        configurator.setBorrowCap(inputParams[i].asset, inputParams[i].borrowCap);
        configurator.setReserveStableRateBorrowing(
          inputParams[i].asset,
          inputParams[i].stableBorrowingEnabled
        );
      }
      configurator.setReserveFlashLoaning(inputParams[i].asset, inputParams[i].flashLoanEnabled);
      configurator.setSupplyCap(inputParams[i].asset, inputParams[i].supplyCap);
      configurator.setReserveFactor(inputParams[i].asset, inputParams[i].reserveFactor);
    }
  }
}



================================================
FILE: contracts/flashloan/base/FlashLoanReceiverBase.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IFlashLoanReceiver} from '../interfaces/IFlashLoanReceiver.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {IPool} from '../../interfaces/IPool.sol';

/**
 * @title FlashLoanReceiverBase
 * @author Aave
 * @notice Base contract to develop a flashloan-receiver contract.
 */
abstract contract FlashLoanReceiverBase is IFlashLoanReceiver {
  IPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;
  IPool public immutable override POOL;

  constructor(IPoolAddressesProvider provider) {
    ADDRESSES_PROVIDER = provider;
    POOL = IPool(provider.getPool());
  }
}



================================================
FILE: contracts/flashloan/base/FlashLoanSimpleReceiverBase.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IFlashLoanSimpleReceiver} from '../interfaces/IFlashLoanSimpleReceiver.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {IPool} from '../../interfaces/IPool.sol';

/**
 * @title FlashLoanSimpleReceiverBase
 * @author Aave
 * @notice Base contract to develop a flashloan-receiver contract.
 */
abstract contract FlashLoanSimpleReceiverBase is IFlashLoanSimpleReceiver {
  IPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;
  IPool public immutable override POOL;

  constructor(IPoolAddressesProvider provider) {
    ADDRESSES_PROVIDER = provider;
    POOL = IPool(provider.getPool());
  }
}



================================================
FILE: contracts/flashloan/base/LICENSE.md
================================================
Copyright (C) 2022 Aave

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
[GNU Affero General Public License](https://www.gnu.org/licenses/agpl-3.0.en.html)
for more details



================================================
FILE: contracts/flashloan/interfaces/IFlashLoanReceiver.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {IPool} from '../../interfaces/IPool.sol';

/**
 * @title IFlashLoanReceiver
 * @author Aave
 * @notice Defines the basic interface of a flashloan-receiver contract.
 * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract
 */
interface IFlashLoanReceiver {
  /**
   * @notice Executes an operation after receiving the flash-borrowed assets
   * @dev Ensure that the contract can return the debt + premium, e.g., has
   *      enough funds to repay and has approved the Pool to pull the total amount
   * @param assets The addresses of the flash-borrowed assets
   * @param amounts The amounts of the flash-borrowed assets
   * @param premiums The fee of each flash-borrowed asset
   * @param initiator The address of the flashloan initiator
   * @param params The byte-encoded params passed when initiating the flashloan
   * @return True if the execution of the operation succeeds, false otherwise
   */
  function executeOperation(
    address[] calldata assets,
    uint256[] calldata amounts,
    uint256[] calldata premiums,
    address initiator,
    bytes calldata params
  ) external returns (bool);

  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);

  function POOL() external view returns (IPool);
}



================================================
FILE: contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {IPool} from '../../interfaces/IPool.sol';

/**
 * @title IFlashLoanSimpleReceiver
 * @author Aave
 * @notice Defines the basic interface of a flashloan-receiver contract.
 * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract
 */
interface IFlashLoanSimpleReceiver {
  /**
   * @notice Executes an operation after receiving the flash-borrowed asset
   * @dev Ensure that the contract can return the debt + premium, e.g., has
   *      enough funds to repay and has approved the Pool to pull the total amount
   * @param asset The address of the flash-borrowed asset
   * @param amount The amount of the flash-borrowed asset
   * @param premium The fee of the flash-borrowed asset
   * @param initiator The address of the flashloan initiator
   * @param params The byte-encoded params passed when initiating the flashloan
   * @return True if the execution of the operation succeeds, false otherwise
   */
  function executeOperation(
    address asset,
    uint256 amount,
    uint256 premium,
    address initiator,
    bytes calldata params
  ) external returns (bool);

  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);

  function POOL() external view returns (IPool);
}



================================================
FILE: contracts/flashloan/interfaces/LICENSE.md
================================================
Copyright (C) 2022 Aave

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
[GNU Affero General Public License](https://www.gnu.org/licenses/agpl-3.0.en.html)
for more details



================================================
FILE: contracts/interfaces/IAaveIncentivesController.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title IAaveIncentivesController
 * @author Aave
 * @notice Defines the basic interface for an Aave Incentives Controller.
 * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.
 */
interface IAaveIncentivesController {
  /**
   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.
   * @dev The units of `totalSupply` and `userBalance` should be the same.
   * @param user The address of the user whose asset balance has changed
   * @param totalSupply The total supply of the asset prior to user balance change
   * @param userBalance The previous user balance prior to balance change
   */
  function handleAction(address user, uint256 totalSupply, uint256 userBalance) external;
}



================================================
FILE: contracts/interfaces/IAaveOracle.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IPriceOracleGetter} from './IPriceOracleGetter.sol';
import {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';

/**
 * @title IAaveOracle
 * @author Aave
 * @notice Defines the basic interface for the Aave Oracle
 */
interface IAaveOracle is IPriceOracleGetter {
  /**
   * @dev Emitted after the base currency is set
   * @param baseCurrency The base currency of used for price quotes
   * @param baseCurrencyUnit The unit of the base currency
   */
  event BaseCurrencySet(address indexed baseCurrency, uint256 baseCurrencyUnit);

  /**
   * @dev Emitted after the price source of an asset is updated
   * @param asset The address of the asset
   * @param source The price source of the asset
   */
  event AssetSourceUpdated(address indexed asset, address indexed source);

  /**
   * @dev Emitted after the address of fallback oracle is updated
   * @param fallbackOracle The address of the fallback oracle
   */
  event FallbackOracleUpdated(address indexed fallbackOracle);

  /**
   * @notice Returns the PoolAddressesProvider
   * @return The address of the PoolAddressesProvider contract
   */
  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);

  /**
   * @notice Sets or replaces price sources of assets
   * @param assets The addresses of the assets
   * @param sources The addresses of the price sources
   */
  function setAssetSources(address[] calldata assets, address[] calldata sources) external;

  /**
   * @notice Sets the fallback oracle
   * @param fallbackOracle The address of the fallback oracle
   */
  function setFallbackOracle(address fallbackOracle) external;

  /**
   * @notice Returns a list of prices from a list of assets addresses
   * @param assets The list of assets addresses
   * @return The prices of the given assets
   */
  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);

  /**
   * @notice Returns the address of the source for an asset address
   * @param asset The address of the asset
   * @return The address of the source
   */
  function getSourceOfAsset(address asset) external view returns (address);

  /**
   * @notice Returns the address of the fallback oracle
   * @return The address of the fallback oracle
   */
  function getFallbackOracle() external view returns (address);
}



================================================
FILE: contracts/interfaces/IACLManager.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';

/**
 * @title IACLManager
 * @author Aave
 * @notice Defines the basic interface for the ACL Manager
 */
interface IACLManager {
  /**
   * @notice Returns the contract address of the PoolAddressesProvider
   * @return The address of the PoolAddressesProvider
   */
  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);

  /**
   * @notice Returns the identifier of the PoolAdmin role
   * @return The id of the PoolAdmin role
   */
  function POOL_ADMIN_ROLE() external view returns (bytes32);

  /**
   * @notice Returns the identifier of the EmergencyAdmin role
   * @return The id of the EmergencyAdmin role
   */
  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);

  /**
   * @notice Returns the identifier of the RiskAdmin role
   * @return The id of the RiskAdmin role
   */
  function RISK_ADMIN_ROLE() external view returns (bytes32);

  /**
   * @notice Returns the identifier of the FlashBorrower role
   * @return The id of the FlashBorrower role
   */
  function FLASH_BORROWER_ROLE() external view returns (bytes32);

  /**
   * @notice Returns the identifier of the Bridge role
   * @return The id of the Bridge role
   */
  function BRIDGE_ROLE() external view returns (bytes32);

  /**
   * @notice Returns the identifier of the AssetListingAdmin role
   * @return The id of the AssetListingAdmin role
   */
  function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);

  /**
   * @notice Set the role as admin of a specific role.
   * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.
   * @param role The role to be managed by the admin role
   * @param adminRole The admin role
   */
  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;

  /**
   * @notice Adds a new admin as PoolAdmin
   * @param admin The address of the new admin
   */
  function addPoolAdmin(address admin) external;

  /**
   * @notice Removes an admin as PoolAdmin
   * @param admin The address of the admin to remove
   */
  function removePoolAdmin(address admin) external;

  /**
   * @notice Returns true if the address is PoolAdmin, false otherwise
   * @param admin The address to check
   * @return True if the given address is PoolAdmin, false otherwise
   */
  function isPoolAdmin(address admin) external view returns (bool);

  /**
   * @notice Adds a new admin as EmergencyAdmin
   * @param admin The address of the new admin
   */
  function addEmergencyAdmin(address admin) external;

  /**
   * @notice Removes an admin as EmergencyAdmin
   * @param admin The address of the admin to remove
   */
  function removeEmergencyAdmin(address admin) external;

  /**
   * @notice Returns true if the address is EmergencyAdmin, false otherwise
   * @param admin The address to check
   * @return True if the given address is EmergencyAdmin, false otherwise
   */
  function isEmergencyAdmin(address admin) external view returns (bool);

  /**
   * @notice Adds a new admin as RiskAdmin
   * @param admin The address of the new admin
   */
  function addRiskAdmin(address admin) external;

  /**
   * @notice Removes an admin as RiskAdmin
   * @param admin The address of the admin to remove
   */
  function removeRiskAdmin(address admin) external;

  /**
   * @notice Returns true if the address is RiskAdmin, false otherwise
   * @param admin The address to check
   * @return True if the given address is RiskAdmin, false otherwise
   */
  function isRiskAdmin(address admin) external view returns (bool);

  /**
   * @notice Adds a new address as FlashBorrower
   * @param borrower The address of the new FlashBorrower
   */
  function addFlashBorrower(address borrower) external;

  /**
   * @notice Removes an address as FlashBorrower
   * @param borrower The address of the FlashBorrower to remove
   */
  function removeFlashBorrower(address borrower) external;

  /**
   * @notice Returns true if the address is FlashBorrower, false otherwise
   * @param borrower The address to check
   * @return True if the given address is FlashBorrower, false otherwise
   */
  function isFlashBorrower(address borrower) external view returns (bool);

  /**
   * @notice Adds a new address as Bridge
   * @param bridge The address of the new Bridge
   */
  function addBridge(address bridge) external;

  /**
   * @notice Removes an address as Bridge
   * @param bridge The address of the bridge to remove
   */
  function removeBridge(address bridge) external;

  /**
   * @notice Returns true if the address is Bridge, false otherwise
   * @param bridge The address to check
   * @return True if the given address is Bridge, false otherwise
   */
  function isBridge(address bridge) external view returns (bool);

  /**
   * @notice Adds a new admin as AssetListingAdmin
   * @param admin The address of the new admin
   */
  function addAssetListingAdmin(address admin) external;

  /**
   * @notice Removes an admin as AssetListingAdmin
   * @param admin The address of the admin to remove
   */
  function removeAssetListingAdmin(address admin) external;

  /**
   * @notice Returns true if the address is AssetListingAdmin, false otherwise
   * @param admin The address to check
   * @return True if the given address is AssetListingAdmin, false otherwise
   */
  function isAssetListingAdmin(address admin) external view returns (bool);
}



================================================
FILE: contracts/interfaces/IAToken.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';
import {IScaledBalanceToken} from './IScaledBalanceToken.sol';
import {IInitializableAToken} from './IInitializableAToken.sol';

/**
 * @title IAToken
 * @author Aave
 * @notice Defines the basic interface for an AToken.
 */
interface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {
  /**
   * @dev Emitted during the transfer action
   * @param from The user whose tokens are being transferred
   * @param to The recipient
   * @param value The scaled amount being transferred
   * @param index The next liquidity index of the reserve
   */
  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);

  /**
   * @notice Mints `amount` aTokens to `user`
   * @param caller The address performing the mint
   * @param onBehalfOf The address of the user that will receive the minted aTokens
   * @param amount The amount of tokens getting minted
   * @param index The next liquidity index of the reserve
   * @return `true` if the the previous balance of the user was 0
   */
  function mint(
    address caller,
    address onBehalfOf,
    uint256 amount,
    uint256 index
  ) external returns (bool);

  /**
   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`
   * @dev In some instances, the mint event could be emitted from a burn transaction
   * if the amount to burn is less than the interest that the user accrued
   * @param from The address from which the aTokens will be burned
   * @param receiverOfUnderlying The address that will receive the underlying
   * @param amount The amount being burned
   * @param index The next liquidity index of the reserve
   */
  function burn(address from, address receiverOfUnderlying, uint256 amount, uint256 index) external;

  /**
   * @notice Mints aTokens to the reserve treasury
   * @param amount The amount of tokens getting minted
   * @param index The next liquidity index of the reserve
   */
  function mintToTreasury(uint256 amount, uint256 index) external;

  /**
   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken
   * @param from The address getting liquidated, current owner of the aTokens
   * @param to The recipient
   * @param value The amount of tokens getting transferred
   */
  function transferOnLiquidation(address from, address to, uint256 value) external;

  /**
   * @notice Transfers the underlying asset to `target`.
   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()
   * @param target The recipient of the underlying
   * @param amount The amount getting transferred
   */
  function transferUnderlyingTo(address target, uint256 amount) external;

  /**
   * @notice Handles the underlying received by the aToken after the transfer has been completed.
   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the
   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying
   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.
   * @param user The user executing the repayment
   * @param onBehalfOf The address of the user who will get his debt reduced/removed
   * @param amount The amount getting repaid
   */
  function handleRepayment(address user, address onBehalfOf, uint256 amount) external;

  /**
   * @notice Allow passing a signed message to approve spending
   * @dev implements the permit function as for
   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md
   * @param owner The owner of the funds
   * @param spender The spender
   * @param value The amount
   * @param deadline The deadline timestamp, type(uint256).max for max deadline
   * @param v Signature param
   * @param s Signature param
   * @param r Signature param
   */
  function permit(
    address owner,
    address spender,
    uint256 value,
    uint256 deadline,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external;

  /**
   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)
   * @return The address of the underlying asset
   */
  function UNDERLYING_ASSET_ADDRESS() external view returns (address);

  /**
   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.
   * @return Address of the Aave treasury
   */
  function RESERVE_TREASURY_ADDRESS() external view returns (address);

  /**
   * @notice Get the domain separator for the token
   * @dev Return cached value if chainId matches cache, otherwise recomputes separator
   * @return The domain separator of the token at current chain
   */
  function DOMAIN_SEPARATOR() external view returns (bytes32);

  /**
   * @notice Returns the nonce for owner.
   * @param owner The address of the owner
   * @return The nonce of the owner
   */
  function nonces(address owner) external view returns (uint256);

  /**
   * @notice Rescue and transfer tokens locked in this contract
   * @param token The address of the token
   * @param to The address of the recipient
   * @param amount The amount of token to transfer
   */
  function rescueTokens(address token, address to, uint256 amount) external;
}



================================================
FILE: contracts/interfaces/ICreditDelegationToken.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title ICreditDelegationToken
 * @author Aave
 * @notice Defines the basic interface for a token supporting credit delegation.
 */
interface ICreditDelegationToken {
  /**
   * @dev Emitted on `approveDelegation` and `borrowAllowance
   * @param fromUser The address of the delegator
   * @param toUser The address of the delegatee
   * @param asset The address of the delegated asset
   * @param amount The amount being delegated
   */
  event BorrowAllowanceDelegated(
    address indexed fromUser,
    address indexed toUser,
    address indexed asset,
    uint256 amount
  );

  /**
   * @notice Delegates borrowing power to a user on the specific debt token.
   * Delegation will still respect the liquidation constraints (even if delegated, a
   * delegatee cannot force a delegator HF to go below 1)
   * @param delegatee The address receiving the delegated borrowing power
   * @param amount The maximum amount being delegated.
   */
  function approveDelegation(address delegatee, uint256 amount) external;

  /**
   * @notice Returns the borrow allowance of the user
   * @param fromUser The user to giving allowance
   * @param toUser The user to give allowance to
   * @return The current allowance of `toUser`
   */
  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);

  /**
   * @notice Delegates borrowing power to a user on the specific debt token via ERC712 signature
   * @param delegator The delegator of the credit
   * @param delegatee The delegatee that can use the credit
   * @param value The amount to be delegated
   * @param deadline The deadline timestamp, type(uint256).max for max deadline
   * @param v The V signature param
   * @param s The S signature param
   * @param r The R signature param
   */
  function delegationWithSig(
    address delegator,
    address delegatee,
    uint256 value,
    uint256 deadline,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external;
}



================================================
FILE: contracts/interfaces/IDefaultInterestRateStrategy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IReserveInterestRateStrategy} from './IReserveInterestRateStrategy.sol';
import {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';

/**
 * @title IDefaultInterestRateStrategy
 * @author Aave
 * @notice Defines the basic interface of the DefaultReserveInterestRateStrategy
 */
interface IDefaultInterestRateStrategy is IReserveInterestRateStrategy {
  /**
   * @notice Returns the usage ratio at which the pool aims to obtain most competitive borrow rates.
   * @return The optimal usage ratio, expressed in ray.
   */
  function OPTIMAL_USAGE_RATIO() external view returns (uint256);

  /**
   * @notice Returns the optimal stable to total debt ratio of the reserve.
   * @return The optimal stable to total debt ratio, expressed in ray.
   */
  function OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO() external view returns (uint256);

  /**
   * @notice Returns the excess usage ratio above the optimal.
   * @dev It's always equal to 1-optimal usage ratio (added as constant for gas optimizations)
   * @return The max excess usage ratio, expressed in ray.
   */
  function MAX_EXCESS_USAGE_RATIO() external view returns (uint256);

  /**
   * @notice Returns the excess stable debt ratio above the optimal.
   * @dev It's always equal to 1-optimal stable to total debt ratio (added as constant for gas optimizations)
   * @return The max excess stable to total debt ratio, expressed in ray.
   */
  function MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO() external view returns (uint256);

  /**
   * @notice Returns the address of the PoolAddressesProvider
   * @return The address of the PoolAddressesProvider contract
   */
  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);

  /**
   * @notice Returns the variable rate slope below optimal usage ratio
   * @dev It's the variable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO
   * @return The variable rate slope, expressed in ray
   */
  function getVariableRateSlope1() external view returns (uint256);

  /**
   * @notice Returns the variable rate slope above optimal usage ratio
   * @dev It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO
   * @return The variable rate slope, expressed in ray
   */
  function getVariableRateSlope2() external view returns (uint256);

  /**
   * @notice Returns the stable rate slope below optimal usage ratio
   * @dev It's the stable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO
   * @return The stable rate slope, expressed in ray
   */
  function getStableRateSlope1() external view returns (uint256);

  /**
   * @notice Returns the stable rate slope above optimal usage ratio
   * @dev It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO
   * @return The stable rate slope, expressed in ray
   */
  function getStableRateSlope2() external view returns (uint256);

  /**
   * @notice Returns the stable rate excess offset
   * @dev It's an additional premium applied to the stable when stable debt > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO
   * @return The stable rate excess offset, expressed in ray
   */
  function getStableRateExcessOffset() external view returns (uint256);

  /**
   * @notice Returns the base stable borrow rate
   * @return The base stable borrow rate, expressed in ray
   */
  function getBaseStableBorrowRate() external view returns (uint256);

  /**
   * @notice Returns the base variable borrow rate
   * @return The base variable borrow rate, expressed in ray
   */
  function getBaseVariableBorrowRate() external view returns (uint256);

  /**
   * @notice Returns the maximum variable borrow rate
   * @return The maximum variable borrow rate, expressed in ray
   */
  function getMaxVariableBorrowRate() external view returns (uint256);
}



================================================
FILE: contracts/interfaces/IDelegationToken.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title IDelegationToken
 * @author Aave
 * @notice Implements an interface for tokens with delegation COMP/UNI compatible
 */
interface IDelegationToken {
  /**
   * @notice Delegate voting power to a delegatee
   * @param delegatee The address of the delegatee
   */
  function delegate(address delegatee) external;
}



================================================
FILE: contracts/interfaces/IERC20WithPermit.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';

/**
 * @title IERC20WithPermit
 * @author Aave
 * @notice Interface for the permit function (EIP-2612)
 */
interface IERC20WithPermit is IERC20 {
  /**
   * @notice Allow passing a signed message to approve spending
   * @dev implements the permit function as for
   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md
   * @param owner The owner of the funds
   * @param spender The spender
   * @param value The amount
   * @param deadline The deadline timestamp, type(uint256).max for max deadline
   * @param v Signature param
   * @param s Signature param
   * @param r Signature param
   */
  function permit(
    address owner,
    address spender,
    uint256 value,
    uint256 deadline,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external;
}



================================================
FILE: contracts/interfaces/IInitializableAToken.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IAaveIncentivesController} from './IAaveIncentivesController.sol';
import {IPool} from './IPool.sol';

/**
 * @title IInitializableAToken
 * @author Aave
 * @notice Interface for the initialize function on AToken
 */
interface IInitializableAToken {
  /**
   * @dev Emitted when an aToken is initialized
   * @param underlyingAsset The address of the underlying asset
   * @param pool The address of the associated pool
   * @param treasury The address of the treasury
   * @param incentivesController The address of the incentives controller for this aToken
   * @param aTokenDecimals The decimals of the underlying
   * @param aTokenName The name of the aToken
   * @param aTokenSymbol The symbol of the aToken
   * @param params A set of encoded parameters for additional initialization
   */
  event Initialized(
    address indexed underlyingAsset,
    address indexed pool,
    address treasury,
    address incentivesController,
    uint8 aTokenDecimals,
    string aTokenName,
    string aTokenSymbol,
    bytes params
  );

  /**
   * @notice Initializes the aToken
   * @param pool The pool contract that is initializing this contract
   * @param treasury The address of the Aave treasury, receiving the fees on this aToken
   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)
   * @param incentivesController The smart contract managing potential incentives distribution
   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's
   * @param aTokenName The name of the aToken
   * @param aTokenSymbol The symbol of the aToken
   * @param params A set of encoded parameters for additional initialization
   */
  function initialize(
    IPool pool,
    address treasury,
    address underlyingAsset,
    IAaveIncentivesController incentivesController,
    uint8 aTokenDecimals,
    string calldata aTokenName,
    string calldata aTokenSymbol,
    bytes calldata params
  ) external;
}



================================================
FILE: contracts/interfaces/IInitializableDebtToken.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IAaveIncentivesController} from './IAaveIncentivesController.sol';
import {IPool} from './IPool.sol';

/**
 * @title IInitializableDebtToken
 * @author Aave
 * @notice Interface for the initialize function common between debt tokens
 */
interface IInitializableDebtToken {
  /**
   * @dev Emitted when a debt token is initialized
   * @param underlyingAsset The address of the underlying asset
   * @param pool The address of the associated pool
   * @param incentivesController The address of the incentives controller for this aToken
   * @param debtTokenDecimals The decimals of the debt token
   * @param debtTokenName The name of the debt token
   * @param debtTokenSymbol The symbol of the debt token
   * @param params A set of encoded parameters for additional initialization
   */
  event Initialized(
    address indexed underlyingAsset,
    address indexed pool,
    address incentivesController,
    uint8 debtTokenDecimals,
    string debtTokenName,
    string debtTokenSymbol,
    bytes params
  );

  /**
   * @notice Initializes the debt token.
   * @param pool The pool contract that is initializing this contract
   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)
   * @param incentivesController The smart contract managing potential incentives distribution
   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's
   * @param debtTokenName The name of the token
   * @param debtTokenSymbol The symbol of the token
   * @param params A set of encoded parameters for additional initialization
   */
  function initialize(
    IPool pool,
    address underlyingAsset,
    IAaveIncentivesController incentivesController,
    uint8 debtTokenDecimals,
    string memory debtTokenName,
    string memory debtTokenSymbol,
    bytes calldata params
  ) external;
}



================================================
FILE: contracts/interfaces/IL2Pool.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title IL2Pool
 * @author Aave
 * @notice Defines the basic extension interface for an L2 Aave Pool.
 */
interface IL2Pool {
  /**
   * @notice Calldata efficient wrapper of the supply function on behalf of the caller
   * @param args Arguments for the supply function packed in one bytes32
   *    96 bits       16 bits         128 bits      16 bits
   * | 0-padding | referralCode | shortenedAmount | assetId |
   * @dev the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to
   * type(uint256).max
   * @dev assetId is the index of the asset in the reservesList.
   */
  function supply(bytes32 args) external;

  /**
   * @notice Calldata efficient wrapper of the supplyWithPermit function on behalf of the caller
   * @param args Arguments for the supply function packed in one bytes32
   *    56 bits    8 bits         32 bits           16 bits         128 bits      16 bits
   * | 0-padding | permitV | shortenedDeadline | referralCode | shortenedAmount | assetId |
   * @dev the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to
   * type(uint256).max
   * @dev assetId is the index of the asset in the reservesList.
   * @param r The R parameter of ERC712 permit sig
   * @param s The S parameter of ERC712 permit sig
   */
  function supplyWithPermit(bytes32 args, bytes32 r, bytes32 s) external;

  /**
   * @notice Calldata efficient wrapper of the withdraw function, withdrawing to the caller
   * @param args Arguments for the withdraw function packed in one bytes32
   *    112 bits       128 bits      16 bits
   * | 0-padding | shortenedAmount | assetId |
   * @dev the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to
   * type(uint256).max
   * @dev assetId is the index of the asset in the reservesList.
   * @return The final amount withdrawn
   */
  function withdraw(bytes32 args) external returns (uint256);

  /**
   * @notice Calldata efficient wrapper of the borrow function, borrowing on behalf of the caller
   * @param args Arguments for the borrow function packed in one bytes32
   *    88 bits       16 bits             8 bits                 128 bits       16 bits
   * | 0-padding | referralCode | shortenedInterestRateMode | shortenedAmount | assetId |
   * @dev the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to
   * type(uint256).max
   * @dev assetId is the index of the asset in the reservesList.
   */
  function borrow(bytes32 args) external;

  /**
   * @notice Calldata efficient wrapper of the repay function, repaying on behalf of the caller
   * @param args Arguments for the repay function packed in one bytes32
   *    104 bits             8 bits               128 bits       16 bits
   * | 0-padding | shortenedInterestRateMode | shortenedAmount | assetId |
   * @dev the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to
   * type(uint256).max
   * @dev assetId is the index of the asset in the reservesList.
   * @return The final amount repaid
   */
  function repay(bytes32 args) external returns (uint256);

  /**
   * @notice Calldata efficient wrapper of the repayWithPermit function, repaying on behalf of the caller
   * @param args Arguments for the repayWithPermit function packed in one bytes32
   *    64 bits    8 bits        32 bits                   8 bits               128 bits       16 bits
   * | 0-padding | permitV | shortenedDeadline | shortenedInterestRateMode | shortenedAmount | assetId |
   * @dev the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to
   * type(uint256).max
   * @dev assetId is the index of the asset in the reservesList.
   * @param r The R parameter of ERC712 permit sig
   * @param s The S parameter of ERC712 permit sig
   * @return The final amount repaid
   */
  function repayWithPermit(bytes32 args, bytes32 r, bytes32 s) external returns (uint256);

  /**
   * @notice Calldata efficient wrapper of the repayWithATokens function
   * @param args Arguments for the repayWithATokens function packed in one bytes32
   *    104 bits             8 bits               128 bits       16 bits
   * | 0-padding | shortenedInterestRateMode | shortenedAmount | assetId |
   * @dev the shortenedAmount is cast to 256 bits at decode time, if type(uint128).max the value will be expanded to
   * type(uint256).max
   * @dev assetId is the index of the asset in the reservesList.
   * @return The final amount repaid
   */
  function repayWithATokens(bytes32 args) external returns (uint256);

  /**
   * @notice Calldata efficient wrapper of the swapBorrowRateMode function
   * @param args Arguments for the swapBorrowRateMode function packed in one bytes32
   *    232 bits            8 bits             16 bits
   * | 0-padding | shortenedInterestRateMode | assetId |
   * @dev assetId is the index of the asset in the reservesList.
   */
  function swapBorrowRateMode(bytes32 args) external;

  /**
   * @notice Calldata efficient wrapper of the rebalanceStableBorrowRate function
   * @param args Arguments for the rebalanceStableBorrowRate function packed in one bytes32
   *    80 bits      160 bits     16 bits
   * | 0-padding | user address | assetId |
   * @dev assetId is the index of the asset in the reservesList.
   */
  function rebalanceStableBorrowRate(bytes32 args) external;

  /**
   * @notice Calldata efficient wrapper of the setUserUseReserveAsCollateral function
   * @param args Arguments for the setUserUseReserveAsCollateral function packed in one bytes32
   *    239 bits         1 bit       16 bits
   * | 0-padding | useAsCollateral | assetId |
   * @dev assetId is the index of the asset in the reservesList.
   */
  function setUserUseReserveAsCollateral(bytes32 args) external;

  /**
   * @notice Calldata efficient wrapper of the liquidationCall function
   * @param args1 part of the arguments for the liquidationCall function packed in one bytes32
   *    64 bits      160 bits       16 bits         16 bits
   * | 0-padding | user address | debtAssetId | collateralAssetId |
   * @param args2 part of the arguments for the liquidationCall function packed in one bytes32
   *    127 bits       1 bit             128 bits
   * | 0-padding | receiveAToken | shortenedDebtToCover |
   * @dev the shortenedDebtToCover is cast to 256 bits at decode time,
   * if type(uint128).max the value will be expanded to type(uint256).max
   */
  function liquidationCall(bytes32 args1, bytes32 args2) external;
}



================================================
FILE: contracts/interfaces/IPool.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';
import {DataTypes} from '../protocol/libraries/types/DataTypes.sol';

/**
 * @title IPool
 * @author Aave
 * @notice Defines the basic interface for an Aave Pool.
 */
interface IPool {
  /**
   * @dev Emitted on mintUnbacked()
   * @param reserve The address of the underlying asset of the reserve
   * @param user The address initiating the supply
   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens
   * @param amount The amount of supplied assets
   * @param referralCode The referral code used
   */
  event MintUnbacked(
    address indexed reserve,
    address user,
    address indexed onBehalfOf,
    uint256 amount,
    uint16 indexed referralCode
  );

  /**
   * @dev Emitted on backUnbacked()
   * @param reserve The address of the underlying asset of the reserve
   * @param backer The address paying for the backing
   * @param amount The amount added as backing
   * @param fee The amount paid in fees
   */
  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);

  /**
   * @dev Emitted on supply()
   * @param reserve The address of the underlying asset of the reserve
   * @param user The address initiating the supply
   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens
   * @param amount The amount supplied
   * @param referralCode The referral code used
   */
  event Supply(
    address indexed reserve,
    address user,
    address indexed onBehalfOf,
    uint256 amount,
    uint16 indexed referralCode
  );

  /**
   * @dev Emitted on withdraw()
   * @param reserve The address of the underlying asset being withdrawn
   * @param user The address initiating the withdrawal, owner of aTokens
   * @param to The address that will receive the underlying
   * @param amount The amount to be withdrawn
   */
  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);

  /**
   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened
   * @param reserve The address of the underlying asset being borrowed
   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just
   * initiator of the transaction on flashLoan()
   * @param onBehalfOf The address that will be getting the debt
   * @param amount The amount borrowed out
   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable
   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray
   * @param referralCode The referral code used
   */
  event Borrow(
    address indexed reserve,
    address user,
    address indexed onBehalfOf,
    uint256 amount,
    DataTypes.InterestRateMode interestRateMode,
    uint256 borrowRate,
    uint16 indexed referralCode
  );

  /**
   * @dev Emitted on repay()
   * @param reserve The address of the underlying asset of the reserve
   * @param user The beneficiary of the repayment, getting his debt reduced
   * @param repayer The address of the user initiating the repay(), providing the funds
   * @param amount The amount repaid
   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly
   */
  event Repay(
    address indexed reserve,
    address indexed user,
    address indexed repayer,
    uint256 amount,
    bool useATokens
  );

  /**
   * @dev Emitted on swapBorrowRateMode()
   * @param reserve The address of the underlying asset of the reserve
   * @param user The address of the user swapping his rate mode
   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
   */
  event SwapBorrowRateMode(
    address indexed reserve,
    address indexed user,
    DataTypes.InterestRateMode interestRateMode
  );

  /**
   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets
   * @param asset The address of the underlying asset of the reserve
   * @param totalDebt The total isolation mode debt for the reserve
   */
  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);

  /**
   * @dev Emitted when the user selects a certain asset category for eMode
   * @param user The address of the user
   * @param categoryId The category id
   */
  event UserEModeSet(address indexed user, uint8 categoryId);

  /**
   * @dev Emitted on setUserUseReserveAsCollateral()
   * @param reserve The address of the underlying asset of the reserve
   * @param user The address of the user enabling the usage as collateral
   */
  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);

  /**
   * @dev Emitted on setUserUseReserveAsCollateral()
   * @param reserve The address of the underlying asset of the reserve
   * @param user The address of the user enabling the usage as collateral
   */
  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);

  /**
   * @dev Emitted on rebalanceStableBorrowRate()
   * @param reserve The address of the underlying asset of the reserve
   * @param user The address of the user for which the rebalance has been executed
   */
  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);

  /**
   * @dev Emitted on flashLoan()
   * @param target The address of the flash loan receiver contract
   * @param initiator The address initiating the flash loan
   * @param asset The address of the asset being flash borrowed
   * @param amount The amount flash borrowed
   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt
   * @param premium The fee flash borrowed
   * @param referralCode The referral code used
   */
  event FlashLoan(
    address indexed target,
    address initiator,
    address indexed asset,
    uint256 amount,
    DataTypes.InterestRateMode interestRateMode,
    uint256 premium,
    uint16 indexed referralCode
  );

  /**
   * @dev Emitted when a borrower is liquidated.
   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation
   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation
   * @param user The address of the borrower getting liquidated
   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover
   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator
   * @param liquidator The address of the liquidator
   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants
   * to receive the underlying collateral asset directly
   */
  event LiquidationCall(
    address indexed collateralAsset,
    address indexed debtAsset,
    address indexed user,
    uint256 debtToCover,
    uint256 liquidatedCollateralAmount,
    address liquidator,
    bool receiveAToken
  );

  /**
   * @dev Emitted when the state of a reserve is updated.
   * @param reserve The address of the underlying asset of the reserve
   * @param liquidityRate The next liquidity rate
   * @param stableBorrowRate The next stable borrow rate
   * @param variableBorrowRate The next variable borrow rate
   * @param liquidityIndex The next liquidity index
   * @param variableBorrowIndex The next variable borrow index
   */
  event ReserveDataUpdated(
    address indexed reserve,
    uint256 liquidityRate,
    uint256 stableBorrowRate,
    uint256 variableBorrowRate,
    uint256 liquidityIndex,
    uint256 variableBorrowIndex
  );

  /**
   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.
   * @param reserve The address of the reserve
   * @param amountMinted The amount minted to the treasury
   */
  event MintedToTreasury(address indexed reserve, uint256 amountMinted);

  /**
   * @notice Mints an `amount` of aTokens to the `onBehalfOf`
   * @param asset The address of the underlying asset to mint
   * @param amount The amount to mint
   * @param onBehalfOf The address that will receive the aTokens
   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   */
  function mintUnbacked(
    address asset,
    uint256 amount,
    address onBehalfOf,
    uint16 referralCode
  ) external;

  /**
   * @notice Back the current unbacked underlying with `amount` and pay `fee`.
   * @param asset The address of the underlying asset to back
   * @param amount The amount to back
   * @param fee The amount paid in fees
   * @return The backed amount
   */
  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);

  /**
   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.
   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC
   * @param asset The address of the underlying asset to supply
   * @param amount The amount to be supplied
   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user
   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens
   *   is a different wallet
   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   */
  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;

  /**
   * @notice Supply with transfer approval of asset to be supplied done via permit function
   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713
   * @param asset The address of the underlying asset to supply
   * @param amount The amount to be supplied
   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user
   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens
   *   is a different wallet
   * @param deadline The deadline timestamp that the permit is valid
   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   * @param permitV The V parameter of ERC712 permit sig
   * @param permitR The R parameter of ERC712 permit sig
   * @param permitS The S parameter of ERC712 permit sig
   */
  function supplyWithPermit(
    address asset,
    uint256 amount,
    address onBehalfOf,
    uint16 referralCode,
    uint256 deadline,
    uint8 permitV,
    bytes32 permitR,
    bytes32 permitS
  ) external;

  /**
   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned
   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC
   * @param asset The address of the underlying asset to withdraw
   * @param amount The underlying amount to be withdrawn
   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance
   * @param to The address that will receive the underlying, same as msg.sender if the user
   *   wants to receive it on his own wallet, or a different address if the beneficiary is a
   *   different wallet
   * @return The final amount withdrawn
   */
  function withdraw(address asset, uint256 amount, address to) external returns (uint256);

  /**
   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower
   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the
   * corresponding debt token (StableDebtToken or VariableDebtToken)
   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet
   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`
   * @param asset The address of the underlying asset to borrow
   * @param amount The amount to be borrowed
   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable
   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself
   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator
   * if he has been given credit delegation allowance
   */
  function borrow(
    address asset,
    uint256 amount,
    uint256 interestRateMode,
    uint16 referralCode,
    address onBehalfOf
  ) external;

  /**
   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned
   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address
   * @param asset The address of the borrowed underlying asset previously borrowed
   * @param amount The amount to repay
   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the
   * user calling the function if he wants to reduce/remove his own debt, or the address of any other
   * other borrower whose debt should be removed
   * @return The final amount repaid
   */
  function repay(
    address asset,
    uint256 amount,
    uint256 interestRateMode,
    address onBehalfOf
  ) external returns (uint256);

  /**
   * @notice Repay with transfer approval of asset to be repaid done via permit function
   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713
   * @param asset The address of the borrowed underlying asset previously borrowed
   * @param amount The amount to repay
   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the
   * user calling the function if he wants to reduce/remove his own debt, or the address of any other
   * other borrower whose debt should be removed
   * @param deadline The deadline timestamp that the permit is valid
   * @param permitV The V parameter of ERC712 permit sig
   * @param permitR The R parameter of ERC712 permit sig
   * @param permitS The S parameter of ERC712 permit sig
   * @return The final amount repaid
   */
  function repayWithPermit(
    address asset,
    uint256 amount,
    uint256 interestRateMode,
    address onBehalfOf,
    uint256 deadline,
    uint8 permitV,
    bytes32 permitR,
    bytes32 permitS
  ) external returns (uint256);

  /**
   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the
   * equivalent debt tokens
   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens
   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken
   * balance is not enough to cover the whole debt
   * @param asset The address of the borrowed underlying asset previously borrowed
   * @param amount The amount to repay
   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
   * @return The final amount repaid
   */
  function repayWithATokens(
    address asset,
    uint256 amount,
    uint256 interestRateMode
  ) external returns (uint256);

  /**
   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa
   * @param asset The address of the underlying asset borrowed
   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
   */
  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;

  /**
   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.
   * - Users can be rebalanced if the following conditions are satisfied:
   *     1. Usage ratio is above 95%
   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too
   *        much has been borrowed at a stable rate and suppliers are not earning enough
   * @param asset The address of the underlying asset borrowed
   * @param user The address of the user to be rebalanced
   */
  function rebalanceStableBorrowRate(address asset, address user) external;

  /**
   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral
   * @param asset The address of the underlying asset supplied
   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise
   */
  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;

  /**
   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1
   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives
   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk
   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation
   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation
   * @param user The address of the borrower getting liquidated
   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover
   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants
   * to receive the underlying collateral asset directly
   */
  function liquidationCall(
    address collateralAsset,
    address debtAsset,
    address user,
    uint256 debtToCover,
    bool receiveAToken
  ) external;

  /**
   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,
   * as long as the amount taken plus a fee is returned.
   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept
   * into consideration. For further details please visit https://docs.aave.com/developers/
   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface
   * @param assets The addresses of the assets being flash-borrowed
   * @param amounts The amounts of the assets being flash-borrowed
   * @param interestRateModes Types of the debt to open if the flash loan is not returned:
   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver
   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2
   * @param params Variadic packed params to pass to the receiver as extra information
   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   */
  function flashLoan(
    address receiverAddress,
    address[] calldata assets,
    uint256[] calldata amounts,
    uint256[] calldata interestRateModes,
    address onBehalfOf,
    bytes calldata params,
    uint16 referralCode
  ) external;

  /**
   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,
   * as long as the amount taken plus a fee is returned.
   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept
   * into consideration. For further details please visit https://docs.aave.com/developers/
   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface
   * @param asset The address of the asset being flash-borrowed
   * @param amount The amount of the asset being flash-borrowed
   * @param params Variadic packed params to pass to the receiver as extra information
   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   */
  function flashLoanSimple(
    address receiverAddress,
    address asset,
    uint256 amount,
    bytes calldata params,
    uint16 referralCode
  ) external;

  /**
   * @notice Returns the user account data across all the reserves
   * @param user The address of the user
   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed
   * @return totalDebtBase The total debt of the user in the base currency used by the price feed
   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed
   * @return currentLiquidationThreshold The liquidation threshold of the user
   * @return ltv The loan to value of The user
   * @return healthFactor The current health factor of the user
   */
  function getUserAccountData(
    address user
  )
    external
    view
    returns (
      uint256 totalCollateralBase,
      uint256 totalDebtBase,
      uint256 availableBorrowsBase,
      uint256 currentLiquidationThreshold,
      uint256 ltv,
      uint256 healthFactor
    );

  /**
   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an
   * interest rate strategy
   * @dev Only callable by the PoolConfigurator contract
   * @param asset The address of the underlying asset of the reserve
   * @param aTokenAddress The address of the aToken that will be assigned to the reserve
   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve
   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve
   * @param interestRateStrategyAddress The address of the interest rate strategy contract
   */
  function initReserve(
    address asset,
    address aTokenAddress,
    address stableDebtAddress,
    address variableDebtAddress,
    address interestRateStrategyAddress
  ) external;

  /**
   * @notice Drop a reserve
   * @dev Only callable by the PoolConfigurator contract
   * @param asset The address of the underlying asset of the reserve
   */
  function dropReserve(address asset) external;

  /**
   * @notice Updates the address of the interest rate strategy contract
   * @dev Only callable by the PoolConfigurator contract
   * @param asset The address of the underlying asset of the reserve
   * @param rateStrategyAddress The address of the interest rate strategy contract
   */
  function setReserveInterestRateStrategyAddress(
    address asset,
    address rateStrategyAddress
  ) external;

  /**
   * @notice Sets the configuration bitmap of the reserve as a whole
   * @dev Only callable by the PoolConfigurator contract
   * @param asset The address of the underlying asset of the reserve
   * @param configuration The new configuration bitmap
   */
  function setConfiguration(
    address asset,
    DataTypes.ReserveConfigurationMap calldata configuration
  ) external;

  /**
   * @notice Returns the configuration of the reserve
   * @param asset The address of the underlying asset of the reserve
   * @return The configuration of the reserve
   */
  function getConfiguration(
    address asset
  ) external view returns (DataTypes.ReserveConfigurationMap memory);

  /**
   * @notice Returns the configuration of the user across all the reserves
   * @param user The user address
   * @return The configuration of the user
   */
  function getUserConfiguration(
    address user
  ) external view returns (DataTypes.UserConfigurationMap memory);

  /**
   * @notice Returns the normalized income of the reserve
   * @param asset The address of the underlying asset of the reserve
   * @return The reserve's normalized income
   */
  function getReserveNormalizedIncome(address asset) external view returns (uint256);

  /**
   * @notice Returns the normalized variable debt per unit of asset
   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a
   * "dynamic" variable index based on time, current stored index and virtual rate at the current
   * moment (approx. a borrower would get if opening a position). This means that is always used in
   * combination with variable debt supply/balances.
   * If using this function externally, consider that is possible to have an increasing normalized
   * variable debt that is not equivalent to how the variable debt index would be updated in storage
   * (e.g. only updates with non-zero variable debt supply)
   * @param asset The address of the underlying asset of the reserve
   * @return The reserve normalized variable debt
   */
  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);

  /**
   * @notice Returns the state and configuration of the reserve
   * @param asset The address of the underlying asset of the reserve
   * @return The state and configuration data of the reserve
   */
  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);

  /**
   * @notice Validates and finalizes an aToken transfer
   * @dev Only callable by the overlying aToken of the `asset`
   * @param asset The address of the underlying asset of the aToken
   * @param from The user from which the aTokens are transferred
   * @param to The user receiving the aTokens
   * @param amount The amount being transferred/withdrawn
   * @param balanceFromBefore The aToken balance of the `from` user before the transfer
   * @param balanceToBefore The aToken balance of the `to` user before the transfer
   */
  function finalizeTransfer(
    address asset,
    address from,
    address to,
    uint256 amount,
    uint256 balanceFromBefore,
    uint256 balanceToBefore
  ) external;

  /**
   * @notice Returns the list of the underlying assets of all the initialized reserves
   * @dev It does not include dropped reserves
   * @return The addresses of the underlying assets of the initialized reserves
   */
  function getReservesList() external view returns (address[] memory);

  /**
   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct
   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct
   * @return The address of the reserve associated with id
   */
  function getReserveAddressById(uint16 id) external view returns (address);

  /**
   * @notice Returns the PoolAddressesProvider connected to this contract
   * @return The address of the PoolAddressesProvider
   */
  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);

  /**
   * @notice Updates the protocol fee on the bridging
   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury
   */
  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;

  /**
   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:
   * - A part is sent to aToken holders as extra, one time accumulated interest
   * - A part is collected by the protocol treasury
   * @dev The total premium is calculated on the total borrowed amount
   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`
   * @dev Only callable by the PoolConfigurator contract
   * @param flashLoanPremiumTotal The total premium, expressed in bps
   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps
   */
  function updateFlashloanPremiums(
    uint128 flashLoanPremiumTotal,
    uint128 flashLoanPremiumToProtocol
  ) external;

  /**
   * @notice Configures a new category for the eMode.
   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.
   * The category 0 is reserved as it's the default for volatile assets
   * @param id The id of the category
   * @param config The configuration of the category
   */
  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;

  /**
   * @notice Returns the data of an eMode category
   * @param id The id of the category
   * @return The configuration data of the category
   */
  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);

  /**
   * @notice Allows a user to use the protocol in eMode
   * @param categoryId The id of the category
   */
  function setUserEMode(uint8 categoryId) external;

  /**
   * @notice Returns the eMode the user is using
   * @param user The address of the user
   * @return The eMode id
   */
  function getUserEMode(address user) external view returns (uint256);

  /**
   * @notice Resets the isolation mode total debt of the given asset to zero
   * @dev It requires the given asset has zero debt ceiling
   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt
   */
  function resetIsolationModeTotalDebt(address asset) external;

  /**
   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate
   * @return The percentage of available liquidity to borrow, expressed in bps
   */
  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);

  /**
   * @notice Returns the total fee on flash loans
   * @return The total fee on flashloans
   */
  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);

  /**
   * @notice Returns the part of the bridge fees sent to protocol
   * @return The bridge fee sent to the protocol treasury
   */
  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);

  /**
   * @notice Returns the part of the flashloan fees sent to protocol
   * @return The flashloan fee sent to the protocol treasury
   */
  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);

  /**
   * @notice Returns the maximum number of reserves supported to be listed in this Pool
   * @return The maximum number of reserves supported
   */
  function MAX_NUMBER_RESERVES() external view returns (uint16);

  /**
   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens
   * @param assets The list of reserves for which the minting needs to be executed
   */
  function mintToTreasury(address[] calldata assets) external;

  /**
   * @notice Rescue and transfer tokens locked in this contract
   * @param token The address of the token
   * @param to The address of the recipient
   * @param amount The amount of token to transfer
   */
  function rescueTokens(address token, address to, uint256 amount) external;

  /**
   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.
   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC
   * @dev Deprecated: Use the `supply` function instead
   * @param asset The address of the underlying asset to supply
   * @param amount The amount to be supplied
   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user
   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens
   *   is a different wallet
   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   */
  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;
}



================================================
FILE: contracts/interfaces/IPoolAddressesProvider.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title IPoolAddressesProvider
 * @author Aave
 * @notice Defines the basic interface for a Pool Addresses Provider.
 */
interface IPoolAddressesProvider {
  /**
   * @dev Emitted when the market identifier is updated.
   * @param oldMarketId The old id of the market
   * @param newMarketId The new id of the market
   */
  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);

  /**
   * @dev Emitted when the pool is updated.
   * @param oldAddress The old address of the Pool
   * @param newAddress The new address of the Pool
   */
  event PoolUpdated(address indexed oldAddress, address indexed newAddress);

  /**
   * @dev Emitted when the pool configurator is updated.
   * @param oldAddress The old address of the PoolConfigurator
   * @param newAddress The new address of the PoolConfigurator
   */
  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);

  /**
   * @dev Emitted when the price oracle is updated.
   * @param oldAddress The old address of the PriceOracle
   * @param newAddress The new address of the PriceOracle
   */
  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);

  /**
   * @dev Emitted when the ACL manager is updated.
   * @param oldAddress The old address of the ACLManager
   * @param newAddress The new address of the ACLManager
   */
  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);

  /**
   * @dev Emitted when the ACL admin is updated.
   * @param oldAddress The old address of the ACLAdmin
   * @param newAddress The new address of the ACLAdmin
   */
  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);

  /**
   * @dev Emitted when the price oracle sentinel is updated.
   * @param oldAddress The old address of the PriceOracleSentinel
   * @param newAddress The new address of the PriceOracleSentinel
   */
  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);

  /**
   * @dev Emitted when the pool data provider is updated.
   * @param oldAddress The old address of the PoolDataProvider
   * @param newAddress The new address of the PoolDataProvider
   */
  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);

  /**
   * @dev Emitted when a new proxy is created.
   * @param id The identifier of the proxy
   * @param proxyAddress The address of the created proxy contract
   * @param implementationAddress The address of the implementation contract
   */
  event ProxyCreated(
    bytes32 indexed id,
    address indexed proxyAddress,
    address indexed implementationAddress
  );

  /**
   * @dev Emitted when a new non-proxied contract address is registered.
   * @param id The identifier of the contract
   * @param oldAddress The address of the old contract
   * @param newAddress The address of the new contract
   */
  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);

  /**
   * @dev Emitted when the implementation of the proxy registered with id is updated
   * @param id The identifier of the contract
   * @param proxyAddress The address of the proxy contract
   * @param oldImplementationAddress The address of the old implementation contract
   * @param newImplementationAddress The address of the new implementation contract
   */
  event AddressSetAsProxy(
    bytes32 indexed id,
    address indexed proxyAddress,
    address oldImplementationAddress,
    address indexed newImplementationAddress
  );

  /**
   * @notice Returns the id of the Aave market to which this contract points to.
   * @return The market id
   */
  function getMarketId() external view returns (string memory);

  /**
   * @notice Associates an id with a specific PoolAddressesProvider.
   * @dev This can be used to create an onchain registry of PoolAddressesProviders to
   * identify and validate multiple Aave markets.
   * @param newMarketId The market id
   */
  function setMarketId(string calldata newMarketId) external;

  /**
   * @notice Returns an address by its identifier.
   * @dev The returned address might be an EOA or a contract, potentially proxied
   * @dev It returns ZERO if there is no registered address with the given id
   * @param id The id
   * @return The address of the registered for the specified id
   */
  function getAddress(bytes32 id) external view returns (address);

  /**
   * @notice General function to update the implementation of a proxy registered with
   * certain `id`. If there is no proxy registered, it will instantiate one and
   * set as implementation the `newImplementationAddress`.
   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit
   * setter function, in order to avoid unexpected consequences
   * @param id The id
   * @param newImplementationAddress The address of the new implementation
   */
  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;

  /**
   * @notice Sets an address for an id replacing the address saved in the addresses map.
   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement
   * @param id The id
   * @param newAddress The address to set
   */
  function setAddress(bytes32 id, address newAddress) external;

  /**
   * @notice Returns the address of the Pool proxy.
   * @return The Pool proxy address
   */
  function getPool() external view returns (address);

  /**
   * @notice Updates the implementation of the Pool, or creates a proxy
   * setting the new `pool` implementation when the function is called for the first time.
   * @param newPoolImpl The new Pool implementation
   */
  function setPoolImpl(address newPoolImpl) external;

  /**
   * @notice Returns the address of the PoolConfigurator proxy.
   * @return The PoolConfigurator proxy address
   */
  function getPoolConfigurator() external view returns (address);

  /**
   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy
   * setting the new `PoolConfigurator` implementation when the function is called for the first time.
   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation
   */
  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;

  /**
   * @notice Returns the address of the price oracle.
   * @return The address of the PriceOracle
   */
  function getPriceOracle() external view returns (address);

  /**
   * @notice Updates the address of the price oracle.
   * @param newPriceOracle The address of the new PriceOracle
   */
  function setPriceOracle(address newPriceOracle) external;

  /**
   * @notice Returns the address of the ACL manager.
   * @return The address of the ACLManager
   */
  function getACLManager() external view returns (address);

  /**
   * @notice Updates the address of the ACL manager.
   * @param newAclManager The address of the new ACLManager
   */
  function setACLManager(address newAclManager) external;

  /**
   * @notice Returns the address of the ACL admin.
   * @return The address of the ACL admin
   */
  function getACLAdmin() external view returns (address);

  /**
   * @notice Updates the address of the ACL admin.
   * @param newAclAdmin The address of the new ACL admin
   */
  function setACLAdmin(address newAclAdmin) external;

  /**
   * @notice Returns the address of the price oracle sentinel.
   * @return The address of the PriceOracleSentinel
   */
  function getPriceOracleSentinel() external view returns (address);

  /**
   * @notice Updates the address of the price oracle sentinel.
   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel
   */
  function setPriceOracleSentinel(address newPriceOracleSentinel) external;

  /**
   * @notice Returns the address of the data provider.
   * @return The address of the DataProvider
   */
  function getPoolDataProvider() external view returns (address);

  /**
   * @notice Updates the address of the data provider.
   * @param newDataProvider The address of the new DataProvider
   */
  function setPoolDataProvider(address newDataProvider) external;
}



================================================
FILE: contracts/interfaces/IPoolAddressesProviderRegistry.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title IPoolAddressesProviderRegistry
 * @author Aave
 * @notice Defines the basic interface for an Aave Pool Addresses Provider Registry.
 */
interface IPoolAddressesProviderRegistry {
  /**
   * @dev Emitted when a new AddressesProvider is registered.
   * @param addressesProvider The address of the registered PoolAddressesProvider
   * @param id The id of the registered PoolAddressesProvider
   */
  event AddressesProviderRegistered(address indexed addressesProvider, uint256 indexed id);

  /**
   * @dev Emitted when an AddressesProvider is unregistered.
   * @param addressesProvider The address of the unregistered PoolAddressesProvider
   * @param id The id of the unregistered PoolAddressesProvider
   */
  event AddressesProviderUnregistered(address indexed addressesProvider, uint256 indexed id);

  /**
   * @notice Returns the list of registered addresses providers
   * @return The list of addresses providers
   */
  function getAddressesProvidersList() external view returns (address[] memory);

  /**
   * @notice Returns the id of a registered PoolAddressesProvider
   * @param addressesProvider The address of the PoolAddressesProvider
   * @return The id of the PoolAddressesProvider or 0 if is not registered
   */
  function getAddressesProviderIdByAddress(
    address addressesProvider
  ) external view returns (uint256);

  /**
   * @notice Returns the address of a registered PoolAddressesProvider
   * @param id The id of the market
   * @return The address of the PoolAddressesProvider with the given id or zero address if it is not registered
   */
  function getAddressesProviderAddressById(uint256 id) external view returns (address);

  /**
   * @notice Registers an addresses provider
   * @dev The PoolAddressesProvider must not already be registered in the registry
   * @dev The id must not be used by an already registered PoolAddressesProvider
   * @param provider The address of the new PoolAddressesProvider
   * @param id The id for the new PoolAddressesProvider, referring to the market it belongs to
   */
  function registerAddressesProvider(address provider, uint256 id) external;

  /**
   * @notice Removes an addresses provider from the list of registered addresses providers
   * @param provider The PoolAddressesProvider address
   */
  function unregisterAddressesProvider(address provider) external;
}



================================================
FILE: contracts/interfaces/IPoolConfigurator.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {ConfiguratorInputTypes} from '../protocol/libraries/types/ConfiguratorInputTypes.sol';

/**
 * @title IPoolConfigurator
 * @author Aave
 * @notice Defines the basic interface for a Pool configurator.
 */
interface IPoolConfigurator {
  /**
   * @dev Emitted when a reserve is initialized.
   * @param asset The address of the underlying asset of the reserve
   * @param aToken The address of the associated aToken contract
   * @param stableDebtToken The address of the associated stable rate debt token
   * @param variableDebtToken The address of the associated variable rate debt token
   * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve
   */
  event ReserveInitialized(
    address indexed asset,
    address indexed aToken,
    address stableDebtToken,
    address variableDebtToken,
    address interestRateStrategyAddress
  );

  /**
   * @dev Emitted when borrowing is enabled or disabled on a reserve.
   * @param asset The address of the underlying asset of the reserve
   * @param enabled True if borrowing is enabled, false otherwise
   */
  event ReserveBorrowing(address indexed asset, bool enabled);

  /**
   * @dev Emitted when flashloans are enabled or disabled on a reserve.
   * @param asset The address of the underlying asset of the reserve
   * @param enabled True if flashloans are enabled, false otherwise
   */
  event ReserveFlashLoaning(address indexed asset, bool enabled);

  /**
   * @dev Emitted when the collateralization risk parameters for the specified asset are updated.
   * @param asset The address of the underlying asset of the reserve
   * @param ltv The loan to value of the asset when used as collateral
   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized
   * @param liquidationBonus The bonus liquidators receive to liquidate this asset
   */
  event CollateralConfigurationChanged(
    address indexed asset,
    uint256 ltv,
    uint256 liquidationThreshold,
    uint256 liquidationBonus
  );

  /**
   * @dev Emitted when stable rate borrowing is enabled or disabled on a reserve
   * @param asset The address of the underlying asset of the reserve
   * @param enabled True if stable rate borrowing is enabled, false otherwise
   */
  event ReserveStableRateBorrowing(address indexed asset, bool enabled);

  /**
   * @dev Emitted when a reserve is activated or deactivated
   * @param asset The address of the underlying asset of the reserve
   * @param active True if reserve is active, false otherwise
   */
  event ReserveActive(address indexed asset, bool active);

  /**
   * @dev Emitted when a reserve is frozen or unfrozen
   * @param asset The address of the underlying asset of the reserve
   * @param frozen True if reserve is frozen, false otherwise
   */
  event ReserveFrozen(address indexed asset, bool frozen);

  /**
   * @dev Emitted when a reserve is paused or unpaused
   * @param asset The address of the underlying asset of the reserve
   * @param paused True if reserve is paused, false otherwise
   */
  event ReservePaused(address indexed asset, bool paused);

  /**
   * @dev Emitted when a reserve is dropped.
   * @param asset The address of the underlying asset of the reserve
   */
  event ReserveDropped(address indexed asset);

  /**
   * @dev Emitted when a reserve factor is updated.
   * @param asset The address of the underlying asset of the reserve
   * @param oldReserveFactor The old reserve factor, expressed in bps
   * @param newReserveFactor The new reserve factor, expressed in bps
   */
  event ReserveFactorChanged(
    address indexed asset,
    uint256 oldReserveFactor,
    uint256 newReserveFactor
  );

  /**
   * @dev Emitted when the borrow cap of a reserve is updated.
   * @param asset The address of the underlying asset of the reserve
   * @param oldBorrowCap The old borrow cap
   * @param newBorrowCap The new borrow cap
   */
  event BorrowCapChanged(address indexed asset, uint256 oldBorrowCap, uint256 newBorrowCap);

  /**
   * @dev Emitted when the supply cap of a reserve is updated.
   * @param asset The address of the underlying asset of the reserve
   * @param oldSupplyCap The old supply cap
   * @param newSupplyCap The new supply cap
   */
  event SupplyCapChanged(address indexed asset, uint256 oldSupplyCap, uint256 newSupplyCap);

  /**
   * @dev Emitted when the liquidation protocol fee of a reserve is updated.
   * @param asset The address of the underlying asset of the reserve
   * @param oldFee The old liquidation protocol fee, expressed in bps
   * @param newFee The new liquidation protocol fee, expressed in bps
   */
  event LiquidationProtocolFeeChanged(address indexed asset, uint256 oldFee, uint256 newFee);

  /**
   * @dev Emitted when the unbacked mint cap of a reserve is updated.
   * @param asset The address of the underlying asset of the reserve
   * @param oldUnbackedMintCap The old unbacked mint cap
   * @param newUnbackedMintCap The new unbacked mint cap
   */
  event UnbackedMintCapChanged(
    address indexed asset,
    uint256 oldUnbackedMintCap,
    uint256 newUnbackedMintCap
  );

  /**
   * @dev Emitted when the category of an asset in eMode is changed.
   * @param asset The address of the underlying asset of the reserve
   * @param oldCategoryId The old eMode asset category
   * @param newCategoryId The new eMode asset category
   */
  event EModeAssetCategoryChanged(address indexed asset, uint8 oldCategoryId, uint8 newCategoryId);

  /**
   * @dev Emitted when a new eMode category is added.
   * @param categoryId The new eMode category id
   * @param ltv The ltv for the asset category in eMode
   * @param liquidationThreshold The liquidationThreshold for the asset category in eMode
   * @param liquidationBonus The liquidationBonus for the asset category in eMode
   * @param oracle The optional address of the price oracle specific for this category
   * @param label A human readable identifier for the category
   */
  event EModeCategoryAdded(
    uint8 indexed categoryId,
    uint256 ltv,
    uint256 liquidationThreshold,
    uint256 liquidationBonus,
    address oracle,
    string label
  );

  /**
   * @dev Emitted when a reserve interest strategy contract is updated.
   * @param asset The address of the underlying asset of the reserve
   * @param oldStrategy The address of the old interest strategy contract
   * @param newStrategy The address of the new interest strategy contract
   */
  event ReserveInterestRateStrategyChanged(
    address indexed asset,
    address oldStrategy,
    address newStrategy
  );

  /**
   * @dev Emitted when an aToken implementation is upgraded.
   * @param asset The address of the underlying asset of the reserve
   * @param proxy The aToken proxy address
   * @param implementation The new aToken implementation
   */
  event ATokenUpgraded(
    address indexed asset,
    address indexed proxy,
    address indexed implementation
  );

  /**
   * @dev Emitted when the implementation of a stable debt token is upgraded.
   * @param asset The address of the underlying asset of the reserve
   * @param proxy The stable debt token proxy address
   * @param implementation The new aToken implementation
   */
  event StableDebtTokenUpgraded(
    address indexed asset,
    address indexed proxy,
    address indexed implementation
  );

  /**
   * @dev Emitted when the implementation of a variable debt token is upgraded.
   * @param asset The address of the underlying asset of the reserve
   * @param proxy The variable debt token proxy address
   * @param implementation The new aToken implementation
   */
  event VariableDebtTokenUpgraded(
    address indexed asset,
    address indexed proxy,
    address indexed implementation
  );

  /**
   * @dev Emitted when the debt ceiling of an asset is set.
   * @param asset The address of the underlying asset of the reserve
   * @param oldDebtCeiling The old debt ceiling
   * @param newDebtCeiling The new debt ceiling
   */
  event DebtCeilingChanged(address indexed asset, uint256 oldDebtCeiling, uint256 newDebtCeiling);

  /**
   * @dev Emitted when the the siloed borrowing state for an asset is changed.
   * @param asset The address of the underlying asset of the reserve
   * @param oldState The old siloed borrowing state
   * @param newState The new siloed borrowing state
   */
  event SiloedBorrowingChanged(address indexed asset, bool oldState, bool newState);

  /**
   * @dev Emitted when the bridge protocol fee is updated.
   * @param oldBridgeProtocolFee The old protocol fee, expressed in bps
   * @param newBridgeProtocolFee The new protocol fee, expressed in bps
   */
  event BridgeProtocolFeeUpdated(uint256 oldBridgeProtocolFee, uint256 newBridgeProtocolFee);

  /**
   * @dev Emitted when the total premium on flashloans is updated.
   * @param oldFlashloanPremiumTotal The old premium, expressed in bps
   * @param newFlashloanPremiumTotal The new premium, expressed in bps
   */
  event FlashloanPremiumTotalUpdated(
    uint128 oldFlashloanPremiumTotal,
    uint128 newFlashloanPremiumTotal
  );

  /**
   * @dev Emitted when the part of the premium that goes to protocol is updated.
   * @param oldFlashloanPremiumToProtocol The old premium, expressed in bps
   * @param newFlashloanPremiumToProtocol The new premium, expressed in bps
   */
  event FlashloanPremiumToProtocolUpdated(
    uint128 oldFlashloanPremiumToProtocol,
    uint128 newFlashloanPremiumToProtocol
  );

  /**
   * @dev Emitted when the reserve is set as borrowable/non borrowable in isolation mode.
   * @param asset The address of the underlying asset of the reserve
   * @param borrowable True if the reserve is borrowable in isolation, false otherwise
   */
  event BorrowableInIsolationChanged(address asset, bool borrowable);

  /**
   * @notice Initializes multiple reserves.
   * @param input The array of initialization parameters
   */
  function initReserves(ConfiguratorInputTypes.InitReserveInput[] calldata input) external;

  /**
   * @dev Updates the aToken implementation for the reserve.
   * @param input The aToken update parameters
   */
  function updateAToken(ConfiguratorInputTypes.UpdateATokenInput calldata input) external;

  /**
   * @notice Updates the stable debt token implementation for the reserve.
   * @param input The stableDebtToken update parameters
   */
  function updateStableDebtToken(
    ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
  ) external;

  /**
   * @notice Updates the variable debt token implementation for the asset.
   * @param input The variableDebtToken update parameters
   */
  function updateVariableDebtToken(
    ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
  ) external;

  /**
   * @notice Configures borrowing on a reserve.
   * @dev Can only be disabled (set to false) if stable borrowing is disabled
   * @param asset The address of the underlying asset of the reserve
   * @param enabled True if borrowing needs to be enabled, false otherwise
   */
  function setReserveBorrowing(address asset, bool enabled) external;

  /**
   * @notice Configures the reserve collateralization parameters.
   * @dev All the values are expressed in bps. A value of 10000, results in 100.00%
   * @dev The `liquidationBonus` is always above 100%. A value of 105% means the liquidator will receive a 5% bonus
   * @param asset The address of the underlying asset of the reserve
   * @param ltv The loan to value of the asset when used as collateral
   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized
   * @param liquidationBonus The bonus liquidators receive to liquidate this asset
   */
  function configureReserveAsCollateral(
    address asset,
    uint256 ltv,
    uint256 liquidationThreshold,
    uint256 liquidationBonus
  ) external;

  /**
   * @notice Enable or disable stable rate borrowing on a reserve.
   * @dev Can only be enabled (set to true) if borrowing is enabled
   * @param asset The address of the underlying asset of the reserve
   * @param enabled True if stable rate borrowing needs to be enabled, false otherwise
   */
  function setReserveStableRateBorrowing(address asset, bool enabled) external;

  /**
   * @notice Enable or disable flashloans on a reserve
   * @param asset The address of the underlying asset of the reserve
   * @param enabled True if flashloans need to be enabled, false otherwise
   */
  function setReserveFlashLoaning(address asset, bool enabled) external;

  /**
   * @notice Activate or deactivate a reserve
   * @param asset The address of the underlying asset of the reserve
   * @param active True if the reserve needs to be active, false otherwise
   */
  function setReserveActive(address asset, bool active) external;

  /**
   * @notice Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow
   * or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.
   * @param asset The address of the underlying asset of the reserve
   * @param freeze True if the reserve needs to be frozen, false otherwise
   */
  function setReserveFreeze(address asset, bool freeze) external;

  /**
   * @notice Sets the borrowable in isolation flag for the reserve.
   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the
   * borrowed amount will be accumulated in the isolated collateral's total debt exposure
   * @dev Only assets of the same family (e.g. USD stablecoins) should be borrowable in isolation mode to keep
   * consistency in the debt ceiling calculations
   * @param asset The address of the underlying asset of the reserve
   * @param borrowable True if the asset should be borrowable in isolation, false otherwise
   */
  function setBorrowableInIsolation(address asset, bool borrowable) external;

  /**
   * @notice Pauses a reserve. A paused reserve does not allow any interaction (supply, borrow, repay,
   * swap interest rate, liquidate, atoken transfers).
   * @param asset The address of the underlying asset of the reserve
   * @param paused True if pausing the reserve, false if unpausing
   */
  function setReservePause(address asset, bool paused) external;

  /**
   * @notice Updates the reserve factor of a reserve.
   * @param asset The address of the underlying asset of the reserve
   * @param newReserveFactor The new reserve factor of the reserve
   */
  function setReserveFactor(address asset, uint256 newReserveFactor) external;

  /**
   * @notice Sets the interest rate strategy of a reserve.
   * @param asset The address of the underlying asset of the reserve
   * @param newRateStrategyAddress The address of the new interest strategy contract
   */
  function setReserveInterestRateStrategyAddress(
    address asset,
    address newRateStrategyAddress
  ) external;

  /**
   * @notice Pauses or unpauses all the protocol reserves. In the paused state all the protocol interactions
   * are suspended.
   * @param paused True if protocol needs to be paused, false otherwise
   */
  function setPoolPause(bool paused) external;

  /**
   * @notice Updates the borrow cap of a reserve.
   * @param asset The address of the underlying asset of the reserve
   * @param newBorrowCap The new borrow cap of the reserve
   */
  function setBorrowCap(address asset, uint256 newBorrowCap) external;

  /**
   * @notice Updates the supply cap of a reserve.
   * @param asset The address of the underlying asset of the reserve
   * @param newSupplyCap The new supply cap of the reserve
   */
  function setSupplyCap(address asset, uint256 newSupplyCap) external;

  /**
   * @notice Updates the liquidation protocol fee of reserve.
   * @param asset The address of the underlying asset of the reserve
   * @param newFee The new liquidation protocol fee of the reserve, expressed in bps
   */
  function setLiquidationProtocolFee(address asset, uint256 newFee) external;

  /**
   * @notice Updates the unbacked mint cap of reserve.
   * @param asset The address of the underlying asset of the reserve
   * @param newUnbackedMintCap The new unbacked mint cap of the reserve
   */
  function setUnbackedMintCap(address asset, uint256 newUnbackedMintCap) external;

  /**
   * @notice Assign an efficiency mode (eMode) category to asset.
   * @param asset The address of the underlying asset of the reserve
   * @param newCategoryId The new category id of the asset
   */
  function setAssetEModeCategory(address asset, uint8 newCategoryId) external;

  /**
   * @notice Adds a new efficiency mode (eMode) category.
   * @dev If zero is provided as oracle address, the default asset oracles will be used to compute the overall debt and
   * overcollateralization of the users using this category.
   * @dev The new ltv and liquidation threshold must be greater than the base
   * ltvs and liquidation thresholds of all assets within the eMode category
   * @param categoryId The id of the category to be configured
   * @param ltv The ltv associated with the category
   * @param liquidationThreshold The liquidation threshold associated with the category
   * @param liquidationBonus The liquidation bonus associated with the category
   * @param oracle The oracle associated with the category
   * @param label A label identifying the category
   */
  function setEModeCategory(
    uint8 categoryId,
    uint16 ltv,
    uint16 liquidationThreshold,
    uint16 liquidationBonus,
    address oracle,
    string calldata label
  ) external;

  /**
   * @notice Drops a reserve entirely.
   * @param asset The address of the reserve to drop
   */
  function dropReserve(address asset) external;

  /**
   * @notice Updates the bridge fee collected by the protocol reserves.
   * @param newBridgeProtocolFee The part of the fee sent to the protocol treasury, expressed in bps
   */
  function updateBridgeProtocolFee(uint256 newBridgeProtocolFee) external;

  /**
   * @notice Updates the total flash loan premium.
   * Total flash loan premium consists of two parts:
   * - A part is sent to aToken holders as extra balance
   * - A part is collected by the protocol reserves
   * @dev Expressed in bps
   * @dev The premium is calculated on the total amount borrowed
   * @param newFlashloanPremiumTotal The total flashloan premium
   */
  function updateFlashloanPremiumTotal(uint128 newFlashloanPremiumTotal) external;

  /**
   * @notice Updates the flash loan premium collected by protocol reserves
   * @dev Expressed in bps
   * @dev The premium to protocol is calculated on the total flashloan premium
   * @param newFlashloanPremiumToProtocol The part of the flashloan premium sent to the protocol treasury
   */
  function updateFlashloanPremiumToProtocol(uint128 newFlashloanPremiumToProtocol) external;

  /**
   * @notice Sets the debt ceiling for an asset.
   * @param newDebtCeiling The new debt ceiling
   */
  function setDebtCeiling(address asset, uint256 newDebtCeiling) external;

  /**
   * @notice Sets siloed borrowing for an asset
   * @param siloed The new siloed borrowing state
   */
  function setSiloedBorrowing(address asset, bool siloed) external;
}



================================================
FILE: contracts/interfaces/IPoolDataProvider.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';

/**
 * @title IPoolDataProvider
 * @author Aave
 * @notice Defines the basic interface of a PoolDataProvider
 */
interface IPoolDataProvider {
  struct TokenData {
    string symbol;
    address tokenAddress;
  }

  /**
   * @notice Returns the address for the PoolAddressesProvider contract.
   * @return The address for the PoolAddressesProvider contract
   */
  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);

  /**
   * @notice Returns the list of the existing reserves in the pool.
   * @dev Handling MKR and ETH in a different way since they do not have standard `symbol` functions.
   * @return The list of reserves, pairs of symbols and addresses
   */
  function getAllReservesTokens() external view returns (TokenData[] memory);

  /**
   * @notice Returns the list of the existing ATokens in the pool.
   * @return The list of ATokens, pairs of symbols and addresses
   */
  function getAllATokens() external view returns (TokenData[] memory);

  /**
   * @notice Returns the configuration data of the reserve
   * @dev Not returning borrow and supply caps for compatibility, nor pause flag
   * @param asset The address of the underlying asset of the reserve
   * @return decimals The number of decimals of the reserve
   * @return ltv The ltv of the reserve
   * @return liquidationThreshold The liquidationThreshold of the reserve
   * @return liquidationBonus The liquidationBonus of the reserve
   * @return reserveFactor The reserveFactor of the reserve
   * @return usageAsCollateralEnabled True if the usage as collateral is enabled, false otherwise
   * @return borrowingEnabled True if borrowing is enabled, false otherwise
   * @return stableBorrowRateEnabled True if stable rate borrowing is enabled, false otherwise
   * @return isActive True if it is active, false otherwise
   * @return isFrozen True if it is frozen, false otherwise
   */
  function getReserveConfigurationData(
    address asset
  )
    external
    view
    returns (
      uint256 decimals,
      uint256 ltv,
      uint256 liquidationThreshold,
      uint256 liquidationBonus,
      uint256 reserveFactor,
      bool usageAsCollateralEnabled,
      bool borrowingEnabled,
      bool stableBorrowRateEnabled,
      bool isActive,
      bool isFrozen
    );

  /**
   * @notice Returns the efficiency mode category of the reserve
   * @param asset The address of the underlying asset of the reserve
   * @return The eMode id of the reserve
   */
  function getReserveEModeCategory(address asset) external view returns (uint256);

  /**
   * @notice Returns the caps parameters of the reserve
   * @param asset The address of the underlying asset of the reserve
   * @return borrowCap The borrow cap of the reserve
   * @return supplyCap The supply cap of the reserve
   */
  function getReserveCaps(
    address asset
  ) external view returns (uint256 borrowCap, uint256 supplyCap);

  /**
   * @notice Returns if the pool is paused
   * @param asset The address of the underlying asset of the reserve
   * @return isPaused True if the pool is paused, false otherwise
   */
  function getPaused(address asset) external view returns (bool isPaused);

  /**
   * @notice Returns the siloed borrowing flag
   * @param asset The address of the underlying asset of the reserve
   * @return True if the asset is siloed for borrowing
   */
  function getSiloedBorrowing(address asset) external view returns (bool);

  /**
   * @notice Returns the protocol fee on the liquidation bonus
   * @param asset The address of the underlying asset of the reserve
   * @return The protocol fee on liquidation
   */
  function getLiquidationProtocolFee(address asset) external view returns (uint256);

  /**
   * @notice Returns the unbacked mint cap of the reserve
   * @param asset The address of the underlying asset of the reserve
   * @return The unbacked mint cap of the reserve
   */
  function getUnbackedMintCap(address asset) external view returns (uint256);

  /**
   * @notice Returns the debt ceiling of the reserve
   * @param asset The address of the underlying asset of the reserve
   * @return The debt ceiling of the reserve
   */
  function getDebtCeiling(address asset) external view returns (uint256);

  /**
   * @notice Returns the debt ceiling decimals
   * @return The debt ceiling decimals
   */
  function getDebtCeilingDecimals() external pure returns (uint256);

  /**
   * @notice Returns the reserve data
   * @param asset The address of the underlying asset of the reserve
   * @return unbacked The amount of unbacked tokens
   * @return accruedToTreasuryScaled The scaled amount of tokens accrued to treasury that is to be minted
   * @return totalAToken The total supply of the aToken
   * @return totalStableDebt The total stable debt of the reserve
   * @return totalVariableDebt The total variable debt of the reserve
   * @return liquidityRate The liquidity rate of the reserve
   * @return variableBorrowRate The variable borrow rate of the reserve
   * @return stableBorrowRate The stable borrow rate of the reserve
   * @return averageStableBorrowRate The average stable borrow rate of the reserve
   * @return liquidityIndex The liquidity index of the reserve
   * @return variableBorrowIndex The variable borrow index of the reserve
   * @return lastUpdateTimestamp The timestamp of the last update of the reserve
   */
  function getReserveData(
    address asset
  )
    external
    view
    returns (
      uint256 unbacked,
      uint256 accruedToTreasuryScaled,
      uint256 totalAToken,
      uint256 totalStableDebt,
      uint256 totalVariableDebt,
      uint256 liquidityRate,
      uint256 variableBorrowRate,
      uint256 stableBorrowRate,
      uint256 averageStableBorrowRate,
      uint256 liquidityIndex,
      uint256 variableBorrowIndex,
      uint40 lastUpdateTimestamp
    );

  /**
   * @notice Returns the total supply of aTokens for a given asset
   * @param asset The address of the underlying asset of the reserve
   * @return The total supply of the aToken
   */
  function getATokenTotalSupply(address asset) external view returns (uint256);

  /**
   * @notice Returns the total debt for a given asset
   * @param asset The address of the underlying asset of the reserve
   * @return The total debt for asset
   */
  function getTotalDebt(address asset) external view returns (uint256);

  /**
   * @notice Returns the user data in a reserve
   * @param asset The address of the underlying asset of the reserve
   * @param user The address of the user
   * @return currentATokenBalance The current AToken balance of the user
   * @return currentStableDebt The current stable debt of the user
   * @return currentVariableDebt The current variable debt of the user
   * @return principalStableDebt The principal stable debt of the user
   * @return scaledVariableDebt The scaled variable debt of the user
   * @return stableBorrowRate The stable borrow rate of the user
   * @return liquidityRate The liquidity rate of the reserve
   * @return stableRateLastUpdated The timestamp of the last update of the user stable rate
   * @return usageAsCollateralEnabled True if the user is using the asset as collateral, false
   *         otherwise
   */
  function getUserReserveData(
    address asset,
    address user
  )
    external
    view
    returns (
      uint256 currentATokenBalance,
      uint256 currentStableDebt,
      uint256 currentVariableDebt,
      uint256 principalStableDebt,
      uint256 scaledVariableDebt,
      uint256 stableBorrowRate,
      uint256 liquidityRate,
      uint40 stableRateLastUpdated,
      bool usageAsCollateralEnabled
    );

  /**
   * @notice Returns the token addresses of the reserve
   * @param asset The address of the underlying asset of the reserve
   * @return aTokenAddress The AToken address of the reserve
   * @return stableDebtTokenAddress The StableDebtToken address of the reserve
   * @return variableDebtTokenAddress The VariableDebtToken address of the reserve
   */
  function getReserveTokensAddresses(
    address asset
  )
    external
    view
    returns (
      address aTokenAddress,
      address stableDebtTokenAddress,
      address variableDebtTokenAddress
    );

  /**
   * @notice Returns the address of the Interest Rate strategy
   * @param asset The address of the underlying asset of the reserve
   * @return irStrategyAddress The address of the Interest Rate strategy
   */
  function getInterestRateStrategyAddress(
    address asset
  ) external view returns (address irStrategyAddress);

  /**
   * @notice Returns whether the reserve has FlashLoans enabled or disabled
   * @param asset The address of the underlying asset of the reserve
   * @return True if FlashLoans are enabled, false otherwise
   */
  function getFlashLoanEnabled(address asset) external view returns (bool);
}



================================================
FILE: contracts/interfaces/IPriceOracle.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title IPriceOracle
 * @author Aave
 * @notice Defines the basic interface for a Price oracle.
 */
interface IPriceOracle {
  /**
   * @notice Returns the asset price in the base currency
   * @param asset The address of the asset
   * @return The price of the asset
   */
  function getAssetPrice(address asset) external view returns (uint256);

  /**
   * @notice Set the price of the asset
   * @param asset The address of the asset
   * @param price The price of the asset
   */
  function setAssetPrice(address asset, uint256 price) external;
}



================================================
FILE: contracts/interfaces/IPriceOracleGetter.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title IPriceOracleGetter
 * @author Aave
 * @notice Interface for the Aave price oracle.
 */
interface IPriceOracleGetter {
  /**
   * @notice Returns the base currency address
   * @dev Address 0x0 is reserved for USD as base currency.
   * @return Returns the base currency address.
   */
  function BASE_CURRENCY() external view returns (address);

  /**
   * @notice Returns the base currency unit
   * @dev 1 ether for ETH, 1e8 for USD.
   * @return Returns the base currency unit.
   */
  function BASE_CURRENCY_UNIT() external view returns (uint256);

  /**
   * @notice Returns the asset price in the base currency
   * @param asset The address of the asset
   * @return The price of the asset
   */
  function getAssetPrice(address asset) external view returns (uint256);
}



================================================
FILE: contracts/interfaces/IPriceOracleSentinel.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';

/**
 * @title IPriceOracleSentinel
 * @author Aave
 * @notice Defines the basic interface for the PriceOracleSentinel
 */
interface IPriceOracleSentinel {
  /**
   * @dev Emitted after the sequencer oracle is updated
   * @param newSequencerOracle The new sequencer oracle
   */
  event SequencerOracleUpdated(address newSequencerOracle);

  /**
   * @dev Emitted after the grace period is updated
   * @param newGracePeriod The new grace period value
   */
  event GracePeriodUpdated(uint256 newGracePeriod);

  /**
   * @notice Returns the PoolAddressesProvider
   * @return The address of the PoolAddressesProvider contract
   */
  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);

  /**
   * @notice Returns true if the `borrow` operation is allowed.
   * @dev Operation not allowed when PriceOracle is down or grace period not passed.
   * @return True if the `borrow` operation is allowed, false otherwise.
   */
  function isBorrowAllowed() external view returns (bool);

  /**
   * @notice Returns true if the `liquidation` operation is allowed.
   * @dev Operation not allowed when PriceOracle is down or grace period not passed.
   * @return True if the `liquidation` operation is allowed, false otherwise.
   */
  function isLiquidationAllowed() external view returns (bool);

  /**
   * @notice Updates the address of the sequencer oracle
   * @param newSequencerOracle The address of the new Sequencer Oracle to use
   */
  function setSequencerOracle(address newSequencerOracle) external;

  /**
   * @notice Updates the duration of the grace period
   * @param newGracePeriod The value of the new grace period duration
   */
  function setGracePeriod(uint256 newGracePeriod) external;

  /**
   * @notice Returns the SequencerOracle
   * @return The address of the sequencer oracle contract
   */
  function getSequencerOracle() external view returns (address);

  /**
   * @notice Returns the grace period
   * @return The duration of the grace period
   */
  function getGracePeriod() external view returns (uint256);
}



================================================
FILE: contracts/interfaces/IReserveInterestRateStrategy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {DataTypes} from '../protocol/libraries/types/DataTypes.sol';

/**
 * @title IReserveInterestRateStrategy
 * @author Aave
 * @notice Interface for the calculation of the interest rates
 */
interface IReserveInterestRateStrategy {
  /**
   * @notice Calculates the interest rates depending on the reserve's state and configurations
   * @param params The parameters needed to calculate interest rates
   * @return liquidityRate The liquidity rate expressed in rays
   * @return stableBorrowRate The stable borrow rate expressed in rays
   * @return variableBorrowRate The variable borrow rate expressed in rays
   */
  function calculateInterestRates(
    DataTypes.CalculateInterestRatesParams memory params
  ) external view returns (uint256, uint256, uint256);
}



================================================
FILE: contracts/interfaces/IScaledBalanceToken.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title IScaledBalanceToken
 * @author Aave
 * @notice Defines the basic interface for a scaled-balance token.
 */
interface IScaledBalanceToken {
  /**
   * @dev Emitted after the mint action
   * @param caller The address performing the mint
   * @param onBehalfOf The address of the user that will receive the minted tokens
   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)
   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'
   * @param index The next liquidity index of the reserve
   */
  event Mint(
    address indexed caller,
    address indexed onBehalfOf,
    uint256 value,
    uint256 balanceIncrease,
    uint256 index
  );

  /**
   * @dev Emitted after the burn action
   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address
   * @param from The address from which the tokens will be burned
   * @param target The address that will receive the underlying, if any
   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)
   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'
   * @param index The next liquidity index of the reserve
   */
  event Burn(
    address indexed from,
    address indexed target,
    uint256 value,
    uint256 balanceIncrease,
    uint256 index
  );

  /**
   * @notice Returns the scaled balance of the user.
   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index
   * at the moment of the update
   * @param user The user whose balance is calculated
   * @return The scaled balance of the user
   */
  function scaledBalanceOf(address user) external view returns (uint256);

  /**
   * @notice Returns the scaled balance of the user and the scaled total supply.
   * @param user The address of the user
   * @return The scaled balance of the user
   * @return The scaled total supply
   */
  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);

  /**
   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)
   * @return The scaled total supply
   */
  function scaledTotalSupply() external view returns (uint256);

  /**
   * @notice Returns last index interest was accrued to the user's balance
   * @param user The address of the user
   * @return The last index interest was accrued to the user's balance, expressed in ray
   */
  function getPreviousIndex(address user) external view returns (uint256);
}



================================================
FILE: contracts/interfaces/ISequencerOracle.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title ISequencerOracle
 * @author Aave
 * @notice Defines the basic interface for a Sequencer oracle.
 */
interface ISequencerOracle {
  /**
   * @notice Returns the health status of the sequencer.
   * @return roundId The round ID from the aggregator for which the data was retrieved combined with a phase to ensure
   * that round IDs get larger as time moves forward.
   * @return answer The answer for the latest round: 0 if the sequencer is up, 1 if it is down.
   * @return startedAt The timestamp when the round was started.
   * @return updatedAt The timestamp of the block in which the answer was updated on L1.
   * @return answeredInRound The round ID of the round in which the answer was computed.
   */
  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );
}



================================================
FILE: contracts/interfaces/IStableDebtToken.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IInitializableDebtToken} from './IInitializableDebtToken.sol';

/**
 * @title IStableDebtToken
 * @author Aave
 * @notice Defines the interface for the stable debt token
 * @dev It does not inherit from IERC20 to save in code size
 */
interface IStableDebtToken is IInitializableDebtToken {
  /**
   * @dev Emitted when new stable debt is minted
   * @param user The address of the user who triggered the minting
   * @param onBehalfOf The recipient of stable debt tokens
   * @param amount The amount minted (user entered amount + balance increase from interest)
   * @param currentBalance The balance of the user based on the previous balance and balance increase from interest
   * @param balanceIncrease The increase in balance since the last action of the user 'onBehalfOf'
   * @param newRate The rate of the debt after the minting
   * @param avgStableRate The next average stable rate after the minting
   * @param newTotalSupply The next total supply of the stable debt token after the action
   */
  event Mint(
    address indexed user,
    address indexed onBehalfOf,
    uint256 amount,
    uint256 currentBalance,
    uint256 balanceIncrease,
    uint256 newRate,
    uint256 avgStableRate,
    uint256 newTotalSupply
  );

  /**
   * @dev Emitted when new stable debt is burned
   * @param from The address from which the debt will be burned
   * @param amount The amount being burned (user entered amount - balance increase from interest)
   * @param currentBalance The balance of the user based on the previous balance and balance increase from interest
   * @param balanceIncrease The increase in balance since the last action of 'from'
   * @param avgStableRate The next average stable rate after the burning
   * @param newTotalSupply The next total supply of the stable debt token after the action
   */
  event Burn(
    address indexed from,
    uint256 amount,
    uint256 currentBalance,
    uint256 balanceIncrease,
    uint256 avgStableRate,
    uint256 newTotalSupply
  );

  /**
   * @notice Mints debt token to the `onBehalfOf` address.
   * @dev The resulting rate is the weighted average between the rate of the new debt
   * and the rate of the previous debt
   * @param user The address receiving the borrowed underlying, being the delegatee in case
   * of credit delegate, or same as `onBehalfOf` otherwise
   * @param onBehalfOf The address receiving the debt tokens
   * @param amount The amount of debt tokens to mint
   * @param rate The rate of the debt being minted
   * @return True if it is the first borrow, false otherwise
   * @return The total stable debt
   * @return The average stable borrow rate
   */
  function mint(
    address user,
    address onBehalfOf,
    uint256 amount,
    uint256 rate
  ) external returns (bool, uint256, uint256);

  /**
   * @notice Burns debt of `user`
   * @dev The resulting rate is the weighted average between the rate of the new debt
   * and the rate of the previous debt
   * @dev In some instances, a burn transaction will emit a mint event
   * if the amount to burn is less than the interest the user earned
   * @param from The address from which the debt will be burned
   * @param amount The amount of debt tokens getting burned
   * @return The total stable debt
   * @return The average stable borrow rate
   */
  function burn(address from, uint256 amount) external returns (uint256, uint256);

  /**
   * @notice Returns the average rate of all the stable rate loans.
   * @return The average stable rate
   */
  function getAverageStableRate() external view returns (uint256);

  /**
   * @notice Returns the stable rate of the user debt
   * @param user The address of the user
   * @return The stable rate of the user
   */
  function getUserStableRate(address user) external view returns (uint256);

  /**
   * @notice Returns the timestamp of the last update of the user
   * @param user The address of the user
   * @return The timestamp
   */
  function getUserLastUpdated(address user) external view returns (uint40);

  /**
   * @notice Returns the principal, the total supply, the average stable rate and the timestamp for the last update
   * @return The principal
   * @return The total supply
   * @return The average stable rate
   * @return The timestamp of the last update
   */
  function getSupplyData() external view returns (uint256, uint256, uint256, uint40);

  /**
   * @notice Returns the timestamp of the last update of the total supply
   * @return The timestamp
   */
  function getTotalSupplyLastUpdated() external view returns (uint40);

  /**
   * @notice Returns the total supply and the average stable rate
   * @return The total supply
   * @return The average rate
   */
  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);

  /**
   * @notice Returns the principal debt balance of the user
   * @return The debt balance of the user since the last burn/mint action
   */
  function principalBalanceOf(address user) external view returns (uint256);

  /**
   * @notice Returns the address of the underlying asset of this stableDebtToken (E.g. WETH for stableDebtWETH)
   * @return The address of the underlying asset
   */
  function UNDERLYING_ASSET_ADDRESS() external view returns (address);
}



================================================
FILE: contracts/interfaces/IVariableDebtToken.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {IScaledBalanceToken} from './IScaledBalanceToken.sol';
import {IInitializableDebtToken} from './IInitializableDebtToken.sol';

/**
 * @title IVariableDebtToken
 * @author Aave
 * @notice Defines the basic interface for a variable debt token.
 */
interface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {
  /**
   * @notice Mints debt token to the `onBehalfOf` address
   * @param user The address receiving the borrowed underlying, being the delegatee in case
   * of credit delegate, or same as `onBehalfOf` otherwise
   * @param onBehalfOf The address receiving the debt tokens
   * @param amount The amount of debt being minted
   * @param index The variable debt index of the reserve
   * @return True if the previous balance of the user is 0, false otherwise
   * @return The scaled total debt of the reserve
   */
  function mint(
    address user,
    address onBehalfOf,
    uint256 amount,
    uint256 index
  ) external returns (bool, uint256);

  /**
   * @notice Burns user variable debt
   * @dev In some instances, a burn transaction will emit a mint event
   * if the amount to burn is less than the interest that the user accrued
   * @param from The address from which the debt will be burned
   * @param amount The amount getting burned
   * @param index The variable debt index of the reserve
   * @return The scaled total debt of the reserve
   */
  function burn(address from, uint256 amount, uint256 index) external returns (uint256);

  /**
   * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)
   * @return The address of the underlying asset
   */
  function UNDERLYING_ASSET_ADDRESS() external view returns (address);
}



================================================
FILE: contracts/interfaces/LICENSE.md
================================================
Copyright (C) 2022 Aave

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
[GNU Affero General Public License](https://www.gnu.org/licenses/agpl-3.0.en.html)
for more details



================================================
FILE: contracts/misc/AaveOracle.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {AggregatorInterface} from '../dependencies/chainlink/AggregatorInterface.sol';
import {Errors} from '../protocol/libraries/helpers/Errors.sol';
import {IACLManager} from '../interfaces/IACLManager.sol';
import {IPoolAddressesProvider} from '../interfaces/IPoolAddressesProvider.sol';
import {IPriceOracleGetter} from '../interfaces/IPriceOracleGetter.sol';
import {IAaveOracle} from '../interfaces/IAaveOracle.sol';

/**
 * @title AaveOracle
 * @author Aave
 * @notice Contract to get asset prices, manage price sources and update the fallback oracle
 * - Use of Chainlink Aggregators as first source of price
 * - If the returned price by a Chainlink aggregator is <= 0, the call is forwarded to a fallback oracle
 * - Owned by the Aave governance
 */
contract AaveOracle is IAaveOracle {
  IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;

  // Map of asset price sources (asset => priceSource)
  mapping(address => AggregatorInterface) private assetsSources;

  IPriceOracleGetter private _fallbackOracle;
  address public immutable override BASE_CURRENCY;
  uint256 public immutable override BASE_CURRENCY_UNIT;

  /**
   * @dev Only asset listing or pool admin can call functions marked by this modifier.
   */
  modifier onlyAssetListingOrPoolAdmins() {
    _onlyAssetListingOrPoolAdmins();
    _;
  }

  /**
   * @notice Constructor
   * @param provider The address of the new PoolAddressesProvider
   * @param assets The addresses of the assets
   * @param sources The address of the source of each asset
   * @param fallbackOracle The address of the fallback oracle to use if the data of an
   *        aggregator is not consistent
   * @param baseCurrency The base currency used for the price quotes. If USD is used, base currency is 0x0
   * @param baseCurrencyUnit The unit of the base currency
   */
  constructor(
    IPoolAddressesProvider provider,
    address[] memory assets,
    address[] memory sources,
    address fallbackOracle,
    address baseCurrency,
    uint256 baseCurrencyUnit
  ) {
    ADDRESSES_PROVIDER = provider;
    _setFallbackOracle(fallbackOracle);
    _setAssetsSources(assets, sources);
    BASE_CURRENCY = baseCurrency;
    BASE_CURRENCY_UNIT = baseCurrencyUnit;
    emit BaseCurrencySet(baseCurrency, baseCurrencyUnit);
  }

  /// @inheritdoc IAaveOracle
  function setAssetSources(
    address[] calldata assets,
    address[] calldata sources
  ) external override onlyAssetListingOrPoolAdmins {
    _setAssetsSources(assets, sources);
  }

  /// @inheritdoc IAaveOracle
  function setFallbackOracle(
    address fallbackOracle
  ) external override onlyAssetListingOrPoolAdmins {
    _setFallbackOracle(fallbackOracle);
  }

  /**
   * @notice Internal function to set the sources for each asset
   * @param assets The addresses of the assets
   * @param sources The address of the source of each asset
   */
  function _setAssetsSources(address[] memory assets, address[] memory sources) internal {
    require(assets.length == sources.length, Errors.INCONSISTENT_PARAMS_LENGTH);
    for (uint256 i = 0; i < assets.length; i++) {
      assetsSources[assets[i]] = AggregatorInterface(sources[i]);
      emit AssetSourceUpdated(assets[i], sources[i]);
    }
  }

  /**
   * @notice Internal function to set the fallback oracle
   * @param fallbackOracle The address of the fallback oracle
   */
  function _setFallbackOracle(address fallbackOracle) internal {
    _fallbackOracle = IPriceOracleGetter(fallbackOracle);
    emit FallbackOracleUpdated(fallbackOracle);
  }

  /// @inheritdoc IPriceOracleGetter
  function getAssetPrice(address asset) public view override returns (uint256) {
    AggregatorInterface source = assetsSources[asset];

    if (asset == BASE_CURRENCY) {
      return BASE_CURRENCY_UNIT;
    } else if (address(source) == address(0)) {
      return _fallbackOracle.getAssetPrice(asset);
    } else {
      int256 price = source.latestAnswer();
      if (price > 0) {
        return uint256(price);
      } else {
        return _fallbackOracle.getAssetPrice(asset);
      }
    }
  }

  /// @inheritdoc IAaveOracle
  function getAssetsPrices(
    address[] calldata assets
  ) external view override returns (uint256[] memory) {
    uint256[] memory prices = new uint256[](assets.length);
    for (uint256 i = 0; i < assets.length; i++) {
      prices[i] = getAssetPrice(assets[i]);
    }
    return prices;
  }

  /// @inheritdoc IAaveOracle
  function getSourceOfAsset(address asset) external view override returns (address) {
    return address(assetsSources[asset]);
  }

  /// @inheritdoc IAaveOracle
  function getFallbackOracle() external view returns (address) {
    return address(_fallbackOracle);
  }

  function _onlyAssetListingOrPoolAdmins() internal view {
    IACLManager aclManager = IACLManager(ADDRESSES_PROVIDER.getACLManager());
    require(
      aclManager.isAssetListingAdmin(msg.sender) || aclManager.isPoolAdmin(msg.sender),
      Errors.CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN
    );
  }
}



================================================
FILE: contracts/misc/AaveProtocolDataProvider.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20Detailed} from '../dependencies/openzeppelin/contracts/IERC20Detailed.sol';
import {ReserveConfiguration} from '../protocol/libraries/configuration/ReserveConfiguration.sol';
import {UserConfiguration} from '../protocol/libraries/configuration/UserConfiguration.sol';
import {DataTypes} from '../protocol/libraries/types/DataTypes.sol';
import {WadRayMath} from '../protocol/libraries/math/WadRayMath.sol';
import {IPoolAddressesProvider} from '../interfaces/IPoolAddressesProvider.sol';
import {IStableDebtToken} from '../interfaces/IStableDebtToken.sol';
import {IVariableDebtToken} from '../interfaces/IVariableDebtToken.sol';
import {IPool} from '../interfaces/IPool.sol';
import {IPoolDataProvider} from '../interfaces/IPoolDataProvider.sol';

/**
 * @title AaveProtocolDataProvider
 * @author Aave
 * @notice Peripheral contract to collect and pre-process information from the Pool.
 */
contract AaveProtocolDataProvider is IPoolDataProvider {
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
  using UserConfiguration for DataTypes.UserConfigurationMap;
  using WadRayMath for uint256;

  address constant MKR = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;
  address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

  /// @inheritdoc IPoolDataProvider
  IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;

  /**
   * @notice Constructor
   * @param addressesProvider The address of the PoolAddressesProvider contract
   */
  constructor(IPoolAddressesProvider addressesProvider) {
    ADDRESSES_PROVIDER = addressesProvider;
  }

  /// @inheritdoc IPoolDataProvider
  function getAllReservesTokens() external view override returns (TokenData[] memory) {
    IPool pool = IPool(ADDRESSES_PROVIDER.getPool());
    address[] memory reserves = pool.getReservesList();
    TokenData[] memory reservesTokens = new TokenData[](reserves.length);
    for (uint256 i = 0; i < reserves.length; i++) {
      if (reserves[i] == MKR) {
        reservesTokens[i] = TokenData({symbol: 'MKR', tokenAddress: reserves[i]});
        continue;
      }
      if (reserves[i] == ETH) {
        reservesTokens[i] = TokenData({symbol: 'ETH', tokenAddress: reserves[i]});
        continue;
      }
      reservesTokens[i] = TokenData({
        symbol: IERC20Detailed(reserves[i]).symbol(),
        tokenAddress: reserves[i]
      });
    }
    return reservesTokens;
  }

  /// @inheritdoc IPoolDataProvider
  function getAllATokens() external view override returns (TokenData[] memory) {
    IPool pool = IPool(ADDRESSES_PROVIDER.getPool());
    address[] memory reserves = pool.getReservesList();
    TokenData[] memory aTokens = new TokenData[](reserves.length);
    for (uint256 i = 0; i < reserves.length; i++) {
      DataTypes.ReserveData memory reserveData = pool.getReserveData(reserves[i]);
      aTokens[i] = TokenData({
        symbol: IERC20Detailed(reserveData.aTokenAddress).symbol(),
        tokenAddress: reserveData.aTokenAddress
      });
    }
    return aTokens;
  }

  /// @inheritdoc IPoolDataProvider
  function getReserveConfigurationData(
    address asset
  )
    external
    view
    override
    returns (
      uint256 decimals,
      uint256 ltv,
      uint256 liquidationThreshold,
      uint256 liquidationBonus,
      uint256 reserveFactor,
      bool usageAsCollateralEnabled,
      bool borrowingEnabled,
      bool stableBorrowRateEnabled,
      bool isActive,
      bool isFrozen
    )
  {
    DataTypes.ReserveConfigurationMap memory configuration = IPool(ADDRESSES_PROVIDER.getPool())
      .getConfiguration(asset);

    (ltv, liquidationThreshold, liquidationBonus, decimals, reserveFactor, ) = configuration
      .getParams();

    (isActive, isFrozen, borrowingEnabled, stableBorrowRateEnabled, ) = configuration.getFlags();

    usageAsCollateralEnabled = liquidationThreshold != 0;
  }

  /// @inheritdoc IPoolDataProvider
  function getReserveEModeCategory(address asset) external view override returns (uint256) {
    DataTypes.ReserveConfigurationMap memory configuration = IPool(ADDRESSES_PROVIDER.getPool())
      .getConfiguration(asset);
    return configuration.getEModeCategory();
  }

  /// @inheritdoc IPoolDataProvider
  function getReserveCaps(
    address asset
  ) external view override returns (uint256 borrowCap, uint256 supplyCap) {
    (borrowCap, supplyCap) = IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getCaps();
  }

  /// @inheritdoc IPoolDataProvider
  function getPaused(address asset) external view override returns (bool isPaused) {
    (, , , , isPaused) = IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getFlags();
  }

  /// @inheritdoc IPoolDataProvider
  function getSiloedBorrowing(address asset) external view override returns (bool) {
    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getSiloedBorrowing();
  }

  /// @inheritdoc IPoolDataProvider
  function getLiquidationProtocolFee(address asset) external view override returns (uint256) {
    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getLiquidationProtocolFee();
  }

  /// @inheritdoc IPoolDataProvider
  function getUnbackedMintCap(address asset) external view override returns (uint256) {
    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getUnbackedMintCap();
  }

  /// @inheritdoc IPoolDataProvider
  function getDebtCeiling(address asset) external view override returns (uint256) {
    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getDebtCeiling();
  }

  /// @inheritdoc IPoolDataProvider
  function getDebtCeilingDecimals() external pure override returns (uint256) {
    return ReserveConfiguration.DEBT_CEILING_DECIMALS;
  }

  /// @inheritdoc IPoolDataProvider
  function getReserveData(
    address asset
  )
    external
    view
    override
    returns (
      uint256 unbacked,
      uint256 accruedToTreasuryScaled,
      uint256 totalAToken,
      uint256 totalStableDebt,
      uint256 totalVariableDebt,
      uint256 liquidityRate,
      uint256 variableBorrowRate,
      uint256 stableBorrowRate,
      uint256 averageStableBorrowRate,
      uint256 liquidityIndex,
      uint256 variableBorrowIndex,
      uint40 lastUpdateTimestamp
    )
  {
    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(
      asset
    );

    return (
      reserve.unbacked,
      reserve.accruedToTreasury,
      IERC20Detailed(reserve.aTokenAddress).totalSupply(),
      IERC20Detailed(reserve.stableDebtTokenAddress).totalSupply(),
      IERC20Detailed(reserve.variableDebtTokenAddress).totalSupply(),
      reserve.currentLiquidityRate,
      reserve.currentVariableBorrowRate,
      reserve.currentStableBorrowRate,
      IStableDebtToken(reserve.stableDebtTokenAddress).getAverageStableRate(),
      reserve.liquidityIndex,
      reserve.variableBorrowIndex,
      reserve.lastUpdateTimestamp
    );
  }

  /// @inheritdoc IPoolDataProvider
  function getATokenTotalSupply(address asset) external view override returns (uint256) {
    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(
      asset
    );
    return IERC20Detailed(reserve.aTokenAddress).totalSupply();
  }

  /// @inheritdoc IPoolDataProvider
  function getTotalDebt(address asset) external view override returns (uint256) {
    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(
      asset
    );
    return
      IERC20Detailed(reserve.stableDebtTokenAddress).totalSupply() +
      IERC20Detailed(reserve.variableDebtTokenAddress).totalSupply();
  }

  /// @inheritdoc IPoolDataProvider
  function getUserReserveData(
    address asset,
    address user
  )
    external
    view
    override
    returns (
      uint256 currentATokenBalance,
      uint256 currentStableDebt,
      uint256 currentVariableDebt,
      uint256 principalStableDebt,
      uint256 scaledVariableDebt,
      uint256 stableBorrowRate,
      uint256 liquidityRate,
      uint40 stableRateLastUpdated,
      bool usageAsCollateralEnabled
    )
  {
    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(
      asset
    );

    DataTypes.UserConfigurationMap memory userConfig = IPool(ADDRESSES_PROVIDER.getPool())
      .getUserConfiguration(user);

    currentATokenBalance = IERC20Detailed(reserve.aTokenAddress).balanceOf(user);
    currentVariableDebt = IERC20Detailed(reserve.variableDebtTokenAddress).balanceOf(user);
    currentStableDebt = IERC20Detailed(reserve.stableDebtTokenAddress).balanceOf(user);
    principalStableDebt = IStableDebtToken(reserve.stableDebtTokenAddress).principalBalanceOf(user);
    scaledVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledBalanceOf(user);
    liquidityRate = reserve.currentLiquidityRate;
    stableBorrowRate = IStableDebtToken(reserve.stableDebtTokenAddress).getUserStableRate(user);
    stableRateLastUpdated = IStableDebtToken(reserve.stableDebtTokenAddress).getUserLastUpdated(
      user
    );
    usageAsCollateralEnabled = userConfig.isUsingAsCollateral(reserve.id);
  }

  /// @inheritdoc IPoolDataProvider
  function getReserveTokensAddresses(
    address asset
  )
    external
    view
    override
    returns (
      address aTokenAddress,
      address stableDebtTokenAddress,
      address variableDebtTokenAddress
    )
  {
    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(
      asset
    );

    return (
      reserve.aTokenAddress,
      reserve.stableDebtTokenAddress,
      reserve.variableDebtTokenAddress
    );
  }

  /// @inheritdoc IPoolDataProvider
  function getInterestRateStrategyAddress(
    address asset
  ) external view override returns (address irStrategyAddress) {
    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(
      asset
    );

    return (reserve.interestRateStrategyAddress);
  }

  /// @inheritdoc IPoolDataProvider
  function getFlashLoanEnabled(address asset) external view override returns (bool) {
    DataTypes.ReserveConfigurationMap memory configuration = IPool(ADDRESSES_PROVIDER.getPool())
      .getConfiguration(asset);

    return configuration.getFlashLoanEnabled();
  }
}



================================================
FILE: contracts/misc/L2Encoder.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {SafeCast} from '../dependencies/openzeppelin/contracts/SafeCast.sol';
import {IPool} from '../interfaces/IPool.sol';
import {DataTypes} from '../protocol/libraries/types/DataTypes.sol';

/**
 * @title L2Encoder
 * @author Aave
 * @notice Helper contract to encode calldata, used to optimize calldata size in L2Pool for transaction cost reduction
 * only indented to help generate calldata for uses/frontends.
 */
contract L2Encoder {
  using SafeCast for uint256;
  IPool public immutable POOL;

  /**
   * @dev Constructor.
   * @param pool The address of the Pool contract
   */
  constructor(IPool pool) {
    POOL = pool;
  }

  /**
   * @notice Encodes supply parameters from standard input to compact representation of 1 bytes32
   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf
   * @param asset The address of the underlying asset to supply
   * @param amount The amount to be supplied
   * @param referralCode referralCode Code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   * @return compact representation of supply parameters
   */
  function encodeSupplyParams(
    address asset,
    uint256 amount,
    uint16 referralCode
  ) external view returns (bytes32) {
    DataTypes.ReserveData memory data = POOL.getReserveData(asset);

    uint16 assetId = data.id;
    uint128 shortenedAmount = amount.toUint128();
    bytes32 res;

    assembly {
      res := add(assetId, add(shl(16, shortenedAmount), shl(144, referralCode)))
    }
    return res;
  }

  /**
   * @notice Encodes supplyWithPermit parameters from standard input to compact representation of 3 bytes32
   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf
   * @param asset The address of the underlying asset to supply
   * @param amount The amount to be supplied
   * @param referralCode referralCode Code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   * @param deadline The deadline timestamp that the permit is valid
   * @param permitV The V parameter of ERC712 permit sig
   * @param permitR The R parameter of ERC712 permit sig
   * @param permitS The S parameter of ERC712 permit sig
   * @return compact representation of supplyWithPermit parameters
   * @return The R parameter of ERC712 permit sig
   * @return The S parameter of ERC712 permit sig
   */
  function encodeSupplyWithPermitParams(
    address asset,
    uint256 amount,
    uint16 referralCode,
    uint256 deadline,
    uint8 permitV,
    bytes32 permitR,
    bytes32 permitS
  ) external view returns (bytes32, bytes32, bytes32) {
    DataTypes.ReserveData memory data = POOL.getReserveData(asset);

    uint16 assetId = data.id;
    uint128 shortenedAmount = amount.toUint128();
    uint32 shortenedDeadline = deadline.toUint32();

    bytes32 res;
    assembly {
      res := add(
        assetId,
        add(
          shl(16, shortenedAmount),
          add(shl(144, referralCode), add(shl(160, shortenedDeadline), shl(192, permitV)))
        )
      )
    }

    return (res, permitR, permitS);
  }

  /**
   * @notice Encodes withdraw parameters from standard input to compact representation of 1 bytes32
   * @dev Without a to parameter as the compact calls to L2Pool will use msg.sender as to
   * @param asset The address of the underlying asset to withdraw
   * @param amount The underlying amount to be withdrawn
   * @return compact representation of withdraw parameters
   */
  function encodeWithdrawParams(address asset, uint256 amount) external view returns (bytes32) {
    DataTypes.ReserveData memory data = POOL.getReserveData(asset);

    uint16 assetId = data.id;
    uint128 shortenedAmount = amount == type(uint256).max ? type(uint128).max : amount.toUint128();

    bytes32 res;
    assembly {
      res := add(assetId, shl(16, shortenedAmount))
    }
    return res;
  }

  /**
   * @notice Encodes borrow parameters from standard input to compact representation of 1 bytes32
   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf
   * @param asset The address of the underlying asset to borrow
   * @param amount The amount to be borrowed
   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable
   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   * @return compact representation of withdraw parameters
   */
  function encodeBorrowParams(
    address asset,
    uint256 amount,
    uint256 interestRateMode,
    uint16 referralCode
  ) external view returns (bytes32) {
    DataTypes.ReserveData memory data = POOL.getReserveData(asset);

    uint16 assetId = data.id;
    uint128 shortenedAmount = amount.toUint128();
    uint8 shortenedInterestRateMode = interestRateMode.toUint8();
    bytes32 res;
    assembly {
      res := add(
        assetId,
        add(
          shl(16, shortenedAmount),
          add(shl(144, shortenedInterestRateMode), shl(152, referralCode))
        )
      )
    }
    return res;
  }

  /**
   * @notice Encodes repay parameters from standard input to compact representation of 1 bytes32
   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf
   * @param asset The address of the borrowed underlying asset previously borrowed
   * @param amount The amount to repay
   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `interestRateMode`
   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
   * @return compact representation of repay parameters
   */
  function encodeRepayParams(
    address asset,
    uint256 amount,
    uint256 interestRateMode
  ) public view returns (bytes32) {
    DataTypes.ReserveData memory data = POOL.getReserveData(asset);

    uint16 assetId = data.id;
    uint128 shortenedAmount = amount == type(uint256).max ? type(uint128).max : amount.toUint128();
    uint8 shortenedInterestRateMode = interestRateMode.toUint8();

    bytes32 res;
    assembly {
      res := add(assetId, add(shl(16, shortenedAmount), shl(144, shortenedInterestRateMode)))
    }
    return res;
  }

  /**
   * @notice Encodes repayWithPermit parameters from standard input to compact representation of 3 bytes32
   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf
   * @param asset The address of the borrowed underlying asset previously borrowed
   * @param amount The amount to repay
   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
   * @param deadline The deadline timestamp that the permit is valid
   * @param permitV The V parameter of ERC712 permit sig
   * @param permitR The R parameter of ERC712 permit sig
   * @param permitS The S parameter of ERC712 permit sig
   * @return compact representation of repayWithPermit parameters
   * @return The R parameter of ERC712 permit sig
   * @return The S parameter of ERC712 permit sig
   */
  function encodeRepayWithPermitParams(
    address asset,
    uint256 amount,
    uint256 interestRateMode,
    uint256 deadline,
    uint8 permitV,
    bytes32 permitR,
    bytes32 permitS
  ) external view returns (bytes32, bytes32, bytes32) {
    DataTypes.ReserveData memory data = POOL.getReserveData(asset);

    uint16 assetId = data.id;
    uint128 shortenedAmount = amount == type(uint256).max ? type(uint128).max : amount.toUint128();
    uint8 shortenedInterestRateMode = interestRateMode.toUint8();
    uint32 shortenedDeadline = deadline.toUint32();

    bytes32 res;
    assembly {
      res := add(
        assetId,
        add(
          shl(16, shortenedAmount),
          add(
            shl(144, shortenedInterestRateMode),
            add(shl(152, shortenedDeadline), shl(184, permitV))
          )
        )
      )
    }
    return (res, permitR, permitS);
  }

  /**
   * @notice Encodes repay with aToken parameters from standard input to compact representation of 1 bytes32
   * @param asset The address of the borrowed underlying asset previously borrowed
   * @param amount The amount to repay
   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
   * @return compact representation of repay with aToken parameters
   */
  function encodeRepayWithATokensParams(
    address asset,
    uint256 amount,
    uint256 interestRateMode
  ) external view returns (bytes32) {
    return encodeRepayParams(asset, amount, interestRateMode);
  }

  /**
   * @notice Encodes swap borrow rate mode parameters from standard input to compact representation of 1 bytes32
   * @param asset The address of the underlying asset borrowed
   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
   * @return compact representation of swap borrow rate mode parameters
   */
  function encodeSwapBorrowRateMode(
    address asset,
    uint256 interestRateMode
  ) external view returns (bytes32) {
    DataTypes.ReserveData memory data = POOL.getReserveData(asset);
    uint16 assetId = data.id;
    uint8 shortenedInterestRateMode = interestRateMode.toUint8();
    bytes32 res;
    assembly {
      res := add(assetId, shl(16, shortenedInterestRateMode))
    }
    return res;
  }

  /**
   * @notice Encodes rebalance stable borrow rate parameters from standard input to compact representation of 1 bytes32
   * @param asset The address of the underlying asset borrowed
   * @param user The address of the user to be rebalanced
   * @return compact representation of rebalance stable borrow rate parameters
   */
  function encodeRebalanceStableBorrowRate(
    address asset,
    address user
  ) external view returns (bytes32) {
    DataTypes.ReserveData memory data = POOL.getReserveData(asset);
    uint16 assetId = data.id;

    bytes32 res;
    assembly {
      res := add(assetId, shl(16, user))
    }
    return res;
  }

  /**
   * @notice Encodes set user use reserve as collateral parameters from standard input to compact representation of 1 bytes32
   * @param asset The address of the underlying asset borrowed
   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise
   * @return compact representation of set user use reserve as collateral parameters
   */
  function encodeSetUserUseReserveAsCollateral(
    address asset,
    bool useAsCollateral
  ) external view returns (bytes32) {
    DataTypes.ReserveData memory data = POOL.getReserveData(asset);
    uint16 assetId = data.id;
    bytes32 res;
    assembly {
      res := add(assetId, shl(16, useAsCollateral))
    }
    return res;
  }

  /**
   * @notice Encodes liquidation call parameters from standard input to compact representation of 2 bytes32
   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation
   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation
   * @param user The address of the borrower getting liquidated
   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover
   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants
   * to receive the underlying collateral asset directly
   * @return First half ot compact representation of liquidation call parameters
   * @return Second half ot compact representation of liquidation call parameters
   */
  function encodeLiquidationCall(
    address collateralAsset,
    address debtAsset,
    address user,
    uint256 debtToCover,
    bool receiveAToken
  ) external view returns (bytes32, bytes32) {
    DataTypes.ReserveData memory collateralData = POOL.getReserveData(collateralAsset);
    uint16 collateralAssetId = collateralData.id;

    DataTypes.ReserveData memory debtData = POOL.getReserveData(debtAsset);
    uint16 debtAssetId = debtData.id;

    uint128 shortenedDebtToCover = debtToCover == type(uint256).max
      ? type(uint128).max
      : debtToCover.toUint128();

    bytes32 res1;
    bytes32 res2;

    assembly {
      res1 := add(add(collateralAssetId, shl(16, debtAssetId)), shl(32, user))
      res2 := add(shortenedDebtToCover, shl(128, receiveAToken))
    }
    return (res1, res2);
  }
}



================================================
FILE: contracts/misc/ZeroReserveInterestRateStrategy.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {DataTypes} from '../protocol/libraries/types/DataTypes.sol';
import {IDefaultInterestRateStrategy} from '../interfaces/IDefaultInterestRateStrategy.sol';
import {IReserveInterestRateStrategy} from '../interfaces/IReserveInterestRateStrategy.sol';
import {IPoolAddressesProvider} from '../interfaces/IPoolAddressesProvider.sol';

/**
 * @title ZeroReserveInterestRateStrategy contract
 * @author Aave
 * @notice Interest Rate Strategy contract, with all parameters zeroed.
 * @dev It returns zero liquidity and borrow rate.
 */
contract ZeroReserveInterestRateStrategy is IDefaultInterestRateStrategy {
  /// @inheritdoc IDefaultInterestRateStrategy
  uint256 public constant OPTIMAL_USAGE_RATIO = 0;

  /// @inheritdoc IDefaultInterestRateStrategy
  uint256 public constant OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = 0;

  /// @inheritdoc IDefaultInterestRateStrategy
  uint256 public constant MAX_EXCESS_USAGE_RATIO = 0;

  /// @inheritdoc IDefaultInterestRateStrategy
  uint256 public constant MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO = 0;

  IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;

  // Base variable borrow rate when usage rate = 0. Expressed in ray
  uint256 internal constant _baseVariableBorrowRate = 0;

  // Slope of the variable interest curve when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO. Expressed in ray
  uint256 internal constant _variableRateSlope1 = 0;

  // Slope of the variable interest curve when usage ratio > OPTIMAL_USAGE_RATIO. Expressed in ray
  uint256 internal constant _variableRateSlope2 = 0;

  // Slope of the stable interest curve when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO. Expressed in ray
  uint256 internal constant _stableRateSlope1 = 0;

  // Slope of the stable interest curve when usage ratio > OPTIMAL_USAGE_RATIO. Expressed in ray
  uint256 internal constant _stableRateSlope2 = 0;

  // Premium on top of `_variableRateSlope1` for base stable borrowing rate
  uint256 internal constant _baseStableRateOffset = 0;

  // Additional premium applied to stable rate when stable debt surpass `OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO`
  uint256 internal constant _stableRateExcessOffset = 0;

  /**
   * @dev Constructor.
   * @param provider The address of the PoolAddressesProvider contract
   */
  constructor(IPoolAddressesProvider provider) {
    ADDRESSES_PROVIDER = provider;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getVariableRateSlope1() external pure returns (uint256) {
    return _variableRateSlope1;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getVariableRateSlope2() external pure returns (uint256) {
    return _variableRateSlope2;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getStableRateSlope1() external pure returns (uint256) {
    return _stableRateSlope1;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getStableRateSlope2() external pure returns (uint256) {
    return _stableRateSlope2;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getStableRateExcessOffset() external pure returns (uint256) {
    return _stableRateExcessOffset;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getBaseStableBorrowRate() public pure returns (uint256) {
    return _variableRateSlope1 + _baseStableRateOffset;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getBaseVariableBorrowRate() external pure override returns (uint256) {
    return _baseVariableBorrowRate;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getMaxVariableBorrowRate() external pure override returns (uint256) {
    return _baseVariableBorrowRate + _variableRateSlope1 + _variableRateSlope2;
  }

  /// @inheritdoc IReserveInterestRateStrategy
  function calculateInterestRates(
    DataTypes.CalculateInterestRatesParams memory
  ) public pure override returns (uint256, uint256, uint256) {
    return (0, 0, 0);
  }
}



================================================
FILE: contracts/misc/interfaces/IWETH.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

interface IWETH {
  function deposit() external payable;

  function withdraw(uint256) external;

  function approve(address guy, uint256 wad) external returns (bool);

  function transferFrom(address src, address dst, uint256 wad) external returns (bool);
}



================================================
FILE: contracts/misc/interfaces/LICENSE.md
================================================
Copyright (C) 2022 Aave

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
[GNU Affero General Public License](https://www.gnu.org/licenses/agpl-3.0.en.html)
for more details



================================================
FILE: contracts/mocks/flashloan/MockFlashLoanReceiver.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';
import {GPv2SafeERC20} from '../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {FlashLoanReceiverBase} from '../../flashloan/base/FlashLoanReceiverBase.sol';
import {MintableERC20} from '../tokens/MintableERC20.sol';

contract MockFlashLoanReceiver is FlashLoanReceiverBase {
  using GPv2SafeERC20 for IERC20;

  event ExecutedWithFail(address[] _assets, uint256[] _amounts, uint256[] _premiums);
  event ExecutedWithSuccess(address[] _assets, uint256[] _amounts, uint256[] _premiums);

  bool internal _failExecution;
  uint256 internal _amountToApprove;
  bool internal _simulateEOA;

  constructor(IPoolAddressesProvider provider) FlashLoanReceiverBase(provider) {}

  function setFailExecutionTransfer(bool fail) public {
    _failExecution = fail;
  }

  function setAmountToApprove(uint256 amountToApprove) public {
    _amountToApprove = amountToApprove;
  }

  function setSimulateEOA(bool flag) public {
    _simulateEOA = flag;
  }

  function getAmountToApprove() public view returns (uint256) {
    return _amountToApprove;
  }

  function simulateEOA() public view returns (bool) {
    return _simulateEOA;
  }

  function executeOperation(
    address[] memory assets,
    uint256[] memory amounts,
    uint256[] memory premiums,
    address, // initiator
    bytes memory // params
  ) public override returns (bool) {
    if (_failExecution) {
      emit ExecutedWithFail(assets, amounts, premiums);
      return !_simulateEOA;
    }

    for (uint256 i = 0; i < assets.length; i++) {
      //mint to this contract the specific amount
      MintableERC20 token = MintableERC20(assets[i]);

      //check the contract has the specified balance
      require(
        amounts[i] <= IERC20(assets[i]).balanceOf(address(this)),
        'Invalid balance for the contract'
      );

      uint256 amountToReturn = (_amountToApprove != 0)
        ? _amountToApprove
        : amounts[i] + premiums[i];
      //execution does not fail - mint tokens and return them to the _destination

      token.mint(address(this), premiums[i]);

      IERC20(assets[i]).approve(address(POOL), amountToReturn);
    }

    emit ExecutedWithSuccess(assets, amounts, premiums);

    return true;
  }
}



================================================
FILE: contracts/mocks/flashloan/MockSimpleFlashLoanReceiver.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {SafeMath} from '../../dependencies/openzeppelin/contracts/SafeMath.sol';
import {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';
import {GPv2SafeERC20} from '../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {SafeMath} from '../../dependencies/openzeppelin/contracts/SafeMath.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {FlashLoanSimpleReceiverBase} from '../../flashloan/base/FlashLoanSimpleReceiverBase.sol';
import {MintableERC20} from '../tokens/MintableERC20.sol';

contract MockFlashLoanSimpleReceiver is FlashLoanSimpleReceiverBase {
  using GPv2SafeERC20 for IERC20;
  using SafeMath for uint256;

  event ExecutedWithFail(address asset, uint256 amount, uint256 premium);
  event ExecutedWithSuccess(address asset, uint256 amount, uint256 premium);

  bool internal _failExecution;
  uint256 internal _amountToApprove;
  bool internal _simulateEOA;

  constructor(IPoolAddressesProvider provider) FlashLoanSimpleReceiverBase(provider) {}

  function setFailExecutionTransfer(bool fail) public {
    _failExecution = fail;
  }

  function setAmountToApprove(uint256 amountToApprove) public {
    _amountToApprove = amountToApprove;
  }

  function setSimulateEOA(bool flag) public {
    _simulateEOA = flag;
  }

  function getAmountToApprove() public view returns (uint256) {
    return _amountToApprove;
  }

  function simulateEOA() public view returns (bool) {
    return _simulateEOA;
  }

  function executeOperation(
    address asset,
    uint256 amount,
    uint256 premium,
    address, // initiator
    bytes memory // params
  ) public override returns (bool) {
    if (_failExecution) {
      emit ExecutedWithFail(asset, amount, premium);
      return !_simulateEOA;
    }

    //mint to this contract the specific amount
    MintableERC20 token = MintableERC20(asset);

    //check the contract has the specified balance
    require(amount <= IERC20(asset).balanceOf(address(this)), 'Invalid balance for the contract');

    uint256 amountToReturn = (_amountToApprove != 0) ? _amountToApprove : amount.add(premium);
    //execution does not fail - mint tokens and return them to the _destination

    token.mint(address(this), premium);

    IERC20(asset).approve(address(POOL), amountToReturn);

    emit ExecutedWithSuccess(asset, amount, premium);

    return true;
  }
}



================================================
FILE: contracts/mocks/helpers/MockIncentivesController.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol';

contract MockIncentivesController is IAaveIncentivesController {
  function handleAction(address, uint256, uint256) external override {}
}



================================================
FILE: contracts/mocks/helpers/MockL2Pool.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {L2Pool} from '../../protocol/pool/L2Pool.sol';

contract MockL2Pool is L2Pool {
  function getRevision() internal pure override returns (uint256) {
    return 0x3;
  }

  constructor(IPoolAddressesProvider provider) L2Pool(provider) {}
}



================================================
FILE: contracts/mocks/helpers/MockPeripheryContract.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

contract MockPeripheryContractV1 {
  address private _manager;
  uint256 private _value;

  function initialize(address manager, uint256 value) external {
    _manager = manager;
    _value = value;
  }

  function getManager() external view returns (address) {
    return _manager;
  }

  function setManager(address newManager) external {
    _manager = newManager;
  }
}

contract MockPeripheryContractV2 {
  address private _manager;
  uint256 private _value;
  address private _addressesProvider;

  function initialize(address addressesProvider) external {
    _addressesProvider = addressesProvider;
  }

  function getManager() external view returns (address) {
    return _manager;
  }

  function setManager(address newManager) external {
    _manager = newManager;
  }

  function getAddressesProvider() external view returns (address) {
    return _addressesProvider;
  }
}



================================================
FILE: contracts/mocks/helpers/MockPool.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';

contract MockPool {
  // Reserved storage space to avoid layout collisions.
  uint256[100] private ______gap;

  address internal _addressesProvider;
  address[] internal _reserveList;

  function initialize(address provider) external {
    _addressesProvider = provider;
  }

  function addReserveToReservesList(address reserve) external {
    _reserveList.push(reserve);
  }

  function getReservesList() external view returns (address[] memory) {
    address[] memory reservesList = new address[](_reserveList.length);
    for (uint256 i; i < _reserveList.length; i++) {
      reservesList[i] = _reserveList[i];
    }
    return reservesList;
  }
}

import {Pool} from '../../protocol/pool/Pool.sol';

contract MockPoolInherited is Pool {
  uint16 internal _maxNumberOfReserves = 128;

  function getRevision() internal pure override returns (uint256) {
    return 0x3;
  }

  constructor(IPoolAddressesProvider provider) Pool(provider) {}

  function setMaxNumberOfReserves(uint16 newMaxNumberOfReserves) public {
    _maxNumberOfReserves = newMaxNumberOfReserves;
  }

  function MAX_NUMBER_RESERVES() public view override returns (uint16) {
    return _maxNumberOfReserves;
  }

  function dropReserve(address asset) external override {
    _reservesList[_reserves[asset].id] = address(0);
    delete _reserves[asset];
  }
}



================================================
FILE: contracts/mocks/helpers/MockReserveConfiguration.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {ReserveConfiguration} from '../../protocol/libraries/configuration/ReserveConfiguration.sol';
import {DataTypes} from '../../protocol/libraries/types/DataTypes.sol';

contract MockReserveConfiguration {
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;

  DataTypes.ReserveConfigurationMap public configuration;

  function setLtv(uint256 ltv) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setLtv(ltv);
    configuration = config;
  }

  function getLtv() external view returns (uint256) {
    return configuration.getLtv();
  }

  function setLiquidationBonus(uint256 bonus) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setLiquidationBonus(bonus);
    configuration = config;
  }

  function getLiquidationBonus() external view returns (uint256) {
    return configuration.getLiquidationBonus();
  }

  function setLiquidationThreshold(uint256 threshold) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setLiquidationThreshold(threshold);
    configuration = config;
  }

  function getLiquidationThreshold() external view returns (uint256) {
    return configuration.getLiquidationThreshold();
  }

  function setDecimals(uint256 decimals) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setDecimals(decimals);
    configuration = config;
  }

  function getDecimals() external view returns (uint256) {
    return configuration.getDecimals();
  }

  function setFrozen(bool frozen) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setFrozen(frozen);
    configuration = config;
  }

  function getFrozen() external view returns (bool) {
    return configuration.getFrozen();
  }

  function setBorrowingEnabled(bool enabled) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setBorrowingEnabled(enabled);
    configuration = config;
  }

  function getBorrowingEnabled() external view returns (bool) {
    return configuration.getBorrowingEnabled();
  }

  function setStableRateBorrowingEnabled(bool enabled) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setStableRateBorrowingEnabled(enabled);
    configuration = config;
  }

  function getStableRateBorrowingEnabled() external view returns (bool) {
    return configuration.getStableRateBorrowingEnabled();
  }

  function setReserveFactor(uint256 reserveFactor) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setReserveFactor(reserveFactor);
    configuration = config;
  }

  function getReserveFactor() external view returns (uint256) {
    return configuration.getReserveFactor();
  }

  function setBorrowCap(uint256 borrowCap) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setBorrowCap(borrowCap);
    configuration = config;
  }

  function getBorrowCap() external view returns (uint256) {
    return configuration.getBorrowCap();
  }

  function getEModeCategory() external view returns (uint256) {
    return configuration.getEModeCategory();
  }

  function setEModeCategory(uint256 categoryId) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setEModeCategory(categoryId);
    configuration = config;
  }

  function setFlashLoanEnabled(bool enabled) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setFlashLoanEnabled(enabled);
    configuration = config;
  }

  function getFlashLoanEnabled() external view returns (bool) {
    return configuration.getFlashLoanEnabled();
  }

  function setSupplyCap(uint256 supplyCap) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setSupplyCap(supplyCap);
    configuration = config;
  }

  function getSupplyCap() external view returns (uint256) {
    return configuration.getSupplyCap();
  }

  function setLiquidationProtocolFee(uint256 liquidationProtocolFee) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setLiquidationProtocolFee(liquidationProtocolFee);
    configuration = config;
  }

  function getLiquidationProtocolFee() external view returns (uint256) {
    return configuration.getLiquidationProtocolFee();
  }

  function setUnbackedMintCap(uint256 unbackedMintCap) external {
    DataTypes.ReserveConfigurationMap memory config = configuration;
    config.setUnbackedMintCap(unbackedMintCap);
    configuration = config;
  }

  function getUnbackedMintCap() external view returns (uint256) {
    return configuration.getUnbackedMintCap();
  }

  function getFlags() external view returns (bool, bool, bool, bool, bool) {
    return configuration.getFlags();
  }

  function getParams()
    external
    view
    returns (uint256, uint256, uint256, uint256, uint256, uint256)
  {
    return configuration.getParams();
  }

  function getCaps() external view returns (uint256, uint256) {
    return configuration.getCaps();
  }
}



================================================
FILE: contracts/mocks/helpers/SelfDestructTransfer.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

contract SelfdestructTransfer {
  function destroyAndTransfer(address payable to) external payable {
    selfdestruct(to);
  }
}



================================================
FILE: contracts/mocks/oracle/PriceOracle.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {IPriceOracle} from '../../interfaces/IPriceOracle.sol';

contract PriceOracle is IPriceOracle {
  // Map of asset prices (asset => price)
  mapping(address => uint256) internal prices;

  uint256 internal ethPriceUsd;

  event AssetPriceUpdated(address asset, uint256 price, uint256 timestamp);
  event EthPriceUpdated(uint256 price, uint256 timestamp);

  function getAssetPrice(address asset) external view override returns (uint256) {
    return prices[asset];
  }

  function setAssetPrice(address asset, uint256 price) external override {
    prices[asset] = price;
    emit AssetPriceUpdated(asset, price, block.timestamp);
  }

  function getEthUsdPrice() external view returns (uint256) {
    return ethPriceUsd;
  }

  function setEthUsdPrice(uint256 price) external {
    ethPriceUsd = price;
    emit EthPriceUpdated(price, block.timestamp);
  }
}



================================================
FILE: contracts/mocks/oracle/SequencerOracle.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {Ownable} from '../../dependencies/openzeppelin/contracts/Ownable.sol';
import {ISequencerOracle} from '../../interfaces/ISequencerOracle.sol';

contract SequencerOracle is ISequencerOracle, Ownable {
  bool internal _isDown;
  uint256 internal _timestampGotUp;

  /**
   * @dev Constructor.
   * @param owner The owner address of this contract
   */
  constructor(address owner) {
    transferOwnership(owner);
  }

  /**
   * @notice Updates the health status of the sequencer.
   * @param isDown True if the sequencer is down, false otherwise
   * @param timestamp The timestamp of last time the sequencer got up
   */
  function setAnswer(bool isDown, uint256 timestamp) external onlyOwner {
    _isDown = isDown;
    _timestampGotUp = timestamp;
  }

  /// @inheritdoc ISequencerOracle
  function latestRoundData()
    external
    view
    override
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    )
  {
    int256 isDown;
    if (_isDown) {
      isDown = 1;
    }
    return (0, isDown, 0, _timestampGotUp, 0);
  }
}



================================================
FILE: contracts/mocks/oracle/CLAggregators/MockAggregator.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

contract MockAggregator {
  int256 private _latestAnswer;

  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);

  constructor(int256 initialAnswer) {
    _latestAnswer = initialAnswer;
    emit AnswerUpdated(initialAnswer, 0, block.timestamp);
  }

  function latestAnswer() external view returns (int256) {
    return _latestAnswer;
  }

  function getTokenType() external pure returns (uint256) {
    return 1;
  }

  function decimals() external pure returns (uint8) {
    return 8;
  }
}



================================================
FILE: contracts/mocks/tests/FlashloanAttacker.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {SafeMath} from '../../dependencies/openzeppelin/contracts/SafeMath.sol';
import {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';
import {GPv2SafeERC20} from '../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {SafeMath} from '../../dependencies/openzeppelin/contracts/SafeMath.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {FlashLoanSimpleReceiverBase} from '../../flashloan/base/FlashLoanSimpleReceiverBase.sol';
import {MintableERC20} from '../tokens/MintableERC20.sol';
import {IPool} from '../../interfaces/IPool.sol';
import {DataTypes} from '../../protocol/libraries/types/DataTypes.sol';

contract FlashloanAttacker is FlashLoanSimpleReceiverBase {
  using GPv2SafeERC20 for IERC20;
  using SafeMath for uint256;

  IPoolAddressesProvider internal _provider;
  IPool internal _pool;

  constructor(IPoolAddressesProvider provider) FlashLoanSimpleReceiverBase(provider) {
    _pool = IPool(provider.getPool());
  }

  function supplyAsset(address asset, uint256 amount) public {
    MintableERC20 token = MintableERC20(asset);
    token.mint(address(this), amount);
    token.approve(address(_pool), type(uint256).max);
    _pool.supply(asset, amount, address(this), 0);
  }

  function _innerBorrow(address asset) internal {
    DataTypes.ReserveData memory config = _pool.getReserveData(asset);
    IERC20 token = IERC20(asset);
    uint256 avail = token.balanceOf(config.aTokenAddress);
    _pool.borrow(asset, avail, 2, 0, address(this));
  }

  function executeOperation(
    address asset,
    uint256 amount,
    uint256 premium,
    address, // initiator
    bytes memory // params
  ) public override returns (bool) {
    MintableERC20 token = MintableERC20(asset);
    uint256 amountToReturn = amount.add(premium);

    // Also do a normal borrow here in the middle
    _innerBorrow(asset);

    token.mint(address(this), premium);
    IERC20(asset).approve(address(POOL), amountToReturn);

    return true;
  }
}



================================================
FILE: contracts/mocks/tests/MockReserveInterestRateStrategy.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {IDefaultInterestRateStrategy} from '../../interfaces/IDefaultInterestRateStrategy.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {WadRayMath} from '../../protocol/libraries/math/WadRayMath.sol';
import {DataTypes} from '../../protocol/libraries/types/DataTypes.sol';

contract MockReserveInterestRateStrategy is IDefaultInterestRateStrategy {
  uint256 public immutable OPTIMAL_USAGE_RATIO;
  IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;
  uint256 internal immutable _baseVariableBorrowRate;
  uint256 internal immutable _variableRateSlope1;
  uint256 internal immutable _variableRateSlope2;
  uint256 internal immutable _stableRateSlope1;
  uint256 internal immutable _stableRateSlope2;

  // Not used, only defined for interface compatibility
  uint256 public constant MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO = 0;
  uint256 public constant MAX_EXCESS_USAGE_RATIO = 0;
  uint256 public constant OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = 0;

  uint256 internal _liquidityRate;
  uint256 internal _stableBorrowRate;
  uint256 internal _variableBorrowRate;

  constructor(
    IPoolAddressesProvider provider,
    uint256 optimalUsageRatio,
    uint256 baseVariableBorrowRate,
    uint256 variableRateSlope1,
    uint256 variableRateSlope2,
    uint256 stableRateSlope1,
    uint256 stableRateSlope2
  ) {
    OPTIMAL_USAGE_RATIO = optimalUsageRatio;
    ADDRESSES_PROVIDER = provider;
    _baseVariableBorrowRate = baseVariableBorrowRate;
    _variableRateSlope1 = variableRateSlope1;
    _variableRateSlope2 = variableRateSlope2;
    _stableRateSlope1 = stableRateSlope1;
    _stableRateSlope2 = stableRateSlope2;
  }

  function setLiquidityRate(uint256 liquidityRate) public {
    _liquidityRate = liquidityRate;
  }

  function setStableBorrowRate(uint256 stableBorrowRate) public {
    _stableBorrowRate = stableBorrowRate;
  }

  function setVariableBorrowRate(uint256 variableBorrowRate) public {
    _variableBorrowRate = variableBorrowRate;
  }

  function calculateInterestRates(
    DataTypes.CalculateInterestRatesParams memory
  )
    external
    view
    override
    returns (uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate)
  {
    return (_liquidityRate, _stableBorrowRate, _variableBorrowRate);
  }

  function getVariableRateSlope1() external view returns (uint256) {
    return _variableRateSlope1;
  }

  function getVariableRateSlope2() external view returns (uint256) {
    return _variableRateSlope2;
  }

  function getStableRateSlope1() external view returns (uint256) {
    return _stableRateSlope1;
  }

  function getStableRateSlope2() external view returns (uint256) {
    return _stableRateSlope2;
  }

  function getBaseVariableBorrowRate() external view override returns (uint256) {
    return _baseVariableBorrowRate;
  }

  function getMaxVariableBorrowRate() external view override returns (uint256) {
    return _baseVariableBorrowRate + _variableRateSlope1 + _variableRateSlope2;
  }

  // Not used, only defined for interface compatibility
  function getBaseStableBorrowRate() external pure override returns (uint256) {
    return 0;
  }

  // Not used, only defined for interface compatibility
  function getStableRateExcessOffset() external pure override returns (uint256) {
    return 0;
  }
}



================================================
FILE: contracts/mocks/tests/WadRayMathWrapper.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {WadRayMath} from '../../protocol/libraries/math/WadRayMath.sol';

contract WadRayMathWrapper {
  function wad() public pure returns (uint256) {
    return WadRayMath.WAD;
  }

  function ray() public pure returns (uint256) {
    return WadRayMath.RAY;
  }

  function halfRay() public pure returns (uint256) {
    return WadRayMath.HALF_RAY;
  }

  function halfWad() public pure returns (uint256) {
    return WadRayMath.HALF_WAD;
  }

  function wadMul(uint256 a, uint256 b) public pure returns (uint256) {
    return WadRayMath.wadMul(a, b);
  }

  function wadDiv(uint256 a, uint256 b) public pure returns (uint256) {
    return WadRayMath.wadDiv(a, b);
  }

  function rayMul(uint256 a, uint256 b) public pure returns (uint256) {
    return WadRayMath.rayMul(a, b);
  }

  function rayDiv(uint256 a, uint256 b) public pure returns (uint256) {
    return WadRayMath.rayDiv(a, b);
  }

  function rayToWad(uint256 a) public pure returns (uint256) {
    return WadRayMath.rayToWad(a);
  }

  function wadToRay(uint256 a) public pure returns (uint256) {
    return WadRayMath.wadToRay(a);
  }
}



================================================
FILE: contracts/mocks/tokens/MintableDelegationERC20.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {ERC20} from '../../dependencies/openzeppelin/contracts/ERC20.sol';
import {IDelegationToken} from '../../interfaces/IDelegationToken.sol';

/**
 * @title MintableDelegationERC20
 * @dev ERC20 minting logic with delegation
 */
contract MintableDelegationERC20 is IDelegationToken, ERC20 {
  address public delegatee;

  constructor(string memory name, string memory symbol, uint8 decimals) ERC20(name, symbol) {
    _setupDecimals(decimals);
  }

  /**
   * @dev Function to mint tokens
   * @param value The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(uint256 value) public returns (bool) {
    _mint(msg.sender, value);
    return true;
  }

  function delegate(address delegateeAddress) external override {
    delegatee = delegateeAddress;
  }
}



================================================
FILE: contracts/mocks/tokens/MintableERC20.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {ERC20} from '../../dependencies/openzeppelin/contracts/ERC20.sol';
import {IERC20WithPermit} from '../../interfaces/IERC20WithPermit.sol';

/**
 * @title ERC20Mintable
 * @dev ERC20 minting logic
 */
contract MintableERC20 is IERC20WithPermit, ERC20 {
  bytes public constant EIP712_REVISION = bytes('1');
  bytes32 internal constant EIP712_DOMAIN =
    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');
  bytes32 public constant PERMIT_TYPEHASH =
    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');

  // Map of address nonces (address => nonce)
  mapping(address => uint256) internal _nonces;

  bytes32 public DOMAIN_SEPARATOR;

  constructor(string memory name, string memory symbol, uint8 decimals) ERC20(name, symbol) {
    uint256 chainId = block.chainid;

    DOMAIN_SEPARATOR = keccak256(
      abi.encode(
        EIP712_DOMAIN,
        keccak256(bytes(name)),
        keccak256(EIP712_REVISION),
        chainId,
        address(this)
      )
    );
    _setupDecimals(decimals);
  }

  /// @inheritdoc IERC20WithPermit
  function permit(
    address owner,
    address spender,
    uint256 value,
    uint256 deadline,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external override {
    require(owner != address(0), 'INVALID_OWNER');
    //solium-disable-next-line
    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');
    uint256 currentValidNonce = _nonces[owner];
    bytes32 digest = keccak256(
      abi.encodePacked(
        '\x19\x01',
        DOMAIN_SEPARATOR,
        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))
      )
    );
    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');
    _nonces[owner] = currentValidNonce + 1;
    _approve(owner, spender, value);
  }

  /**
   * @dev Function to mint tokens
   * @param value The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(uint256 value) public returns (bool) {
    _mint(_msgSender(), value);
    return true;
  }

  /**
   * @dev Function to mint tokens to address
   * @param account The account to mint tokens.
   * @param value The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(address account, uint256 value) public returns (bool) {
    _mint(account, value);
    return true;
  }

  function nonces(address owner) public view virtual returns (uint256) {
    return _nonces[owner];
  }
}



================================================
FILE: contracts/mocks/tokens/MockATokenRepayment.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {AToken} from '../../protocol/tokenization/AToken.sol';
import {IPool} from '../../interfaces/IPool.sol';

contract MockATokenRepayment is AToken {
  event MockRepayment(address user, address onBehalfOf, uint256 amount);

  constructor(IPool pool) AToken(pool) {}

  function getRevision() internal pure override returns (uint256) {
    return 0x2;
  }

  function handleRepayment(
    address user,
    address onBehalfOf,
    uint256 amount
  ) external override onlyPool {
    emit MockRepayment(user, onBehalfOf, amount);
  }
}



================================================
FILE: contracts/mocks/tokens/WETH9Mocked.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {WETH9} from '../../dependencies/weth/WETH9.sol';

contract WETH9Mocked is WETH9 {
  // Mint not backed by Ether: only for testing purposes
  function mint(uint256 value) public returns (bool) {
    balanceOf[msg.sender] += value;
    emit Transfer(address(0), msg.sender, value);
    return true;
  }

  function mint(address account, uint256 value) public returns (bool) {
    balanceOf[account] += value;
    emit Transfer(address(0), account, value);
    return true;
  }
}



================================================
FILE: contracts/mocks/upgradeability/MockAToken.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {AToken} from '../../protocol/tokenization/AToken.sol';
import {IPool} from '../../interfaces/IPool.sol';

contract MockAToken is AToken {
  constructor(IPool pool) AToken(pool) {}

  function getRevision() internal pure override returns (uint256) {
    return 0x2;
  }
}



================================================
FILE: contracts/mocks/upgradeability/MockInitializableImplementation.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {VersionedInitializable} from '../../protocol/libraries/aave-upgradeability/VersionedInitializable.sol';

contract MockInitializableImple is VersionedInitializable {
  uint256 public value;
  string public text;
  uint256[] public values;

  uint256 public constant REVISION = 1;

  /**
   * @dev returns the revision number of the contract
   * Needs to be defined in the inherited class as a constant.
   */
  function getRevision() internal pure override returns (uint256) {
    return REVISION;
  }

  function initialize(uint256 val, string memory txt, uint256[] memory vals) external initializer {
    value = val;
    text = txt;
    values = vals;
  }

  function setValue(uint256 newValue) public {
    value = newValue;
  }

  function setValueViaProxy(uint256 newValue) public {
    value = newValue;
  }
}

contract MockInitializableImpleV2 is VersionedInitializable {
  uint256 public value;
  string public text;
  uint256[] public values;

  uint256 public constant REVISION = 2;

  /**
   * @dev returns the revision number of the contract
   * Needs to be defined in the inherited class as a constant.
   */
  function getRevision() internal pure override returns (uint256) {
    return REVISION;
  }

  function initialize(uint256 val, string memory txt, uint256[] memory vals) public initializer {
    value = val;
    text = txt;
    values = vals;
  }

  function setValue(uint256 newValue) public {
    value = newValue;
  }

  function setValueViaProxy(uint256 newValue) public {
    value = newValue;
  }
}

contract MockInitializableFromConstructorImple is VersionedInitializable {
  uint256 public value;

  uint256 public constant REVISION = 2;

  /**
   * @dev returns the revision number of the contract
   * Needs to be defined in the inherited class as a constant.
   */
  function getRevision() internal pure override returns (uint256) {
    return REVISION;
  }

  constructor(uint256 val) {
    initialize(val);
  }

  function initialize(uint256 val) public initializer {
    value = val;
  }
}

contract MockReentrantInitializableImple is VersionedInitializable {
  uint256 public value;

  uint256 public constant REVISION = 2;

  /**
   * @dev returns the revision number of the contract
   * Needs to be defined in the inherited class as a constant.
   */
  function getRevision() internal pure override returns (uint256) {
    return REVISION;
  }

  function initialize(uint256 val) public initializer {
    value = val;
    if (value < 2) {
      initialize(value + 1);
    }
  }
}



================================================
FILE: contracts/mocks/upgradeability/MockStableDebtToken.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {StableDebtToken} from '../../protocol/tokenization/StableDebtToken.sol';
import {IPool} from '../../interfaces/IPool.sol';

contract MockStableDebtToken is StableDebtToken {
  constructor(IPool pool) StableDebtToken(pool) {}

  function getRevision() internal pure override returns (uint256) {
    return 0x3;
  }
}



================================================
FILE: contracts/mocks/upgradeability/MockVariableDebtToken.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {VariableDebtToken} from '../../protocol/tokenization/VariableDebtToken.sol';
import {IPool} from '../../interfaces/IPool.sol';

contract MockVariableDebtToken is VariableDebtToken {
  constructor(IPool pool) VariableDebtToken(pool) {}

  function getRevision() internal pure override returns (uint256) {
    return 0x3;
  }
}



================================================
FILE: contracts/protocol/configuration/ACLManager.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {AccessControl} from '../../dependencies/openzeppelin/contracts/AccessControl.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {IACLManager} from '../../interfaces/IACLManager.sol';
import {Errors} from '../libraries/helpers/Errors.sol';

/**
 * @title ACLManager
 * @author Aave
 * @notice Access Control List Manager. Main registry of system roles and permissions.
 */
contract ACLManager is AccessControl, IACLManager {
  bytes32 public constant override POOL_ADMIN_ROLE = keccak256('POOL_ADMIN');
  bytes32 public constant override EMERGENCY_ADMIN_ROLE = keccak256('EMERGENCY_ADMIN');
  bytes32 public constant override RISK_ADMIN_ROLE = keccak256('RISK_ADMIN');
  bytes32 public constant override FLASH_BORROWER_ROLE = keccak256('FLASH_BORROWER');
  bytes32 public constant override BRIDGE_ROLE = keccak256('BRIDGE');
  bytes32 public constant override ASSET_LISTING_ADMIN_ROLE = keccak256('ASSET_LISTING_ADMIN');

  IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;

  /**
   * @dev Constructor
   * @dev The ACL admin should be initialized at the addressesProvider beforehand
   * @param provider The address of the PoolAddressesProvider
   */
  constructor(IPoolAddressesProvider provider) {
    ADDRESSES_PROVIDER = provider;
    address aclAdmin = provider.getACLAdmin();
    require(aclAdmin != address(0), Errors.ACL_ADMIN_CANNOT_BE_ZERO);
    _setupRole(DEFAULT_ADMIN_ROLE, aclAdmin);
  }

  /// @inheritdoc IACLManager
  function setRoleAdmin(
    bytes32 role,
    bytes32 adminRole
  ) external override onlyRole(DEFAULT_ADMIN_ROLE) {
    _setRoleAdmin(role, adminRole);
  }

  /// @inheritdoc IACLManager
  function addPoolAdmin(address admin) external override {
    grantRole(POOL_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function removePoolAdmin(address admin) external override {
    revokeRole(POOL_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function isPoolAdmin(address admin) external view override returns (bool) {
    return hasRole(POOL_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function addEmergencyAdmin(address admin) external override {
    grantRole(EMERGENCY_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function removeEmergencyAdmin(address admin) external override {
    revokeRole(EMERGENCY_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function isEmergencyAdmin(address admin) external view override returns (bool) {
    return hasRole(EMERGENCY_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function addRiskAdmin(address admin) external override {
    grantRole(RISK_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function removeRiskAdmin(address admin) external override {
    revokeRole(RISK_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function isRiskAdmin(address admin) external view override returns (bool) {
    return hasRole(RISK_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function addFlashBorrower(address borrower) external override {
    grantRole(FLASH_BORROWER_ROLE, borrower);
  }

  /// @inheritdoc IACLManager
  function removeFlashBorrower(address borrower) external override {
    revokeRole(FLASH_BORROWER_ROLE, borrower);
  }

  /// @inheritdoc IACLManager
  function isFlashBorrower(address borrower) external view override returns (bool) {
    return hasRole(FLASH_BORROWER_ROLE, borrower);
  }

  /// @inheritdoc IACLManager
  function addBridge(address bridge) external override {
    grantRole(BRIDGE_ROLE, bridge);
  }

  /// @inheritdoc IACLManager
  function removeBridge(address bridge) external override {
    revokeRole(BRIDGE_ROLE, bridge);
  }

  /// @inheritdoc IACLManager
  function isBridge(address bridge) external view override returns (bool) {
    return hasRole(BRIDGE_ROLE, bridge);
  }

  /// @inheritdoc IACLManager
  function addAssetListingAdmin(address admin) external override {
    grantRole(ASSET_LISTING_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function removeAssetListingAdmin(address admin) external override {
    revokeRole(ASSET_LISTING_ADMIN_ROLE, admin);
  }

  /// @inheritdoc IACLManager
  function isAssetListingAdmin(address admin) external view override returns (bool) {
    return hasRole(ASSET_LISTING_ADMIN_ROLE, admin);
  }
}



================================================
FILE: contracts/protocol/configuration/PoolAddressesProvider.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {Ownable} from '../../dependencies/openzeppelin/contracts/Ownable.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {InitializableImmutableAdminUpgradeabilityProxy} from '../libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol';

/**
 * @title PoolAddressesProvider
 * @author Aave
 * @notice Main registry of addresses part of or connected to the protocol, including permissioned roles
 * @dev Acts as factory of proxies and admin of those, so with right to change its implementations
 * @dev Owned by the Aave Governance
 */
contract PoolAddressesProvider is Ownable, IPoolAddressesProvider {
  // Identifier of the Aave Market
  string private _marketId;

  // Map of registered addresses (identifier => registeredAddress)
  mapping(bytes32 => address) private _addresses;

  // Main identifiers
  bytes32 private constant POOL = 'POOL';
  bytes32 private constant POOL_CONFIGURATOR = 'POOL_CONFIGURATOR';
  bytes32 private constant PRICE_ORACLE = 'PRICE_ORACLE';
  bytes32 private constant ACL_MANAGER = 'ACL_MANAGER';
  bytes32 private constant ACL_ADMIN = 'ACL_ADMIN';
  bytes32 private constant PRICE_ORACLE_SENTINEL = 'PRICE_ORACLE_SENTINEL';
  bytes32 private constant DATA_PROVIDER = 'DATA_PROVIDER';

  /**
   * @dev Constructor.
   * @param marketId The identifier of the market.
   * @param owner The owner address of this contract.
   */
  constructor(string memory marketId, address owner) {
    _setMarketId(marketId);
    transferOwnership(owner);
  }

  /// @inheritdoc IPoolAddressesProvider
  function getMarketId() external view override returns (string memory) {
    return _marketId;
  }

  /// @inheritdoc IPoolAddressesProvider
  function setMarketId(string memory newMarketId) external override onlyOwner {
    _setMarketId(newMarketId);
  }

  /// @inheritdoc IPoolAddressesProvider
  function getAddress(bytes32 id) public view override returns (address) {
    return _addresses[id];
  }

  /// @inheritdoc IPoolAddressesProvider
  function setAddress(bytes32 id, address newAddress) external override onlyOwner {
    address oldAddress = _addresses[id];
    _addresses[id] = newAddress;
    emit AddressSet(id, oldAddress, newAddress);
  }

  /// @inheritdoc IPoolAddressesProvider
  function setAddressAsProxy(
    bytes32 id,
    address newImplementationAddress
  ) external override onlyOwner {
    address proxyAddress = _addresses[id];
    address oldImplementationAddress = _getProxyImplementation(id);
    _updateImpl(id, newImplementationAddress);
    emit AddressSetAsProxy(id, proxyAddress, oldImplementationAddress, newImplementationAddress);
  }

  /// @inheritdoc IPoolAddressesProvider
  function getPool() external view override returns (address) {
    return getAddress(POOL);
  }

  /// @inheritdoc IPoolAddressesProvider
  function setPoolImpl(address newPoolImpl) external override onlyOwner {
    address oldPoolImpl = _getProxyImplementation(POOL);
    _updateImpl(POOL, newPoolImpl);
    emit PoolUpdated(oldPoolImpl, newPoolImpl);
  }

  /// @inheritdoc IPoolAddressesProvider
  function getPoolConfigurator() external view override returns (address) {
    return getAddress(POOL_CONFIGURATOR);
  }

  /// @inheritdoc IPoolAddressesProvider
  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external override onlyOwner {
    address oldPoolConfiguratorImpl = _getProxyImplementation(POOL_CONFIGURATOR);
    _updateImpl(POOL_CONFIGURATOR, newPoolConfiguratorImpl);
    emit PoolConfiguratorUpdated(oldPoolConfiguratorImpl, newPoolConfiguratorImpl);
  }

  /// @inheritdoc IPoolAddressesProvider
  function getPriceOracle() external view override returns (address) {
    return getAddress(PRICE_ORACLE);
  }

  /// @inheritdoc IPoolAddressesProvider
  function setPriceOracle(address newPriceOracle) external override onlyOwner {
    address oldPriceOracle = _addresses[PRICE_ORACLE];
    _addresses[PRICE_ORACLE] = newPriceOracle;
    emit PriceOracleUpdated(oldPriceOracle, newPriceOracle);
  }

  /// @inheritdoc IPoolAddressesProvider
  function getACLManager() external view override returns (address) {
    return getAddress(ACL_MANAGER);
  }

  /// @inheritdoc IPoolAddressesProvider
  function setACLManager(address newAclManager) external override onlyOwner {
    address oldAclManager = _addresses[ACL_MANAGER];
    _addresses[ACL_MANAGER] = newAclManager;
    emit ACLManagerUpdated(oldAclManager, newAclManager);
  }

  /// @inheritdoc IPoolAddressesProvider
  function getACLAdmin() external view override returns (address) {
    return getAddress(ACL_ADMIN);
  }

  /// @inheritdoc IPoolAddressesProvider
  function setACLAdmin(address newAclAdmin) external override onlyOwner {
    address oldAclAdmin = _addresses[ACL_ADMIN];
    _addresses[ACL_ADMIN] = newAclAdmin;
    emit ACLAdminUpdated(oldAclAdmin, newAclAdmin);
  }

  /// @inheritdoc IPoolAddressesProvider
  function getPriceOracleSentinel() external view override returns (address) {
    return getAddress(PRICE_ORACLE_SENTINEL);
  }

  /// @inheritdoc IPoolAddressesProvider
  function setPriceOracleSentinel(address newPriceOracleSentinel) external override onlyOwner {
    address oldPriceOracleSentinel = _addresses[PRICE_ORACLE_SENTINEL];
    _addresses[PRICE_ORACLE_SENTINEL] = newPriceOracleSentinel;
    emit PriceOracleSentinelUpdated(oldPriceOracleSentinel, newPriceOracleSentinel);
  }

  /// @inheritdoc IPoolAddressesProvider
  function getPoolDataProvider() external view override returns (address) {
    return getAddress(DATA_PROVIDER);
  }

  /// @inheritdoc IPoolAddressesProvider
  function setPoolDataProvider(address newDataProvider) external override onlyOwner {
    address oldDataProvider = _addresses[DATA_PROVIDER];
    _addresses[DATA_PROVIDER] = newDataProvider;
    emit PoolDataProviderUpdated(oldDataProvider, newDataProvider);
  }

  /**
   * @notice Internal function to update the implementation of a specific proxied component of the protocol.
   * @dev If there is no proxy registered with the given identifier, it creates the proxy setting `newAddress`
   *   as implementation and calls the initialize() function on the proxy
   * @dev If there is already a proxy registered, it just updates the implementation to `newAddress` and
   *   calls the initialize() function via upgradeToAndCall() in the proxy
   * @param id The id of the proxy to be updated
   * @param newAddress The address of the new implementation
   */
  function _updateImpl(bytes32 id, address newAddress) internal {
    address proxyAddress = _addresses[id];
    InitializableImmutableAdminUpgradeabilityProxy proxy;
    bytes memory params = abi.encodeWithSignature('initialize(address)', address(this));

    if (proxyAddress == address(0)) {
      proxy = new InitializableImmutableAdminUpgradeabilityProxy(address(this));
      _addresses[id] = proxyAddress = address(proxy);
      proxy.initialize(newAddress, params);
      emit ProxyCreated(id, proxyAddress, newAddress);
    } else {
      proxy = InitializableImmutableAdminUpgradeabilityProxy(payable(proxyAddress));
      proxy.upgradeToAndCall(newAddress, params);
    }
  }

  /**
   * @notice Updates the identifier of the Aave market.
   * @param newMarketId The new id of the market
   */
  function _setMarketId(string memory newMarketId) internal {
    string memory oldMarketId = _marketId;
    _marketId = newMarketId;
    emit MarketIdSet(oldMarketId, newMarketId);
  }

  /**
   * @notice Returns the the implementation contract of the proxy contract by its identifier.
   * @dev It returns ZERO if there is no registered address with the given id
   * @dev It reverts if the registered address with the given id is not `InitializableImmutableAdminUpgradeabilityProxy`
   * @param id The id
   * @return The address of the implementation contract
   */
  function _getProxyImplementation(bytes32 id) internal returns (address) {
    address proxyAddress = _addresses[id];
    if (proxyAddress == address(0)) {
      return address(0);
    } else {
      address payable payableProxyAddress = payable(proxyAddress);
      return InitializableImmutableAdminUpgradeabilityProxy(payableProxyAddress).implementation();
    }
  }
}



================================================
FILE: contracts/protocol/configuration/PoolAddressesProviderRegistry.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {Ownable} from '../../dependencies/openzeppelin/contracts/Ownable.sol';
import {Errors} from '../libraries/helpers/Errors.sol';
import {IPoolAddressesProviderRegistry} from '../../interfaces/IPoolAddressesProviderRegistry.sol';

/**
 * @title PoolAddressesProviderRegistry
 * @author Aave
 * @notice Main registry of PoolAddressesProvider of Aave markets.
 * @dev Used for indexing purposes of Aave protocol's markets. The id assigned to a PoolAddressesProvider refers to the
 * market it is connected with, for example with `1` for the Aave main market and `2` for the next created.
 */
contract PoolAddressesProviderRegistry is Ownable, IPoolAddressesProviderRegistry {
  // Map of address provider ids (addressesProvider => id)
  mapping(address => uint256) private _addressesProviderToId;
  // Map of id to address provider (id => addressesProvider)
  mapping(uint256 => address) private _idToAddressesProvider;
  // List of addresses providers
  address[] private _addressesProvidersList;
  // Map of address provider list indexes (addressesProvider => indexInList)
  mapping(address => uint256) private _addressesProvidersIndexes;

  /**
   * @dev Constructor.
   * @param owner The owner address of this contract.
   */
  constructor(address owner) {
    transferOwnership(owner);
  }

  /// @inheritdoc IPoolAddressesProviderRegistry
  function getAddressesProvidersList() external view override returns (address[] memory) {
    return _addressesProvidersList;
  }

  /// @inheritdoc IPoolAddressesProviderRegistry
  function registerAddressesProvider(address provider, uint256 id) external override onlyOwner {
    require(id != 0, Errors.INVALID_ADDRESSES_PROVIDER_ID);
    require(_idToAddressesProvider[id] == address(0), Errors.INVALID_ADDRESSES_PROVIDER_ID);
    require(_addressesProviderToId[provider] == 0, Errors.ADDRESSES_PROVIDER_ALREADY_ADDED);

    _addressesProviderToId[provider] = id;
    _idToAddressesProvider[id] = provider;

    _addToAddressesProvidersList(provider);
    emit AddressesProviderRegistered(provider, id);
  }

  /// @inheritdoc IPoolAddressesProviderRegistry
  function unregisterAddressesProvider(address provider) external override onlyOwner {
    require(_addressesProviderToId[provider] != 0, Errors.ADDRESSES_PROVIDER_NOT_REGISTERED);
    uint256 oldId = _addressesProviderToId[provider];
    _idToAddressesProvider[oldId] = address(0);
    _addressesProviderToId[provider] = 0;

    _removeFromAddressesProvidersList(provider);

    emit AddressesProviderUnregistered(provider, oldId);
  }

  /// @inheritdoc IPoolAddressesProviderRegistry
  function getAddressesProviderIdByAddress(
    address addressesProvider
  ) external view override returns (uint256) {
    return _addressesProviderToId[addressesProvider];
  }

  /// @inheritdoc IPoolAddressesProviderRegistry
  function getAddressesProviderAddressById(uint256 id) external view override returns (address) {
    return _idToAddressesProvider[id];
  }

  /**
   * @notice Adds the addresses provider address to the list.
   * @param provider The address of the PoolAddressesProvider
   */
  function _addToAddressesProvidersList(address provider) internal {
    _addressesProvidersIndexes[provider] = _addressesProvidersList.length;
    _addressesProvidersList.push(provider);
  }

  /**
   * @notice Removes the addresses provider address from the list.
   * @param provider The address of the PoolAddressesProvider
   */
  function _removeFromAddressesProvidersList(address provider) internal {
    uint256 index = _addressesProvidersIndexes[provider];

    _addressesProvidersIndexes[provider] = 0;

    // Swap the index of the last addresses provider in the list with the index of the provider to remove
    uint256 lastIndex = _addressesProvidersList.length - 1;
    if (index < lastIndex) {
      address lastProvider = _addressesProvidersList[lastIndex];
      _addressesProvidersList[index] = lastProvider;
      _addressesProvidersIndexes[lastProvider] = index;
    }
    _addressesProvidersList.pop();
  }
}



================================================
FILE: contracts/protocol/configuration/PriceOracleSentinel.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {Errors} from '../libraries/helpers/Errors.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {IPriceOracleSentinel} from '../../interfaces/IPriceOracleSentinel.sol';
import {ISequencerOracle} from '../../interfaces/ISequencerOracle.sol';
import {IACLManager} from '../../interfaces/IACLManager.sol';

/**
 * @title PriceOracleSentinel
 * @author Aave
 * @notice It validates if operations are allowed depending on the PriceOracle health.
 * @dev Once the PriceOracle gets up after an outage/downtime, users can make their positions healthy during a grace
 *  period. So the PriceOracle is considered completely up once its up and the grace period passed.
 */
contract PriceOracleSentinel is IPriceOracleSentinel {
  /**
   * @dev Only pool admin can call functions marked by this modifier.
   */
  modifier onlyPoolAdmin() {
    IACLManager aclManager = IACLManager(ADDRESSES_PROVIDER.getACLManager());
    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);
    _;
  }

  /**
   * @dev Only risk or pool admin can call functions marked by this modifier.
   */
  modifier onlyRiskOrPoolAdmins() {
    IACLManager aclManager = IACLManager(ADDRESSES_PROVIDER.getACLManager());
    require(
      aclManager.isRiskAdmin(msg.sender) || aclManager.isPoolAdmin(msg.sender),
      Errors.CALLER_NOT_RISK_OR_POOL_ADMIN
    );
    _;
  }

  IPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;

  ISequencerOracle internal _sequencerOracle;

  uint256 internal _gracePeriod;

  /**
   * @dev Constructor
   * @param provider The address of the PoolAddressesProvider
   * @param oracle The address of the SequencerOracle
   * @param gracePeriod The duration of the grace period in seconds
   */
  constructor(IPoolAddressesProvider provider, ISequencerOracle oracle, uint256 gracePeriod) {
    ADDRESSES_PROVIDER = provider;
    _sequencerOracle = oracle;
    _gracePeriod = gracePeriod;
  }

  /// @inheritdoc IPriceOracleSentinel
  function isBorrowAllowed() public view override returns (bool) {
    return _isUpAndGracePeriodPassed();
  }

  /// @inheritdoc IPriceOracleSentinel
  function isLiquidationAllowed() public view override returns (bool) {
    return _isUpAndGracePeriodPassed();
  }

  /**
   * @notice Checks the sequencer oracle is healthy: is up and grace period passed.
   * @return True if the SequencerOracle is up and the grace period passed, false otherwise
   */
  function _isUpAndGracePeriodPassed() internal view returns (bool) {
    (, int256 answer, , uint256 lastUpdateTimestamp, ) = _sequencerOracle.latestRoundData();
    return answer == 0 && block.timestamp - lastUpdateTimestamp > _gracePeriod;
  }

  /// @inheritdoc IPriceOracleSentinel
  function setSequencerOracle(address newSequencerOracle) public onlyPoolAdmin {
    _sequencerOracle = ISequencerOracle(newSequencerOracle);
    emit SequencerOracleUpdated(newSequencerOracle);
  }

  /// @inheritdoc IPriceOracleSentinel
  function setGracePeriod(uint256 newGracePeriod) public onlyRiskOrPoolAdmins {
    _gracePeriod = newGracePeriod;
    emit GracePeriodUpdated(newGracePeriod);
  }

  /// @inheritdoc IPriceOracleSentinel
  function getSequencerOracle() public view returns (address) {
    return address(_sequencerOracle);
  }

  /// @inheritdoc IPriceOracleSentinel
  function getGracePeriod() public view returns (uint256) {
    return _gracePeriod;
  }
}



================================================
FILE: contracts/protocol/libraries/aave-upgradeability/BaseImmutableAdminUpgradeabilityProxy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {BaseUpgradeabilityProxy} from '../../../dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol';

/**
 * @title BaseImmutableAdminUpgradeabilityProxy
 * @author Aave, inspired by the OpenZeppelin upgradeability proxy pattern
 * @notice This contract combines an upgradeability proxy with an authorization
 * mechanism for administrative tasks.
 * @dev The admin role is stored in an immutable, which helps saving transactions costs
 * All external functions in this contract must be guarded by the
 * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity
 * feature proposal that would enable this to be done automatically.
 */
contract BaseImmutableAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {
  address internal immutable _admin;

  /**
   * @dev Constructor.
   * @param admin The address of the admin
   */
  constructor(address admin) {
    _admin = admin;
  }

  modifier ifAdmin() {
    if (msg.sender == _admin) {
      _;
    } else {
      _fallback();
    }
  }

  /**
   * @notice Return the admin address
   * @return The address of the proxy admin.
   */
  function admin() external ifAdmin returns (address) {
    return _admin;
  }

  /**
   * @notice Return the implementation address
   * @return The address of the implementation.
   */
  function implementation() external ifAdmin returns (address) {
    return _implementation();
  }

  /**
   * @notice Upgrade the backing implementation of the proxy.
   * @dev Only the admin can call this function.
   * @param newImplementation The address of the new implementation.
   */
  function upgradeTo(address newImplementation) external ifAdmin {
    _upgradeTo(newImplementation);
  }

  /**
   * @notice Upgrade the backing implementation of the proxy and call a function
   * on the new implementation.
   * @dev This is useful to initialize the proxied contract.
   * @param newImplementation The address of the new implementation.
   * @param data Data to send as msg.data in the low level call.
   * It should include the signature and the parameters of the function to be called, as described in
   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
   */
  function upgradeToAndCall(
    address newImplementation,
    bytes calldata data
  ) external payable ifAdmin {
    _upgradeTo(newImplementation);
    (bool success, ) = newImplementation.delegatecall(data);
    require(success);
  }

  /**
   * @notice Only fall back when the sender is not the admin.
   */
  function _willFallback() internal virtual override {
    require(msg.sender != _admin, 'Cannot call fallback function from the proxy admin');
    super._willFallback();
  }
}



================================================
FILE: contracts/protocol/libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

import {InitializableUpgradeabilityProxy} from '../../../dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol';
import {Proxy} from '../../../dependencies/openzeppelin/upgradeability/Proxy.sol';
import {BaseImmutableAdminUpgradeabilityProxy} from './BaseImmutableAdminUpgradeabilityProxy.sol';

/**
 * @title InitializableAdminUpgradeabilityProxy
 * @author Aave
 * @dev Extends BaseAdminUpgradeabilityProxy with an initializer function
 */
contract InitializableImmutableAdminUpgradeabilityProxy is
  BaseImmutableAdminUpgradeabilityProxy,
  InitializableUpgradeabilityProxy
{
  /**
   * @dev Constructor.
   * @param admin The address of the admin
   */
  constructor(address admin) BaseImmutableAdminUpgradeabilityProxy(admin) {
    // Intentionally left blank
  }

  /// @inheritdoc BaseImmutableAdminUpgradeabilityProxy
  function _willFallback() internal override(BaseImmutableAdminUpgradeabilityProxy, Proxy) {
    BaseImmutableAdminUpgradeabilityProxy._willFallback();
  }
}



================================================
FILE: contracts/protocol/libraries/aave-upgradeability/VersionedInitializable.sol
================================================
// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @title VersionedInitializable
 * @author Aave, inspired by the OpenZeppelin Initializable contract
 * @notice Helper contract to implement initializer functions. To use it, replace
 * the constructor with a function that has the `initializer` modifier.
 * @dev WARNING: Unlike constructors, initializer functions must be manually
 * invoked. This applies both to deploying an Initializable contract, as well
 * as extending an Initializable contract via inheritance.
 * WARNING: When used with inheritance, manual care must be taken to not invoke
 * a parent initializer twice, or ensure that all initializers are idempotent,
 * because this is not dealt with automatically as with constructors.
 */
abstract contract VersionedInitializable {
  /**
   * @dev Indicates that the contract has been initialized.
   */
  uint256 private lastInitializedRevision = 0;

  /**
   * @dev Indicates that the contract is in the process of being initialized.
   */
  bool private initializing;

  /**
   * @dev Modifier to use in the initializer function of a contract.
   */
  modifier initializer() {
    uint256 revision = getRevision();
    require(
      initializing || isConstructor() || revision > lastInitializedRevision,
      'Contract instance has already been initialized'
    );

    bool isTopLevelCall = !initializing;
    if (isTopLevelCall) {
      initializing = true;
      lastInitializedRevision = revision;
    }

    _;

    if (isTopLevelCall) {
      initializing = false;
    }
  }

  /**
   * @notice Returns the revision number of the contract
   * @dev Needs to be defined in the inherited class as a constant.
   * @return The revision number
   */
  function getRevision() internal pure virtual returns (uint256);

  /**
   * @notice Returns true if and only if the function is running in the constructor
   * @return True if the function is running in the constructor
   */
  function isConstructor() private view returns (bool) {
    // extcodesize checks the size of the code stored in an address, and
    // address returns the current address. Since the code is still not
    // deployed when running a constructor, any checks on its code size will
    // yield zero, making it an effective way to detect if a contract is
    // under construction or not.
    uint256 cs;
    //solium-disable-next-line
    assembly {
      cs := extcodesize(address())
    }
    return cs == 0;
  }

  // Reserved storage space to allow for layout changes in the future.
  uint256[50] private ______gap;
}



================================================
FILE: contracts/protocol/libraries/configuration/ReserveConfiguration.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {Errors} from '../helpers/Errors.sol';
import {DataTypes} from '../types/DataTypes.sol';

/**
 * @title ReserveConfiguration library
 * @author Aave
 * @notice Implements the bitmap logic to handle the reserve configuration
 */
library ReserveConfiguration {
  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore
  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore
  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore
  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore

  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed
  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;
  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;
  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;
  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;
  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;
  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;
  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;
  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;
  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;
  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;
  uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;
  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;
  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;
  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;
  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;
  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;
  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;
  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;

  uint256 internal constant MAX_VALID_LTV = 65535;
  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;
  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;
  uint256 internal constant MAX_VALID_DECIMALS = 255;
  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;
  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;
  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;
  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;
  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;
  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;
  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;

  uint256 public constant DEBT_CEILING_DECIMALS = 2;
  uint16 public constant MAX_RESERVES_COUNT = 128;

  /**
   * @notice Sets the Loan to Value of the reserve
   * @param self The reserve configuration
   * @param ltv The new ltv
   */
  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {
    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);

    self.data = (self.data & LTV_MASK) | ltv;
  }

  /**
   * @notice Gets the Loan to Value of the reserve
   * @param self The reserve configuration
   * @return The loan to value
   */
  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {
    return self.data & ~LTV_MASK;
  }

  /**
   * @notice Sets the liquidation threshold of the reserve
   * @param self The reserve configuration
   * @param threshold The new liquidation threshold
   */
  function setLiquidationThreshold(
    DataTypes.ReserveConfigurationMap memory self,
    uint256 threshold
  ) internal pure {
    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);

    self.data =
      (self.data & LIQUIDATION_THRESHOLD_MASK) |
      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);
  }

  /**
   * @notice Gets the liquidation threshold of the reserve
   * @param self The reserve configuration
   * @return The liquidation threshold
   */
  function getLiquidationThreshold(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256) {
    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;
  }

  /**
   * @notice Sets the liquidation bonus of the reserve
   * @param self The reserve configuration
   * @param bonus The new liquidation bonus
   */
  function setLiquidationBonus(
    DataTypes.ReserveConfigurationMap memory self,
    uint256 bonus
  ) internal pure {
    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);

    self.data =
      (self.data & LIQUIDATION_BONUS_MASK) |
      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);
  }

  /**
   * @notice Gets the liquidation bonus of the reserve
   * @param self The reserve configuration
   * @return The liquidation bonus
   */
  function getLiquidationBonus(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256) {
    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;
  }

  /**
   * @notice Sets the decimals of the underlying asset of the reserve
   * @param self The reserve configuration
   * @param decimals The decimals
   */
  function setDecimals(
    DataTypes.ReserveConfigurationMap memory self,
    uint256 decimals
  ) internal pure {
    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);

    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);
  }

  /**
   * @notice Gets the decimals of the underlying asset of the reserve
   * @param self The reserve configuration
   * @return The decimals of the asset
   */
  function getDecimals(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256) {
    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;
  }

  /**
   * @notice Sets the active state of the reserve
   * @param self The reserve configuration
   * @param active The active state
   */
  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {
    self.data =
      (self.data & ACTIVE_MASK) |
      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);
  }

  /**
   * @notice Gets the active state of the reserve
   * @param self The reserve configuration
   * @return The active state
   */
  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {
    return (self.data & ~ACTIVE_MASK) != 0;
  }

  /**
   * @notice Sets the frozen state of the reserve
   * @param self The reserve configuration
   * @param frozen The frozen state
   */
  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {
    self.data =
      (self.data & FROZEN_MASK) |
      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);
  }

  /**
   * @notice Gets the frozen state of the reserve
   * @param self The reserve configuration
   * @return The frozen state
   */
  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {
    return (self.data & ~FROZEN_MASK) != 0;
  }

  /**
   * @notice Sets the paused state of the reserve
   * @param self The reserve configuration
   * @param paused The paused state
   */
  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {
    self.data =
      (self.data & PAUSED_MASK) |
      (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);
  }

  /**
   * @notice Gets the paused state of the reserve
   * @param self The reserve configuration
   * @return The paused state
   */
  function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {
    return (self.data & ~PAUSED_MASK) != 0;
  }

  /**
   * @notice Sets the borrowable in isolation flag for the reserve.
   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed
   * amount will be accumulated in the isolated collateral's total debt exposure.
   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep
   * consistency in the debt ceiling calculations.
   * @param self The reserve configuration
   * @param borrowable True if the asset is borrowable
   */
  function setBorrowableInIsolation(
    DataTypes.ReserveConfigurationMap memory self,
    bool borrowable
  ) internal pure {
    self.data =
      (self.data & BORROWABLE_IN_ISOLATION_MASK) |
      (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);
  }

  /**
   * @notice Gets the borrowable in isolation flag for the reserve.
   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with
   * isolated collateral is accounted for in the isolated collateral's total debt exposure.
   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep
   * consistency in the debt ceiling calculations.
   * @param self The reserve configuration
   * @return The borrowable in isolation flag
   */
  function getBorrowableInIsolation(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (bool) {
    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;
  }

  /**
   * @notice Sets the siloed borrowing flag for the reserve.
   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.
   * @param self The reserve configuration
   * @param siloed True if the asset is siloed
   */
  function setSiloedBorrowing(
    DataTypes.ReserveConfigurationMap memory self,
    bool siloed
  ) internal pure {
    self.data =
      (self.data & SILOED_BORROWING_MASK) |
      (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);
  }

  /**
   * @notice Gets the siloed borrowing flag for the reserve.
   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.
   * @param self The reserve configuration
   * @return The siloed borrowing flag
   */
  function getSiloedBorrowing(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (bool) {
    return (self.data & ~SILOED_BORROWING_MASK) != 0;
  }

  /**
   * @notice Enables or disables borrowing on the reserve
   * @param self The reserve configuration
   * @param enabled True if the borrowing needs to be enabled, false otherwise
   */
  function setBorrowingEnabled(
    DataTypes.ReserveConfigurationMap memory self,
    bool enabled
  ) internal pure {
    self.data =
      (self.data & BORROWING_MASK) |
      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);
  }

  /**
   * @notice Gets the borrowing state of the reserve
   * @param self The reserve configuration
   * @return The borrowing state
   */
  function getBorrowingEnabled(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (bool) {
    return (self.data & ~BORROWING_MASK) != 0;
  }

  /**
   * @notice Enables or disables stable rate borrowing on the reserve
   * @param self The reserve configuration
   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise
   */
  function setStableRateBorrowingEnabled(
    DataTypes.ReserveConfigurationMap memory self,
    bool enabled
  ) internal pure {
    self.data =
      (self.data & STABLE_BORROWING_MASK) |
      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);
  }

  /**
   * @notice Gets the stable rate borrowing state of the reserve
   * @param self The reserve configuration
   * @return The stable rate borrowing state
   */
  function getStableRateBorrowingEnabled(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (bool) {
    return (self.data & ~STABLE_BORROWING_MASK) != 0;
  }

  /**
   * @notice Sets the reserve factor of the reserve
   * @param self The reserve configuration
   * @param reserveFactor The reserve factor
   */
  function setReserveFactor(
    DataTypes.ReserveConfigurationMap memory self,
    uint256 reserveFactor
  ) internal pure {
    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);

    self.data =
      (self.data & RESERVE_FACTOR_MASK) |
      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);
  }

  /**
   * @notice Gets the reserve factor of the reserve
   * @param self The reserve configuration
   * @return The reserve factor
   */
  function getReserveFactor(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256) {
    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;
  }

  /**
   * @notice Sets the borrow cap of the reserve
   * @param self The reserve configuration
   * @param borrowCap The borrow cap
   */
  function setBorrowCap(
    DataTypes.ReserveConfigurationMap memory self,
    uint256 borrowCap
  ) internal pure {
    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);

    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);
  }

  /**
   * @notice Gets the borrow cap of the reserve
   * @param self The reserve configuration
   * @return The borrow cap
   */
  function getBorrowCap(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256) {
    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;
  }

  /**
   * @notice Sets the supply cap of the reserve
   * @param self The reserve configuration
   * @param supplyCap The supply cap
   */
  function setSupplyCap(
    DataTypes.ReserveConfigurationMap memory self,
    uint256 supplyCap
  ) internal pure {
    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);

    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);
  }

  /**
   * @notice Gets the supply cap of the reserve
   * @param self The reserve configuration
   * @return The supply cap
   */
  function getSupplyCap(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256) {
    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;
  }

  /**
   * @notice Sets the debt ceiling in isolation mode for the asset
   * @param self The reserve configuration
   * @param ceiling The maximum debt ceiling for the asset
   */
  function setDebtCeiling(
    DataTypes.ReserveConfigurationMap memory self,
    uint256 ceiling
  ) internal pure {
    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);

    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);
  }

  /**
   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode
   * @param self The reserve configuration
   * @return The debt ceiling (0 = isolation mode disabled)
   */
  function getDebtCeiling(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256) {
    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;
  }

  /**
   * @notice Sets the liquidation protocol fee of the reserve
   * @param self The reserve configuration
   * @param liquidationProtocolFee The liquidation protocol fee
   */
  function setLiquidationProtocolFee(
    DataTypes.ReserveConfigurationMap memory self,
    uint256 liquidationProtocolFee
  ) internal pure {
    require(
      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,
      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE
    );

    self.data =
      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |
      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);
  }

  /**
   * @dev Gets the liquidation protocol fee
   * @param self The reserve configuration
   * @return The liquidation protocol fee
   */
  function getLiquidationProtocolFee(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256) {
    return
      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;
  }

  /**
   * @notice Sets the unbacked mint cap of the reserve
   * @param self The reserve configuration
   * @param unbackedMintCap The unbacked mint cap
   */
  function setUnbackedMintCap(
    DataTypes.ReserveConfigurationMap memory self,
    uint256 unbackedMintCap
  ) internal pure {
    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);

    self.data =
      (self.data & UNBACKED_MINT_CAP_MASK) |
      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);
  }

  /**
   * @dev Gets the unbacked mint cap of the reserve
   * @param self The reserve configuration
   * @return The unbacked mint cap
   */
  function getUnbackedMintCap(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256) {
    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;
  }

  /**
   * @notice Sets the eMode asset category
   * @param self The reserve configuration
   * @param category The asset category when the user selects the eMode
   */
  function setEModeCategory(
    DataTypes.ReserveConfigurationMap memory self,
    uint256 category
  ) internal pure {
    require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);

    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);
  }

  /**
   * @dev Gets the eMode asset category
   * @param self The reserve configuration
   * @return The eMode category for the asset
   */
  function getEModeCategory(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256) {
    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;
  }

  /**
   * @notice Sets the flashloanable flag for the reserve
   * @param self The reserve configuration
   * @param flashLoanEnabled True if the asset is flashloanable, false otherwise
   */
  function setFlashLoanEnabled(
    DataTypes.ReserveConfigurationMap memory self,
    bool flashLoanEnabled
  ) internal pure {
    self.data =
      (self.data & FLASHLOAN_ENABLED_MASK) |
      (uint256(flashLoanEnabled ? 1 : 0) << FLASHLOAN_ENABLED_START_BIT_POSITION);
  }

  /**
   * @notice Gets the flashloanable flag for the reserve
   * @param self The reserve configuration
   * @return The flashloanable flag
   */
  function getFlashLoanEnabled(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (bool) {
    return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;
  }

  /**
   * @notice Gets the configuration flags of the reserve
   * @param self The reserve configuration
   * @return The state flag representing active
   * @return The state flag representing frozen
   * @return The state flag representing borrowing enabled
   * @return The state flag representing stableRateBorrowing enabled
   * @return The state flag representing paused
   */
  function getFlags(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (bool, bool, bool, bool, bool) {
    uint256 dataLocal = self.data;

    return (
      (dataLocal & ~ACTIVE_MASK) != 0,
      (dataLocal & ~FROZEN_MASK) != 0,
      (dataLocal & ~BORROWING_MASK) != 0,
      (dataLocal & ~STABLE_BORROWING_MASK) != 0,
      (dataLocal & ~PAUSED_MASK) != 0
    );
  }

  /**
   * @notice Gets the configuration parameters of the reserve from storage
   * @param self The reserve configuration
   * @return The state param representing ltv
   * @return The state param representing liquidation threshold
   * @return The state param representing liquidation bonus
   * @return The state param representing reserve decimals
   * @return The state param representing reserve factor
   * @return The state param representing eMode category
   */
  function getParams(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256, uint256, uint256, uint256, uint256, uint256) {
    uint256 dataLocal = self.data;

    return (
      dataLocal & ~LTV_MASK,
      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,
      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,
      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,
      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,
      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION
    );
  }

  /**
   * @notice Gets the caps parameters of the reserve from storage
   * @param self The reserve configuration
   * @return The state param representing borrow cap
   * @return The state param representing supply cap.
   */
  function getCaps(
    DataTypes.ReserveConfigurationMap memory self
  ) internal pure returns (uint256, uint256) {
    uint256 dataLocal = self.data;

    return (
      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,
      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION
    );
  }
}



================================================
FILE: contracts/protocol/libraries/configuration/UserConfiguration.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {Errors} from '../helpers/Errors.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {ReserveConfiguration} from './ReserveConfiguration.sol';

/**
 * @title UserConfiguration library
 * @author Aave
 * @notice Implements the bitmap logic to handle the user configuration
 */
library UserConfiguration {
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;

  uint256 internal constant BORROWING_MASK =
    0x5555555555555555555555555555555555555555555555555555555555555555;
  uint256 internal constant COLLATERAL_MASK =
    0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;

  /**
   * @notice Sets if the user is borrowing the reserve identified by reserveIndex
   * @param self The configuration object
   * @param reserveIndex The index of the reserve in the bitmap
   * @param borrowing True if the user is borrowing the reserve, false otherwise
   */
  function setBorrowing(
    DataTypes.UserConfigurationMap storage self,
    uint256 reserveIndex,
    bool borrowing
  ) internal {
    unchecked {
      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);
      uint256 bit = 1 << (reserveIndex << 1);
      if (borrowing) {
        self.data |= bit;
      } else {
        self.data &= ~bit;
      }
    }
  }

  /**
   * @notice Sets if the user is using as collateral the reserve identified by reserveIndex
   * @param self The configuration object
   * @param reserveIndex The index of the reserve in the bitmap
   * @param usingAsCollateral True if the user is using the reserve as collateral, false otherwise
   */
  function setUsingAsCollateral(
    DataTypes.UserConfigurationMap storage self,
    uint256 reserveIndex,
    bool usingAsCollateral
  ) internal {
    unchecked {
      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);
      uint256 bit = 1 << ((reserveIndex << 1) + 1);
      if (usingAsCollateral) {
        self.data |= bit;
      } else {
        self.data &= ~bit;
      }
    }
  }

  /**
   * @notice Returns if a user has been using the reserve for borrowing or as collateral
   * @param self The configuration object
   * @param reserveIndex The index of the reserve in the bitmap
   * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise
   */
  function isUsingAsCollateralOrBorrowing(
    DataTypes.UserConfigurationMap memory self,
    uint256 reserveIndex
  ) internal pure returns (bool) {
    unchecked {
      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);
      return (self.data >> (reserveIndex << 1)) & 3 != 0;
    }
  }

  /**
   * @notice Validate a user has been using the reserve for borrowing
   * @param self The configuration object
   * @param reserveIndex The index of the reserve in the bitmap
   * @return True if the user has been using a reserve for borrowing, false otherwise
   */
  function isBorrowing(
    DataTypes.UserConfigurationMap memory self,
    uint256 reserveIndex
  ) internal pure returns (bool) {
    unchecked {
      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);
      return (self.data >> (reserveIndex << 1)) & 1 != 0;
    }
  }

  /**
   * @notice Validate a user has been using the reserve as collateral
   * @param self The configuration object
   * @param reserveIndex The index of the reserve in the bitmap
   * @return True if the user has been using a reserve as collateral, false otherwise
   */
  function isUsingAsCollateral(
    DataTypes.UserConfigurationMap memory self,
    uint256 reserveIndex
  ) internal pure returns (bool) {
    unchecked {
      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);
      return (self.data >> ((reserveIndex << 1) + 1)) & 1 != 0;
    }
  }

  /**
   * @notice Checks if a user has been supplying only one reserve as collateral
   * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0
   * @param self The configuration object
   * @return True if the user has been supplying as collateral one reserve, false otherwise
   */
  function isUsingAsCollateralOne(
    DataTypes.UserConfigurationMap memory self
  ) internal pure returns (bool) {
    uint256 collateralData = self.data & COLLATERAL_MASK;
    return collateralData != 0 && (collateralData & (collateralData - 1) == 0);
  }

  /**
   * @notice Checks if a user has been supplying any reserve as collateral
   * @param self The configuration object
   * @return True if the user has been supplying as collateral any reserve, false otherwise
   */
  function isUsingAsCollateralAny(
    DataTypes.UserConfigurationMap memory self
  ) internal pure returns (bool) {
    return self.data & COLLATERAL_MASK != 0;
  }

  /**
   * @notice Checks if a user has been borrowing only one asset
   * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0
   * @param self The configuration object
   * @return True if the user has been supplying as collateral one reserve, false otherwise
   */
  function isBorrowingOne(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {
    uint256 borrowingData = self.data & BORROWING_MASK;
    return borrowingData != 0 && (borrowingData & (borrowingData - 1) == 0);
  }

  /**
   * @notice Checks if a user has been borrowing from any reserve
   * @param self The configuration object
   * @return True if the user has been borrowing any reserve, false otherwise
   */
  function isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {
    return self.data & BORROWING_MASK != 0;
  }

  /**
   * @notice Checks if a user has not been using any reserve for borrowing or supply
   * @param self The configuration object
   * @return True if the user has not been borrowing or supplying any reserve, false otherwise
   */
  function isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {
    return self.data == 0;
  }

  /**
   * @notice Returns the Isolation Mode state of the user
   * @param self The configuration object
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @return True if the user is in isolation mode, false otherwise
   * @return The address of the only asset used as collateral
   * @return The debt ceiling of the reserve
   */
  function getIsolationModeState(
    DataTypes.UserConfigurationMap memory self,
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList
  ) internal view returns (bool, address, uint256) {
    if (isUsingAsCollateralOne(self)) {
      uint256 assetId = _getFirstAssetIdByMask(self, COLLATERAL_MASK);

      address assetAddress = reservesList[assetId];
      uint256 ceiling = reservesData[assetAddress].configuration.getDebtCeiling();
      if (ceiling != 0) {
        return (true, assetAddress, ceiling);
      }
    }
    return (false, address(0), 0);
  }

  /**
   * @notice Returns the siloed borrowing state for the user
   * @param self The configuration object
   * @param reservesData The data of all the reserves
   * @param reservesList The reserve list
   * @return True if the user has borrowed a siloed asset, false otherwise
   * @return The address of the only borrowed asset
   */
  function getSiloedBorrowingState(
    DataTypes.UserConfigurationMap memory self,
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList
  ) internal view returns (bool, address) {
    if (isBorrowingOne(self)) {
      uint256 assetId = _getFirstAssetIdByMask(self, BORROWING_MASK);
      address assetAddress = reservesList[assetId];
      if (reservesData[assetAddress].configuration.getSiloedBorrowing()) {
        return (true, assetAddress);
      }
    }

    return (false, address(0));
  }

  /**
   * @notice Returns the address of the first asset flagged in the bitmap given the corresponding bitmask
   * @param self The configuration object
   * @return The index of the first asset flagged in the bitmap once the corresponding mask is applied
   */
  function _getFirstAssetIdByMask(
    DataTypes.UserConfigurationMap memory self,
    uint256 mask
  ) internal pure returns (uint256) {
    unchecked {
      uint256 bitmapData = self.data & mask;
      uint256 firstAssetPosition = bitmapData & ~(bitmapData - 1);
      uint256 id;

      while ((firstAssetPosition >>= 2) != 0) {
        id += 1;
      }
      return id;
    }
  }
}



================================================
FILE: contracts/protocol/libraries/helpers/Errors.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

/**
 * @title Errors library
 * @author Aave
 * @notice Defines the error messages emitted by the different contracts of the Aave protocol
 */
library Errors {
  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'
  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'
  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'
  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'
  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'
  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'
  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'
  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'
  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'
  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'
  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'
  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'
  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'
  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'
  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'
  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'
  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'
  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'
  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'
  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'
  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'
  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'
  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'
  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'
  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'
  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'
  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'
  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'
  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'
  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'
  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'
  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'
  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'
  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'
  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'
  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'
  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'
  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'
  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'
  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'
  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'
  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'
  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'
  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'
  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'
  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'
  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'
  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'
  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'
  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'
  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'
  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'
  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'
  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'
  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'
  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'
  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'
  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'
  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'
  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = '62'; // 'User is in isolation mode or ltv is zero'
  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'
  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'
  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'
  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'
  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'
  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'
  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'
  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'
  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'
  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'
  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve
  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'
  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'
  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'
  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'
  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'
  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'
  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'
  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'
  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'
  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'
  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'
  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'
  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'
  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'
  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'
  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0
  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled
}



================================================
FILE: contracts/protocol/libraries/helpers/Helpers.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {DataTypes} from '../types/DataTypes.sol';

/**
 * @title Helpers library
 * @author Aave
 */
library Helpers {
  /**
   * @notice Fetches the user current stable and variable debt balances
   * @param user The user address
   * @param reserveCache The reserve cache data object
   * @return The stable debt balance
   * @return The variable debt balance
   */
  function getUserCurrentDebt(
    address user,
    DataTypes.ReserveCache memory reserveCache
  ) internal view returns (uint256, uint256) {
    return (
      IERC20(reserveCache.stableDebtTokenAddress).balanceOf(user),
      IERC20(reserveCache.variableDebtTokenAddress).balanceOf(user)
    );
  }
}



================================================
FILE: contracts/protocol/libraries/logic/BorrowLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';
import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {IStableDebtToken} from '../../../interfaces/IStableDebtToken.sol';
import {IVariableDebtToken} from '../../../interfaces/IVariableDebtToken.sol';
import {IAToken} from '../../../interfaces/IAToken.sol';
import {UserConfiguration} from '../configuration/UserConfiguration.sol';
import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';
import {Helpers} from '../helpers/Helpers.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {ValidationLogic} from './ValidationLogic.sol';
import {ReserveLogic} from './ReserveLogic.sol';
import {IsolationModeLogic} from './IsolationModeLogic.sol';

/**
 * @title BorrowLogic library
 * @author Aave
 * @notice Implements the base logic for all the actions related to borrowing
 */
library BorrowLogic {
  using ReserveLogic for DataTypes.ReserveCache;
  using ReserveLogic for DataTypes.ReserveData;
  using GPv2SafeERC20 for IERC20;
  using UserConfiguration for DataTypes.UserConfigurationMap;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
  using SafeCast for uint256;

  // See `IPool` for descriptions
  event Borrow(
    address indexed reserve,
    address user,
    address indexed onBehalfOf,
    uint256 amount,
    DataTypes.InterestRateMode interestRateMode,
    uint256 borrowRate,
    uint16 indexed referralCode
  );
  event Repay(
    address indexed reserve,
    address indexed user,
    address indexed repayer,
    uint256 amount,
    bool useATokens
  );
  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);
  event SwapBorrowRateMode(
    address indexed reserve,
    address indexed user,
    DataTypes.InterestRateMode interestRateMode
  );
  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);

  /**
   * @notice Implements the borrow feature. Borrowing allows users that provided collateral to draw liquidity from the
   * Aave protocol proportionally to their collateralization power. For isolated positions, it also increases the
   * isolated debt.
   * @dev  Emits the `Borrow()` event
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets
   * @param params The additional parameters needed to execute the borrow function
   */
  function executeBorrow(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.UserConfigurationMap storage userConfig,
    DataTypes.ExecuteBorrowParams memory params
  ) public {
    DataTypes.ReserveData storage reserve = reservesData[params.asset];
    DataTypes.ReserveCache memory reserveCache = reserve.cache();

    reserve.updateState(reserveCache);

    (
      bool isolationModeActive,
      address isolationModeCollateralAddress,
      uint256 isolationModeDebtCeiling
    ) = userConfig.getIsolationModeState(reservesData, reservesList);

    ValidationLogic.validateBorrow(
      reservesData,
      reservesList,
      eModeCategories,
      DataTypes.ValidateBorrowParams({
        reserveCache: reserveCache,
        userConfig: userConfig,
        asset: params.asset,
        userAddress: params.onBehalfOf,
        amount: params.amount,
        interestRateMode: params.interestRateMode,
        maxStableLoanPercent: params.maxStableRateBorrowSizePercent,
        reservesCount: params.reservesCount,
        oracle: params.oracle,
        userEModeCategory: params.userEModeCategory,
        priceOracleSentinel: params.priceOracleSentinel,
        isolationModeActive: isolationModeActive,
        isolationModeCollateralAddress: isolationModeCollateralAddress,
        isolationModeDebtCeiling: isolationModeDebtCeiling
      })
    );

    uint256 currentStableRate = 0;
    bool isFirstBorrowing = false;

    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {
      currentStableRate = reserve.currentStableBorrowRate;

      (
        isFirstBorrowing,
        reserveCache.nextTotalStableDebt,
        reserveCache.nextAvgStableBorrowRate
      ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).mint(
        params.user,
        params.onBehalfOf,
        params.amount,
        currentStableRate
      );
    } else {
      (isFirstBorrowing, reserveCache.nextScaledVariableDebt) = IVariableDebtToken(
        reserveCache.variableDebtTokenAddress
      ).mint(params.user, params.onBehalfOf, params.amount, reserveCache.nextVariableBorrowIndex);
    }

    if (isFirstBorrowing) {
      userConfig.setBorrowing(reserve.id, true);
    }

    if (isolationModeActive) {
      uint256 nextIsolationModeTotalDebt = reservesData[isolationModeCollateralAddress]
        .isolationModeTotalDebt += (params.amount /
        10 **
          (reserveCache.reserveConfiguration.getDecimals() -
            ReserveConfiguration.DEBT_CEILING_DECIMALS)).toUint128();
      emit IsolationModeTotalDebtUpdated(
        isolationModeCollateralAddress,
        nextIsolationModeTotalDebt
      );
    }

    reserve.updateInterestRates(
      reserveCache,
      params.asset,
      0,
      params.releaseUnderlying ? params.amount : 0
    );

    if (params.releaseUnderlying) {
      IAToken(reserveCache.aTokenAddress).transferUnderlyingTo(params.user, params.amount);
    }

    emit Borrow(
      params.asset,
      params.user,
      params.onBehalfOf,
      params.amount,
      params.interestRateMode,
      params.interestRateMode == DataTypes.InterestRateMode.STABLE
        ? currentStableRate
        : reserve.currentVariableBorrowRate,
      params.referralCode
    );
  }

  /**
   * @notice Implements the repay feature. Repaying transfers the underlying back to the aToken and clears the
   * equivalent amount of debt for the user by burning the corresponding debt token. For isolated positions, it also
   * reduces the isolated debt.
   * @dev  Emits the `Repay()` event
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets
   * @param params The additional parameters needed to execute the repay function
   * @return The actual amount being repaid
   */
  function executeRepay(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    DataTypes.UserConfigurationMap storage userConfig,
    DataTypes.ExecuteRepayParams memory params
  ) external returns (uint256) {
    DataTypes.ReserveData storage reserve = reservesData[params.asset];
    DataTypes.ReserveCache memory reserveCache = reserve.cache();
    reserve.updateState(reserveCache);

    (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(
      params.onBehalfOf,
      reserveCache
    );

    ValidationLogic.validateRepay(
      reserveCache,
      params.amount,
      params.interestRateMode,
      params.onBehalfOf,
      stableDebt,
      variableDebt
    );

    uint256 paybackAmount = params.interestRateMode == DataTypes.InterestRateMode.STABLE
      ? stableDebt
      : variableDebt;

    // Allows a user to repay with aTokens without leaving dust from interest.
    if (params.useATokens && params.amount == type(uint256).max) {
      params.amount = IAToken(reserveCache.aTokenAddress).balanceOf(msg.sender);
    }

    if (params.amount < paybackAmount) {
      paybackAmount = params.amount;
    }

    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {
      (reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(
        reserveCache.stableDebtTokenAddress
      ).burn(params.onBehalfOf, paybackAmount);
    } else {
      reserveCache.nextScaledVariableDebt = IVariableDebtToken(
        reserveCache.variableDebtTokenAddress
      ).burn(params.onBehalfOf, paybackAmount, reserveCache.nextVariableBorrowIndex);
    }

    reserve.updateInterestRates(
      reserveCache,
      params.asset,
      params.useATokens ? 0 : paybackAmount,
      0
    );

    if (stableDebt + variableDebt - paybackAmount == 0) {
      userConfig.setBorrowing(reserve.id, false);
    }

    IsolationModeLogic.updateIsolatedDebtIfIsolated(
      reservesData,
      reservesList,
      userConfig,
      reserveCache,
      paybackAmount
    );

    if (params.useATokens) {
      IAToken(reserveCache.aTokenAddress).burn(
        msg.sender,
        reserveCache.aTokenAddress,
        paybackAmount,
        reserveCache.nextLiquidityIndex
      );
    } else {
      IERC20(params.asset).safeTransferFrom(msg.sender, reserveCache.aTokenAddress, paybackAmount);
      IAToken(reserveCache.aTokenAddress).handleRepayment(
        msg.sender,
        params.onBehalfOf,
        paybackAmount
      );
    }

    emit Repay(params.asset, params.onBehalfOf, msg.sender, paybackAmount, params.useATokens);

    return paybackAmount;
  }

  /**
   * @notice Implements the rebalance stable borrow rate feature. In case of liquidity crunches on the protocol, stable
   * rate borrows might need to be rebalanced to bring back equilibrium between the borrow and supply APYs.
   * @dev The rules that define if a position can be rebalanced are implemented in `ValidationLogic.validateRebalanceStableBorrowRate()`
   * @dev Emits the `RebalanceStableBorrowRate()` event
   * @param reserve The state of the reserve of the asset being repaid
   * @param asset The asset of the position being rebalanced
   * @param user The user being rebalanced
   */
  function executeRebalanceStableBorrowRate(
    DataTypes.ReserveData storage reserve,
    address asset,
    address user
  ) external {
    DataTypes.ReserveCache memory reserveCache = reserve.cache();
    reserve.updateState(reserveCache);

    ValidationLogic.validateRebalanceStableBorrowRate(reserve, reserveCache, asset);

    IStableDebtToken stableDebtToken = IStableDebtToken(reserveCache.stableDebtTokenAddress);
    uint256 stableDebt = IERC20(address(stableDebtToken)).balanceOf(user);

    stableDebtToken.burn(user, stableDebt);

    (, reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = stableDebtToken
      .mint(user, user, stableDebt, reserve.currentStableBorrowRate);

    reserve.updateInterestRates(reserveCache, asset, 0, 0);

    emit RebalanceStableBorrowRate(asset, user);
  }

  /**
   * @notice Implements the swap borrow rate feature. Borrowers can swap from variable to stable positions at any time.
   * @dev Emits the `Swap()` event
   * @param reserve The of the reserve of the asset being repaid
   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets
   * @param asset The asset of the position being swapped
   * @param interestRateMode The current interest rate mode of the position being swapped
   */
  function executeSwapBorrowRateMode(
    DataTypes.ReserveData storage reserve,
    DataTypes.UserConfigurationMap storage userConfig,
    address asset,
    DataTypes.InterestRateMode interestRateMode
  ) external {
    DataTypes.ReserveCache memory reserveCache = reserve.cache();

    reserve.updateState(reserveCache);

    (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(
      msg.sender,
      reserveCache
    );

    ValidationLogic.validateSwapRateMode(
      reserve,
      reserveCache,
      userConfig,
      stableDebt,
      variableDebt,
      interestRateMode
    );

    if (interestRateMode == DataTypes.InterestRateMode.STABLE) {
      (reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(
        reserveCache.stableDebtTokenAddress
      ).burn(msg.sender, stableDebt);

      (, reserveCache.nextScaledVariableDebt) = IVariableDebtToken(
        reserveCache.variableDebtTokenAddress
      ).mint(msg.sender, msg.sender, stableDebt, reserveCache.nextVariableBorrowIndex);
    } else {
      reserveCache.nextScaledVariableDebt = IVariableDebtToken(
        reserveCache.variableDebtTokenAddress
      ).burn(msg.sender, variableDebt, reserveCache.nextVariableBorrowIndex);

      (, reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(
        reserveCache.stableDebtTokenAddress
      ).mint(msg.sender, msg.sender, variableDebt, reserve.currentStableBorrowRate);
    }

    reserve.updateInterestRates(reserveCache, asset, 0, 0);

    emit SwapBorrowRateMode(asset, msg.sender, interestRateMode);
  }
}



================================================
FILE: contracts/protocol/libraries/logic/BridgeLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';
import {IAToken} from '../../../interfaces/IAToken.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {UserConfiguration} from '../configuration/UserConfiguration.sol';
import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';
import {WadRayMath} from '../math/WadRayMath.sol';
import {PercentageMath} from '../math/PercentageMath.sol';
import {Errors} from '../helpers/Errors.sol';
import {ValidationLogic} from './ValidationLogic.sol';
import {ReserveLogic} from './ReserveLogic.sol';

library BridgeLogic {
  using ReserveLogic for DataTypes.ReserveCache;
  using ReserveLogic for DataTypes.ReserveData;
  using UserConfiguration for DataTypes.UserConfigurationMap;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
  using WadRayMath for uint256;
  using PercentageMath for uint256;
  using SafeCast for uint256;
  using GPv2SafeERC20 for IERC20;

  // See `IPool` for descriptions
  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);
  event MintUnbacked(
    address indexed reserve,
    address user,
    address indexed onBehalfOf,
    uint256 amount,
    uint16 indexed referralCode
  );
  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);

  /**
   * @notice Mint unbacked aTokens to a user and updates the unbacked for the reserve.
   * @dev Essentially a supply without transferring the underlying.
   * @dev Emits the `MintUnbacked` event
   * @dev Emits the `ReserveUsedAsCollateralEnabled` if asset is set as collateral
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets
   * @param asset The address of the underlying asset to mint aTokens of
   * @param amount The amount to mint
   * @param onBehalfOf The address that will receive the aTokens
   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.
   *   0 if the action is executed directly by the user, without any middle-man
   */
  function executeMintUnbacked(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    DataTypes.UserConfigurationMap storage userConfig,
    address asset,
    uint256 amount,
    address onBehalfOf,
    uint16 referralCode
  ) external {
    DataTypes.ReserveData storage reserve = reservesData[asset];
    DataTypes.ReserveCache memory reserveCache = reserve.cache();

    reserve.updateState(reserveCache);

    ValidationLogic.validateSupply(reserveCache, reserve, amount);

    uint256 unbackedMintCap = reserveCache.reserveConfiguration.getUnbackedMintCap();
    uint256 reserveDecimals = reserveCache.reserveConfiguration.getDecimals();

    uint256 unbacked = reserve.unbacked += amount.toUint128();

    require(
      unbacked <= unbackedMintCap * (10 ** reserveDecimals),
      Errors.UNBACKED_MINT_CAP_EXCEEDED
    );

    reserve.updateInterestRates(reserveCache, asset, 0, 0);

    bool isFirstSupply = IAToken(reserveCache.aTokenAddress).mint(
      msg.sender,
      onBehalfOf,
      amount,
      reserveCache.nextLiquidityIndex
    );

    if (isFirstSupply) {
      if (
        ValidationLogic.validateAutomaticUseAsCollateral(
          reservesData,
          reservesList,
          userConfig,
          reserveCache.reserveConfiguration,
          reserveCache.aTokenAddress
        )
      ) {
        userConfig.setUsingAsCollateral(reserve.id, true);
        emit ReserveUsedAsCollateralEnabled(asset, onBehalfOf);
      }
    }

    emit MintUnbacked(asset, msg.sender, onBehalfOf, amount, referralCode);
  }

  /**
   * @notice Back the current unbacked with `amount` and pay `fee`.
   * @dev It is not possible to back more than the existing unbacked amount of the reserve
   * @dev Emits the `BackUnbacked` event
   * @param reserve The reserve to back unbacked for
   * @param asset The address of the underlying asset to repay
   * @param amount The amount to back
   * @param fee The amount paid in fees
   * @param protocolFeeBps The fraction of fees in basis points paid to the protocol
   * @return The backed amount
   */
  function executeBackUnbacked(
    DataTypes.ReserveData storage reserve,
    address asset,
    uint256 amount,
    uint256 fee,
    uint256 protocolFeeBps
  ) external returns (uint256) {
    DataTypes.ReserveCache memory reserveCache = reserve.cache();

    reserve.updateState(reserveCache);

    uint256 backingAmount = (amount < reserve.unbacked) ? amount : reserve.unbacked;

    uint256 feeToProtocol = fee.percentMul(protocolFeeBps);
    uint256 feeToLP = fee - feeToProtocol;
    uint256 added = backingAmount + fee;

    reserveCache.nextLiquidityIndex = reserve.cumulateToLiquidityIndex(
      IERC20(reserveCache.aTokenAddress).totalSupply() +
        uint256(reserve.accruedToTreasury).rayMul(reserveCache.nextLiquidityIndex),
      feeToLP
    );

    reserve.accruedToTreasury += feeToProtocol.rayDiv(reserveCache.nextLiquidityIndex).toUint128();

    reserve.unbacked -= backingAmount.toUint128();
    reserve.updateInterestRates(reserveCache, asset, added, 0);

    IERC20(asset).safeTransferFrom(msg.sender, reserveCache.aTokenAddress, added);

    emit BackUnbacked(asset, msg.sender, backingAmount, fee);

    return backingAmount;
  }
}



================================================
FILE: contracts/protocol/libraries/logic/CalldataLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

/**
 * @title CalldataLogic library
 * @author Aave
 * @notice Library to decode calldata, used to optimize calldata size in L2Pool for transaction cost reduction
 */
library CalldataLogic {
  /**
   * @notice Decodes compressed supply params to standard params
   * @param reservesList The addresses of all the active reserves
   * @param args The packed supply params
   * @return The address of the underlying reserve
   * @return The amount to supply
   * @return The referralCode
   */
  function decodeSupplyParams(
    mapping(uint256 => address) storage reservesList,
    bytes32 args
  ) internal view returns (address, uint256, uint16) {
    uint16 assetId;
    uint256 amount;
    uint16 referralCode;

    assembly {
      assetId := and(args, 0xFFFF)
      amount := and(shr(16, args), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
      referralCode := and(shr(144, args), 0xFFFF)
    }
    return (reservesList[assetId], amount, referralCode);
  }

  /**
   * @notice Decodes compressed supply params to standard params along with permit params
   * @param reservesList The addresses of all the active reserves
   * @param args The packed supply with permit params
   * @return The address of the underlying reserve
   * @return The amount to supply
   * @return The referralCode
   * @return The deadline of the permit
   * @return The V value of the permit signature
   */
  function decodeSupplyWithPermitParams(
    mapping(uint256 => address) storage reservesList,
    bytes32 args
  ) internal view returns (address, uint256, uint16, uint256, uint8) {
    uint256 deadline;
    uint8 permitV;

    assembly {
      deadline := and(shr(160, args), 0xFFFFFFFF)
      permitV := and(shr(192, args), 0xFF)
    }
    (address asset, uint256 amount, uint16 referralCode) = decodeSupplyParams(reservesList, args);

    return (asset, amount, referralCode, deadline, permitV);
  }

  /**
   * @notice Decodes compressed withdraw params to standard params
   * @param reservesList The addresses of all the active reserves
   * @param args The packed withdraw params
   * @return The address of the underlying reserve
   * @return The amount to withdraw
   */
  function decodeWithdrawParams(
    mapping(uint256 => address) storage reservesList,
    bytes32 args
  ) internal view returns (address, uint256) {
    uint16 assetId;
    uint256 amount;
    assembly {
      assetId := and(args, 0xFFFF)
      amount := and(shr(16, args), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
    }
    if (amount == type(uint128).max) {
      amount = type(uint256).max;
    }
    return (reservesList[assetId], amount);
  }

  /**
   * @notice Decodes compressed borrow params to standard params
   * @param reservesList The addresses of all the active reserves
   * @param args The packed borrow params
   * @return The address of the underlying reserve
   * @return The amount to borrow
   * @return The interestRateMode, 1 for stable or 2 for variable debt
   * @return The referralCode
   */
  function decodeBorrowParams(
    mapping(uint256 => address) storage reservesList,
    bytes32 args
  ) internal view returns (address, uint256, uint256, uint16) {
    uint16 assetId;
    uint256 amount;
    uint256 interestRateMode;
    uint16 referralCode;

    assembly {
      assetId := and(args, 0xFFFF)
      amount := and(shr(16, args), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
      interestRateMode := and(shr(144, args), 0xFF)
      referralCode := and(shr(152, args), 0xFFFF)
    }

    return (reservesList[assetId], amount, interestRateMode, referralCode);
  }

  /**
   * @notice Decodes compressed repay params to standard params
   * @param reservesList The addresses of all the active reserves
   * @param args The packed repay params
   * @return The address of the underlying reserve
   * @return The amount to repay
   * @return The interestRateMode, 1 for stable or 2 for variable debt
   */
  function decodeRepayParams(
    mapping(uint256 => address) storage reservesList,
    bytes32 args
  ) internal view returns (address, uint256, uint256) {
    uint16 assetId;
    uint256 amount;
    uint256 interestRateMode;

    assembly {
      assetId := and(args, 0xFFFF)
      amount := and(shr(16, args), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
      interestRateMode := and(shr(144, args), 0xFF)
    }

    if (amount == type(uint128).max) {
      amount = type(uint256).max;
    }

    return (reservesList[assetId], amount, interestRateMode);
  }

  /**
   * @notice Decodes compressed repay params to standard params along with permit params
   * @param reservesList The addresses of all the active reserves
   * @param args The packed repay with permit params
   * @return The address of the underlying reserve
   * @return The amount to repay
   * @return The interestRateMode, 1 for stable or 2 for variable debt
   * @return The deadline of the permit
   * @return The V value of the permit signature
   */
  function decodeRepayWithPermitParams(
    mapping(uint256 => address) storage reservesList,
    bytes32 args
  ) internal view returns (address, uint256, uint256, uint256, uint8) {
    uint256 deadline;
    uint8 permitV;

    (address asset, uint256 amount, uint256 interestRateMode) = decodeRepayParams(
      reservesList,
      args
    );

    assembly {
      deadline := and(shr(152, args), 0xFFFFFFFF)
      permitV := and(shr(184, args), 0xFF)
    }

    return (asset, amount, interestRateMode, deadline, permitV);
  }

  /**
   * @notice Decodes compressed swap borrow rate mode params to standard params
   * @param reservesList The addresses of all the active reserves
   * @param args The packed swap borrow rate mode params
   * @return The address of the underlying reserve
   * @return The interest rate mode, 1 for stable 2 for variable debt
   */
  function decodeSwapBorrowRateModeParams(
    mapping(uint256 => address) storage reservesList,
    bytes32 args
  ) internal view returns (address, uint256) {
    uint16 assetId;
    uint256 interestRateMode;

    assembly {
      assetId := and(args, 0xFFFF)
      interestRateMode := and(shr(16, args), 0xFF)
    }

    return (reservesList[assetId], interestRateMode);
  }

  /**
   * @notice Decodes compressed rebalance stable borrow rate params to standard params
   * @param reservesList The addresses of all the active reserves
   * @param args The packed rabalance stable borrow rate params
   * @return The address of the underlying reserve
   * @return The address of the user to rebalance
   */
  function decodeRebalanceStableBorrowRateParams(
    mapping(uint256 => address) storage reservesList,
    bytes32 args
  ) internal view returns (address, address) {
    uint16 assetId;
    address user;
    assembly {
      assetId := and(args, 0xFFFF)
      user := and(shr(16, args), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
    }
    return (reservesList[assetId], user);
  }

  /**
   * @notice Decodes compressed set user use reserve as collateral params to standard params
   * @param reservesList The addresses of all the active reserves
   * @param args The packed set user use reserve as collateral params
   * @return The address of the underlying reserve
   * @return True if to set using as collateral, false otherwise
   */
  function decodeSetUserUseReserveAsCollateralParams(
    mapping(uint256 => address) storage reservesList,
    bytes32 args
  ) internal view returns (address, bool) {
    uint16 assetId;
    bool useAsCollateral;
    assembly {
      assetId := and(args, 0xFFFF)
      useAsCollateral := and(shr(16, args), 0x1)
    }
    return (reservesList[assetId], useAsCollateral);
  }

  /**
   * @notice Decodes compressed liquidation call params to standard params
   * @param reservesList The addresses of all the active reserves
   * @param args1 The first half of packed liquidation call params
   * @param args2 The second half of the packed liquidation call params
   * @return The address of the underlying collateral asset
   * @return The address of the underlying debt asset
   * @return The address of the user to liquidate
   * @return The amount of debt to cover
   * @return True if receiving aTokens, false otherwise
   */
  function decodeLiquidationCallParams(
    mapping(uint256 => address) storage reservesList,
    bytes32 args1,
    bytes32 args2
  ) internal view returns (address, address, address, uint256, bool) {
    uint16 collateralAssetId;
    uint16 debtAssetId;
    address user;
    uint256 debtToCover;
    bool receiveAToken;

    assembly {
      collateralAssetId := and(args1, 0xFFFF)
      debtAssetId := and(shr(16, args1), 0xFFFF)
      user := and(shr(32, args1), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)

      debtToCover := and(args2, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
      receiveAToken := and(shr(128, args2), 0x1)
    }

    if (debtToCover == type(uint128).max) {
      debtToCover = type(uint256).max;
    }

    return (
      reservesList[collateralAssetId],
      reservesList[debtAssetId],
      user,
      debtToCover,
      receiveAToken
    );
  }
}



================================================
FILE: contracts/protocol/libraries/logic/ConfiguratorLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IPool} from '../../../interfaces/IPool.sol';
import {IInitializableAToken} from '../../../interfaces/IInitializableAToken.sol';
import {IInitializableDebtToken} from '../../../interfaces/IInitializableDebtToken.sol';
import {InitializableImmutableAdminUpgradeabilityProxy} from '../aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol';
import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {ConfiguratorInputTypes} from '../types/ConfiguratorInputTypes.sol';

/**
 * @title ConfiguratorLogic library
 * @author Aave
 * @notice Implements the functions to initialize reserves and update aTokens and debtTokens
 */
library ConfiguratorLogic {
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;

  // See `IPoolConfigurator` for descriptions
  event ReserveInitialized(
    address indexed asset,
    address indexed aToken,
    address stableDebtToken,
    address variableDebtToken,
    address interestRateStrategyAddress
  );
  event ATokenUpgraded(
    address indexed asset,
    address indexed proxy,
    address indexed implementation
  );
  event StableDebtTokenUpgraded(
    address indexed asset,
    address indexed proxy,
    address indexed implementation
  );
  event VariableDebtTokenUpgraded(
    address indexed asset,
    address indexed proxy,
    address indexed implementation
  );

  /**
   * @notice Initialize a reserve by creating and initializing aToken, stable debt token and variable debt token
   * @dev Emits the `ReserveInitialized` event
   * @param pool The Pool in which the reserve will be initialized
   * @param input The needed parameters for the initialization
   */
  function executeInitReserve(
    IPool pool,
    ConfiguratorInputTypes.InitReserveInput calldata input
  ) public {
    address aTokenProxyAddress = _initTokenWithProxy(
      input.aTokenImpl,
      abi.encodeWithSelector(
        IInitializableAToken.initialize.selector,
        pool,
        input.treasury,
        input.underlyingAsset,
        input.incentivesController,
        input.underlyingAssetDecimals,
        input.aTokenName,
        input.aTokenSymbol,
        input.params
      )
    );

    address stableDebtTokenProxyAddress = _initTokenWithProxy(
      input.stableDebtTokenImpl,
      abi.encodeWithSelector(
        IInitializableDebtToken.initialize.selector,
        pool,
        input.underlyingAsset,
        input.incentivesController,
        input.underlyingAssetDecimals,
        input.stableDebtTokenName,
        input.stableDebtTokenSymbol,
        input.params
      )
    );

    address variableDebtTokenProxyAddress = _initTokenWithProxy(
      input.variableDebtTokenImpl,
      abi.encodeWithSelector(
        IInitializableDebtToken.initialize.selector,
        pool,
        input.underlyingAsset,
        input.incentivesController,
        input.underlyingAssetDecimals,
        input.variableDebtTokenName,
        input.variableDebtTokenSymbol,
        input.params
      )
    );

    pool.initReserve(
      input.underlyingAsset,
      aTokenProxyAddress,
      stableDebtTokenProxyAddress,
      variableDebtTokenProxyAddress,
      input.interestRateStrategyAddress
    );

    DataTypes.ReserveConfigurationMap memory currentConfig = DataTypes.ReserveConfigurationMap(0);

    currentConfig.setDecimals(input.underlyingAssetDecimals);

    currentConfig.setActive(true);
    currentConfig.setPaused(false);
    currentConfig.setFrozen(false);

    pool.setConfiguration(input.underlyingAsset, currentConfig);

    emit ReserveInitialized(
      input.underlyingAsset,
      aTokenProxyAddress,
      stableDebtTokenProxyAddress,
      variableDebtTokenProxyAddress,
      input.interestRateStrategyAddress
    );
  }

  /**
   * @notice Updates the aToken implementation and initializes it
   * @dev Emits the `ATokenUpgraded` event
   * @param cachedPool The Pool containing the reserve with the aToken
   * @param input The parameters needed for the initialize call
   */
  function executeUpdateAToken(
    IPool cachedPool,
    ConfiguratorInputTypes.UpdateATokenInput calldata input
  ) public {
    DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);

    (, , , uint256 decimals, , ) = cachedPool.getConfiguration(input.asset).getParams();

    bytes memory encodedCall = abi.encodeWithSelector(
      IInitializableAToken.initialize.selector,
      cachedPool,
      input.treasury,
      input.asset,
      input.incentivesController,
      decimals,
      input.name,
      input.symbol,
      input.params
    );

    _upgradeTokenImplementation(reserveData.aTokenAddress, input.implementation, encodedCall);

    emit ATokenUpgraded(input.asset, reserveData.aTokenAddress, input.implementation);
  }

  /**
   * @notice Updates the stable debt token implementation and initializes it
   * @dev Emits the `StableDebtTokenUpgraded` event
   * @param cachedPool The Pool containing the reserve with the stable debt token
   * @param input The parameters needed for the initialize call
   */
  function executeUpdateStableDebtToken(
    IPool cachedPool,
    ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
  ) public {
    DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);

    (, , , uint256 decimals, , ) = cachedPool.getConfiguration(input.asset).getParams();

    bytes memory encodedCall = abi.encodeWithSelector(
      IInitializableDebtToken.initialize.selector,
      cachedPool,
      input.asset,
      input.incentivesController,
      decimals,
      input.name,
      input.symbol,
      input.params
    );

    _upgradeTokenImplementation(
      reserveData.stableDebtTokenAddress,
      input.implementation,
      encodedCall
    );

    emit StableDebtTokenUpgraded(
      input.asset,
      reserveData.stableDebtTokenAddress,
      input.implementation
    );
  }

  /**
   * @notice Updates the variable debt token implementation and initializes it
   * @dev Emits the `VariableDebtTokenUpgraded` event
   * @param cachedPool The Pool containing the reserve with the variable debt token
   * @param input The parameters needed for the initialize call
   */
  function executeUpdateVariableDebtToken(
    IPool cachedPool,
    ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
  ) public {
    DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);

    (, , , uint256 decimals, , ) = cachedPool.getConfiguration(input.asset).getParams();

    bytes memory encodedCall = abi.encodeWithSelector(
      IInitializableDebtToken.initialize.selector,
      cachedPool,
      input.asset,
      input.incentivesController,
      decimals,
      input.name,
      input.symbol,
      input.params
    );

    _upgradeTokenImplementation(
      reserveData.variableDebtTokenAddress,
      input.implementation,
      encodedCall
    );

    emit VariableDebtTokenUpgraded(
      input.asset,
      reserveData.variableDebtTokenAddress,
      input.implementation
    );
  }

  /**
   * @notice Creates a new proxy and initializes the implementation
   * @param implementation The address of the implementation
   * @param initParams The parameters that is passed to the implementation to initialize
   * @return The address of initialized proxy
   */
  function _initTokenWithProxy(
    address implementation,
    bytes memory initParams
  ) internal returns (address) {
    InitializableImmutableAdminUpgradeabilityProxy proxy = new InitializableImmutableAdminUpgradeabilityProxy(
        address(this)
      );

    proxy.initialize(implementation, initParams);

    return address(proxy);
  }

  /**
   * @notice Upgrades the implementation and makes call to the proxy
   * @dev The call is used to initialize the new implementation.
   * @param proxyAddress The address of the proxy
   * @param implementation The address of the new implementation
   * @param  initParams The parameters to the call after the upgrade
   */
  function _upgradeTokenImplementation(
    address proxyAddress,
    address implementation,
    bytes memory initParams
  ) internal {
    InitializableImmutableAdminUpgradeabilityProxy proxy = InitializableImmutableAdminUpgradeabilityProxy(
        payable(proxyAddress)
      );

    proxy.upgradeToAndCall(implementation, initParams);
  }
}



================================================
FILE: contracts/protocol/libraries/logic/EModeLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';
import {UserConfiguration} from '../configuration/UserConfiguration.sol';
import {Errors} from '../helpers/Errors.sol';
import {WadRayMath} from '../math/WadRayMath.sol';
import {PercentageMath} from '../math/PercentageMath.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {ValidationLogic} from './ValidationLogic.sol';
import {ReserveLogic} from './ReserveLogic.sol';

/**
 * @title EModeLogic library
 * @author Aave
 * @notice Implements the base logic for all the actions related to the eMode
 */
library EModeLogic {
  using ReserveLogic for DataTypes.ReserveCache;
  using ReserveLogic for DataTypes.ReserveData;
  using GPv2SafeERC20 for IERC20;
  using UserConfiguration for DataTypes.UserConfigurationMap;
  using WadRayMath for uint256;
  using PercentageMath for uint256;

  // See `IPool` for descriptions
  event UserEModeSet(address indexed user, uint8 categoryId);

  /**
   * @notice Updates the user efficiency mode category
   * @dev Will revert if user is borrowing non-compatible asset or change will drop HF < HEALTH_FACTOR_LIQUIDATION_THRESHOLD
   * @dev Emits the `UserEModeSet` event
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param usersEModeCategory The state of all users efficiency mode category
   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets
   * @param params The additional parameters needed to execute the setUserEMode function
   */
  function executeSetUserEMode(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    mapping(address => uint8) storage usersEModeCategory,
    DataTypes.UserConfigurationMap storage userConfig,
    DataTypes.ExecuteSetUserEModeParams memory params
  ) external {
    ValidationLogic.validateSetUserEMode(
      reservesData,
      reservesList,
      eModeCategories,
      userConfig,
      params.reservesCount,
      params.categoryId
    );

    uint8 prevCategoryId = usersEModeCategory[msg.sender];
    usersEModeCategory[msg.sender] = params.categoryId;

    if (prevCategoryId != 0) {
      ValidationLogic.validateHealthFactor(
        reservesData,
        reservesList,
        eModeCategories,
        userConfig,
        msg.sender,
        params.categoryId,
        params.reservesCount,
        params.oracle
      );
    }
    emit UserEModeSet(msg.sender, params.categoryId);
  }

  /**
   * @notice Gets the eMode configuration and calculates the eMode asset price if a custom oracle is configured
   * @dev The eMode asset price returned is 0 if no oracle is specified
   * @param category The user eMode category
   * @param oracle The price oracle
   * @return The eMode ltv
   * @return The eMode liquidation threshold
   * @return The eMode asset price
   */
  function getEModeConfiguration(
    DataTypes.EModeCategory storage category,
    IPriceOracleGetter oracle
  ) internal view returns (uint256, uint256, uint256) {
    uint256 eModeAssetPrice = 0;
    address eModePriceSource = category.priceSource;

    if (eModePriceSource != address(0)) {
      eModeAssetPrice = oracle.getAssetPrice(eModePriceSource);
    }

    return (category.ltv, category.liquidationThreshold, eModeAssetPrice);
  }

  /**
   * @notice Checks if eMode is active for a user and if yes, if the asset belongs to the eMode category chosen
   * @param eModeUserCategory The user eMode category
   * @param eModeAssetCategory The asset eMode category
   * @return True if eMode is active and the asset belongs to the eMode category chosen by the user, false otherwise
   */
  function isInEModeCategory(
    uint256 eModeUserCategory,
    uint256 eModeAssetCategory
  ) internal pure returns (bool) {
    return (eModeUserCategory != 0 && eModeAssetCategory == eModeUserCategory);
  }
}



================================================
FILE: contracts/protocol/libraries/logic/FlashLoanLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';
import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {IAToken} from '../../../interfaces/IAToken.sol';
import {IFlashLoanReceiver} from '../../../flashloan/interfaces/IFlashLoanReceiver.sol';
import {IFlashLoanSimpleReceiver} from '../../../flashloan/interfaces/IFlashLoanSimpleReceiver.sol';
import {IPoolAddressesProvider} from '../../../interfaces/IPoolAddressesProvider.sol';
import {UserConfiguration} from '../configuration/UserConfiguration.sol';
import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';
import {Errors} from '../helpers/Errors.sol';
import {WadRayMath} from '../math/WadRayMath.sol';
import {PercentageMath} from '../math/PercentageMath.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {ValidationLogic} from './ValidationLogic.sol';
import {BorrowLogic} from './BorrowLogic.sol';
import {ReserveLogic} from './ReserveLogic.sol';

/**
 * @title FlashLoanLogic library
 * @author Aave
 * @notice Implements the logic for the flash loans
 */
library FlashLoanLogic {
  using ReserveLogic for DataTypes.ReserveCache;
  using ReserveLogic for DataTypes.ReserveData;
  using GPv2SafeERC20 for IERC20;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
  using WadRayMath for uint256;
  using PercentageMath for uint256;
  using SafeCast for uint256;

  // See `IPool` for descriptions
  event FlashLoan(
    address indexed target,
    address initiator,
    address indexed asset,
    uint256 amount,
    DataTypes.InterestRateMode interestRateMode,
    uint256 premium,
    uint16 indexed referralCode
  );

  // Helper struct for internal variables used in the `executeFlashLoan` function
  struct FlashLoanLocalVars {
    IFlashLoanReceiver receiver;
    uint256 i;
    address currentAsset;
    uint256 currentAmount;
    uint256[] totalPremiums;
    uint256 flashloanPremiumTotal;
    uint256 flashloanPremiumToProtocol;
  }

  /**
   * @notice Implements the flashloan feature that allow users to access liquidity of the pool for one transaction
   * as long as the amount taken plus fee is returned or debt is opened.
   * @dev For authorized flashborrowers the fee is waived
   * @dev At the end of the transaction the pool will pull amount borrowed + fee from the receiver,
   * if the receiver have not approved the pool the transaction will revert.
   * @dev Emits the `FlashLoan()` event
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets
   * @param params The additional parameters needed to execute the flashloan function
   */
  function executeFlashLoan(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.UserConfigurationMap storage userConfig,
    DataTypes.FlashloanParams memory params
  ) external {
    // The usual action flow (cache -> updateState -> validation -> changeState -> updateRates)
    // is altered to (validation -> user payload -> cache -> updateState -> changeState -> updateRates) for flashloans.
    // This is done to protect against reentrance and rate manipulation within the user specified payload.

    ValidationLogic.validateFlashloan(reservesData, params.assets, params.amounts);

    FlashLoanLocalVars memory vars;

    vars.totalPremiums = new uint256[](params.assets.length);

    vars.receiver = IFlashLoanReceiver(params.receiverAddress);
    (vars.flashloanPremiumTotal, vars.flashloanPremiumToProtocol) = params.isAuthorizedFlashBorrower
      ? (0, 0)
      : (params.flashLoanPremiumTotal, params.flashLoanPremiumToProtocol);

    for (vars.i = 0; vars.i < params.assets.length; vars.i++) {
      vars.currentAmount = params.amounts[vars.i];
      vars.totalPremiums[vars.i] = DataTypes.InterestRateMode(params.interestRateModes[vars.i]) ==
        DataTypes.InterestRateMode.NONE
        ? vars.currentAmount.percentMul(vars.flashloanPremiumTotal)
        : 0;
      IAToken(reservesData[params.assets[vars.i]].aTokenAddress).transferUnderlyingTo(
        params.receiverAddress,
        vars.currentAmount
      );
    }

    require(
      vars.receiver.executeOperation(
        params.assets,
        params.amounts,
        vars.totalPremiums,
        msg.sender,
        params.params
      ),
      Errors.INVALID_FLASHLOAN_EXECUTOR_RETURN
    );

    for (vars.i = 0; vars.i < params.assets.length; vars.i++) {
      vars.currentAsset = params.assets[vars.i];
      vars.currentAmount = params.amounts[vars.i];

      if (
        DataTypes.InterestRateMode(params.interestRateModes[vars.i]) ==
        DataTypes.InterestRateMode.NONE
      ) {
        _handleFlashLoanRepayment(
          reservesData[vars.currentAsset],
          DataTypes.FlashLoanRepaymentParams({
            asset: vars.currentAsset,
            receiverAddress: params.receiverAddress,
            amount: vars.currentAmount,
            totalPremium: vars.totalPremiums[vars.i],
            flashLoanPremiumToProtocol: vars.flashloanPremiumToProtocol,
            referralCode: params.referralCode
          })
        );
      } else {
        // If the user chose to not return the funds, the system checks if there is enough collateral and
        // eventually opens a debt position
        BorrowLogic.executeBorrow(
          reservesData,
          reservesList,
          eModeCategories,
          userConfig,
          DataTypes.ExecuteBorrowParams({
            asset: vars.currentAsset,
            user: msg.sender,
            onBehalfOf: params.onBehalfOf,
            amount: vars.currentAmount,
            interestRateMode: DataTypes.InterestRateMode(params.interestRateModes[vars.i]),
            referralCode: params.referralCode,
            releaseUnderlying: false,
            maxStableRateBorrowSizePercent: params.maxStableRateBorrowSizePercent,
            reservesCount: params.reservesCount,
            oracle: IPoolAddressesProvider(params.addressesProvider).getPriceOracle(),
            userEModeCategory: params.userEModeCategory,
            priceOracleSentinel: IPoolAddressesProvider(params.addressesProvider)
              .getPriceOracleSentinel()
          })
        );
        // no premium is paid when taking on the flashloan as debt
        emit FlashLoan(
          params.receiverAddress,
          msg.sender,
          vars.currentAsset,
          vars.currentAmount,
          DataTypes.InterestRateMode(params.interestRateModes[vars.i]),
          0,
          params.referralCode
        );
      }
    }
  }

  /**
   * @notice Implements the simple flashloan feature that allow users to access liquidity of ONE reserve for one
   * transaction as long as the amount taken plus fee is returned.
   * @dev Does not waive fee for approved flashborrowers nor allow taking on debt instead of repaying to save gas
   * @dev At the end of the transaction the pool will pull amount borrowed + fee from the receiver,
   * if the receiver have not approved the pool the transaction will revert.
   * @dev Emits the `FlashLoan()` event
   * @param reserve The state of the flashloaned reserve
   * @param params The additional parameters needed to execute the simple flashloan function
   */
  function executeFlashLoanSimple(
    DataTypes.ReserveData storage reserve,
    DataTypes.FlashloanSimpleParams memory params
  ) external {
    // The usual action flow (cache -> updateState -> validation -> changeState -> updateRates)
    // is altered to (validation -> user payload -> cache -> updateState -> changeState -> updateRates) for flashloans.
    // This is done to protect against reentrance and rate manipulation within the user specified payload.

    ValidationLogic.validateFlashloanSimple(reserve);

    IFlashLoanSimpleReceiver receiver = IFlashLoanSimpleReceiver(params.receiverAddress);
    uint256 totalPremium = params.amount.percentMul(params.flashLoanPremiumTotal);
    IAToken(reserve.aTokenAddress).transferUnderlyingTo(params.receiverAddress, params.amount);

    require(
      receiver.executeOperation(
        params.asset,
        params.amount,
        totalPremium,
        msg.sender,
        params.params
      ),
      Errors.INVALID_FLASHLOAN_EXECUTOR_RETURN
    );

    _handleFlashLoanRepayment(
      reserve,
      DataTypes.FlashLoanRepaymentParams({
        asset: params.asset,
        receiverAddress: params.receiverAddress,
        amount: params.amount,
        totalPremium: totalPremium,
        flashLoanPremiumToProtocol: params.flashLoanPremiumToProtocol,
        referralCode: params.referralCode
      })
    );
  }

  /**
   * @notice Handles repayment of flashloaned assets + premium
   * @dev Will pull the amount + premium from the receiver, so must have approved pool
   * @param reserve The state of the flashloaned reserve
   * @param params The additional parameters needed to execute the repayment function
   */
  function _handleFlashLoanRepayment(
    DataTypes.ReserveData storage reserve,
    DataTypes.FlashLoanRepaymentParams memory params
  ) internal {
    uint256 premiumToProtocol = params.totalPremium.percentMul(params.flashLoanPremiumToProtocol);
    uint256 premiumToLP = params.totalPremium - premiumToProtocol;
    uint256 amountPlusPremium = params.amount + params.totalPremium;

    DataTypes.ReserveCache memory reserveCache = reserve.cache();
    reserve.updateState(reserveCache);
    reserveCache.nextLiquidityIndex = reserve.cumulateToLiquidityIndex(
      IERC20(reserveCache.aTokenAddress).totalSupply() +
        uint256(reserve.accruedToTreasury).rayMul(reserveCache.nextLiquidityIndex),
      premiumToLP
    );

    reserve.accruedToTreasury += premiumToProtocol
      .rayDiv(reserveCache.nextLiquidityIndex)
      .toUint128();

    reserve.updateInterestRates(reserveCache, params.asset, amountPlusPremium, 0);

    IERC20(params.asset).safeTransferFrom(
      params.receiverAddress,
      reserveCache.aTokenAddress,
      amountPlusPremium
    );

    IAToken(reserveCache.aTokenAddress).handleRepayment(
      params.receiverAddress,
      params.receiverAddress,
      amountPlusPremium
    );

    emit FlashLoan(
      params.receiverAddress,
      msg.sender,
      params.asset,
      params.amount,
      DataTypes.InterestRateMode(0),
      params.totalPremium,
      params.referralCode
    );
  }
}



================================================
FILE: contracts/protocol/libraries/logic/GenericLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {IScaledBalanceToken} from '../../../interfaces/IScaledBalanceToken.sol';
import {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';
import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';
import {UserConfiguration} from '../configuration/UserConfiguration.sol';
import {PercentageMath} from '../math/PercentageMath.sol';
import {WadRayMath} from '../math/WadRayMath.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {ReserveLogic} from './ReserveLogic.sol';
import {EModeLogic} from './EModeLogic.sol';

/**
 * @title GenericLogic library
 * @author Aave
 * @notice Implements protocol-level logic to calculate and validate the state of a user
 */
library GenericLogic {
  using ReserveLogic for DataTypes.ReserveData;
  using WadRayMath for uint256;
  using PercentageMath for uint256;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
  using UserConfiguration for DataTypes.UserConfigurationMap;

  struct CalculateUserAccountDataVars {
    uint256 assetPrice;
    uint256 assetUnit;
    uint256 userBalanceInBaseCurrency;
    uint256 decimals;
    uint256 ltv;
    uint256 liquidationThreshold;
    uint256 i;
    uint256 healthFactor;
    uint256 totalCollateralInBaseCurrency;
    uint256 totalDebtInBaseCurrency;
    uint256 avgLtv;
    uint256 avgLiquidationThreshold;
    uint256 eModeAssetPrice;
    uint256 eModeLtv;
    uint256 eModeLiqThreshold;
    uint256 eModeAssetCategory;
    address currentReserveAddress;
    bool hasZeroLtvCollateral;
    bool isInEModeCategory;
  }

  /**
   * @notice Calculates the user data across the reserves.
   * @dev It includes the total liquidity/collateral/borrow balances in the base currency used by the price feed,
   * the average Loan To Value, the average Liquidation Ratio, and the Health factor.
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param params Additional parameters needed for the calculation
   * @return The total collateral of the user in the base currency used by the price feed
   * @return The total debt of the user in the base currency used by the price feed
   * @return The average ltv of the user
   * @return The average liquidation threshold of the user
   * @return The health factor of the user
   * @return True if the ltv is zero, false otherwise
   */
  function calculateUserAccountData(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.CalculateUserAccountDataParams memory params
  ) internal view returns (uint256, uint256, uint256, uint256, uint256, bool) {
    if (params.userConfig.isEmpty()) {
      return (0, 0, 0, 0, type(uint256).max, false);
    }

    CalculateUserAccountDataVars memory vars;

    if (params.userEModeCategory != 0) {
      (vars.eModeLtv, vars.eModeLiqThreshold, vars.eModeAssetPrice) = EModeLogic
        .getEModeConfiguration(
          eModeCategories[params.userEModeCategory],
          IPriceOracleGetter(params.oracle)
        );
    }

    while (vars.i < params.reservesCount) {
      if (!params.userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {
        unchecked {
          ++vars.i;
        }
        continue;
      }

      vars.currentReserveAddress = reservesList[vars.i];

      if (vars.currentReserveAddress == address(0)) {
        unchecked {
          ++vars.i;
        }
        continue;
      }

      DataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];

      (
        vars.ltv,
        vars.liquidationThreshold,
        ,
        vars.decimals,
        ,
        vars.eModeAssetCategory
      ) = currentReserve.configuration.getParams();

      unchecked {
        vars.assetUnit = 10 ** vars.decimals;
      }

      vars.assetPrice = vars.eModeAssetPrice != 0 &&
        params.userEModeCategory == vars.eModeAssetCategory
        ? vars.eModeAssetPrice
        : IPriceOracleGetter(params.oracle).getAssetPrice(vars.currentReserveAddress);

      if (vars.liquidationThreshold != 0 && params.userConfig.isUsingAsCollateral(vars.i)) {
        vars.userBalanceInBaseCurrency = _getUserBalanceInBaseCurrency(
          params.user,
          currentReserve,
          vars.assetPrice,
          vars.assetUnit
        );

        vars.totalCollateralInBaseCurrency += vars.userBalanceInBaseCurrency;

        vars.isInEModeCategory = EModeLogic.isInEModeCategory(
          params.userEModeCategory,
          vars.eModeAssetCategory
        );

        if (vars.ltv != 0) {
          vars.avgLtv +=
            vars.userBalanceInBaseCurrency *
            (vars.isInEModeCategory ? vars.eModeLtv : vars.ltv);
        } else {
          vars.hasZeroLtvCollateral = true;
        }

        vars.avgLiquidationThreshold +=
          vars.userBalanceInBaseCurrency *
          (vars.isInEModeCategory ? vars.eModeLiqThreshold : vars.liquidationThreshold);
      }

      if (params.userConfig.isBorrowing(vars.i)) {
        vars.totalDebtInBaseCurrency += _getUserDebtInBaseCurrency(
          params.user,
          currentReserve,
          vars.assetPrice,
          vars.assetUnit
        );
      }

      unchecked {
        ++vars.i;
      }
    }

    unchecked {
      vars.avgLtv = vars.totalCollateralInBaseCurrency != 0
        ? vars.avgLtv / vars.totalCollateralInBaseCurrency
        : 0;
      vars.avgLiquidationThreshold = vars.totalCollateralInBaseCurrency != 0
        ? vars.avgLiquidationThreshold / vars.totalCollateralInBaseCurrency
        : 0;
    }

    vars.healthFactor = (vars.totalDebtInBaseCurrency == 0)
      ? type(uint256).max
      : (vars.totalCollateralInBaseCurrency.percentMul(vars.avgLiquidationThreshold)).wadDiv(
        vars.totalDebtInBaseCurrency
      );
    return (
      vars.totalCollateralInBaseCurrency,
      vars.totalDebtInBaseCurrency,
      vars.avgLtv,
      vars.avgLiquidationThreshold,
      vars.healthFactor,
      vars.hasZeroLtvCollateral
    );
  }

  /**
   * @notice Calculates the maximum amount that can be borrowed depending on the available collateral, the total debt
   * and the average Loan To Value
   * @param totalCollateralInBaseCurrency The total collateral in the base currency used by the price feed
   * @param totalDebtInBaseCurrency The total borrow balance in the base currency used by the price feed
   * @param ltv The average loan to value
   * @return The amount available to borrow in the base currency of the used by the price feed
   */
  function calculateAvailableBorrows(
    uint256 totalCollateralInBaseCurrency,
    uint256 totalDebtInBaseCurrency,
    uint256 ltv
  ) internal pure returns (uint256) {
    uint256 availableBorrowsInBaseCurrency = totalCollateralInBaseCurrency.percentMul(ltv);

    if (availableBorrowsInBaseCurrency < totalDebtInBaseCurrency) {
      return 0;
    }

    availableBorrowsInBaseCurrency = availableBorrowsInBaseCurrency - totalDebtInBaseCurrency;
    return availableBorrowsInBaseCurrency;
  }

  /**
   * @notice Calculates total debt of the user in the based currency used to normalize the values of the assets
   * @dev This fetches the `balanceOf` of the stable and variable debt tokens for the user. For gas reasons, the
   * variable debt balance is calculated by fetching `scaledBalancesOf` normalized debt, which is cheaper than
   * fetching `balanceOf`
   * @param user The address of the user
   * @param reserve The data of the reserve for which the total debt of the user is being calculated
   * @param assetPrice The price of the asset for which the total debt of the user is being calculated
   * @param assetUnit The value representing one full unit of the asset (10^decimals)
   * @return The total debt of the user normalized to the base currency
   */
  function _getUserDebtInBaseCurrency(
    address user,
    DataTypes.ReserveData storage reserve,
    uint256 assetPrice,
    uint256 assetUnit
  ) private view returns (uint256) {
    // fetching variable debt
    uint256 userTotalDebt = IScaledBalanceToken(reserve.variableDebtTokenAddress).scaledBalanceOf(
      user
    );
    if (userTotalDebt != 0) {
      userTotalDebt = userTotalDebt.rayMul(reserve.getNormalizedDebt());
    }

    userTotalDebt = userTotalDebt + IERC20(reserve.stableDebtTokenAddress).balanceOf(user);

    userTotalDebt = assetPrice * userTotalDebt;

    unchecked {
      return userTotalDebt / assetUnit;
    }
  }

  /**
   * @notice Calculates total aToken balance of the user in the based currency used by the price oracle
   * @dev For gas reasons, the aToken balance is calculated by fetching `scaledBalancesOf` normalized debt, which
   * is cheaper than fetching `balanceOf`
   * @param user The address of the user
   * @param reserve The data of the reserve for which the total aToken balance of the user is being calculated
   * @param assetPrice The price of the asset for which the total aToken balance of the user is being calculated
   * @param assetUnit The value representing one full unit of the asset (10^decimals)
   * @return The total aToken balance of the user normalized to the base currency of the price oracle
   */
  function _getUserBalanceInBaseCurrency(
    address user,
    DataTypes.ReserveData storage reserve,
    uint256 assetPrice,
    uint256 assetUnit
  ) private view returns (uint256) {
    uint256 normalizedIncome = reserve.getNormalizedIncome();
    uint256 balance = (
      IScaledBalanceToken(reserve.aTokenAddress).scaledBalanceOf(user).rayMul(normalizedIncome)
    ) * assetPrice;

    unchecked {
      return balance / assetUnit;
    }
  }
}



================================================
FILE: contracts/protocol/libraries/logic/IsolationModeLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {DataTypes} from '../types/DataTypes.sol';
import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';
import {UserConfiguration} from '../configuration/UserConfiguration.sol';
import {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';

/**
 * @title IsolationModeLogic library
 * @author Aave
 * @notice Implements the base logic for handling repayments for assets borrowed in isolation mode
 */
library IsolationModeLogic {
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
  using UserConfiguration for DataTypes.UserConfigurationMap;
  using SafeCast for uint256;

  // See `IPool` for descriptions
  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);

  /**
   * @notice updated the isolated debt whenever a position collateralized by an isolated asset is repaid or liquidated
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param userConfig The user configuration mapping
   * @param reserveCache The cached data of the reserve
   * @param repayAmount The amount being repaid
   */
  function updateIsolatedDebtIfIsolated(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    DataTypes.UserConfigurationMap storage userConfig,
    DataTypes.ReserveCache memory reserveCache,
    uint256 repayAmount
  ) internal {
    (bool isolationModeActive, address isolationModeCollateralAddress, ) = userConfig
      .getIsolationModeState(reservesData, reservesList);

    if (isolationModeActive) {
      uint128 isolationModeTotalDebt = reservesData[isolationModeCollateralAddress]
        .isolationModeTotalDebt;

      uint128 isolatedDebtRepaid = (repayAmount /
        10 **
          (reserveCache.reserveConfiguration.getDecimals() -
            ReserveConfiguration.DEBT_CEILING_DECIMALS)).toUint128();

      // since the debt ceiling does not take into account the interest accrued, it might happen that amount
      // repaid > debt in isolation mode
      if (isolationModeTotalDebt <= isolatedDebtRepaid) {
        reservesData[isolationModeCollateralAddress].isolationModeTotalDebt = 0;
        emit IsolationModeTotalDebtUpdated(isolationModeCollateralAddress, 0);
      } else {
        uint256 nextIsolationModeTotalDebt = reservesData[isolationModeCollateralAddress]
          .isolationModeTotalDebt = isolationModeTotalDebt - isolatedDebtRepaid;
        emit IsolationModeTotalDebtUpdated(
          isolationModeCollateralAddress,
          nextIsolationModeTotalDebt
        );
      }
    }
  }
}



================================================
FILE: contracts/protocol/libraries/logic/LiquidationLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20} from '../../../dependencies/openzeppelin/contracts//IERC20.sol';
import {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {PercentageMath} from '../../libraries/math/PercentageMath.sol';
import {WadRayMath} from '../../libraries/math/WadRayMath.sol';
import {Helpers} from '../../libraries/helpers/Helpers.sol';
import {DataTypes} from '../../libraries/types/DataTypes.sol';
import {ReserveLogic} from './ReserveLogic.sol';
import {ValidationLogic} from './ValidationLogic.sol';
import {GenericLogic} from './GenericLogic.sol';
import {IsolationModeLogic} from './IsolationModeLogic.sol';
import {EModeLogic} from './EModeLogic.sol';
import {UserConfiguration} from '../../libraries/configuration/UserConfiguration.sol';
import {ReserveConfiguration} from '../../libraries/configuration/ReserveConfiguration.sol';
import {IAToken} from '../../../interfaces/IAToken.sol';
import {IStableDebtToken} from '../../../interfaces/IStableDebtToken.sol';
import {IVariableDebtToken} from '../../../interfaces/IVariableDebtToken.sol';
import {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';

/**
 * @title LiquidationLogic library
 * @author Aave
 * @notice Implements actions involving management of collateral in the protocol, the main one being the liquidations
 */
library LiquidationLogic {
  using WadRayMath for uint256;
  using PercentageMath for uint256;
  using ReserveLogic for DataTypes.ReserveCache;
  using ReserveLogic for DataTypes.ReserveData;
  using UserConfiguration for DataTypes.UserConfigurationMap;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
  using GPv2SafeERC20 for IERC20;

  // See `IPool` for descriptions
  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);
  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);
  event LiquidationCall(
    address indexed collateralAsset,
    address indexed debtAsset,
    address indexed user,
    uint256 debtToCover,
    uint256 liquidatedCollateralAmount,
    address liquidator,
    bool receiveAToken
  );

  /**
   * @dev Default percentage of borrower's debt to be repaid in a liquidation.
   * @dev Percentage applied when the users health factor is above `CLOSE_FACTOR_HF_THRESHOLD`
   * Expressed in bps, a value of 0.5e4 results in 50.00%
   */
  uint256 internal constant DEFAULT_LIQUIDATION_CLOSE_FACTOR = 0.5e4;

  /**
   * @dev Maximum percentage of borrower's debt to be repaid in a liquidation
   * @dev Percentage applied when the users health factor is below `CLOSE_FACTOR_HF_THRESHOLD`
   * Expressed in bps, a value of 1e4 results in 100.00%
   */
  uint256 public constant MAX_LIQUIDATION_CLOSE_FACTOR = 1e4;

  /**
   * @dev This constant represents below which health factor value it is possible to liquidate
   * an amount of debt corresponding to `MAX_LIQUIDATION_CLOSE_FACTOR`.
   * A value of 0.95e18 results in 0.95
   */
  uint256 public constant CLOSE_FACTOR_HF_THRESHOLD = 0.95e18;

  struct LiquidationCallLocalVars {
    uint256 userCollateralBalance;
    uint256 userVariableDebt;
    uint256 userTotalDebt;
    uint256 actualDebtToLiquidate;
    uint256 actualCollateralToLiquidate;
    uint256 liquidationBonus;
    uint256 healthFactor;
    uint256 liquidationProtocolFeeAmount;
    address collateralPriceSource;
    address debtPriceSource;
    IAToken collateralAToken;
    DataTypes.ReserveCache debtReserveCache;
  }

  /**
   * @notice Function to liquidate a position if its Health Factor drops below 1. The caller (liquidator)
   * covers `debtToCover` amount of debt of the user getting liquidated, and receives
   * a proportional amount of the `collateralAsset` plus a bonus to cover market risk
   * @dev Emits the `LiquidationCall()` event
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param params The additional parameters needed to execute the liquidation function
   */
  function executeLiquidationCall(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.ExecuteLiquidationCallParams memory params
  ) external {
    LiquidationCallLocalVars memory vars;

    DataTypes.ReserveData storage collateralReserve = reservesData[params.collateralAsset];
    DataTypes.ReserveData storage debtReserve = reservesData[params.debtAsset];
    DataTypes.UserConfigurationMap storage userConfig = usersConfig[params.user];
    vars.debtReserveCache = debtReserve.cache();
    debtReserve.updateState(vars.debtReserveCache);

    (, , , , vars.healthFactor, ) = GenericLogic.calculateUserAccountData(
      reservesData,
      reservesList,
      eModeCategories,
      DataTypes.CalculateUserAccountDataParams({
        userConfig: userConfig,
        reservesCount: params.reservesCount,
        user: params.user,
        oracle: params.priceOracle,
        userEModeCategory: params.userEModeCategory
      })
    );

    (vars.userVariableDebt, vars.userTotalDebt, vars.actualDebtToLiquidate) = _calculateDebt(
      vars.debtReserveCache,
      params,
      vars.healthFactor
    );

    ValidationLogic.validateLiquidationCall(
      userConfig,
      collateralReserve,
      DataTypes.ValidateLiquidationCallParams({
        debtReserveCache: vars.debtReserveCache,
        totalDebt: vars.userTotalDebt,
        healthFactor: vars.healthFactor,
        priceOracleSentinel: params.priceOracleSentinel
      })
    );

    (
      vars.collateralAToken,
      vars.collateralPriceSource,
      vars.debtPriceSource,
      vars.liquidationBonus
    ) = _getConfigurationData(eModeCategories, collateralReserve, params);

    vars.userCollateralBalance = vars.collateralAToken.balanceOf(params.user);

    (
      vars.actualCollateralToLiquidate,
      vars.actualDebtToLiquidate,
      vars.liquidationProtocolFeeAmount
    ) = _calculateAvailableCollateralToLiquidate(
      collateralReserve,
      vars.debtReserveCache,
      vars.collateralPriceSource,
      vars.debtPriceSource,
      vars.actualDebtToLiquidate,
      vars.userCollateralBalance,
      vars.liquidationBonus,
      IPriceOracleGetter(params.priceOracle)
    );

    if (vars.userTotalDebt == vars.actualDebtToLiquidate) {
      userConfig.setBorrowing(debtReserve.id, false);
    }

    // If the collateral being liquidated is equal to the user balance,
    // we set the currency as not being used as collateral anymore
    if (
      vars.actualCollateralToLiquidate + vars.liquidationProtocolFeeAmount ==
      vars.userCollateralBalance
    ) {
      userConfig.setUsingAsCollateral(collateralReserve.id, false);
      emit ReserveUsedAsCollateralDisabled(params.collateralAsset, params.user);
    }

    _burnDebtTokens(params, vars);

    debtReserve.updateInterestRates(
      vars.debtReserveCache,
      params.debtAsset,
      vars.actualDebtToLiquidate,
      0
    );

    IsolationModeLogic.updateIsolatedDebtIfIsolated(
      reservesData,
      reservesList,
      userConfig,
      vars.debtReserveCache,
      vars.actualDebtToLiquidate
    );

    if (params.receiveAToken) {
      _liquidateATokens(reservesData, reservesList, usersConfig, collateralReserve, params, vars);
    } else {
      _burnCollateralATokens(collateralReserve, params, vars);
    }

    // Transfer fee to treasury if it is non-zero
    if (vars.liquidationProtocolFeeAmount != 0) {
      uint256 liquidityIndex = collateralReserve.getNormalizedIncome();
      uint256 scaledDownLiquidationProtocolFee = vars.liquidationProtocolFeeAmount.rayDiv(
        liquidityIndex
      );
      uint256 scaledDownUserBalance = vars.collateralAToken.scaledBalanceOf(params.user);
      // To avoid trying to send more aTokens than available on balance, due to 1 wei imprecision
      if (scaledDownLiquidationProtocolFee > scaledDownUserBalance) {
        vars.liquidationProtocolFeeAmount = scaledDownUserBalance.rayMul(liquidityIndex);
      }
      vars.collateralAToken.transferOnLiquidation(
        params.user,
        vars.collateralAToken.RESERVE_TREASURY_ADDRESS(),
        vars.liquidationProtocolFeeAmount
      );
    }

    // Transfers the debt asset being repaid to the aToken, where the liquidity is kept
    IERC20(params.debtAsset).safeTransferFrom(
      msg.sender,
      vars.debtReserveCache.aTokenAddress,
      vars.actualDebtToLiquidate
    );

    IAToken(vars.debtReserveCache.aTokenAddress).handleRepayment(
      msg.sender,
      params.user,
      vars.actualDebtToLiquidate
    );

    emit LiquidationCall(
      params.collateralAsset,
      params.debtAsset,
      params.user,
      vars.actualDebtToLiquidate,
      vars.actualCollateralToLiquidate,
      msg.sender,
      params.receiveAToken
    );
  }

  /**
   * @notice Burns the collateral aTokens and transfers the underlying to the liquidator.
   * @dev   The function also updates the state and the interest rate of the collateral reserve.
   * @param collateralReserve The data of the collateral reserve
   * @param params The additional parameters needed to execute the liquidation function
   * @param vars The executeLiquidationCall() function local vars
   */
  function _burnCollateralATokens(
    DataTypes.ReserveData storage collateralReserve,
    DataTypes.ExecuteLiquidationCallParams memory params,
    LiquidationCallLocalVars memory vars
  ) internal {
    DataTypes.ReserveCache memory collateralReserveCache = collateralReserve.cache();
    collateralReserve.updateState(collateralReserveCache);
    collateralReserve.updateInterestRates(
      collateralReserveCache,
      params.collateralAsset,
      0,
      vars.actualCollateralToLiquidate
    );

    // Burn the equivalent amount of aToken, sending the underlying to the liquidator
    vars.collateralAToken.burn(
      params.user,
      msg.sender,
      vars.actualCollateralToLiquidate,
      collateralReserveCache.nextLiquidityIndex
    );
  }

  /**
   * @notice Liquidates the user aTokens by transferring them to the liquidator.
   * @dev   The function also checks the state of the liquidator and activates the aToken as collateral
   *        as in standard transfers if the isolation mode constraints are respected.
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets
   * @param collateralReserve The data of the collateral reserve
   * @param params The additional parameters needed to execute the liquidation function
   * @param vars The executeLiquidationCall() function local vars
   */
  function _liquidateATokens(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,
    DataTypes.ReserveData storage collateralReserve,
    DataTypes.ExecuteLiquidationCallParams memory params,
    LiquidationCallLocalVars memory vars
  ) internal {
    uint256 liquidatorPreviousATokenBalance = IERC20(vars.collateralAToken).balanceOf(msg.sender);
    vars.collateralAToken.transferOnLiquidation(
      params.user,
      msg.sender,
      vars.actualCollateralToLiquidate
    );

    if (liquidatorPreviousATokenBalance == 0) {
      DataTypes.UserConfigurationMap storage liquidatorConfig = usersConfig[msg.sender];
      if (
        ValidationLogic.validateAutomaticUseAsCollateral(
          reservesData,
          reservesList,
          liquidatorConfig,
          collateralReserve.configuration,
          collateralReserve.aTokenAddress
        )
      ) {
        liquidatorConfig.setUsingAsCollateral(collateralReserve.id, true);
        emit ReserveUsedAsCollateralEnabled(params.collateralAsset, msg.sender);
      }
    }
  }

  /**
   * @notice Burns the debt tokens of the user up to the amount being repaid by the liquidator.
   * @dev The function alters the `debtReserveCache` state in `vars` to update the debt related data.
   * @param params The additional parameters needed to execute the liquidation function
   * @param vars the executeLiquidationCall() function local vars
   */
  function _burnDebtTokens(
    DataTypes.ExecuteLiquidationCallParams memory params,
    LiquidationCallLocalVars memory vars
  ) internal {
    if (vars.userVariableDebt >= vars.actualDebtToLiquidate) {
      vars.debtReserveCache.nextScaledVariableDebt = IVariableDebtToken(
        vars.debtReserveCache.variableDebtTokenAddress
      ).burn(
          params.user,
          vars.actualDebtToLiquidate,
          vars.debtReserveCache.nextVariableBorrowIndex
        );
    } else {
      // If the user doesn't have variable debt, no need to try to burn variable debt tokens
      if (vars.userVariableDebt != 0) {
        vars.debtReserveCache.nextScaledVariableDebt = IVariableDebtToken(
          vars.debtReserveCache.variableDebtTokenAddress
        ).burn(params.user, vars.userVariableDebt, vars.debtReserveCache.nextVariableBorrowIndex);
      }
      (
        vars.debtReserveCache.nextTotalStableDebt,
        vars.debtReserveCache.nextAvgStableBorrowRate
      ) = IStableDebtToken(vars.debtReserveCache.stableDebtTokenAddress).burn(
        params.user,
        vars.actualDebtToLiquidate - vars.userVariableDebt
      );
    }
  }

  /**
   * @notice Calculates the total debt of the user and the actual amount to liquidate depending on the health factor
   * and corresponding close factor.
   * @dev If the Health Factor is below CLOSE_FACTOR_HF_THRESHOLD, the close factor is increased to MAX_LIQUIDATION_CLOSE_FACTOR
   * @param debtReserveCache The reserve cache data object of the debt reserve
   * @param params The additional parameters needed to execute the liquidation function
   * @param healthFactor The health factor of the position
   * @return The variable debt of the user
   * @return The total debt of the user
   * @return The actual debt to liquidate as a function of the closeFactor
   */
  function _calculateDebt(
    DataTypes.ReserveCache memory debtReserveCache,
    DataTypes.ExecuteLiquidationCallParams memory params,
    uint256 healthFactor
  ) internal view returns (uint256, uint256, uint256) {
    (uint256 userStableDebt, uint256 userVariableDebt) = Helpers.getUserCurrentDebt(
      params.user,
      debtReserveCache
    );

    uint256 userTotalDebt = userStableDebt + userVariableDebt;

    uint256 closeFactor = healthFactor > CLOSE_FACTOR_HF_THRESHOLD
      ? DEFAULT_LIQUIDATION_CLOSE_FACTOR
      : MAX_LIQUIDATION_CLOSE_FACTOR;

    uint256 maxLiquidatableDebt = userTotalDebt.percentMul(closeFactor);

    uint256 actualDebtToLiquidate = params.debtToCover > maxLiquidatableDebt
      ? maxLiquidatableDebt
      : params.debtToCover;

    return (userVariableDebt, userTotalDebt, actualDebtToLiquidate);
  }

  /**
   * @notice Returns the configuration data for the debt and the collateral reserves.
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param collateralReserve The data of the collateral reserve
   * @param params The additional parameters needed to execute the liquidation function
   * @return The collateral aToken
   * @return The address to use as price source for the collateral
   * @return The address to use as price source for the debt
   * @return The liquidation bonus to apply to the collateral
   */
  function _getConfigurationData(
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.ReserveData storage collateralReserve,
    DataTypes.ExecuteLiquidationCallParams memory params
  ) internal view returns (IAToken, address, address, uint256) {
    IAToken collateralAToken = IAToken(collateralReserve.aTokenAddress);
    uint256 liquidationBonus = collateralReserve.configuration.getLiquidationBonus();

    address collateralPriceSource = params.collateralAsset;
    address debtPriceSource = params.debtAsset;

    if (params.userEModeCategory != 0) {
      address eModePriceSource = eModeCategories[params.userEModeCategory].priceSource;

      if (
        EModeLogic.isInEModeCategory(
          params.userEModeCategory,
          collateralReserve.configuration.getEModeCategory()
        )
      ) {
        liquidationBonus = eModeCategories[params.userEModeCategory].liquidationBonus;

        if (eModePriceSource != address(0)) {
          collateralPriceSource = eModePriceSource;
        }
      }

      // when in eMode, debt will always be in the same eMode category, can skip matching category check
      if (eModePriceSource != address(0)) {
        debtPriceSource = eModePriceSource;
      }
    }

    return (collateralAToken, collateralPriceSource, debtPriceSource, liquidationBonus);
  }

  struct AvailableCollateralToLiquidateLocalVars {
    uint256 collateralPrice;
    uint256 debtAssetPrice;
    uint256 maxCollateralToLiquidate;
    uint256 baseCollateral;
    uint256 bonusCollateral;
    uint256 debtAssetDecimals;
    uint256 collateralDecimals;
    uint256 collateralAssetUnit;
    uint256 debtAssetUnit;
    uint256 collateralAmount;
    uint256 debtAmountNeeded;
    uint256 liquidationProtocolFeePercentage;
    uint256 liquidationProtocolFee;
  }

  /**
   * @notice Calculates how much of a specific collateral can be liquidated, given
   * a certain amount of debt asset.
   * @dev This function needs to be called after all the checks to validate the liquidation have been performed,
   *   otherwise it might fail.
   * @param collateralReserve The data of the collateral reserve
   * @param debtReserveCache The cached data of the debt reserve
   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation
   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation
   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover
   * @param userCollateralBalance The collateral balance for the specific `collateralAsset` of the user being liquidated
   * @param liquidationBonus The collateral bonus percentage to receive as result of the liquidation
   * @return The maximum amount that is possible to liquidate given all the liquidation constraints (user balance, close factor)
   * @return The amount to repay with the liquidation
   * @return The fee taken from the liquidation bonus amount to be paid to the protocol
   */
  function _calculateAvailableCollateralToLiquidate(
    DataTypes.ReserveData storage collateralReserve,
    DataTypes.ReserveCache memory debtReserveCache,
    address collateralAsset,
    address debtAsset,
    uint256 debtToCover,
    uint256 userCollateralBalance,
    uint256 liquidationBonus,
    IPriceOracleGetter oracle
  ) internal view returns (uint256, uint256, uint256) {
    AvailableCollateralToLiquidateLocalVars memory vars;

    vars.collateralPrice = oracle.getAssetPrice(collateralAsset);
    vars.debtAssetPrice = oracle.getAssetPrice(debtAsset);

    vars.collateralDecimals = collateralReserve.configuration.getDecimals();
    vars.debtAssetDecimals = debtReserveCache.reserveConfiguration.getDecimals();

    unchecked {
      vars.collateralAssetUnit = 10 ** vars.collateralDecimals;
      vars.debtAssetUnit = 10 ** vars.debtAssetDecimals;
    }

    vars.liquidationProtocolFeePercentage = collateralReserve
      .configuration
      .getLiquidationProtocolFee();

    // This is the base collateral to liquidate based on the given debt to cover
    vars.baseCollateral =
      ((vars.debtAssetPrice * debtToCover * vars.collateralAssetUnit)) /
      (vars.collateralPrice * vars.debtAssetUnit);

    vars.maxCollateralToLiquidate = vars.baseCollateral.percentMul(liquidationBonus);

    if (vars.maxCollateralToLiquidate > userCollateralBalance) {
      vars.collateralAmount = userCollateralBalance;
      vars.debtAmountNeeded = ((vars.collateralPrice * vars.collateralAmount * vars.debtAssetUnit) /
        (vars.debtAssetPrice * vars.collateralAssetUnit)).percentDiv(liquidationBonus);
    } else {
      vars.collateralAmount = vars.maxCollateralToLiquidate;
      vars.debtAmountNeeded = debtToCover;
    }

    if (vars.liquidationProtocolFeePercentage != 0) {
      vars.bonusCollateral =
        vars.collateralAmount -
        vars.collateralAmount.percentDiv(liquidationBonus);

      vars.liquidationProtocolFee = vars.bonusCollateral.percentMul(
        vars.liquidationProtocolFeePercentage
      );

      return (
        vars.collateralAmount - vars.liquidationProtocolFee,
        vars.debtAmountNeeded,
        vars.liquidationProtocolFee
      );
    } else {
      return (vars.collateralAmount, vars.debtAmountNeeded, 0);
    }
  }
}



================================================
FILE: contracts/protocol/libraries/logic/PoolLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {Address} from '../../../dependencies/openzeppelin/contracts/Address.sol';
import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {IAToken} from '../../../interfaces/IAToken.sol';
import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';
import {Errors} from '../helpers/Errors.sol';
import {WadRayMath} from '../math/WadRayMath.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {ReserveLogic} from './ReserveLogic.sol';
import {ValidationLogic} from './ValidationLogic.sol';
import {GenericLogic} from './GenericLogic.sol';

/**
 * @title PoolLogic library
 * @author Aave
 * @notice Implements the logic for Pool specific functions
 */
library PoolLogic {
  using GPv2SafeERC20 for IERC20;
  using WadRayMath for uint256;
  using ReserveLogic for DataTypes.ReserveData;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;

  // See `IPool` for descriptions
  event MintedToTreasury(address indexed reserve, uint256 amountMinted);
  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);

  /**
   * @notice Initialize an asset reserve and add the reserve to the list of reserves
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param params Additional parameters needed for initiation
   * @return true if appended, false if inserted at existing empty spot
   */
  function executeInitReserve(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    DataTypes.InitReserveParams memory params
  ) external returns (bool) {
    require(Address.isContract(params.asset), Errors.NOT_CONTRACT);
    reservesData[params.asset].init(
      params.aTokenAddress,
      params.stableDebtAddress,
      params.variableDebtAddress,
      params.interestRateStrategyAddress
    );

    bool reserveAlreadyAdded = reservesData[params.asset].id != 0 ||
      reservesList[0] == params.asset;
    require(!reserveAlreadyAdded, Errors.RESERVE_ALREADY_ADDED);

    for (uint16 i = 0; i < params.reservesCount; i++) {
      if (reservesList[i] == address(0)) {
        reservesData[params.asset].id = i;
        reservesList[i] = params.asset;
        return false;
      }
    }

    require(params.reservesCount < params.maxNumberReserves, Errors.NO_MORE_RESERVES_ALLOWED);
    reservesData[params.asset].id = params.reservesCount;
    reservesList[params.reservesCount] = params.asset;
    return true;
  }

  /**
   * @notice Rescue and transfer tokens locked in this contract
   * @param token The address of the token
   * @param to The address of the recipient
   * @param amount The amount of token to transfer
   */
  function executeRescueTokens(address token, address to, uint256 amount) external {
    IERC20(token).safeTransfer(to, amount);
  }

  /**
   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens
   * @param reservesData The state of all the reserves
   * @param assets The list of reserves for which the minting needs to be executed
   */
  function executeMintToTreasury(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    address[] calldata assets
  ) external {
    for (uint256 i = 0; i < assets.length; i++) {
      address assetAddress = assets[i];

      DataTypes.ReserveData storage reserve = reservesData[assetAddress];

      // this cover both inactive reserves and invalid reserves since the flag will be 0 for both
      if (!reserve.configuration.getActive()) {
        continue;
      }

      uint256 accruedToTreasury = reserve.accruedToTreasury;

      if (accruedToTreasury != 0) {
        reserve.accruedToTreasury = 0;
        uint256 normalizedIncome = reserve.getNormalizedIncome();
        uint256 amountToMint = accruedToTreasury.rayMul(normalizedIncome);
        IAToken(reserve.aTokenAddress).mintToTreasury(amountToMint, normalizedIncome);

        emit MintedToTreasury(assetAddress, amountToMint);
      }
    }
  }

  /**
   * @notice Resets the isolation mode total debt of the given asset to zero
   * @dev It requires the given asset has zero debt ceiling
   * @param reservesData The state of all the reserves
   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt
   */
  function executeResetIsolationModeTotalDebt(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    address asset
  ) external {
    require(reservesData[asset].configuration.getDebtCeiling() == 0, Errors.DEBT_CEILING_NOT_ZERO);
    reservesData[asset].isolationModeTotalDebt = 0;
    emit IsolationModeTotalDebtUpdated(asset, 0);
  }

  /**
   * @notice Drop a reserve
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param asset The address of the underlying asset of the reserve
   */
  function executeDropReserve(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    address asset
  ) external {
    DataTypes.ReserveData storage reserve = reservesData[asset];
    ValidationLogic.validateDropReserve(reservesList, reserve, asset);
    reservesList[reservesData[asset].id] = address(0);
    delete reservesData[asset];
  }

  /**
   * @notice Returns the user account data across all the reserves
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param params Additional params needed for the calculation
   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed
   * @return totalDebtBase The total debt of the user in the base currency used by the price feed
   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed
   * @return currentLiquidationThreshold The liquidation threshold of the user
   * @return ltv The loan to value of The user
   * @return healthFactor The current health factor of the user
   */
  function executeGetUserAccountData(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.CalculateUserAccountDataParams memory params
  )
    external
    view
    returns (
      uint256 totalCollateralBase,
      uint256 totalDebtBase,
      uint256 availableBorrowsBase,
      uint256 currentLiquidationThreshold,
      uint256 ltv,
      uint256 healthFactor
    )
  {
    (
      totalCollateralBase,
      totalDebtBase,
      ltv,
      currentLiquidationThreshold,
      healthFactor,

    ) = GenericLogic.calculateUserAccountData(reservesData, reservesList, eModeCategories, params);

    availableBorrowsBase = GenericLogic.calculateAvailableBorrows(
      totalCollateralBase,
      totalDebtBase,
      ltv
    );
  }
}



================================================
FILE: contracts/protocol/libraries/logic/ReserveLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {IStableDebtToken} from '../../../interfaces/IStableDebtToken.sol';
import {IVariableDebtToken} from '../../../interfaces/IVariableDebtToken.sol';
import {IReserveInterestRateStrategy} from '../../../interfaces/IReserveInterestRateStrategy.sol';
import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';
import {MathUtils} from '../math/MathUtils.sol';
import {WadRayMath} from '../math/WadRayMath.sol';
import {PercentageMath} from '../math/PercentageMath.sol';
import {Errors} from '../helpers/Errors.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';

/**
 * @title ReserveLogic library
 * @author Aave
 * @notice Implements the logic to update the reserves state
 */
library ReserveLogic {
  using WadRayMath for uint256;
  using PercentageMath for uint256;
  using SafeCast for uint256;
  using GPv2SafeERC20 for IERC20;
  using ReserveLogic for DataTypes.ReserveData;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;

  // See `IPool` for descriptions
  event ReserveDataUpdated(
    address indexed reserve,
    uint256 liquidityRate,
    uint256 stableBorrowRate,
    uint256 variableBorrowRate,
    uint256 liquidityIndex,
    uint256 variableBorrowIndex
  );

  /**
   * @notice Returns the ongoing normalized income for the reserve.
   * @dev A value of 1e27 means there is no income. As time passes, the income is accrued
   * @dev A value of 2*1e27 means for each unit of asset one unit of income has been accrued
   * @param reserve The reserve object
   * @return The normalized income, expressed in ray
   */
  function getNormalizedIncome(
    DataTypes.ReserveData storage reserve
  ) internal view returns (uint256) {
    uint40 timestamp = reserve.lastUpdateTimestamp;

    //solium-disable-next-line
    if (timestamp == block.timestamp) {
      //if the index was updated in the same block, no need to perform any calculation
      return reserve.liquidityIndex;
    } else {
      return
        MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(
          reserve.liquidityIndex
        );
    }
  }

  /**
   * @notice Returns the ongoing normalized variable debt for the reserve.
   * @dev A value of 1e27 means there is no debt. As time passes, the debt is accrued
   * @dev A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated
   * @param reserve The reserve object
   * @return The normalized variable debt, expressed in ray
   */
  function getNormalizedDebt(
    DataTypes.ReserveData storage reserve
  ) internal view returns (uint256) {
    uint40 timestamp = reserve.lastUpdateTimestamp;

    //solium-disable-next-line
    if (timestamp == block.timestamp) {
      //if the index was updated in the same block, no need to perform any calculation
      return reserve.variableBorrowIndex;
    } else {
      return
        MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(
          reserve.variableBorrowIndex
        );
    }
  }

  /**
   * @notice Updates the liquidity cumulative index and the variable borrow index.
   * @param reserve The reserve object
   * @param reserveCache The caching layer for the reserve data
   */
  function updateState(
    DataTypes.ReserveData storage reserve,
    DataTypes.ReserveCache memory reserveCache
  ) internal {
    // If time didn't pass since last stored timestamp, skip state update
    //solium-disable-next-line
    if (reserve.lastUpdateTimestamp == uint40(block.timestamp)) {
      return;
    }

    _updateIndexes(reserve, reserveCache);
    _accrueToTreasury(reserve, reserveCache);

    //solium-disable-next-line
    reserve.lastUpdateTimestamp = uint40(block.timestamp);
  }

  /**
   * @notice Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example
   * to accumulate the flashloan fee to the reserve, and spread it between all the suppliers.
   * @param reserve The reserve object
   * @param totalLiquidity The total liquidity available in the reserve
   * @param amount The amount to accumulate
   * @return The next liquidity index of the reserve
   */
  function cumulateToLiquidityIndex(
    DataTypes.ReserveData storage reserve,
    uint256 totalLiquidity,
    uint256 amount
  ) internal returns (uint256) {
    //next liquidity index is calculated this way: `((amount / totalLiquidity) + 1) * liquidityIndex`
    //division `amount / totalLiquidity` done in ray for precision
    uint256 result = (amount.wadToRay().rayDiv(totalLiquidity.wadToRay()) + WadRayMath.RAY).rayMul(
      reserve.liquidityIndex
    );
    reserve.liquidityIndex = result.toUint128();
    return result;
  }

  /**
   * @notice Initializes a reserve.
   * @param reserve The reserve object
   * @param aTokenAddress The address of the overlying atoken contract
   * @param stableDebtTokenAddress The address of the overlying stable debt token contract
   * @param variableDebtTokenAddress The address of the overlying variable debt token contract
   * @param interestRateStrategyAddress The address of the interest rate strategy contract
   */
  function init(
    DataTypes.ReserveData storage reserve,
    address aTokenAddress,
    address stableDebtTokenAddress,
    address variableDebtTokenAddress,
    address interestRateStrategyAddress
  ) internal {
    require(reserve.aTokenAddress == address(0), Errors.RESERVE_ALREADY_INITIALIZED);

    reserve.liquidityIndex = uint128(WadRayMath.RAY);
    reserve.variableBorrowIndex = uint128(WadRayMath.RAY);
    reserve.aTokenAddress = aTokenAddress;
    reserve.stableDebtTokenAddress = stableDebtTokenAddress;
    reserve.variableDebtTokenAddress = variableDebtTokenAddress;
    reserve.interestRateStrategyAddress = interestRateStrategyAddress;
  }

  struct UpdateInterestRatesLocalVars {
    uint256 nextLiquidityRate;
    uint256 nextStableRate;
    uint256 nextVariableRate;
    uint256 totalVariableDebt;
  }

  /**
   * @notice Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate.
   * @param reserve The reserve reserve to be updated
   * @param reserveCache The caching layer for the reserve data
   * @param reserveAddress The address of the reserve to be updated
   * @param liquidityAdded The amount of liquidity added to the protocol (supply or repay) in the previous action
   * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)
   */
  function updateInterestRates(
    DataTypes.ReserveData storage reserve,
    DataTypes.ReserveCache memory reserveCache,
    address reserveAddress,
    uint256 liquidityAdded,
    uint256 liquidityTaken
  ) internal {
    UpdateInterestRatesLocalVars memory vars;

    vars.totalVariableDebt = reserveCache.nextScaledVariableDebt.rayMul(
      reserveCache.nextVariableBorrowIndex
    );

    (
      vars.nextLiquidityRate,
      vars.nextStableRate,
      vars.nextVariableRate
    ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress).calculateInterestRates(
      DataTypes.CalculateInterestRatesParams({
        unbacked: reserve.unbacked,
        liquidityAdded: liquidityAdded,
        liquidityTaken: liquidityTaken,
        totalStableDebt: reserveCache.nextTotalStableDebt,
        totalVariableDebt: vars.totalVariableDebt,
        averageStableBorrowRate: reserveCache.nextAvgStableBorrowRate,
        reserveFactor: reserveCache.reserveFactor,
        reserve: reserveAddress,
        aToken: reserveCache.aTokenAddress
      })
    );

    reserve.currentLiquidityRate = vars.nextLiquidityRate.toUint128();
    reserve.currentStableBorrowRate = vars.nextStableRate.toUint128();
    reserve.currentVariableBorrowRate = vars.nextVariableRate.toUint128();

    emit ReserveDataUpdated(
      reserveAddress,
      vars.nextLiquidityRate,
      vars.nextStableRate,
      vars.nextVariableRate,
      reserveCache.nextLiquidityIndex,
      reserveCache.nextVariableBorrowIndex
    );
  }

  struct AccrueToTreasuryLocalVars {
    uint256 prevTotalStableDebt;
    uint256 prevTotalVariableDebt;
    uint256 currTotalVariableDebt;
    uint256 cumulatedStableInterest;
    uint256 totalDebtAccrued;
    uint256 amountToMint;
  }

  /**
   * @notice Mints part of the repaid interest to the reserve treasury as a function of the reserve factor for the
   * specific asset.
   * @param reserve The reserve to be updated
   * @param reserveCache The caching layer for the reserve data
   */
  function _accrueToTreasury(
    DataTypes.ReserveData storage reserve,
    DataTypes.ReserveCache memory reserveCache
  ) internal {
    AccrueToTreasuryLocalVars memory vars;

    if (reserveCache.reserveFactor == 0) {
      return;
    }

    //calculate the total variable debt at moment of the last interaction
    vars.prevTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(
      reserveCache.currVariableBorrowIndex
    );

    //calculate the new total variable debt after accumulation of the interest on the index
    vars.currTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(
      reserveCache.nextVariableBorrowIndex
    );

    //calculate the stable debt until the last timestamp update
    vars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(
      reserveCache.currAvgStableBorrowRate,
      reserveCache.stableDebtLastUpdateTimestamp,
      reserveCache.reserveLastUpdateTimestamp
    );

    vars.prevTotalStableDebt = reserveCache.currPrincipalStableDebt.rayMul(
      vars.cumulatedStableInterest
    );

    //debt accrued is the sum of the current debt minus the sum of the debt at the last update
    vars.totalDebtAccrued =
      vars.currTotalVariableDebt +
      reserveCache.currTotalStableDebt -
      vars.prevTotalVariableDebt -
      vars.prevTotalStableDebt;

    vars.amountToMint = vars.totalDebtAccrued.percentMul(reserveCache.reserveFactor);

    if (vars.amountToMint != 0) {
      reserve.accruedToTreasury += vars
        .amountToMint
        .rayDiv(reserveCache.nextLiquidityIndex)
        .toUint128();
    }
  }

  /**
   * @notice Updates the reserve indexes and the timestamp of the update.
   * @param reserve The reserve reserve to be updated
   * @param reserveCache The cache layer holding the cached protocol data
   */
  function _updateIndexes(
    DataTypes.ReserveData storage reserve,
    DataTypes.ReserveCache memory reserveCache
  ) internal {
    // Only cumulating on the supply side if there is any income being produced
    // The case of Reserve Factor 100% is not a problem (currentLiquidityRate == 0),
    // as liquidity index should not be updated
    if (reserveCache.currLiquidityRate != 0) {
      uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(
        reserveCache.currLiquidityRate,
        reserveCache.reserveLastUpdateTimestamp
      );
      reserveCache.nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(
        reserveCache.currLiquidityIndex
      );
      reserve.liquidityIndex = reserveCache.nextLiquidityIndex.toUint128();
    }

    // Variable borrow index only gets updated if there is any variable debt.
    // reserveCache.currVariableBorrowRate != 0 is not a correct validation,
    // because a positive base variable rate can be stored on
    // reserveCache.currVariableBorrowRate, but the index should not increase
    if (reserveCache.currScaledVariableDebt != 0) {
      uint256 cumulatedVariableBorrowInterest = MathUtils.calculateCompoundedInterest(
        reserveCache.currVariableBorrowRate,
        reserveCache.reserveLastUpdateTimestamp
      );
      reserveCache.nextVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(
        reserveCache.currVariableBorrowIndex
      );
      reserve.variableBorrowIndex = reserveCache.nextVariableBorrowIndex.toUint128();
    }
  }

  /**
   * @notice Creates a cache object to avoid repeated storage reads and external contract calls when updating state and
   * interest rates.
   * @param reserve The reserve object for which the cache will be filled
   * @return The cache object
   */
  function cache(
    DataTypes.ReserveData storage reserve
  ) internal view returns (DataTypes.ReserveCache memory) {
    DataTypes.ReserveCache memory reserveCache;

    reserveCache.reserveConfiguration = reserve.configuration;
    reserveCache.reserveFactor = reserveCache.reserveConfiguration.getReserveFactor();
    reserveCache.currLiquidityIndex = reserveCache.nextLiquidityIndex = reserve.liquidityIndex;
    reserveCache.currVariableBorrowIndex = reserveCache.nextVariableBorrowIndex = reserve
      .variableBorrowIndex;
    reserveCache.currLiquidityRate = reserve.currentLiquidityRate;
    reserveCache.currVariableBorrowRate = reserve.currentVariableBorrowRate;

    reserveCache.aTokenAddress = reserve.aTokenAddress;
    reserveCache.stableDebtTokenAddress = reserve.stableDebtTokenAddress;
    reserveCache.variableDebtTokenAddress = reserve.variableDebtTokenAddress;

    reserveCache.reserveLastUpdateTimestamp = reserve.lastUpdateTimestamp;

    reserveCache.currScaledVariableDebt = reserveCache.nextScaledVariableDebt = IVariableDebtToken(
      reserveCache.variableDebtTokenAddress
    ).scaledTotalSupply();

    (
      reserveCache.currPrincipalStableDebt,
      reserveCache.currTotalStableDebt,
      reserveCache.currAvgStableBorrowRate,
      reserveCache.stableDebtLastUpdateTimestamp
    ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).getSupplyData();

    // by default the actions are considered as not affecting the debt balances.
    // if the action involves mint/burn of debt, the cache needs to be updated
    reserveCache.nextTotalStableDebt = reserveCache.currTotalStableDebt;
    reserveCache.nextAvgStableBorrowRate = reserveCache.currAvgStableBorrowRate;

    return reserveCache;
  }
}



================================================
FILE: contracts/protocol/libraries/logic/SupplyLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {IAToken} from '../../../interfaces/IAToken.sol';
import {Errors} from '../helpers/Errors.sol';
import {UserConfiguration} from '../configuration/UserConfiguration.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {WadRayMath} from '../math/WadRayMath.sol';
import {PercentageMath} from '../math/PercentageMath.sol';
import {ValidationLogic} from './ValidationLogic.sol';
import {ReserveLogic} from './ReserveLogic.sol';
import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';

/**
 * @title SupplyLogic library
 * @author Aave
 * @notice Implements the base logic for supply/withdraw
 */
library SupplyLogic {
  using ReserveLogic for DataTypes.ReserveCache;
  using ReserveLogic for DataTypes.ReserveData;
  using GPv2SafeERC20 for IERC20;
  using UserConfiguration for DataTypes.UserConfigurationMap;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
  using WadRayMath for uint256;
  using PercentageMath for uint256;

  // See `IPool` for descriptions
  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);
  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);
  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);
  event Supply(
    address indexed reserve,
    address user,
    address indexed onBehalfOf,
    uint256 amount,
    uint16 indexed referralCode
  );

  /**
   * @notice Implements the supply feature. Through `supply()`, users supply assets to the Aave protocol.
   * @dev Emits the `Supply()` event.
   * @dev In the first supply action, `ReserveUsedAsCollateralEnabled()` is emitted, if the asset can be enabled as
   * collateral.
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets
   * @param params The additional parameters needed to execute the supply function
   */
  function executeSupply(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    DataTypes.UserConfigurationMap storage userConfig,
    DataTypes.ExecuteSupplyParams memory params
  ) external {
    DataTypes.ReserveData storage reserve = reservesData[params.asset];
    DataTypes.ReserveCache memory reserveCache = reserve.cache();

    reserve.updateState(reserveCache);

    ValidationLogic.validateSupply(reserveCache, reserve, params.amount);

    reserve.updateInterestRates(reserveCache, params.asset, params.amount, 0);

    IERC20(params.asset).safeTransferFrom(msg.sender, reserveCache.aTokenAddress, params.amount);

    bool isFirstSupply = IAToken(reserveCache.aTokenAddress).mint(
      msg.sender,
      params.onBehalfOf,
      params.amount,
      reserveCache.nextLiquidityIndex
    );

    if (isFirstSupply) {
      if (
        ValidationLogic.validateAutomaticUseAsCollateral(
          reservesData,
          reservesList,
          userConfig,
          reserveCache.reserveConfiguration,
          reserveCache.aTokenAddress
        )
      ) {
        userConfig.setUsingAsCollateral(reserve.id, true);
        emit ReserveUsedAsCollateralEnabled(params.asset, params.onBehalfOf);
      }
    }

    emit Supply(params.asset, msg.sender, params.onBehalfOf, params.amount, params.referralCode);
  }

  /**
   * @notice Implements the withdraw feature. Through `withdraw()`, users redeem their aTokens for the underlying asset
   * previously supplied in the Aave protocol.
   * @dev Emits the `Withdraw()` event.
   * @dev If the user withdraws everything, `ReserveUsedAsCollateralDisabled()` is emitted.
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets
   * @param params The additional parameters needed to execute the withdraw function
   * @return The actual amount withdrawn
   */
  function executeWithdraw(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.UserConfigurationMap storage userConfig,
    DataTypes.ExecuteWithdrawParams memory params
  ) external returns (uint256) {
    DataTypes.ReserveData storage reserve = reservesData[params.asset];
    DataTypes.ReserveCache memory reserveCache = reserve.cache();

    reserve.updateState(reserveCache);

    uint256 userBalance = IAToken(reserveCache.aTokenAddress).scaledBalanceOf(msg.sender).rayMul(
      reserveCache.nextLiquidityIndex
    );

    uint256 amountToWithdraw = params.amount;

    if (params.amount == type(uint256).max) {
      amountToWithdraw = userBalance;
    }

    ValidationLogic.validateWithdraw(reserveCache, amountToWithdraw, userBalance);

    reserve.updateInterestRates(reserveCache, params.asset, 0, amountToWithdraw);

    bool isCollateral = userConfig.isUsingAsCollateral(reserve.id);

    if (isCollateral && amountToWithdraw == userBalance) {
      userConfig.setUsingAsCollateral(reserve.id, false);
      emit ReserveUsedAsCollateralDisabled(params.asset, msg.sender);
    }

    IAToken(reserveCache.aTokenAddress).burn(
      msg.sender,
      params.to,
      amountToWithdraw,
      reserveCache.nextLiquidityIndex
    );

    if (isCollateral && userConfig.isBorrowingAny()) {
      ValidationLogic.validateHFAndLtv(
        reservesData,
        reservesList,
        eModeCategories,
        userConfig,
        params.asset,
        msg.sender,
        params.reservesCount,
        params.oracle,
        params.userEModeCategory
      );
    }

    emit Withdraw(params.asset, msg.sender, params.to, amountToWithdraw);

    return amountToWithdraw;
  }

  /**
   * @notice Validates a transfer of aTokens. The sender is subjected to health factor validation to avoid
   * collateralization constraints violation.
   * @dev Emits the `ReserveUsedAsCollateralEnabled()` event for the `to` account, if the asset is being activated as
   * collateral.
   * @dev In case the `from` user transfers everything, `ReserveUsedAsCollateralDisabled()` is emitted for `from`.
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets
   * @param params The additional parameters needed to execute the finalizeTransfer function
   */
  function executeFinalizeTransfer(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,
    DataTypes.FinalizeTransferParams memory params
  ) external {
    DataTypes.ReserveData storage reserve = reservesData[params.asset];

    ValidationLogic.validateTransfer(reserve);

    uint256 reserveId = reserve.id;

    if (params.from != params.to && params.amount != 0) {
      DataTypes.UserConfigurationMap storage fromConfig = usersConfig[params.from];

      if (fromConfig.isUsingAsCollateral(reserveId)) {
        if (fromConfig.isBorrowingAny()) {
          ValidationLogic.validateHFAndLtv(
            reservesData,
            reservesList,
            eModeCategories,
            usersConfig[params.from],
            params.asset,
            params.from,
            params.reservesCount,
            params.oracle,
            params.fromEModeCategory
          );
        }
        if (params.balanceFromBefore == params.amount) {
          fromConfig.setUsingAsCollateral(reserveId, false);
          emit ReserveUsedAsCollateralDisabled(params.asset, params.from);
        }
      }

      if (params.balanceToBefore == 0) {
        DataTypes.UserConfigurationMap storage toConfig = usersConfig[params.to];
        if (
          ValidationLogic.validateAutomaticUseAsCollateral(
            reservesData,
            reservesList,
            toConfig,
            reserve.configuration,
            reserve.aTokenAddress
          )
        ) {
          toConfig.setUsingAsCollateral(reserveId, true);
          emit ReserveUsedAsCollateralEnabled(params.asset, params.to);
        }
      }
    }
  }

  /**
   * @notice Executes the 'set as collateral' feature. A user can choose to activate or deactivate an asset as
   * collateral at any point in time. Deactivating an asset as collateral is subjected to the usual health factor
   * checks to ensure collateralization.
   * @dev Emits the `ReserveUsedAsCollateralEnabled()` event if the asset can be activated as collateral.
   * @dev In case the asset is being deactivated as collateral, `ReserveUsedAsCollateralDisabled()` is emitted.
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param userConfig The users configuration mapping that track the supplied/borrowed assets
   * @param asset The address of the asset being configured as collateral
   * @param useAsCollateral True if the user wants to set the asset as collateral, false otherwise
   * @param reservesCount The number of initialized reserves
   * @param priceOracle The address of the price oracle
   * @param userEModeCategory The eMode category chosen by the user
   */
  function executeUseReserveAsCollateral(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.UserConfigurationMap storage userConfig,
    address asset,
    bool useAsCollateral,
    uint256 reservesCount,
    address priceOracle,
    uint8 userEModeCategory
  ) external {
    DataTypes.ReserveData storage reserve = reservesData[asset];
    DataTypes.ReserveCache memory reserveCache = reserve.cache();

    uint256 userBalance = IERC20(reserveCache.aTokenAddress).balanceOf(msg.sender);

    ValidationLogic.validateSetUseReserveAsCollateral(reserveCache, userBalance);

    if (useAsCollateral == userConfig.isUsingAsCollateral(reserve.id)) return;

    if (useAsCollateral) {
      require(
        ValidationLogic.validateUseAsCollateral(
          reservesData,
          reservesList,
          userConfig,
          reserveCache.reserveConfiguration
        ),
        Errors.USER_IN_ISOLATION_MODE_OR_LTV_ZERO
      );

      userConfig.setUsingAsCollateral(reserve.id, true);
      emit ReserveUsedAsCollateralEnabled(asset, msg.sender);
    } else {
      userConfig.setUsingAsCollateral(reserve.id, false);
      ValidationLogic.validateHFAndLtv(
        reservesData,
        reservesList,
        eModeCategories,
        userConfig,
        asset,
        msg.sender,
        reservesCount,
        priceOracle,
        userEModeCategory
      );

      emit ReserveUsedAsCollateralDisabled(asset, msg.sender);
    }
  }
}



================================================
FILE: contracts/protocol/libraries/logic/ValidationLogic.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {Address} from '../../../dependencies/openzeppelin/contracts/Address.sol';
import {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {IReserveInterestRateStrategy} from '../../../interfaces/IReserveInterestRateStrategy.sol';
import {IStableDebtToken} from '../../../interfaces/IStableDebtToken.sol';
import {IScaledBalanceToken} from '../../../interfaces/IScaledBalanceToken.sol';
import {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';
import {IAToken} from '../../../interfaces/IAToken.sol';
import {IPriceOracleSentinel} from '../../../interfaces/IPriceOracleSentinel.sol';
import {IPoolAddressesProvider} from '../../../interfaces/IPoolAddressesProvider.sol';
import {IAccessControl} from '../../../dependencies/openzeppelin/contracts/IAccessControl.sol';
import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';
import {UserConfiguration} from '../configuration/UserConfiguration.sol';
import {Errors} from '../helpers/Errors.sol';
import {WadRayMath} from '../math/WadRayMath.sol';
import {PercentageMath} from '../math/PercentageMath.sol';
import {DataTypes} from '../types/DataTypes.sol';
import {ReserveLogic} from './ReserveLogic.sol';
import {GenericLogic} from './GenericLogic.sol';
import {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';
import {IncentivizedERC20} from '../../tokenization/base/IncentivizedERC20.sol';

/**
 * @title ReserveLogic library
 * @author Aave
 * @notice Implements functions to validate the different actions of the protocol
 */
library ValidationLogic {
  using ReserveLogic for DataTypes.ReserveData;
  using WadRayMath for uint256;
  using PercentageMath for uint256;
  using SafeCast for uint256;
  using GPv2SafeERC20 for IERC20;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
  using UserConfiguration for DataTypes.UserConfigurationMap;
  using Address for address;

  // Factor to apply to "only-variable-debt" liquidity rate to get threshold for rebalancing, expressed in bps
  // A value of 0.9e4 results in 90%
  uint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 0.9e4;

  // Minimum health factor allowed under any circumstance
  // A value of 0.95e18 results in 0.95
  uint256 public constant MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 0.95e18;

  /**
   * @dev Minimum health factor to consider a user position healthy
   * A value of 1e18 results in 1
   */
  uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1e18;

  /**
   * @dev Role identifier for the role allowed to supply isolated reserves as collateral
   */
  bytes32 public constant ISOLATED_COLLATERAL_SUPPLIER_ROLE =
    keccak256('ISOLATED_COLLATERAL_SUPPLIER');

  /**
   * @notice Validates a supply action.
   * @param reserveCache The cached data of the reserve
   * @param amount The amount to be supplied
   */
  function validateSupply(
    DataTypes.ReserveCache memory reserveCache,
    DataTypes.ReserveData storage reserve,
    uint256 amount
  ) internal view {
    require(amount != 0, Errors.INVALID_AMOUNT);

    (bool isActive, bool isFrozen, , , bool isPaused) = reserveCache
      .reserveConfiguration
      .getFlags();
    require(isActive, Errors.RESERVE_INACTIVE);
    require(!isPaused, Errors.RESERVE_PAUSED);
    require(!isFrozen, Errors.RESERVE_FROZEN);

    uint256 supplyCap = reserveCache.reserveConfiguration.getSupplyCap();
    require(
      supplyCap == 0 ||
        ((IAToken(reserveCache.aTokenAddress).scaledTotalSupply() +
          uint256(reserve.accruedToTreasury)).rayMul(reserveCache.nextLiquidityIndex) + amount) <=
        supplyCap * (10 ** reserveCache.reserveConfiguration.getDecimals()),
      Errors.SUPPLY_CAP_EXCEEDED
    );
  }

  /**
   * @notice Validates a withdraw action.
   * @param reserveCache The cached data of the reserve
   * @param amount The amount to be withdrawn
   * @param userBalance The balance of the user
   */
  function validateWithdraw(
    DataTypes.ReserveCache memory reserveCache,
    uint256 amount,
    uint256 userBalance
  ) internal pure {
    require(amount != 0, Errors.INVALID_AMOUNT);
    require(amount <= userBalance, Errors.NOT_ENOUGH_AVAILABLE_USER_BALANCE);

    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();
    require(isActive, Errors.RESERVE_INACTIVE);
    require(!isPaused, Errors.RESERVE_PAUSED);
  }

  struct ValidateBorrowLocalVars {
    uint256 currentLtv;
    uint256 collateralNeededInBaseCurrency;
    uint256 userCollateralInBaseCurrency;
    uint256 userDebtInBaseCurrency;
    uint256 availableLiquidity;
    uint256 healthFactor;
    uint256 totalDebt;
    uint256 totalSupplyVariableDebt;
    uint256 reserveDecimals;
    uint256 borrowCap;
    uint256 amountInBaseCurrency;
    uint256 assetUnit;
    address eModePriceSource;
    address siloedBorrowingAddress;
    bool isActive;
    bool isFrozen;
    bool isPaused;
    bool borrowingEnabled;
    bool stableRateBorrowingEnabled;
    bool siloedBorrowingEnabled;
  }

  /**
   * @notice Validates a borrow action.
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param params Additional params needed for the validation
   */
  function validateBorrow(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.ValidateBorrowParams memory params
  ) internal view {
    require(params.amount != 0, Errors.INVALID_AMOUNT);

    ValidateBorrowLocalVars memory vars;

    (
      vars.isActive,
      vars.isFrozen,
      vars.borrowingEnabled,
      vars.stableRateBorrowingEnabled,
      vars.isPaused
    ) = params.reserveCache.reserveConfiguration.getFlags();

    require(vars.isActive, Errors.RESERVE_INACTIVE);
    require(!vars.isPaused, Errors.RESERVE_PAUSED);
    require(!vars.isFrozen, Errors.RESERVE_FROZEN);
    require(vars.borrowingEnabled, Errors.BORROWING_NOT_ENABLED);

    require(
      params.priceOracleSentinel == address(0) ||
        IPriceOracleSentinel(params.priceOracleSentinel).isBorrowAllowed(),
      Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED
    );

    //validate interest rate mode
    require(
      params.interestRateMode == DataTypes.InterestRateMode.VARIABLE ||
        params.interestRateMode == DataTypes.InterestRateMode.STABLE,
      Errors.INVALID_INTEREST_RATE_MODE_SELECTED
    );

    vars.reserveDecimals = params.reserveCache.reserveConfiguration.getDecimals();
    vars.borrowCap = params.reserveCache.reserveConfiguration.getBorrowCap();
    unchecked {
      vars.assetUnit = 10 ** vars.reserveDecimals;
    }

    if (vars.borrowCap != 0) {
      vars.totalSupplyVariableDebt = params.reserveCache.currScaledVariableDebt.rayMul(
        params.reserveCache.nextVariableBorrowIndex
      );

      vars.totalDebt =
        params.reserveCache.currTotalStableDebt +
        vars.totalSupplyVariableDebt +
        params.amount;

      unchecked {
        require(vars.totalDebt <= vars.borrowCap * vars.assetUnit, Errors.BORROW_CAP_EXCEEDED);
      }
    }

    if (params.isolationModeActive) {
      // check that the asset being borrowed is borrowable in isolation mode AND
      // the total exposure is no bigger than the collateral debt ceiling
      require(
        params.reserveCache.reserveConfiguration.getBorrowableInIsolation(),
        Errors.ASSET_NOT_BORROWABLE_IN_ISOLATION
      );

      require(
        reservesData[params.isolationModeCollateralAddress].isolationModeTotalDebt +
          (params.amount /
            10 ** (vars.reserveDecimals - ReserveConfiguration.DEBT_CEILING_DECIMALS))
            .toUint128() <=
          params.isolationModeDebtCeiling,
        Errors.DEBT_CEILING_EXCEEDED
      );
    }

    if (params.userEModeCategory != 0) {
      require(
        params.reserveCache.reserveConfiguration.getEModeCategory() == params.userEModeCategory,
        Errors.INCONSISTENT_EMODE_CATEGORY
      );
      vars.eModePriceSource = eModeCategories[params.userEModeCategory].priceSource;
    }

    (
      vars.userCollateralInBaseCurrency,
      vars.userDebtInBaseCurrency,
      vars.currentLtv,
      ,
      vars.healthFactor,

    ) = GenericLogic.calculateUserAccountData(
      reservesData,
      reservesList,
      eModeCategories,
      DataTypes.CalculateUserAccountDataParams({
        userConfig: params.userConfig,
        reservesCount: params.reservesCount,
        user: params.userAddress,
        oracle: params.oracle,
        userEModeCategory: params.userEModeCategory
      })
    );

    require(vars.userCollateralInBaseCurrency != 0, Errors.COLLATERAL_BALANCE_IS_ZERO);
    require(vars.currentLtv != 0, Errors.LTV_VALIDATION_FAILED);

    require(
      vars.healthFactor > HEALTH_FACTOR_LIQUIDATION_THRESHOLD,
      Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD
    );

    vars.amountInBaseCurrency =
      IPriceOracleGetter(params.oracle).getAssetPrice(
        vars.eModePriceSource != address(0) ? vars.eModePriceSource : params.asset
      ) *
      params.amount;
    unchecked {
      vars.amountInBaseCurrency /= vars.assetUnit;
    }

    //add the current already borrowed amount to the amount requested to calculate the total collateral needed.
    vars.collateralNeededInBaseCurrency = (vars.userDebtInBaseCurrency + vars.amountInBaseCurrency)
      .percentDiv(vars.currentLtv); //LTV is calculated in percentage

    require(
      vars.collateralNeededInBaseCurrency <= vars.userCollateralInBaseCurrency,
      Errors.COLLATERAL_CANNOT_COVER_NEW_BORROW
    );

    /**
     * Following conditions need to be met if the user is borrowing at a stable rate:
     * 1. Reserve must be enabled for stable rate borrowing
     * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency
     *    they are borrowing, to prevent abuses.
     * 3. Users will be able to borrow only a portion of the total available liquidity
     */

    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {
      //check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve

      require(vars.stableRateBorrowingEnabled, Errors.STABLE_BORROWING_NOT_ENABLED);

      require(
        !params.userConfig.isUsingAsCollateral(reservesData[params.asset].id) ||
          params.reserveCache.reserveConfiguration.getLtv() == 0 ||
          params.amount > IERC20(params.reserveCache.aTokenAddress).balanceOf(params.userAddress),
        Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY
      );

      vars.availableLiquidity = IERC20(params.asset).balanceOf(params.reserveCache.aTokenAddress);

      //calculate the max available loan size in stable rate mode as a percentage of the
      //available liquidity
      uint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(params.maxStableLoanPercent);

      require(params.amount <= maxLoanSizeStable, Errors.AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE);
    }

    if (params.userConfig.isBorrowingAny()) {
      (vars.siloedBorrowingEnabled, vars.siloedBorrowingAddress) = params
        .userConfig
        .getSiloedBorrowingState(reservesData, reservesList);

      if (vars.siloedBorrowingEnabled) {
        require(vars.siloedBorrowingAddress == params.asset, Errors.SILOED_BORROWING_VIOLATION);
      } else {
        require(
          !params.reserveCache.reserveConfiguration.getSiloedBorrowing(),
          Errors.SILOED_BORROWING_VIOLATION
        );
      }
    }
  }

  /**
   * @notice Validates a repay action.
   * @param reserveCache The cached data of the reserve
   * @param amountSent The amount sent for the repayment. Can be an actual value or uint(-1)
   * @param interestRateMode The interest rate mode of the debt being repaid
   * @param onBehalfOf The address of the user msg.sender is repaying for
   * @param stableDebt The borrow balance of the user
   * @param variableDebt The borrow balance of the user
   */
  function validateRepay(
    DataTypes.ReserveCache memory reserveCache,
    uint256 amountSent,
    DataTypes.InterestRateMode interestRateMode,
    address onBehalfOf,
    uint256 stableDebt,
    uint256 variableDebt
  ) internal view {
    require(amountSent != 0, Errors.INVALID_AMOUNT);
    require(
      amountSent != type(uint256).max || msg.sender == onBehalfOf,
      Errors.NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF
    );

    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();
    require(isActive, Errors.RESERVE_INACTIVE);
    require(!isPaused, Errors.RESERVE_PAUSED);

    require(
      (stableDebt != 0 && interestRateMode == DataTypes.InterestRateMode.STABLE) ||
        (variableDebt != 0 && interestRateMode == DataTypes.InterestRateMode.VARIABLE),
      Errors.NO_DEBT_OF_SELECTED_TYPE
    );
  }

  /**
   * @notice Validates a swap of borrow rate mode.
   * @param reserve The reserve state on which the user is swapping the rate
   * @param reserveCache The cached data of the reserve
   * @param userConfig The user reserves configuration
   * @param stableDebt The stable debt of the user
   * @param variableDebt The variable debt of the user
   * @param currentRateMode The rate mode of the debt being swapped
   */
  function validateSwapRateMode(
    DataTypes.ReserveData storage reserve,
    DataTypes.ReserveCache memory reserveCache,
    DataTypes.UserConfigurationMap storage userConfig,
    uint256 stableDebt,
    uint256 variableDebt,
    DataTypes.InterestRateMode currentRateMode
  ) internal view {
    (bool isActive, bool isFrozen, , bool stableRateEnabled, bool isPaused) = reserveCache
      .reserveConfiguration
      .getFlags();
    require(isActive, Errors.RESERVE_INACTIVE);
    require(!isPaused, Errors.RESERVE_PAUSED);
    require(!isFrozen, Errors.RESERVE_FROZEN);

    if (currentRateMode == DataTypes.InterestRateMode.STABLE) {
      require(stableDebt != 0, Errors.NO_OUTSTANDING_STABLE_DEBT);
    } else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {
      require(variableDebt != 0, Errors.NO_OUTSTANDING_VARIABLE_DEBT);
      /**
       * user wants to swap to stable, before swapping we need to ensure that
       * 1. stable borrow rate is enabled on the reserve
       * 2. user is not trying to abuse the reserve by supplying
       * more collateral than he is borrowing, artificially lowering
       * the interest rate, borrowing at variable, and switching to stable
       */
      require(stableRateEnabled, Errors.STABLE_BORROWING_NOT_ENABLED);

      require(
        !userConfig.isUsingAsCollateral(reserve.id) ||
          reserveCache.reserveConfiguration.getLtv() == 0 ||
          stableDebt + variableDebt > IERC20(reserveCache.aTokenAddress).balanceOf(msg.sender),
        Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY
      );
    } else {
      revert(Errors.INVALID_INTEREST_RATE_MODE_SELECTED);
    }
  }

  /**
   * @notice Validates a stable borrow rate rebalance action.
   * @dev Rebalancing is accepted when depositors are earning <= 90% of their earnings in pure supply/demand market (variable rate only)
   * For this to be the case, there has to be quite large stable debt with an interest rate below the current variable rate.
   * @param reserve The reserve state on which the user is getting rebalanced
   * @param reserveCache The cached state of the reserve
   * @param reserveAddress The address of the reserve
   */
  function validateRebalanceStableBorrowRate(
    DataTypes.ReserveData storage reserve,
    DataTypes.ReserveCache memory reserveCache,
    address reserveAddress
  ) internal view {
    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();
    require(isActive, Errors.RESERVE_INACTIVE);
    require(!isPaused, Errors.RESERVE_PAUSED);

    uint256 totalDebt = IERC20(reserveCache.stableDebtTokenAddress).totalSupply() +
      IERC20(reserveCache.variableDebtTokenAddress).totalSupply();

    (uint256 liquidityRateVariableDebtOnly, , ) = IReserveInterestRateStrategy(
      reserve.interestRateStrategyAddress
    ).calculateInterestRates(
        DataTypes.CalculateInterestRatesParams({
          unbacked: reserve.unbacked,
          liquidityAdded: 0,
          liquidityTaken: 0,
          totalStableDebt: 0,
          totalVariableDebt: totalDebt,
          averageStableBorrowRate: 0,
          reserveFactor: reserveCache.reserveFactor,
          reserve: reserveAddress,
          aToken: reserveCache.aTokenAddress
        })
      );

    require(
      reserveCache.currLiquidityRate <=
        liquidityRateVariableDebtOnly.percentMul(REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD),
      Errors.INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET
    );
  }

  /**
   * @notice Validates the action of setting an asset as collateral.
   * @param reserveCache The cached data of the reserve
   * @param userBalance The balance of the user
   */
  function validateSetUseReserveAsCollateral(
    DataTypes.ReserveCache memory reserveCache,
    uint256 userBalance
  ) internal pure {
    require(userBalance != 0, Errors.UNDERLYING_BALANCE_ZERO);

    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();
    require(isActive, Errors.RESERVE_INACTIVE);
    require(!isPaused, Errors.RESERVE_PAUSED);
  }

  /**
   * @notice Validates a flashloan action.
   * @param reservesData The state of all the reserves
   * @param assets The assets being flash-borrowed
   * @param amounts The amounts for each asset being borrowed
   */
  function validateFlashloan(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    address[] memory assets,
    uint256[] memory amounts
  ) internal view {
    require(assets.length == amounts.length, Errors.INCONSISTENT_FLASHLOAN_PARAMS);
    for (uint256 i = 0; i < assets.length; i++) {
      validateFlashloanSimple(reservesData[assets[i]]);
    }
  }

  /**
   * @notice Validates a flashloan action.
   * @param reserve The state of the reserve
   */
  function validateFlashloanSimple(DataTypes.ReserveData storage reserve) internal view {
    DataTypes.ReserveConfigurationMap memory configuration = reserve.configuration;
    require(!configuration.getPaused(), Errors.RESERVE_PAUSED);
    require(configuration.getActive(), Errors.RESERVE_INACTIVE);
    require(configuration.getFlashLoanEnabled(), Errors.FLASHLOAN_DISABLED);
  }

  struct ValidateLiquidationCallLocalVars {
    bool collateralReserveActive;
    bool collateralReservePaused;
    bool principalReserveActive;
    bool principalReservePaused;
    bool isCollateralEnabled;
  }

  /**
   * @notice Validates the liquidation action.
   * @param userConfig The user configuration mapping
   * @param collateralReserve The reserve data of the collateral
   * @param params Additional parameters needed for the validation
   */
  function validateLiquidationCall(
    DataTypes.UserConfigurationMap storage userConfig,
    DataTypes.ReserveData storage collateralReserve,
    DataTypes.ValidateLiquidationCallParams memory params
  ) internal view {
    ValidateLiquidationCallLocalVars memory vars;

    (vars.collateralReserveActive, , , , vars.collateralReservePaused) = collateralReserve
      .configuration
      .getFlags();

    (vars.principalReserveActive, , , , vars.principalReservePaused) = params
      .debtReserveCache
      .reserveConfiguration
      .getFlags();

    require(vars.collateralReserveActive && vars.principalReserveActive, Errors.RESERVE_INACTIVE);
    require(!vars.collateralReservePaused && !vars.principalReservePaused, Errors.RESERVE_PAUSED);

    require(
      params.priceOracleSentinel == address(0) ||
        params.healthFactor < MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD ||
        IPriceOracleSentinel(params.priceOracleSentinel).isLiquidationAllowed(),
      Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED
    );

    require(
      params.healthFactor < HEALTH_FACTOR_LIQUIDATION_THRESHOLD,
      Errors.HEALTH_FACTOR_NOT_BELOW_THRESHOLD
    );

    vars.isCollateralEnabled =
      collateralReserve.configuration.getLiquidationThreshold() != 0 &&
      userConfig.isUsingAsCollateral(collateralReserve.id);

    //if collateral isn't enabled as collateral by user, it cannot be liquidated
    require(vars.isCollateralEnabled, Errors.COLLATERAL_CANNOT_BE_LIQUIDATED);
    require(params.totalDebt != 0, Errors.SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER);
  }

  /**
   * @notice Validates the health factor of a user.
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param userConfig The state of the user for the specific reserve
   * @param user The user to validate health factor of
   * @param userEModeCategory The users active efficiency mode category
   * @param reservesCount The number of available reserves
   * @param oracle The price oracle
   */
  function validateHealthFactor(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.UserConfigurationMap memory userConfig,
    address user,
    uint8 userEModeCategory,
    uint256 reservesCount,
    address oracle
  ) internal view returns (uint256, bool) {
    (, , , , uint256 healthFactor, bool hasZeroLtvCollateral) = GenericLogic
      .calculateUserAccountData(
        reservesData,
        reservesList,
        eModeCategories,
        DataTypes.CalculateUserAccountDataParams({
          userConfig: userConfig,
          reservesCount: reservesCount,
          user: user,
          oracle: oracle,
          userEModeCategory: userEModeCategory
        })
      );

    require(
      healthFactor >= HEALTH_FACTOR_LIQUIDATION_THRESHOLD,
      Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD
    );

    return (healthFactor, hasZeroLtvCollateral);
  }

  /**
   * @notice Validates the health factor of a user and the ltv of the asset being withdrawn.
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories The configuration of all the efficiency mode categories
   * @param userConfig The state of the user for the specific reserve
   * @param asset The asset for which the ltv will be validated
   * @param from The user from which the aTokens are being transferred
   * @param reservesCount The number of available reserves
   * @param oracle The price oracle
   * @param userEModeCategory The users active efficiency mode category
   */
  function validateHFAndLtv(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.UserConfigurationMap memory userConfig,
    address asset,
    address from,
    uint256 reservesCount,
    address oracle,
    uint8 userEModeCategory
  ) internal view {
    DataTypes.ReserveData memory reserve = reservesData[asset];

    (, bool hasZeroLtvCollateral) = validateHealthFactor(
      reservesData,
      reservesList,
      eModeCategories,
      userConfig,
      from,
      userEModeCategory,
      reservesCount,
      oracle
    );

    require(
      !hasZeroLtvCollateral || reserve.configuration.getLtv() == 0,
      Errors.LTV_VALIDATION_FAILED
    );
  }

  /**
   * @notice Validates a transfer action.
   * @param reserve The reserve object
   */
  function validateTransfer(DataTypes.ReserveData storage reserve) internal view {
    require(!reserve.configuration.getPaused(), Errors.RESERVE_PAUSED);
  }

  /**
   * @notice Validates a drop reserve action.
   * @param reservesList The addresses of all the active reserves
   * @param reserve The reserve object
   * @param asset The address of the reserve's underlying asset
   */
  function validateDropReserve(
    mapping(uint256 => address) storage reservesList,
    DataTypes.ReserveData storage reserve,
    address asset
  ) internal view {
    require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
    require(reserve.id != 0 || reservesList[0] == asset, Errors.ASSET_NOT_LISTED);
    require(IERC20(reserve.stableDebtTokenAddress).totalSupply() == 0, Errors.STABLE_DEBT_NOT_ZERO);
    require(
      IERC20(reserve.variableDebtTokenAddress).totalSupply() == 0,
      Errors.VARIABLE_DEBT_SUPPLY_NOT_ZERO
    );
    require(
      IERC20(reserve.aTokenAddress).totalSupply() == 0 && reserve.accruedToTreasury == 0,
      Errors.UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO
    );
  }

  /**
   * @notice Validates the action of setting efficiency mode.
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param eModeCategories a mapping storing configurations for all efficiency mode categories
   * @param userConfig the user configuration
   * @param reservesCount The total number of valid reserves
   * @param categoryId The id of the category
   */
  function validateSetUserEMode(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
    DataTypes.UserConfigurationMap memory userConfig,
    uint256 reservesCount,
    uint8 categoryId
  ) internal view {
    // category is invalid if the liq threshold is not set
    require(
      categoryId == 0 || eModeCategories[categoryId].liquidationThreshold != 0,
      Errors.INCONSISTENT_EMODE_CATEGORY
    );

    // eMode can always be enabled if the user hasn't supplied anything
    if (userConfig.isEmpty()) {
      return;
    }

    // if user is trying to set another category than default we require that
    // either the user is not borrowing, or it's borrowing assets of categoryId
    if (categoryId != 0) {
      unchecked {
        for (uint256 i = 0; i < reservesCount; i++) {
          if (userConfig.isBorrowing(i)) {
            DataTypes.ReserveConfigurationMap memory configuration = reservesData[reservesList[i]]
              .configuration;
            require(
              configuration.getEModeCategory() == categoryId,
              Errors.INCONSISTENT_EMODE_CATEGORY
            );
          }
        }
      }
    }
  }

  /**
   * @notice Validates the action of activating the asset as collateral.
   * @dev Only possible if the asset has non-zero LTV and the user is not in isolation mode
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param userConfig the user configuration
   * @param reserveConfig The reserve configuration
   * @return True if the asset can be activated as collateral, false otherwise
   */
  function validateUseAsCollateral(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    DataTypes.UserConfigurationMap storage userConfig,
    DataTypes.ReserveConfigurationMap memory reserveConfig
  ) internal view returns (bool) {
    if (reserveConfig.getLtv() == 0) {
      return false;
    }
    if (!userConfig.isUsingAsCollateralAny()) {
      return true;
    }
    (bool isolationModeActive, , ) = userConfig.getIsolationModeState(reservesData, reservesList);

    return (!isolationModeActive && reserveConfig.getDebtCeiling() == 0);
  }

  /**
   * @notice Validates if an asset should be automatically activated as collateral in the following actions: supply,
   * transfer, mint unbacked, and liquidate
   * @dev This is used to ensure that isolated assets are not enabled as collateral automatically
   * @param reservesData The state of all the reserves
   * @param reservesList The addresses of all the active reserves
   * @param userConfig the user configuration
   * @param reserveConfig The reserve configuration
   * @return True if the asset can be activated as collateral, false otherwise
   */
  function validateAutomaticUseAsCollateral(
    mapping(address => DataTypes.ReserveData) storage reservesData,
    mapping(uint256 => address) storage reservesList,
    DataTypes.UserConfigurationMap storage userConfig,
    DataTypes.ReserveConfigurationMap memory reserveConfig,
    address aTokenAddress
  ) internal view returns (bool) {
    if (reserveConfig.getDebtCeiling() != 0) {
      // ensures only the ISOLATED_COLLATERAL_SUPPLIER_ROLE can enable collateral as side-effect of an action
      IPoolAddressesProvider addressesProvider = IncentivizedERC20(aTokenAddress)
        .POOL()
        .ADDRESSES_PROVIDER();
      if (
        !IAccessControl(addressesProvider.getACLManager()).hasRole(
          ISOLATED_COLLATERAL_SUPPLIER_ROLE,
          msg.sender
        )
      ) return false;
    }
    return validateUseAsCollateral(reservesData, reservesList, userConfig, reserveConfig);
  }
}



================================================
FILE: contracts/protocol/libraries/math/MathUtils.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {WadRayMath} from './WadRayMath.sol';

/**
 * @title MathUtils library
 * @author Aave
 * @notice Provides functions to perform linear and compounded interest calculations
 */
library MathUtils {
  using WadRayMath for uint256;

  /// @dev Ignoring leap years
  uint256 internal constant SECONDS_PER_YEAR = 365 days;

  /**
   * @dev Function to calculate the interest accumulated using a linear interest rate formula
   * @param rate The interest rate, in ray
   * @param lastUpdateTimestamp The timestamp of the last update of the interest
   * @return The interest rate linearly accumulated during the timeDelta, in ray
   */
  function calculateLinearInterest(
    uint256 rate,
    uint40 lastUpdateTimestamp
  ) internal view returns (uint256) {
    //solium-disable-next-line
    uint256 result = rate * (block.timestamp - uint256(lastUpdateTimestamp));
    unchecked {
      result = result / SECONDS_PER_YEAR;
    }

    return WadRayMath.RAY + result;
  }

  /**
   * @dev Function to calculate the interest using a compounded interest rate formula
   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:
   *
   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...
   *
   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great
   * gas cost reductions. The whitepaper contains reference to the approximation and a table showing the margin of
   * error per different time periods
   *
   * @param rate The interest rate, in ray
   * @param lastUpdateTimestamp The timestamp of the last update of the interest
   * @return The interest rate compounded during the timeDelta, in ray
   */
  function calculateCompoundedInterest(
    uint256 rate,
    uint40 lastUpdateTimestamp,
    uint256 currentTimestamp
  ) internal pure returns (uint256) {
    //solium-disable-next-line
    uint256 exp = currentTimestamp - uint256(lastUpdateTimestamp);

    if (exp == 0) {
      return WadRayMath.RAY;
    }

    uint256 expMinusOne;
    uint256 expMinusTwo;
    uint256 basePowerTwo;
    uint256 basePowerThree;
    unchecked {
      expMinusOne = exp - 1;

      expMinusTwo = exp > 2 ? exp - 2 : 0;

      basePowerTwo = rate.rayMul(rate) / (SECONDS_PER_YEAR * SECONDS_PER_YEAR);
      basePowerThree = basePowerTwo.rayMul(rate) / SECONDS_PER_YEAR;
    }

    uint256 secondTerm = exp * expMinusOne * basePowerTwo;
    unchecked {
      secondTerm /= 2;
    }
    uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;
    unchecked {
      thirdTerm /= 6;
    }

    return WadRayMath.RAY + (rate * exp) / SECONDS_PER_YEAR + secondTerm + thirdTerm;
  }

  /**
   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp
   * @param rate The interest rate (in ray)
   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated
   * @return The interest rate compounded between lastUpdateTimestamp and current block timestamp, in ray
   */
  function calculateCompoundedInterest(
    uint256 rate,
    uint40 lastUpdateTimestamp
  ) internal view returns (uint256) {
    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);
  }
}



================================================
FILE: contracts/protocol/libraries/math/PercentageMath.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

/**
 * @title PercentageMath library
 * @author Aave
 * @notice Provides functions to perform percentage calculations
 * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR
 * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.
 */
library PercentageMath {
  // Maximum percentage factor (100.00%)
  uint256 internal constant PERCENTAGE_FACTOR = 1e4;

  // Half percentage factor (50.00%)
  uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;

  /**
   * @notice Executes a percentage multiplication
   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328
   * @param value The value of which the percentage needs to be calculated
   * @param percentage The percentage of the value to be calculated
   * @return result value percentmul percentage
   */
  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256 result) {
    // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage
    assembly {
      if iszero(
        or(
          iszero(percentage),
          iszero(gt(value, div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)))
        )
      ) {
        revert(0, 0)
      }

      result := div(add(mul(value, percentage), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)
    }
  }

  /**
   * @notice Executes a percentage division
   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328
   * @param value The value of which the percentage needs to be calculated
   * @param percentage The percentage of the value to be calculated
   * @return result value percentdiv percentage
   */
  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256 result) {
    // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR
    assembly {
      if or(
        iszero(percentage),
        iszero(iszero(gt(value, div(sub(not(0), div(percentage, 2)), PERCENTAGE_FACTOR))))
      ) {
        revert(0, 0)
      }

      result := div(add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)), percentage)
    }
  }
}



================================================
FILE: contracts/protocol/libraries/math/WadRayMath.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

/**
 * @title WadRayMath library
 * @author Aave
 * @notice Provides functions to perform calculations with Wad and Ray units
 * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers
 * with 27 digits of precision)
 * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.
 */
library WadRayMath {
  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly
  uint256 internal constant WAD = 1e18;
  uint256 internal constant HALF_WAD = 0.5e18;

  uint256 internal constant RAY = 1e27;
  uint256 internal constant HALF_RAY = 0.5e27;

  uint256 internal constant WAD_RAY_RATIO = 1e9;

  /**
   * @dev Multiplies two wad, rounding half up to the nearest wad
   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328
   * @param a Wad
   * @param b Wad
   * @return c = a*b, in wad
   */
  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {
    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b
    assembly {
      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {
        revert(0, 0)
      }

      c := div(add(mul(a, b), HALF_WAD), WAD)
    }
  }

  /**
   * @dev Divides two wad, rounding half up to the nearest wad
   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328
   * @param a Wad
   * @param b Wad
   * @return c = a/b, in wad
   */
  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {
    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD
    assembly {
      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {
        revert(0, 0)
      }

      c := div(add(mul(a, WAD), div(b, 2)), b)
    }
  }

  /**
   * @notice Multiplies two ray, rounding half up to the nearest ray
   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328
   * @param a Ray
   * @param b Ray
   * @return c = a raymul b
   */
  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {
    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b
    assembly {
      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {
        revert(0, 0)
      }

      c := div(add(mul(a, b), HALF_RAY), RAY)
    }
  }

  /**
   * @notice Divides two ray, rounding half up to the nearest ray
   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328
   * @param a Ray
   * @param b Ray
   * @return c = a raydiv b
   */
  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {
    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY
    assembly {
      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {
        revert(0, 0)
      }

      c := div(add(mul(a, RAY), div(b, 2)), b)
    }
  }

  /**
   * @dev Casts ray down to wad
   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328
   * @param a Ray
   * @return b = a converted to wad, rounded half up to the nearest wad
   */
  function rayToWad(uint256 a) internal pure returns (uint256 b) {
    assembly {
      b := div(a, WAD_RAY_RATIO)
      let remainder := mod(a, WAD_RAY_RATIO)
      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {
        b := add(b, 1)
      }
    }
  }

  /**
   * @dev Converts wad up to ray
   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328
   * @param a Wad
   * @return b = a converted in ray
   */
  function wadToRay(uint256 a) internal pure returns (uint256 b) {
    // to avoid overflow, b/WAD_RAY_RATIO == a
    assembly {
      b := mul(a, WAD_RAY_RATIO)

      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {
        revert(0, 0)
      }
    }
  }
}



================================================
FILE: contracts/protocol/libraries/types/ConfiguratorInputTypes.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

library ConfiguratorInputTypes {
  struct InitReserveInput {
    address aTokenImpl;
    address stableDebtTokenImpl;
    address variableDebtTokenImpl;
    uint8 underlyingAssetDecimals;
    address interestRateStrategyAddress;
    address underlyingAsset;
    address treasury;
    address incentivesController;
    string aTokenName;
    string aTokenSymbol;
    string variableDebtTokenName;
    string variableDebtTokenSymbol;
    string stableDebtTokenName;
    string stableDebtTokenSymbol;
    bytes params;
  }

  struct UpdateATokenInput {
    address asset;
    address treasury;
    address incentivesController;
    string name;
    string symbol;
    address implementation;
    bytes params;
  }

  struct UpdateDebtTokenInput {
    address asset;
    address incentivesController;
    string name;
    string symbol;
    address implementation;
    bytes params;
  }
}



================================================
FILE: contracts/protocol/libraries/types/DataTypes.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

library DataTypes {
  struct ReserveData {
    //stores the reserve configuration
    ReserveConfigurationMap configuration;
    //the liquidity index. Expressed in ray
    uint128 liquidityIndex;
    //the current supply rate. Expressed in ray
    uint128 currentLiquidityRate;
    //variable borrow index. Expressed in ray
    uint128 variableBorrowIndex;
    //the current variable borrow rate. Expressed in ray
    uint128 currentVariableBorrowRate;
    //the current stable borrow rate. Expressed in ray
    uint128 currentStableBorrowRate;
    //timestamp of last update
    uint40 lastUpdateTimestamp;
    //the id of the reserve. Represents the position in the list of the active reserves
    uint16 id;
    //aToken address
    address aTokenAddress;
    //stableDebtToken address
    address stableDebtTokenAddress;
    //variableDebtToken address
    address variableDebtTokenAddress;
    //address of the interest rate strategy
    address interestRateStrategyAddress;
    //the current treasury balance, scaled
    uint128 accruedToTreasury;
    //the outstanding unbacked aTokens minted through the bridging feature
    uint128 unbacked;
    //the outstanding debt borrowed against this asset in isolation mode
    uint128 isolationModeTotalDebt;
  }

  struct ReserveConfigurationMap {
    //bit 0-15: LTV
    //bit 16-31: Liq. threshold
    //bit 32-47: Liq. bonus
    //bit 48-55: Decimals
    //bit 56: reserve is active
    //bit 57: reserve is frozen
    //bit 58: borrowing is enabled
    //bit 59: stable rate borrowing enabled
    //bit 60: asset is paused
    //bit 61: borrowing in isolation mode is enabled
    //bit 62: siloed borrowing enabled
    //bit 63: flashloaning enabled
    //bit 64-79: reserve factor
    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap
    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap
    //bit 152-167 liquidation protocol fee
    //bit 168-175 eMode category
    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled
    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
    //bit 252-255 unused

    uint256 data;
  }

  struct UserConfigurationMap {
    /**
     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.
     * The first bit indicates if an asset is used as collateral by the user, the second whether an
     * asset is borrowed by the user.
     */
    uint256 data;
  }

  struct EModeCategory {
    // each eMode category has a custom ltv and liquidation threshold
    uint16 ltv;
    uint16 liquidationThreshold;
    uint16 liquidationBonus;
    // each eMode category may or may not have a custom oracle to override the individual assets price oracles
    address priceSource;
    string label;
  }

  enum InterestRateMode {NONE, STABLE, VARIABLE}

  struct ReserveCache {
    uint256 currScaledVariableDebt;
    uint256 nextScaledVariableDebt;
    uint256 currPrincipalStableDebt;
    uint256 currAvgStableBorrowRate;
    uint256 currTotalStableDebt;
    uint256 nextAvgStableBorrowRate;
    uint256 nextTotalStableDebt;
    uint256 currLiquidityIndex;
    uint256 nextLiquidityIndex;
    uint256 currVariableBorrowIndex;
    uint256 nextVariableBorrowIndex;
    uint256 currLiquidityRate;
    uint256 currVariableBorrowRate;
    uint256 reserveFactor;
    ReserveConfigurationMap reserveConfiguration;
    address aTokenAddress;
    address stableDebtTokenAddress;
    address variableDebtTokenAddress;
    uint40 reserveLastUpdateTimestamp;
    uint40 stableDebtLastUpdateTimestamp;
  }

  struct ExecuteLiquidationCallParams {
    uint256 reservesCount;
    uint256 debtToCover;
    address collateralAsset;
    address debtAsset;
    address user;
    bool receiveAToken;
    address priceOracle;
    uint8 userEModeCategory;
    address priceOracleSentinel;
  }

  struct ExecuteSupplyParams {
    address asset;
    uint256 amount;
    address onBehalfOf;
    uint16 referralCode;
  }

  struct ExecuteBorrowParams {
    address asset;
    address user;
    address onBehalfOf;
    uint256 amount;
    InterestRateMode interestRateMode;
    uint16 referralCode;
    bool releaseUnderlying;
    uint256 maxStableRateBorrowSizePercent;
    uint256 reservesCount;
    address oracle;
    uint8 userEModeCategory;
    address priceOracleSentinel;
  }

  struct ExecuteRepayParams {
    address asset;
    uint256 amount;
    InterestRateMode interestRateMode;
    address onBehalfOf;
    bool useATokens;
  }

  struct ExecuteWithdrawParams {
    address asset;
    uint256 amount;
    address to;
    uint256 reservesCount;
    address oracle;
    uint8 userEModeCategory;
  }

  struct ExecuteSetUserEModeParams {
    uint256 reservesCount;
    address oracle;
    uint8 categoryId;
  }

  struct FinalizeTransferParams {
    address asset;
    address from;
    address to;
    uint256 amount;
    uint256 balanceFromBefore;
    uint256 balanceToBefore;
    uint256 reservesCount;
    address oracle;
    uint8 fromEModeCategory;
  }

  struct FlashloanParams {
    address receiverAddress;
    address[] assets;
    uint256[] amounts;
    uint256[] interestRateModes;
    address onBehalfOf;
    bytes params;
    uint16 referralCode;
    uint256 flashLoanPremiumToProtocol;
    uint256 flashLoanPremiumTotal;
    uint256 maxStableRateBorrowSizePercent;
    uint256 reservesCount;
    address addressesProvider;
    uint8 userEModeCategory;
    bool isAuthorizedFlashBorrower;
  }

  struct FlashloanSimpleParams {
    address receiverAddress;
    address asset;
    uint256 amount;
    bytes params;
    uint16 referralCode;
    uint256 flashLoanPremiumToProtocol;
    uint256 flashLoanPremiumTotal;
  }

  struct FlashLoanRepaymentParams {
    uint256 amount;
    uint256 totalPremium;
    uint256 flashLoanPremiumToProtocol;
    address asset;
    address receiverAddress;
    uint16 referralCode;
  }

  struct CalculateUserAccountDataParams {
    UserConfigurationMap userConfig;
    uint256 reservesCount;
    address user;
    address oracle;
    uint8 userEModeCategory;
  }

  struct ValidateBorrowParams {
    ReserveCache reserveCache;
    UserConfigurationMap userConfig;
    address asset;
    address userAddress;
    uint256 amount;
    InterestRateMode interestRateMode;
    uint256 maxStableLoanPercent;
    uint256 reservesCount;
    address oracle;
    uint8 userEModeCategory;
    address priceOracleSentinel;
    bool isolationModeActive;
    address isolationModeCollateralAddress;
    uint256 isolationModeDebtCeiling;
  }

  struct ValidateLiquidationCallParams {
    ReserveCache debtReserveCache;
    uint256 totalDebt;
    uint256 healthFactor;
    address priceOracleSentinel;
  }

  struct CalculateInterestRatesParams {
    uint256 unbacked;
    uint256 liquidityAdded;
    uint256 liquidityTaken;
    uint256 totalStableDebt;
    uint256 totalVariableDebt;
    uint256 averageStableBorrowRate;
    uint256 reserveFactor;
    address reserve;
    address aToken;
  }

  struct InitReserveParams {
    address asset;
    address aTokenAddress;
    address stableDebtAddress;
    address variableDebtAddress;
    address interestRateStrategyAddress;
    uint16 reservesCount;
    uint16 maxNumberReserves;
  }
}



================================================
FILE: contracts/protocol/pool/DefaultReserveInterestRateStrategy.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';
import {WadRayMath} from '../libraries/math/WadRayMath.sol';
import {PercentageMath} from '../libraries/math/PercentageMath.sol';
import {DataTypes} from '../libraries/types/DataTypes.sol';
import {Errors} from '../libraries/helpers/Errors.sol';
import {IDefaultInterestRateStrategy} from '../../interfaces/IDefaultInterestRateStrategy.sol';
import {IReserveInterestRateStrategy} from '../../interfaces/IReserveInterestRateStrategy.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';

/**
 * @title DefaultReserveInterestRateStrategy contract
 * @author Aave
 * @notice Implements the calculation of the interest rates depending on the reserve state
 * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_USAGE_RATIO`
 * point of usage and another from that one to 100%.
 * - An instance of this same contract, can't be used across different Aave markets, due to the caching
 *   of the PoolAddressesProvider
 */
contract DefaultReserveInterestRateStrategy is IDefaultInterestRateStrategy {
  using WadRayMath for uint256;
  using PercentageMath for uint256;

  /// @inheritdoc IDefaultInterestRateStrategy
  uint256 public immutable OPTIMAL_USAGE_RATIO;

  /// @inheritdoc IDefaultInterestRateStrategy
  uint256 public immutable OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO;

  /// @inheritdoc IDefaultInterestRateStrategy
  uint256 public immutable MAX_EXCESS_USAGE_RATIO;

  /// @inheritdoc IDefaultInterestRateStrategy
  uint256 public immutable MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO;

  IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;

  // Base variable borrow rate when usage rate = 0. Expressed in ray
  uint256 internal immutable _baseVariableBorrowRate;

  // Slope of the variable interest curve when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO. Expressed in ray
  uint256 internal immutable _variableRateSlope1;

  // Slope of the variable interest curve when usage ratio > OPTIMAL_USAGE_RATIO. Expressed in ray
  uint256 internal immutable _variableRateSlope2;

  // Slope of the stable interest curve when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO. Expressed in ray
  uint256 internal immutable _stableRateSlope1;

  // Slope of the stable interest curve when usage ratio > OPTIMAL_USAGE_RATIO. Expressed in ray
  uint256 internal immutable _stableRateSlope2;

  // Premium on top of `_variableRateSlope1` for base stable borrowing rate
  uint256 internal immutable _baseStableRateOffset;

  // Additional premium applied to stable rate when stable debt surpass `OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO`
  uint256 internal immutable _stableRateExcessOffset;

  /**
   * @dev Constructor.
   * @param provider The address of the PoolAddressesProvider contract
   * @param optimalUsageRatio The optimal usage ratio
   * @param baseVariableBorrowRate The base variable borrow rate
   * @param variableRateSlope1 The variable rate slope below optimal usage ratio
   * @param variableRateSlope2 The variable rate slope above optimal usage ratio
   * @param stableRateSlope1 The stable rate slope below optimal usage ratio
   * @param stableRateSlope2 The stable rate slope above optimal usage ratio
   * @param baseStableRateOffset The premium on top of variable rate for base stable borrowing rate
   * @param stableRateExcessOffset The premium on top of stable rate when there stable debt surpass the threshold
   * @param optimalStableToTotalDebtRatio The optimal stable debt to total debt ratio of the reserve
   */
  constructor(
    IPoolAddressesProvider provider,
    uint256 optimalUsageRatio,
    uint256 baseVariableBorrowRate,
    uint256 variableRateSlope1,
    uint256 variableRateSlope2,
    uint256 stableRateSlope1,
    uint256 stableRateSlope2,
    uint256 baseStableRateOffset,
    uint256 stableRateExcessOffset,
    uint256 optimalStableToTotalDebtRatio
  ) {
    require(WadRayMath.RAY >= optimalUsageRatio, Errors.INVALID_OPTIMAL_USAGE_RATIO);
    require(
      WadRayMath.RAY >= optimalStableToTotalDebtRatio,
      Errors.INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO
    );
    OPTIMAL_USAGE_RATIO = optimalUsageRatio;
    MAX_EXCESS_USAGE_RATIO = WadRayMath.RAY - optimalUsageRatio;
    OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = optimalStableToTotalDebtRatio;
    MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO = WadRayMath.RAY - optimalStableToTotalDebtRatio;
    ADDRESSES_PROVIDER = provider;
    _baseVariableBorrowRate = baseVariableBorrowRate;
    _variableRateSlope1 = variableRateSlope1;
    _variableRateSlope2 = variableRateSlope2;
    _stableRateSlope1 = stableRateSlope1;
    _stableRateSlope2 = stableRateSlope2;
    _baseStableRateOffset = baseStableRateOffset;
    _stableRateExcessOffset = stableRateExcessOffset;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getVariableRateSlope1() external view returns (uint256) {
    return _variableRateSlope1;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getVariableRateSlope2() external view returns (uint256) {
    return _variableRateSlope2;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getStableRateSlope1() external view returns (uint256) {
    return _stableRateSlope1;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getStableRateSlope2() external view returns (uint256) {
    return _stableRateSlope2;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getStableRateExcessOffset() external view returns (uint256) {
    return _stableRateExcessOffset;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getBaseStableBorrowRate() public view returns (uint256) {
    return _variableRateSlope1 + _baseStableRateOffset;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getBaseVariableBorrowRate() external view override returns (uint256) {
    return _baseVariableBorrowRate;
  }

  /// @inheritdoc IDefaultInterestRateStrategy
  function getMaxVariableBorrowRate() external view override returns (uint256) {
    return _baseVariableBorrowRate + _variableRateSlope1 + _variableRateSlope2;
  }

  struct CalcInterestRatesLocalVars {
    uint256 availableLiquidity;
    uint256 totalDebt;
    uint256 currentVariableBorrowRate;
    uint256 currentStableBorrowRate;
    uint256 currentLiquidityRate;
    uint256 borrowUsageRatio;
    uint256 supplyUsageRatio;
    uint256 stableToTotalDebtRatio;
    uint256 availableLiquidityPlusDebt;
  }

  /// @inheritdoc IReserveInterestRateStrategy
  function calculateInterestRates(
    DataTypes.CalculateInterestRatesParams memory params
  ) public view override returns (uint256, uint256, uint256) {
    CalcInterestRatesLocalVars memory vars;

    vars.totalDebt = params.totalStableDebt + params.totalVariableDebt;

    vars.currentLiquidityRate = 0;
    vars.currentVariableBorrowRate = _baseVariableBorrowRate;
    vars.currentStableBorrowRate = getBaseStableBorrowRate();

    if (vars.totalDebt != 0) {
      vars.stableToTotalDebtRatio = params.totalStableDebt.rayDiv(vars.totalDebt);
      vars.availableLiquidity =
        IERC20(params.reserve).balanceOf(params.aToken) +
        params.liquidityAdded -
        params.liquidityTaken;

      vars.availableLiquidityPlusDebt = vars.availableLiquidity + vars.totalDebt;
      vars.borrowUsageRatio = vars.totalDebt.rayDiv(vars.availableLiquidityPlusDebt);
      vars.supplyUsageRatio = vars.totalDebt.rayDiv(
        vars.availableLiquidityPlusDebt + params.unbacked
      );
    }

    if (vars.borrowUsageRatio > OPTIMAL_USAGE_RATIO) {
      uint256 excessBorrowUsageRatio = (vars.borrowUsageRatio - OPTIMAL_USAGE_RATIO).rayDiv(
        MAX_EXCESS_USAGE_RATIO
      );

      vars.currentStableBorrowRate +=
        _stableRateSlope1 +
        _stableRateSlope2.rayMul(excessBorrowUsageRatio);

      vars.currentVariableBorrowRate +=
        _variableRateSlope1 +
        _variableRateSlope2.rayMul(excessBorrowUsageRatio);
    } else {
      vars.currentStableBorrowRate += _stableRateSlope1.rayMul(vars.borrowUsageRatio).rayDiv(
        OPTIMAL_USAGE_RATIO
      );

      vars.currentVariableBorrowRate += _variableRateSlope1.rayMul(vars.borrowUsageRatio).rayDiv(
        OPTIMAL_USAGE_RATIO
      );
    }

    if (vars.stableToTotalDebtRatio > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO) {
      uint256 excessStableDebtRatio = (vars.stableToTotalDebtRatio -
        OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO).rayDiv(MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO);
      vars.currentStableBorrowRate += _stableRateExcessOffset.rayMul(excessStableDebtRatio);
    }

    vars.currentLiquidityRate = _getOverallBorrowRate(
      params.totalStableDebt,
      params.totalVariableDebt,
      vars.currentVariableBorrowRate,
      params.averageStableBorrowRate
    ).rayMul(vars.supplyUsageRatio).percentMul(
        PercentageMath.PERCENTAGE_FACTOR - params.reserveFactor
      );

    return (
      vars.currentLiquidityRate,
      vars.currentStableBorrowRate,
      vars.currentVariableBorrowRate
    );
  }

  /**
   * @dev Calculates the overall borrow rate as the weighted average between the total variable debt and total stable
   * debt
   * @param totalStableDebt The total borrowed from the reserve at a stable rate
   * @param totalVariableDebt The total borrowed from the reserve at a variable rate
   * @param currentVariableBorrowRate The current variable borrow rate of the reserve
   * @param currentAverageStableBorrowRate The current weighted average of all the stable rate loans
   * @return The weighted averaged borrow rate
   */
  function _getOverallBorrowRate(
    uint256 totalStableDebt,
    uint256 totalVariableDebt,
    uint256 currentVariableBorrowRate,
    uint256 currentAverageStableBorrowRate
  ) internal pure returns (uint256) {
    uint256 totalDebt = totalStableDebt + totalVariableDebt;

    if (totalDebt == 0) return 0;

    uint256 weightedVariableRate = totalVariableDebt.wadToRay().rayMul(currentVariableBorrowRate);

    uint256 weightedStableRate = totalStableDebt.wadToRay().rayMul(currentAverageStableBorrowRate);

    uint256 overallBorrowRate = (weightedVariableRate + weightedStableRate).rayDiv(
      totalDebt.wadToRay()
    );

    return overallBorrowRate;
  }
}



================================================
FILE: contracts/protocol/pool/L2Pool.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {Pool} from './Pool.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {IL2Pool} from '../../interfaces/IL2Pool.sol';
import {CalldataLogic} from '../libraries/logic/CalldataLogic.sol';

/**
 * @title L2Pool
 * @author Aave
 * @notice Calldata optimized extension of the Pool contract allowing users to pass compact calldata representation
 * to reduce transaction costs on rollups.
 */
contract L2Pool is Pool, IL2Pool {
  /**
   * @dev Constructor.
   * @param provider The address of the PoolAddressesProvider contract
   */
  constructor(IPoolAddressesProvider provider) Pool(provider) {
    // Intentionally left blank
  }

  /// @inheritdoc IL2Pool
  function supply(bytes32 args) external override {
    (address asset, uint256 amount, uint16 referralCode) = CalldataLogic.decodeSupplyParams(
      _reservesList,
      args
    );

    supply(asset, amount, msg.sender, referralCode);
  }

  /// @inheritdoc IL2Pool
  function supplyWithPermit(bytes32 args, bytes32 r, bytes32 s) external override {
    (address asset, uint256 amount, uint16 referralCode, uint256 deadline, uint8 v) = CalldataLogic
      .decodeSupplyWithPermitParams(_reservesList, args);

    supplyWithPermit(asset, amount, msg.sender, referralCode, deadline, v, r, s);
  }

  /// @inheritdoc IL2Pool
  function withdraw(bytes32 args) external override returns (uint256) {
    (address asset, uint256 amount) = CalldataLogic.decodeWithdrawParams(_reservesList, args);

    return withdraw(asset, amount, msg.sender);
  }

  /// @inheritdoc IL2Pool
  function borrow(bytes32 args) external override {
    (address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode) = CalldataLogic
      .decodeBorrowParams(_reservesList, args);

    borrow(asset, amount, interestRateMode, referralCode, msg.sender);
  }

  /// @inheritdoc IL2Pool
  function repay(bytes32 args) external override returns (uint256) {
    (address asset, uint256 amount, uint256 interestRateMode) = CalldataLogic.decodeRepayParams(
      _reservesList,
      args
    );

    return repay(asset, amount, interestRateMode, msg.sender);
  }

  /// @inheritdoc IL2Pool
  function repayWithPermit(bytes32 args, bytes32 r, bytes32 s) external override returns (uint256) {
    (
      address asset,
      uint256 amount,
      uint256 interestRateMode,
      uint256 deadline,
      uint8 v
    ) = CalldataLogic.decodeRepayWithPermitParams(_reservesList, args);

    return repayWithPermit(asset, amount, interestRateMode, msg.sender, deadline, v, r, s);
  }

  /// @inheritdoc IL2Pool
  function repayWithATokens(bytes32 args) external override returns (uint256) {
    (address asset, uint256 amount, uint256 interestRateMode) = CalldataLogic.decodeRepayParams(
      _reservesList,
      args
    );

    return repayWithATokens(asset, amount, interestRateMode);
  }

  /// @inheritdoc IL2Pool
  function swapBorrowRateMode(bytes32 args) external override {
    (address asset, uint256 interestRateMode) = CalldataLogic.decodeSwapBorrowRateModeParams(
      _reservesList,
      args
    );
    swapBorrowRateMode(asset, interestRateMode);
  }

  /// @inheritdoc IL2Pool
  function rebalanceStableBorrowRate(bytes32 args) external override {
    (address asset, address user) = CalldataLogic.decodeRebalanceStableBorrowRateParams(
      _reservesList,
      args
    );
    rebalanceStableBorrowRate(asset, user);
  }

  /// @inheritdoc IL2Pool
  function setUserUseReserveAsCollateral(bytes32 args) external override {
    (address asset, bool useAsCollateral) = CalldataLogic.decodeSetUserUseReserveAsCollateralParams(
      _reservesList,
      args
    );
    setUserUseReserveAsCollateral(asset, useAsCollateral);
  }

  /// @inheritdoc IL2Pool
  function liquidationCall(bytes32 args1, bytes32 args2) external override {
    (
      address collateralAsset,
      address debtAsset,
      address user,
      uint256 debtToCover,
      bool receiveAToken
    ) = CalldataLogic.decodeLiquidationCallParams(_reservesList, args1, args2);
    liquidationCall(collateralAsset, debtAsset, user, debtToCover, receiveAToken);
  }
}



================================================
FILE: contracts/protocol/pool/Pool.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {VersionedInitializable} from '../libraries/aave-upgradeability/VersionedInitializable.sol';
import {Errors} from '../libraries/helpers/Errors.sol';
import {ReserveConfiguration} from '../libraries/configuration/ReserveConfiguration.sol';
import {PoolLogic} from '../libraries/logic/PoolLogic.sol';
import {ReserveLogic} from '../libraries/logic/ReserveLogic.sol';
import {EModeLogic} from '../libraries/logic/EModeLogic.sol';
import {SupplyLogic} from '../libraries/logic/SupplyLogic.sol';
import {FlashLoanLogic} from '../libraries/logic/FlashLoanLogic.sol';
import {BorrowLogic} from '../libraries/logic/BorrowLogic.sol';
import {LiquidationLogic} from '../libraries/logic/LiquidationLogic.sol';
import {DataTypes} from '../libraries/types/DataTypes.sol';
import {BridgeLogic} from '../libraries/logic/BridgeLogic.sol';
import {IERC20WithPermit} from '../../interfaces/IERC20WithPermit.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {IPool} from '../../interfaces/IPool.sol';
import {IACLManager} from '../../interfaces/IACLManager.sol';
import {PoolStorage} from './PoolStorage.sol';

/**
 * @title Pool contract
 * @author Aave
 * @notice Main point of interaction with an Aave protocol's market
 * - Users can:
 *   # Supply
 *   # Withdraw
 *   # Borrow
 *   # Repay
 *   # Swap their loans between variable and stable rate
 *   # Enable/disable their supplied assets as collateral rebalance stable rate borrow positions
 *   # Liquidate positions
 *   # Execute Flash Loans
 * @dev To be covered by a proxy contract, owned by the PoolAddressesProvider of the specific market
 * @dev All admin functions are callable by the PoolConfigurator contract defined also in the
 *   PoolAddressesProvider
 */
contract Pool is VersionedInitializable, PoolStorage, IPool {
  using ReserveLogic for DataTypes.ReserveData;

  uint256 public constant POOL_REVISION = 0x1;
  IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;

  /**
   * @dev Only pool configurator can call functions marked by this modifier.
   */
  modifier onlyPoolConfigurator() {
    _onlyPoolConfigurator();
    _;
  }

  /**
   * @dev Only pool admin can call functions marked by this modifier.
   */
  modifier onlyPoolAdmin() {
    _onlyPoolAdmin();
    _;
  }

  /**
   * @dev Only bridge can call functions marked by this modifier.
   */
  modifier onlyBridge() {
    _onlyBridge();
    _;
  }

  function _onlyPoolConfigurator() internal view virtual {
    require(
      ADDRESSES_PROVIDER.getPoolConfigurator() == msg.sender,
      Errors.CALLER_NOT_POOL_CONFIGURATOR
    );
  }

  function _onlyPoolAdmin() internal view virtual {
    require(
      IACLManager(ADDRESSES_PROVIDER.getACLManager()).isPoolAdmin(msg.sender),
      Errors.CALLER_NOT_POOL_ADMIN
    );
  }

  function _onlyBridge() internal view virtual {
    require(
      IACLManager(ADDRESSES_PROVIDER.getACLManager()).isBridge(msg.sender),
      Errors.CALLER_NOT_BRIDGE
    );
  }

  function getRevision() internal pure virtual override returns (uint256) {
    return POOL_REVISION;
  }

  /**
   * @dev Constructor.
   * @param provider The address of the PoolAddressesProvider contract
   */
  constructor(IPoolAddressesProvider provider) {
    ADDRESSES_PROVIDER = provider;
  }

  /**
   * @notice Initializes the Pool.
   * @dev Function is invoked by the proxy contract when the Pool contract is added to the
   * PoolAddressesProvider of the market.
   * @dev Caching the address of the PoolAddressesProvider in order to reduce gas consumption on subsequent operations
   * @param provider The address of the PoolAddressesProvider
   */
  function initialize(IPoolAddressesProvider provider) external virtual initializer {
    require(provider == ADDRESSES_PROVIDER, Errors.INVALID_ADDRESSES_PROVIDER);
    _maxStableRateBorrowSizePercent = 0.25e4;
  }

  /// @inheritdoc IPool
  function mintUnbacked(
    address asset,
    uint256 amount,
    address onBehalfOf,
    uint16 referralCode
  ) external virtual override onlyBridge {
    BridgeLogic.executeMintUnbacked(
      _reserves,
      _reservesList,
      _usersConfig[onBehalfOf],
      asset,
      amount,
      onBehalfOf,
      referralCode
    );
  }

  /// @inheritdoc IPool
  function backUnbacked(
    address asset,
    uint256 amount,
    uint256 fee
  ) external virtual override onlyBridge returns (uint256) {
    return
      BridgeLogic.executeBackUnbacked(_reserves[asset], asset, amount, fee, _bridgeProtocolFee);
  }

  /// @inheritdoc IPool
  function supply(
    address asset,
    uint256 amount,
    address onBehalfOf,
    uint16 referralCode
  ) public virtual override {
    SupplyLogic.executeSupply(
      _reserves,
      _reservesList,
      _usersConfig[onBehalfOf],
      DataTypes.ExecuteSupplyParams({
        asset: asset,
        amount: amount,
        onBehalfOf: onBehalfOf,
        referralCode: referralCode
      })
    );
  }

  /// @inheritdoc IPool
  function supplyWithPermit(
    address asset,
    uint256 amount,
    address onBehalfOf,
    uint16 referralCode,
    uint256 deadline,
    uint8 permitV,
    bytes32 permitR,
    bytes32 permitS
  ) public virtual override {
    IERC20WithPermit(asset).permit(
      msg.sender,
      address(this),
      amount,
      deadline,
      permitV,
      permitR,
      permitS
    );
    SupplyLogic.executeSupply(
      _reserves,
      _reservesList,
      _usersConfig[onBehalfOf],
      DataTypes.ExecuteSupplyParams({
        asset: asset,
        amount: amount,
        onBehalfOf: onBehalfOf,
        referralCode: referralCode
      })
    );
  }

  /// @inheritdoc IPool
  function withdraw(
    address asset,
    uint256 amount,
    address to
  ) public virtual override returns (uint256) {
    return
      SupplyLogic.executeWithdraw(
        _reserves,
        _reservesList,
        _eModeCategories,
        _usersConfig[msg.sender],
        DataTypes.ExecuteWithdrawParams({
          asset: asset,
          amount: amount,
          to: to,
          reservesCount: _reservesCount,
          oracle: ADDRESSES_PROVIDER.getPriceOracle(),
          userEModeCategory: _usersEModeCategory[msg.sender]
        })
      );
  }

  /// @inheritdoc IPool
  function borrow(
    address asset,
    uint256 amount,
    uint256 interestRateMode,
    uint16 referralCode,
    address onBehalfOf
  ) public virtual override {
    BorrowLogic.executeBorrow(
      _reserves,
      _reservesList,
      _eModeCategories,
      _usersConfig[onBehalfOf],
      DataTypes.ExecuteBorrowParams({
        asset: asset,
        user: msg.sender,
        onBehalfOf: onBehalfOf,
        amount: amount,
        interestRateMode: DataTypes.InterestRateMode(interestRateMode),
        referralCode: referralCode,
        releaseUnderlying: true,
        maxStableRateBorrowSizePercent: _maxStableRateBorrowSizePercent,
        reservesCount: _reservesCount,
        oracle: ADDRESSES_PROVIDER.getPriceOracle(),
        userEModeCategory: _usersEModeCategory[onBehalfOf],
        priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel()
      })
    );
  }

  /// @inheritdoc IPool
  function repay(
    address asset,
    uint256 amount,
    uint256 interestRateMode,
    address onBehalfOf
  ) public virtual override returns (uint256) {
    return
      BorrowLogic.executeRepay(
        _reserves,
        _reservesList,
        _usersConfig[onBehalfOf],
        DataTypes.ExecuteRepayParams({
          asset: asset,
          amount: amount,
          interestRateMode: DataTypes.InterestRateMode(interestRateMode),
          onBehalfOf: onBehalfOf,
          useATokens: false
        })
      );
  }

  /// @inheritdoc IPool
  function repayWithPermit(
    address asset,
    uint256 amount,
    uint256 interestRateMode,
    address onBehalfOf,
    uint256 deadline,
    uint8 permitV,
    bytes32 permitR,
    bytes32 permitS
  ) public virtual override returns (uint256) {
    {
      IERC20WithPermit(asset).permit(
        msg.sender,
        address(this),
        amount,
        deadline,
        permitV,
        permitR,
        permitS
      );
    }
    {
      DataTypes.ExecuteRepayParams memory params = DataTypes.ExecuteRepayParams({
        asset: asset,
        amount: amount,
        interestRateMode: DataTypes.InterestRateMode(interestRateMode),
        onBehalfOf: onBehalfOf,
        useATokens: false
      });
      return BorrowLogic.executeRepay(_reserves, _reservesList, _usersConfig[onBehalfOf], params);
    }
  }

  /// @inheritdoc IPool
  function repayWithATokens(
    address asset,
    uint256 amount,
    uint256 interestRateMode
  ) public virtual override returns (uint256) {
    return
      BorrowLogic.executeRepay(
        _reserves,
        _reservesList,
        _usersConfig[msg.sender],
        DataTypes.ExecuteRepayParams({
          asset: asset,
          amount: amount,
          interestRateMode: DataTypes.InterestRateMode(interestRateMode),
          onBehalfOf: msg.sender,
          useATokens: true
        })
      );
  }

  /// @inheritdoc IPool
  function swapBorrowRateMode(address asset, uint256 interestRateMode) public virtual override {
    BorrowLogic.executeSwapBorrowRateMode(
      _reserves[asset],
      _usersConfig[msg.sender],
      asset,
      DataTypes.InterestRateMode(interestRateMode)
    );
  }

  /// @inheritdoc IPool
  function rebalanceStableBorrowRate(address asset, address user) public virtual override {
    BorrowLogic.executeRebalanceStableBorrowRate(_reserves[asset], asset, user);
  }

  /// @inheritdoc IPool
  function setUserUseReserveAsCollateral(
    address asset,
    bool useAsCollateral
  ) public virtual override {
    SupplyLogic.executeUseReserveAsCollateral(
      _reserves,
      _reservesList,
      _eModeCategories,
      _usersConfig[msg.sender],
      asset,
      useAsCollateral,
      _reservesCount,
      ADDRESSES_PROVIDER.getPriceOracle(),
      _usersEModeCategory[msg.sender]
    );
  }

  /// @inheritdoc IPool
  function liquidationCall(
    address collateralAsset,
    address debtAsset,
    address user,
    uint256 debtToCover,
    bool receiveAToken
  ) public virtual override {
    LiquidationLogic.executeLiquidationCall(
      _reserves,
      _reservesList,
      _usersConfig,
      _eModeCategories,
      DataTypes.ExecuteLiquidationCallParams({
        reservesCount: _reservesCount,
        debtToCover: debtToCover,
        collateralAsset: collateralAsset,
        debtAsset: debtAsset,
        user: user,
        receiveAToken: receiveAToken,
        priceOracle: ADDRESSES_PROVIDER.getPriceOracle(),
        userEModeCategory: _usersEModeCategory[user],
        priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel()
      })
    );
  }

  /// @inheritdoc IPool
  function flashLoan(
    address receiverAddress,
    address[] calldata assets,
    uint256[] calldata amounts,
    uint256[] calldata interestRateModes,
    address onBehalfOf,
    bytes calldata params,
    uint16 referralCode
  ) public virtual override {
    DataTypes.FlashloanParams memory flashParams = DataTypes.FlashloanParams({
      receiverAddress: receiverAddress,
      assets: assets,
      amounts: amounts,
      interestRateModes: interestRateModes,
      onBehalfOf: onBehalfOf,
      params: params,
      referralCode: referralCode,
      flashLoanPremiumToProtocol: _flashLoanPremiumToProtocol,
      flashLoanPremiumTotal: _flashLoanPremiumTotal,
      maxStableRateBorrowSizePercent: _maxStableRateBorrowSizePercent,
      reservesCount: _reservesCount,
      addressesProvider: address(ADDRESSES_PROVIDER),
      userEModeCategory: _usersEModeCategory[onBehalfOf],
      isAuthorizedFlashBorrower: IACLManager(ADDRESSES_PROVIDER.getACLManager()).isFlashBorrower(
        msg.sender
      )
    });

    FlashLoanLogic.executeFlashLoan(
      _reserves,
      _reservesList,
      _eModeCategories,
      _usersConfig[onBehalfOf],
      flashParams
    );
  }

  /// @inheritdoc IPool
  function flashLoanSimple(
    address receiverAddress,
    address asset,
    uint256 amount,
    bytes calldata params,
    uint16 referralCode
  ) public virtual override {
    DataTypes.FlashloanSimpleParams memory flashParams = DataTypes.FlashloanSimpleParams({
      receiverAddress: receiverAddress,
      asset: asset,
      amount: amount,
      params: params,
      referralCode: referralCode,
      flashLoanPremiumToProtocol: _flashLoanPremiumToProtocol,
      flashLoanPremiumTotal: _flashLoanPremiumTotal
    });
    FlashLoanLogic.executeFlashLoanSimple(_reserves[asset], flashParams);
  }

  /// @inheritdoc IPool
  function mintToTreasury(address[] calldata assets) external virtual override {
    PoolLogic.executeMintToTreasury(_reserves, assets);
  }

  /// @inheritdoc IPool
  function getReserveData(
    address asset
  ) external view virtual override returns (DataTypes.ReserveData memory) {
    return _reserves[asset];
  }

  /// @inheritdoc IPool
  function getUserAccountData(
    address user
  )
    external
    view
    virtual
    override
    returns (
      uint256 totalCollateralBase,
      uint256 totalDebtBase,
      uint256 availableBorrowsBase,
      uint256 currentLiquidationThreshold,
      uint256 ltv,
      uint256 healthFactor
    )
  {
    return
      PoolLogic.executeGetUserAccountData(
        _reserves,
        _reservesList,
        _eModeCategories,
        DataTypes.CalculateUserAccountDataParams({
          userConfig: _usersConfig[user],
          reservesCount: _reservesCount,
          user: user,
          oracle: ADDRESSES_PROVIDER.getPriceOracle(),
          userEModeCategory: _usersEModeCategory[user]
        })
      );
  }

  /// @inheritdoc IPool
  function getConfiguration(
    address asset
  ) external view virtual override returns (DataTypes.ReserveConfigurationMap memory) {
    return _reserves[asset].configuration;
  }

  /// @inheritdoc IPool
  function getUserConfiguration(
    address user
  ) external view virtual override returns (DataTypes.UserConfigurationMap memory) {
    return _usersConfig[user];
  }

  /// @inheritdoc IPool
  function getReserveNormalizedIncome(
    address asset
  ) external view virtual override returns (uint256) {
    return _reserves[asset].getNormalizedIncome();
  }

  /// @inheritdoc IPool
  function getReserveNormalizedVariableDebt(
    address asset
  ) external view virtual override returns (uint256) {
    return _reserves[asset].getNormalizedDebt();
  }

  /// @inheritdoc IPool
  function getReservesList() external view virtual override returns (address[] memory) {
    uint256 reservesListCount = _reservesCount;
    uint256 droppedReservesCount = 0;
    address[] memory reservesList = new address[](reservesListCount);

    for (uint256 i = 0; i < reservesListCount; i++) {
      if (_reservesList[i] != address(0)) {
        reservesList[i - droppedReservesCount] = _reservesList[i];
      } else {
        droppedReservesCount++;
      }
    }

    // Reduces the length of the reserves array by `droppedReservesCount`
    assembly {
      mstore(reservesList, sub(reservesListCount, droppedReservesCount))
    }
    return reservesList;
  }

  /// @inheritdoc IPool
  function getReserveAddressById(uint16 id) external view returns (address) {
    return _reservesList[id];
  }

  /// @inheritdoc IPool
  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() public view virtual override returns (uint256) {
    return _maxStableRateBorrowSizePercent;
  }

  /// @inheritdoc IPool
  function BRIDGE_PROTOCOL_FEE() public view virtual override returns (uint256) {
    return _bridgeProtocolFee;
  }

  /// @inheritdoc IPool
  function FLASHLOAN_PREMIUM_TOTAL() public view virtual override returns (uint128) {
    return _flashLoanPremiumTotal;
  }

  /// @inheritdoc IPool
  function FLASHLOAN_PREMIUM_TO_PROTOCOL() public view virtual override returns (uint128) {
    return _flashLoanPremiumToProtocol;
  }

  /// @inheritdoc IPool
  function MAX_NUMBER_RESERVES() public view virtual override returns (uint16) {
    return ReserveConfiguration.MAX_RESERVES_COUNT;
  }

  /// @inheritdoc IPool
  function finalizeTransfer(
    address asset,
    address from,
    address to,
    uint256 amount,
    uint256 balanceFromBefore,
    uint256 balanceToBefore
  ) external virtual override {
    require(msg.sender == _reserves[asset].aTokenAddress, Errors.CALLER_NOT_ATOKEN);
    SupplyLogic.executeFinalizeTransfer(
      _reserves,
      _reservesList,
      _eModeCategories,
      _usersConfig,
      DataTypes.FinalizeTransferParams({
        asset: asset,
        from: from,
        to: to,
        amount: amount,
        balanceFromBefore: balanceFromBefore,
        balanceToBefore: balanceToBefore,
        reservesCount: _reservesCount,
        oracle: ADDRESSES_PROVIDER.getPriceOracle(),
        fromEModeCategory: _usersEModeCategory[from]
      })
    );
  }

  /// @inheritdoc IPool
  function initReserve(
    address asset,
    address aTokenAddress,
    address stableDebtAddress,
    address variableDebtAddress,
    address interestRateStrategyAddress
  ) external virtual override onlyPoolConfigurator {
    if (
      PoolLogic.executeInitReserve(
        _reserves,
        _reservesList,
        DataTypes.InitReserveParams({
          asset: asset,
          aTokenAddress: aTokenAddress,
          stableDebtAddress: stableDebtAddress,
          variableDebtAddress: variableDebtAddress,
          interestRateStrategyAddress: interestRateStrategyAddress,
          reservesCount: _reservesCount,
          maxNumberReserves: MAX_NUMBER_RESERVES()
        })
      )
    ) {
      _reservesCount++;
    }
  }

  /// @inheritdoc IPool
  function dropReserve(address asset) external virtual override onlyPoolConfigurator {
    PoolLogic.executeDropReserve(_reserves, _reservesList, asset);
  }

  /// @inheritdoc IPool
  function setReserveInterestRateStrategyAddress(
    address asset,
    address rateStrategyAddress
  ) external virtual override onlyPoolConfigurator {
    require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
    require(_reserves[asset].id != 0 || _reservesList[0] == asset, Errors.ASSET_NOT_LISTED);
    _reserves[asset].interestRateStrategyAddress = rateStrategyAddress;
  }

  /// @inheritdoc IPool
  function setConfiguration(
    address asset,
    DataTypes.ReserveConfigurationMap calldata configuration
  ) external virtual override onlyPoolConfigurator {
    require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
    require(_reserves[asset].id != 0 || _reservesList[0] == asset, Errors.ASSET_NOT_LISTED);
    _reserves[asset].configuration = configuration;
  }

  /// @inheritdoc IPool
  function updateBridgeProtocolFee(
    uint256 protocolFee
  ) external virtual override onlyPoolConfigurator {
    _bridgeProtocolFee = protocolFee;
  }

  /// @inheritdoc IPool
  function updateFlashloanPremiums(
    uint128 flashLoanPremiumTotal,
    uint128 flashLoanPremiumToProtocol
  ) external virtual override onlyPoolConfigurator {
    _flashLoanPremiumTotal = flashLoanPremiumTotal;
    _flashLoanPremiumToProtocol = flashLoanPremiumToProtocol;
  }

  /// @inheritdoc IPool
  function configureEModeCategory(
    uint8 id,
    DataTypes.EModeCategory memory category
  ) external virtual override onlyPoolConfigurator {
    // category 0 is reserved for volatile heterogeneous assets and it's always disabled
    require(id != 0, Errors.EMODE_CATEGORY_RESERVED);
    _eModeCategories[id] = category;
  }

  /// @inheritdoc IPool
  function getEModeCategoryData(
    uint8 id
  ) external view virtual override returns (DataTypes.EModeCategory memory) {
    return _eModeCategories[id];
  }

  /// @inheritdoc IPool
  function setUserEMode(uint8 categoryId) external virtual override {
    EModeLogic.executeSetUserEMode(
      _reserves,
      _reservesList,
      _eModeCategories,
      _usersEModeCategory,
      _usersConfig[msg.sender],
      DataTypes.ExecuteSetUserEModeParams({
        reservesCount: _reservesCount,
        oracle: ADDRESSES_PROVIDER.getPriceOracle(),
        categoryId: categoryId
      })
    );
  }

  /// @inheritdoc IPool
  function getUserEMode(address user) external view virtual override returns (uint256) {
    return _usersEModeCategory[user];
  }

  /// @inheritdoc IPool
  function resetIsolationModeTotalDebt(
    address asset
  ) external virtual override onlyPoolConfigurator {
    PoolLogic.executeResetIsolationModeTotalDebt(_reserves, asset);
  }

  /// @inheritdoc IPool
  function rescueTokens(
    address token,
    address to,
    uint256 amount
  ) external virtual override onlyPoolAdmin {
    PoolLogic.executeRescueTokens(token, to, amount);
  }

  /// @inheritdoc IPool
  /// @dev Deprecated: maintained for compatibility purposes
  function deposit(
    address asset,
    uint256 amount,
    address onBehalfOf,
    uint16 referralCode
  ) external virtual override {
    SupplyLogic.executeSupply(
      _reserves,
      _reservesList,
      _usersConfig[onBehalfOf],
      DataTypes.ExecuteSupplyParams({
        asset: asset,
        amount: amount,
        onBehalfOf: onBehalfOf,
        referralCode: referralCode
      })
    );
  }
}



================================================
FILE: contracts/protocol/pool/PoolConfigurator.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {VersionedInitializable} from '../libraries/aave-upgradeability/VersionedInitializable.sol';
import {ReserveConfiguration} from '../libraries/configuration/ReserveConfiguration.sol';
import {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';
import {Errors} from '../libraries/helpers/Errors.sol';
import {PercentageMath} from '../libraries/math/PercentageMath.sol';
import {DataTypes} from '../libraries/types/DataTypes.sol';
import {ConfiguratorLogic} from '../libraries/logic/ConfiguratorLogic.sol';
import {ConfiguratorInputTypes} from '../libraries/types/ConfiguratorInputTypes.sol';
import {IPoolConfigurator} from '../../interfaces/IPoolConfigurator.sol';
import {IPool} from '../../interfaces/IPool.sol';
import {IACLManager} from '../../interfaces/IACLManager.sol';
import {IPoolDataProvider} from '../../interfaces/IPoolDataProvider.sol';

/**
 * @title PoolConfigurator
 * @author Aave
 * @dev Implements the configuration methods for the Aave protocol
 */
contract PoolConfigurator is VersionedInitializable, IPoolConfigurator {
  using PercentageMath for uint256;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;

  IPoolAddressesProvider internal _addressesProvider;
  IPool internal _pool;

  /**
   * @dev Only pool admin can call functions marked by this modifier.
   */
  modifier onlyPoolAdmin() {
    _onlyPoolAdmin();
    _;
  }

  /**
   * @dev Only emergency admin can call functions marked by this modifier.
   */
  modifier onlyEmergencyAdmin() {
    _onlyEmergencyAdmin();
    _;
  }

  /**
   * @dev Only emergency or pool admin can call functions marked by this modifier.
   */
  modifier onlyEmergencyOrPoolAdmin() {
    _onlyPoolOrEmergencyAdmin();
    _;
  }

  /**
   * @dev Only asset listing or pool admin can call functions marked by this modifier.
   */
  modifier onlyAssetListingOrPoolAdmins() {
    _onlyAssetListingOrPoolAdmins();
    _;
  }

  /**
   * @dev Only risk or pool admin can call functions marked by this modifier.
   */
  modifier onlyRiskOrPoolAdmins() {
    _onlyRiskOrPoolAdmins();
    _;
  }

  uint256 public constant CONFIGURATOR_REVISION = 0x1;

  /// @inheritdoc VersionedInitializable
  function getRevision() internal pure virtual override returns (uint256) {
    return CONFIGURATOR_REVISION;
  }

  function initialize(IPoolAddressesProvider provider) public initializer {
    _addressesProvider = provider;
    _pool = IPool(_addressesProvider.getPool());
  }

  /// @inheritdoc IPoolConfigurator
  function initReserves(
    ConfiguratorInputTypes.InitReserveInput[] calldata input
  ) external override onlyAssetListingOrPoolAdmins {
    IPool cachedPool = _pool;
    for (uint256 i = 0; i < input.length; i++) {
      ConfiguratorLogic.executeInitReserve(cachedPool, input[i]);
    }
  }

  /// @inheritdoc IPoolConfigurator
  function dropReserve(address asset) external override onlyPoolAdmin {
    _pool.dropReserve(asset);
    emit ReserveDropped(asset);
  }

  /// @inheritdoc IPoolConfigurator
  function updateAToken(
    ConfiguratorInputTypes.UpdateATokenInput calldata input
  ) external override onlyPoolAdmin {
    ConfiguratorLogic.executeUpdateAToken(_pool, input);
  }

  /// @inheritdoc IPoolConfigurator
  function updateStableDebtToken(
    ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
  ) external override onlyPoolAdmin {
    ConfiguratorLogic.executeUpdateStableDebtToken(_pool, input);
  }

  /// @inheritdoc IPoolConfigurator
  function updateVariableDebtToken(
    ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
  ) external override onlyPoolAdmin {
    ConfiguratorLogic.executeUpdateVariableDebtToken(_pool, input);
  }

  /// @inheritdoc IPoolConfigurator
  function setReserveBorrowing(address asset, bool enabled) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    if (!enabled) {
      require(!currentConfig.getStableRateBorrowingEnabled(), Errors.STABLE_BORROWING_ENABLED);
    }
    currentConfig.setBorrowingEnabled(enabled);
    _pool.setConfiguration(asset, currentConfig);
    emit ReserveBorrowing(asset, enabled);
  }

  /// @inheritdoc IPoolConfigurator
  function configureReserveAsCollateral(
    address asset,
    uint256 ltv,
    uint256 liquidationThreshold,
    uint256 liquidationBonus
  ) external override onlyRiskOrPoolAdmins {
    //validation of the parameters: the LTV can
    //only be lower or equal than the liquidation threshold
    //(otherwise a loan against the asset would cause instantaneous liquidation)
    require(ltv <= liquidationThreshold, Errors.INVALID_RESERVE_PARAMS);

    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);

    if (liquidationThreshold != 0) {
      //liquidation bonus must be bigger than 100.00%, otherwise the liquidator would receive less
      //collateral than needed to cover the debt
      require(liquidationBonus > PercentageMath.PERCENTAGE_FACTOR, Errors.INVALID_RESERVE_PARAMS);

      //if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment
      //a loan is taken there is enough collateral available to cover the liquidation bonus
      require(
        liquidationThreshold.percentMul(liquidationBonus) <= PercentageMath.PERCENTAGE_FACTOR,
        Errors.INVALID_RESERVE_PARAMS
      );
    } else {
      require(liquidationBonus == 0, Errors.INVALID_RESERVE_PARAMS);
      //if the liquidation threshold is being set to 0,
      // the reserve is being disabled as collateral. To do so,
      //we need to ensure no liquidity is supplied
      _checkNoSuppliers(asset);
    }

    currentConfig.setLtv(ltv);
    currentConfig.setLiquidationThreshold(liquidationThreshold);
    currentConfig.setLiquidationBonus(liquidationBonus);

    _pool.setConfiguration(asset, currentConfig);

    emit CollateralConfigurationChanged(asset, ltv, liquidationThreshold, liquidationBonus);
  }

  /// @inheritdoc IPoolConfigurator
  function setReserveStableRateBorrowing(
    address asset,
    bool enabled
  ) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    if (enabled) {
      require(currentConfig.getBorrowingEnabled(), Errors.BORROWING_NOT_ENABLED);
    }
    currentConfig.setStableRateBorrowingEnabled(enabled);
    _pool.setConfiguration(asset, currentConfig);
    emit ReserveStableRateBorrowing(asset, enabled);
  }

  /// @inheritdoc IPoolConfigurator
  function setReserveFlashLoaning(
    address asset,
    bool enabled
  ) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);

    currentConfig.setFlashLoanEnabled(enabled);
    _pool.setConfiguration(asset, currentConfig);
    emit ReserveFlashLoaning(asset, enabled);
  }

  /// @inheritdoc IPoolConfigurator
  function setReserveActive(address asset, bool active) external override onlyPoolAdmin {
    if (!active) _checkNoSuppliers(asset);
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    currentConfig.setActive(active);
    _pool.setConfiguration(asset, currentConfig);
    emit ReserveActive(asset, active);
  }

  /// @inheritdoc IPoolConfigurator
  function setReserveFreeze(address asset, bool freeze) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    currentConfig.setFrozen(freeze);
    _pool.setConfiguration(asset, currentConfig);
    emit ReserveFrozen(asset, freeze);
  }

  /// @inheritdoc IPoolConfigurator
  function setBorrowableInIsolation(
    address asset,
    bool borrowable
  ) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    currentConfig.setBorrowableInIsolation(borrowable);
    _pool.setConfiguration(asset, currentConfig);
    emit BorrowableInIsolationChanged(asset, borrowable);
  }

  /// @inheritdoc IPoolConfigurator
  function setReservePause(address asset, bool paused) public override onlyEmergencyOrPoolAdmin {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    currentConfig.setPaused(paused);
    _pool.setConfiguration(asset, currentConfig);
    emit ReservePaused(asset, paused);
  }

  /// @inheritdoc IPoolConfigurator
  function setReserveFactor(
    address asset,
    uint256 newReserveFactor
  ) external override onlyRiskOrPoolAdmins {
    require(newReserveFactor <= PercentageMath.PERCENTAGE_FACTOR, Errors.INVALID_RESERVE_FACTOR);
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    uint256 oldReserveFactor = currentConfig.getReserveFactor();
    currentConfig.setReserveFactor(newReserveFactor);
    _pool.setConfiguration(asset, currentConfig);
    emit ReserveFactorChanged(asset, oldReserveFactor, newReserveFactor);
  }

  /// @inheritdoc IPoolConfigurator
  function setDebtCeiling(
    address asset,
    uint256 newDebtCeiling
  ) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);

    uint256 oldDebtCeiling = currentConfig.getDebtCeiling();
    if (oldDebtCeiling == 0) {
      _checkNoSuppliers(asset);
    }
    currentConfig.setDebtCeiling(newDebtCeiling);
    _pool.setConfiguration(asset, currentConfig);

    if (newDebtCeiling == 0) {
      _pool.resetIsolationModeTotalDebt(asset);
    }

    emit DebtCeilingChanged(asset, oldDebtCeiling, newDebtCeiling);
  }

  /// @inheritdoc IPoolConfigurator
  function setSiloedBorrowing(
    address asset,
    bool newSiloed
  ) external override onlyRiskOrPoolAdmins {
    if (newSiloed) {
      _checkNoBorrowers(asset);
    }
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);

    bool oldSiloed = currentConfig.getSiloedBorrowing();

    currentConfig.setSiloedBorrowing(newSiloed);

    _pool.setConfiguration(asset, currentConfig);

    emit SiloedBorrowingChanged(asset, oldSiloed, newSiloed);
  }

  /// @inheritdoc IPoolConfigurator
  function setBorrowCap(
    address asset,
    uint256 newBorrowCap
  ) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    uint256 oldBorrowCap = currentConfig.getBorrowCap();
    currentConfig.setBorrowCap(newBorrowCap);
    _pool.setConfiguration(asset, currentConfig);
    emit BorrowCapChanged(asset, oldBorrowCap, newBorrowCap);
  }

  /// @inheritdoc IPoolConfigurator
  function setSupplyCap(
    address asset,
    uint256 newSupplyCap
  ) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    uint256 oldSupplyCap = currentConfig.getSupplyCap();
    currentConfig.setSupplyCap(newSupplyCap);
    _pool.setConfiguration(asset, currentConfig);
    emit SupplyCapChanged(asset, oldSupplyCap, newSupplyCap);
  }

  /// @inheritdoc IPoolConfigurator
  function setLiquidationProtocolFee(
    address asset,
    uint256 newFee
  ) external override onlyRiskOrPoolAdmins {
    require(newFee <= PercentageMath.PERCENTAGE_FACTOR, Errors.INVALID_LIQUIDATION_PROTOCOL_FEE);
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    uint256 oldFee = currentConfig.getLiquidationProtocolFee();
    currentConfig.setLiquidationProtocolFee(newFee);
    _pool.setConfiguration(asset, currentConfig);
    emit LiquidationProtocolFeeChanged(asset, oldFee, newFee);
  }

  /// @inheritdoc IPoolConfigurator
  function setEModeCategory(
    uint8 categoryId,
    uint16 ltv,
    uint16 liquidationThreshold,
    uint16 liquidationBonus,
    address oracle,
    string calldata label
  ) external override onlyRiskOrPoolAdmins {
    require(ltv != 0, Errors.INVALID_EMODE_CATEGORY_PARAMS);
    require(liquidationThreshold != 0, Errors.INVALID_EMODE_CATEGORY_PARAMS);

    // validation of the parameters: the LTV can
    // only be lower or equal than the liquidation threshold
    // (otherwise a loan against the asset would cause instantaneous liquidation)
    require(ltv <= liquidationThreshold, Errors.INVALID_EMODE_CATEGORY_PARAMS);
    require(
      liquidationBonus > PercentageMath.PERCENTAGE_FACTOR,
      Errors.INVALID_EMODE_CATEGORY_PARAMS
    );

    // if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment
    // a loan is taken there is enough collateral available to cover the liquidation bonus
    require(
      uint256(liquidationThreshold).percentMul(liquidationBonus) <=
        PercentageMath.PERCENTAGE_FACTOR,
      Errors.INVALID_EMODE_CATEGORY_PARAMS
    );

    address[] memory reserves = _pool.getReservesList();
    for (uint256 i = 0; i < reserves.length; i++) {
      DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(reserves[i]);
      if (categoryId == currentConfig.getEModeCategory()) {
        require(ltv > currentConfig.getLtv(), Errors.INVALID_EMODE_CATEGORY_PARAMS);
        require(
          liquidationThreshold > currentConfig.getLiquidationThreshold(),
          Errors.INVALID_EMODE_CATEGORY_PARAMS
        );
      }
    }

    _pool.configureEModeCategory(
      categoryId,
      DataTypes.EModeCategory({
        ltv: ltv,
        liquidationThreshold: liquidationThreshold,
        liquidationBonus: liquidationBonus,
        priceSource: oracle,
        label: label
      })
    );
    emit EModeCategoryAdded(categoryId, ltv, liquidationThreshold, liquidationBonus, oracle, label);
  }

  /// @inheritdoc IPoolConfigurator
  function setAssetEModeCategory(
    address asset,
    uint8 newCategoryId
  ) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);

    if (newCategoryId != 0) {
      DataTypes.EModeCategory memory categoryData = _pool.getEModeCategoryData(newCategoryId);
      require(
        categoryData.liquidationThreshold > currentConfig.getLiquidationThreshold(),
        Errors.INVALID_EMODE_CATEGORY_ASSIGNMENT
      );
    }
    uint256 oldCategoryId = currentConfig.getEModeCategory();
    currentConfig.setEModeCategory(newCategoryId);
    _pool.setConfiguration(asset, currentConfig);
    emit EModeAssetCategoryChanged(asset, uint8(oldCategoryId), newCategoryId);
  }

  /// @inheritdoc IPoolConfigurator
  function setUnbackedMintCap(
    address asset,
    uint256 newUnbackedMintCap
  ) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
    uint256 oldUnbackedMintCap = currentConfig.getUnbackedMintCap();
    currentConfig.setUnbackedMintCap(newUnbackedMintCap);
    _pool.setConfiguration(asset, currentConfig);
    emit UnbackedMintCapChanged(asset, oldUnbackedMintCap, newUnbackedMintCap);
  }

  /// @inheritdoc IPoolConfigurator
  function setReserveInterestRateStrategyAddress(
    address asset,
    address newRateStrategyAddress
  ) external override onlyRiskOrPoolAdmins {
    DataTypes.ReserveData memory reserve = _pool.getReserveData(asset);
    address oldRateStrategyAddress = reserve.interestRateStrategyAddress;
    _pool.setReserveInterestRateStrategyAddress(asset, newRateStrategyAddress);
    emit ReserveInterestRateStrategyChanged(asset, oldRateStrategyAddress, newRateStrategyAddress);
  }

  /// @inheritdoc IPoolConfigurator
  function setPoolPause(bool paused) external override onlyEmergencyAdmin {
    address[] memory reserves = _pool.getReservesList();

    for (uint256 i = 0; i < reserves.length; i++) {
      if (reserves[i] != address(0)) {
        setReservePause(reserves[i], paused);
      }
    }
  }

  /// @inheritdoc IPoolConfigurator
  function updateBridgeProtocolFee(uint256 newBridgeProtocolFee) external override onlyPoolAdmin {
    require(
      newBridgeProtocolFee <= PercentageMath.PERCENTAGE_FACTOR,
      Errors.BRIDGE_PROTOCOL_FEE_INVALID
    );
    uint256 oldBridgeProtocolFee = _pool.BRIDGE_PROTOCOL_FEE();
    _pool.updateBridgeProtocolFee(newBridgeProtocolFee);
    emit BridgeProtocolFeeUpdated(oldBridgeProtocolFee, newBridgeProtocolFee);
  }

  /// @inheritdoc IPoolConfigurator
  function updateFlashloanPremiumTotal(
    uint128 newFlashloanPremiumTotal
  ) external override onlyPoolAdmin {
    require(
      newFlashloanPremiumTotal <= PercentageMath.PERCENTAGE_FACTOR,
      Errors.FLASHLOAN_PREMIUM_INVALID
    );
    uint128 oldFlashloanPremiumTotal = _pool.FLASHLOAN_PREMIUM_TOTAL();
    _pool.updateFlashloanPremiums(newFlashloanPremiumTotal, _pool.FLASHLOAN_PREMIUM_TO_PROTOCOL());
    emit FlashloanPremiumTotalUpdated(oldFlashloanPremiumTotal, newFlashloanPremiumTotal);
  }

  /// @inheritdoc IPoolConfigurator
  function updateFlashloanPremiumToProtocol(
    uint128 newFlashloanPremiumToProtocol
  ) external override onlyPoolAdmin {
    require(
      newFlashloanPremiumToProtocol <= PercentageMath.PERCENTAGE_FACTOR,
      Errors.FLASHLOAN_PREMIUM_INVALID
    );
    uint128 oldFlashloanPremiumToProtocol = _pool.FLASHLOAN_PREMIUM_TO_PROTOCOL();
    _pool.updateFlashloanPremiums(_pool.FLASHLOAN_PREMIUM_TOTAL(), newFlashloanPremiumToProtocol);
    emit FlashloanPremiumToProtocolUpdated(
      oldFlashloanPremiumToProtocol,
      newFlashloanPremiumToProtocol
    );
  }

  function _checkNoSuppliers(address asset) internal view {
    (, uint256 accruedToTreasury, uint256 totalATokens, , , , , , , , , ) = IPoolDataProvider(
      _addressesProvider.getPoolDataProvider()
    ).getReserveData(asset);

    require(totalATokens == 0 && accruedToTreasury == 0, Errors.RESERVE_LIQUIDITY_NOT_ZERO);
  }

  function _checkNoBorrowers(address asset) internal view {
    uint256 totalDebt = IPoolDataProvider(_addressesProvider.getPoolDataProvider()).getTotalDebt(
      asset
    );
    require(totalDebt == 0, Errors.RESERVE_DEBT_NOT_ZERO);
  }

  function _onlyPoolAdmin() internal view {
    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);
  }

  function _onlyEmergencyAdmin() internal view {
    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
    require(aclManager.isEmergencyAdmin(msg.sender), Errors.CALLER_NOT_EMERGENCY_ADMIN);
  }

  function _onlyPoolOrEmergencyAdmin() internal view {
    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
    require(
      aclManager.isPoolAdmin(msg.sender) || aclManager.isEmergencyAdmin(msg.sender),
      Errors.CALLER_NOT_POOL_OR_EMERGENCY_ADMIN
    );
  }

  function _onlyAssetListingOrPoolAdmins() internal view {
    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
    require(
      aclManager.isAssetListingAdmin(msg.sender) || aclManager.isPoolAdmin(msg.sender),
      Errors.CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN
    );
  }

  function _onlyRiskOrPoolAdmins() internal view {
    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
    require(
      aclManager.isRiskAdmin(msg.sender) || aclManager.isPoolAdmin(msg.sender),
      Errors.CALLER_NOT_RISK_OR_POOL_ADMIN
    );
  }
}



================================================
FILE: contracts/protocol/pool/PoolStorage.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {UserConfiguration} from '../libraries/configuration/UserConfiguration.sol';
import {ReserveConfiguration} from '../libraries/configuration/ReserveConfiguration.sol';
import {ReserveLogic} from '../libraries/logic/ReserveLogic.sol';
import {DataTypes} from '../libraries/types/DataTypes.sol';

/**
 * @title PoolStorage
 * @author Aave
 * @notice Contract used as storage of the Pool contract.
 * @dev It defines the storage layout of the Pool contract.
 */
contract PoolStorage {
  using ReserveLogic for DataTypes.ReserveData;
  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
  using UserConfiguration for DataTypes.UserConfigurationMap;

  // Map of reserves and their data (underlyingAssetOfReserve => reserveData)
  mapping(address => DataTypes.ReserveData) internal _reserves;

  // Map of users address and their configuration data (userAddress => userConfiguration)
  mapping(address => DataTypes.UserConfigurationMap) internal _usersConfig;

  // List of reserves as a map (reserveId => reserve).
  // It is structured as a mapping for gas savings reasons, using the reserve id as index
  mapping(uint256 => address) internal _reservesList;

  // List of eMode categories as a map (eModeCategoryId => eModeCategory).
  // It is structured as a mapping for gas savings reasons, using the eModeCategoryId as index
  mapping(uint8 => DataTypes.EModeCategory) internal _eModeCategories;

  // Map of users address and their eMode category (userAddress => eModeCategoryId)
  mapping(address => uint8) internal _usersEModeCategory;

  // Fee of the protocol bridge, expressed in bps
  uint256 internal _bridgeProtocolFee;

  // Total FlashLoan Premium, expressed in bps
  uint128 internal _flashLoanPremiumTotal;

  // FlashLoan premium paid to protocol treasury, expressed in bps
  uint128 internal _flashLoanPremiumToProtocol;

  // Available liquidity that can be borrowed at once at stable rate, expressed in bps
  uint64 internal _maxStableRateBorrowSizePercent;

  // Maximum number of active reserves there have been in the protocol. It is the upper bound of the reserves list
  uint16 internal _reservesCount;
}



================================================
FILE: contracts/protocol/tokenization/AToken.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';
import {GPv2SafeERC20} from '../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';
import {SafeCast} from '../../dependencies/openzeppelin/contracts/SafeCast.sol';
import {VersionedInitializable} from '../libraries/aave-upgradeability/VersionedInitializable.sol';
import {Errors} from '../libraries/helpers/Errors.sol';
import {WadRayMath} from '../libraries/math/WadRayMath.sol';
import {IPool} from '../../interfaces/IPool.sol';
import {IAToken} from '../../interfaces/IAToken.sol';
import {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol';
import {IInitializableAToken} from '../../interfaces/IInitializableAToken.sol';
import {ScaledBalanceTokenBase} from './base/ScaledBalanceTokenBase.sol';
import {IncentivizedERC20} from './base/IncentivizedERC20.sol';
import {EIP712Base} from './base/EIP712Base.sol';

/**
 * @title Aave ERC20 AToken
 * @author Aave
 * @notice Implementation of the interest bearing token for the Aave protocol
 */
contract AToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, IAToken {
  using WadRayMath for uint256;
  using SafeCast for uint256;
  using GPv2SafeERC20 for IERC20;

  bytes32 public constant PERMIT_TYPEHASH =
    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');

  uint256 public constant ATOKEN_REVISION = 0x1;

  address internal _treasury;
  address internal _underlyingAsset;

  /// @inheritdoc VersionedInitializable
  function getRevision() internal pure virtual override returns (uint256) {
    return ATOKEN_REVISION;
  }

  /**
   * @dev Constructor.
   * @param pool The address of the Pool contract
   */
  constructor(
    IPool pool
  ) ScaledBalanceTokenBase(pool, 'ATOKEN_IMPL', 'ATOKEN_IMPL', 0) EIP712Base() {
    // Intentionally left blank
  }

  /// @inheritdoc IInitializableAToken
  function initialize(
    IPool initializingPool,
    address treasury,
    address underlyingAsset,
    IAaveIncentivesController incentivesController,
    uint8 aTokenDecimals,
    string calldata aTokenName,
    string calldata aTokenSymbol,
    bytes calldata params
  ) public virtual override initializer {
    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);
    _setName(aTokenName);
    _setSymbol(aTokenSymbol);
    _setDecimals(aTokenDecimals);

    _treasury = treasury;
    _underlyingAsset = underlyingAsset;
    _incentivesController = incentivesController;

    _domainSeparator = _calculateDomainSeparator();

    emit Initialized(
      underlyingAsset,
      address(POOL),
      treasury,
      address(incentivesController),
      aTokenDecimals,
      aTokenName,
      aTokenSymbol,
      params
    );
  }

  /// @inheritdoc IAToken
  function mint(
    address caller,
    address onBehalfOf,
    uint256 amount,
    uint256 index
  ) external virtual override onlyPool returns (bool) {
    return _mintScaled(caller, onBehalfOf, amount, index);
  }

  /// @inheritdoc IAToken
  function burn(
    address from,
    address receiverOfUnderlying,
    uint256 amount,
    uint256 index
  ) external virtual override onlyPool {
    _burnScaled(from, receiverOfUnderlying, amount, index);
    if (receiverOfUnderlying != address(this)) {
      IERC20(_underlyingAsset).safeTransfer(receiverOfUnderlying, amount);
    }
  }

  /// @inheritdoc IAToken
  function mintToTreasury(uint256 amount, uint256 index) external virtual override onlyPool {
    if (amount == 0) {
      return;
    }
    _mintScaled(address(POOL), _treasury, amount, index);
  }

  /// @inheritdoc IAToken
  function transferOnLiquidation(
    address from,
    address to,
    uint256 value
  ) external virtual override onlyPool {
    // Being a normal transfer, the Transfer() and BalanceTransfer() are emitted
    // so no need to emit a specific event here
    _transfer(from, to, value, false);
  }

  /// @inheritdoc IERC20
  function balanceOf(
    address user
  ) public view virtual override(IncentivizedERC20, IERC20) returns (uint256) {
    return super.balanceOf(user).rayMul(POOL.getReserveNormalizedIncome(_underlyingAsset));
  }

  /// @inheritdoc IERC20
  function totalSupply() public view virtual override(IncentivizedERC20, IERC20) returns (uint256) {
    uint256 currentSupplyScaled = super.totalSupply();

    if (currentSupplyScaled == 0) {
      return 0;
    }

    return currentSupplyScaled.rayMul(POOL.getReserveNormalizedIncome(_underlyingAsset));
  }

  /// @inheritdoc IAToken
  function RESERVE_TREASURY_ADDRESS() external view override returns (address) {
    return _treasury;
  }

  /// @inheritdoc IAToken
  function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {
    return _underlyingAsset;
  }

  /// @inheritdoc IAToken
  function transferUnderlyingTo(address target, uint256 amount) external virtual override onlyPool {
    IERC20(_underlyingAsset).safeTransfer(target, amount);
  }

  /// @inheritdoc IAToken
  function handleRepayment(
    address user,
    address onBehalfOf,
    uint256 amount
  ) external virtual override onlyPool {
    // Intentionally left blank
  }

  /// @inheritdoc IAToken
  function permit(
    address owner,
    address spender,
    uint256 value,
    uint256 deadline,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external override {
    require(owner != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
    //solium-disable-next-line
    require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);
    uint256 currentValidNonce = _nonces[owner];
    bytes32 digest = keccak256(
      abi.encodePacked(
        '\x19\x01',
        DOMAIN_SEPARATOR(),
        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))
      )
    );
    require(owner == ecrecover(digest, v, r, s), Errors.INVALID_SIGNATURE);
    _nonces[owner] = currentValidNonce + 1;
    _approve(owner, spender, value);
  }

  /**
   * @notice Transfers the aTokens between two users. Validates the transfer
   * (ie checks for valid HF after the transfer) if required
   * @param from The source address
   * @param to The destination address
   * @param amount The amount getting transferred
   * @param validate True if the transfer needs to be validated, false otherwise
   */
  function _transfer(address from, address to, uint256 amount, bool validate) internal virtual {
    address underlyingAsset = _underlyingAsset;

    uint256 index = POOL.getReserveNormalizedIncome(underlyingAsset);

    uint256 fromBalanceBefore = super.balanceOf(from).rayMul(index);
    uint256 toBalanceBefore = super.balanceOf(to).rayMul(index);

    super._transfer(from, to, amount, index);

    if (validate) {
      POOL.finalizeTransfer(underlyingAsset, from, to, amount, fromBalanceBefore, toBalanceBefore);
    }

    emit BalanceTransfer(from, to, amount.rayDiv(index), index);
  }

  /**
   * @notice Overrides the parent _transfer to force validated transfer() and transferFrom()
   * @param from The source address
   * @param to The destination address
   * @param amount The amount getting transferred
   */
  function _transfer(address from, address to, uint128 amount) internal virtual override {
    _transfer(from, to, amount, true);
  }

  /**
   * @dev Overrides the base function to fully implement IAToken
   * @dev see `EIP712Base.DOMAIN_SEPARATOR()` for more detailed documentation
   */
  function DOMAIN_SEPARATOR() public view override(IAToken, EIP712Base) returns (bytes32) {
    return super.DOMAIN_SEPARATOR();
  }

  /**
   * @dev Overrides the base function to fully implement IAToken
   * @dev see `EIP712Base.nonces()` for more detailed documentation
   */
  function nonces(address owner) public view override(IAToken, EIP712Base) returns (uint256) {
    return super.nonces(owner);
  }

  /// @inheritdoc EIP712Base
  function _EIP712BaseId() internal view override returns (string memory) {
    return name();
  }

  /// @inheritdoc IAToken
  function rescueTokens(address token, address to, uint256 amount) external override onlyPoolAdmin {
    require(token != _underlyingAsset, Errors.UNDERLYING_CANNOT_BE_RESCUED);
    IERC20(token).safeTransfer(to, amount);
  }
}



================================================
FILE: contracts/protocol/tokenization/DelegationAwareAToken.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IPool} from '../../interfaces/IPool.sol';
import {IDelegationToken} from '../../interfaces/IDelegationToken.sol';
import {AToken} from './AToken.sol';

/**
 * @title DelegationAwareAToken
 * @author Aave
 * @notice AToken enabled to delegate voting power of the underlying asset to a different address
 * @dev The underlying asset needs to be compatible with the COMP delegation interface
 */
contract DelegationAwareAToken is AToken {
  /**
   * @dev Emitted when underlying voting power is delegated
   * @param delegatee The address of the delegatee
   */
  event DelegateUnderlyingTo(address indexed delegatee);

  /**
   * @dev Constructor.
   * @param pool The address of the Pool contract
   */
  constructor(IPool pool) AToken(pool) {
    // Intentionally left blank
  }

  /**
   * @notice Delegates voting power of the underlying asset to a `delegatee` address
   * @param delegatee The address that will receive the delegation
   */
  function delegateUnderlyingTo(address delegatee) external onlyPoolAdmin {
    IDelegationToken(_underlyingAsset).delegate(delegatee);
    emit DelegateUnderlyingTo(delegatee);
  }
}



================================================
FILE: contracts/protocol/tokenization/StableDebtToken.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';
import {VersionedInitializable} from '../libraries/aave-upgradeability/VersionedInitializable.sol';
import {MathUtils} from '../libraries/math/MathUtils.sol';
import {WadRayMath} from '../libraries/math/WadRayMath.sol';
import {Errors} from '../libraries/helpers/Errors.sol';
import {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol';
import {IInitializableDebtToken} from '../../interfaces/IInitializableDebtToken.sol';
import {IStableDebtToken} from '../../interfaces/IStableDebtToken.sol';
import {IPool} from '../../interfaces/IPool.sol';
import {EIP712Base} from './base/EIP712Base.sol';
import {DebtTokenBase} from './base/DebtTokenBase.sol';
import {IncentivizedERC20} from './base/IncentivizedERC20.sol';
import {SafeCast} from '../../dependencies/openzeppelin/contracts/SafeCast.sol';

/**
 * @title StableDebtToken
 * @author Aave
 * @notice Implements a stable debt token to track the borrowing positions of users
 * at stable rate mode
 * @dev Transfer and approve functionalities are disabled since its a non-transferable token
 */
contract StableDebtToken is DebtTokenBase, IncentivizedERC20, IStableDebtToken {
  using WadRayMath for uint256;
  using SafeCast for uint256;

  uint256 public constant DEBT_TOKEN_REVISION = 0x1;

  // Map of users address and the timestamp of their last update (userAddress => lastUpdateTimestamp)
  mapping(address => uint40) internal _timestamps;

  uint128 internal _avgStableRate;

  // Timestamp of the last update of the total supply
  uint40 internal _totalSupplyTimestamp;

  /**
   * @dev Constructor.
   * @param pool The address of the Pool contract
   */
  constructor(
    IPool pool
  ) DebtTokenBase() IncentivizedERC20(pool, 'STABLE_DEBT_TOKEN_IMPL', 'STABLE_DEBT_TOKEN_IMPL', 0) {
    // Intentionally left blank
  }

  /// @inheritdoc IInitializableDebtToken
  function initialize(
    IPool initializingPool,
    address underlyingAsset,
    IAaveIncentivesController incentivesController,
    uint8 debtTokenDecimals,
    string memory debtTokenName,
    string memory debtTokenSymbol,
    bytes calldata params
  ) external override initializer {
    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);
    _setName(debtTokenName);
    _setSymbol(debtTokenSymbol);
    _setDecimals(debtTokenDecimals);

    _underlyingAsset = underlyingAsset;
    _incentivesController = incentivesController;

    _domainSeparator = _calculateDomainSeparator();

    emit Initialized(
      underlyingAsset,
      address(POOL),
      address(incentivesController),
      debtTokenDecimals,
      debtTokenName,
      debtTokenSymbol,
      params
    );
  }

  /// @inheritdoc VersionedInitializable
  function getRevision() internal pure virtual override returns (uint256) {
    return DEBT_TOKEN_REVISION;
  }

  /// @inheritdoc IStableDebtToken
  function getAverageStableRate() external view virtual override returns (uint256) {
    return _avgStableRate;
  }

  /// @inheritdoc IStableDebtToken
  function getUserLastUpdated(address user) external view virtual override returns (uint40) {
    return _timestamps[user];
  }

  /// @inheritdoc IStableDebtToken
  function getUserStableRate(address user) external view virtual override returns (uint256) {
    return _userState[user].additionalData;
  }

  /// @inheritdoc IERC20
  function balanceOf(address account) public view virtual override returns (uint256) {
    uint256 accountBalance = super.balanceOf(account);
    uint256 stableRate = _userState[account].additionalData;
    if (accountBalance == 0) {
      return 0;
    }
    uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(
      stableRate,
      _timestamps[account]
    );
    return accountBalance.rayMul(cumulatedInterest);
  }

  struct MintLocalVars {
    uint256 previousSupply;
    uint256 nextSupply;
    uint256 amountInRay;
    uint256 currentStableRate;
    uint256 nextStableRate;
    uint256 currentAvgStableRate;
  }

  /// @inheritdoc IStableDebtToken
  function mint(
    address user,
    address onBehalfOf,
    uint256 amount,
    uint256 rate
  ) external virtual override onlyPool returns (bool, uint256, uint256) {
    MintLocalVars memory vars;

    if (user != onBehalfOf) {
      _decreaseBorrowAllowance(onBehalfOf, user, amount);
    }

    (, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(onBehalfOf);

    vars.previousSupply = totalSupply();
    vars.currentAvgStableRate = _avgStableRate;
    vars.nextSupply = _totalSupply = vars.previousSupply + amount;

    vars.amountInRay = amount.wadToRay();

    vars.currentStableRate = _userState[onBehalfOf].additionalData;
    vars.nextStableRate = (vars.currentStableRate.rayMul(currentBalance.wadToRay()) +
      vars.amountInRay.rayMul(rate)).rayDiv((currentBalance + amount).wadToRay());

    _userState[onBehalfOf].additionalData = vars.nextStableRate.toUint128();

    //solium-disable-next-line
    _totalSupplyTimestamp = _timestamps[onBehalfOf] = uint40(block.timestamp);

    // Calculates the updated average stable rate
    vars.currentAvgStableRate = _avgStableRate = (
      (vars.currentAvgStableRate.rayMul(vars.previousSupply.wadToRay()) +
        rate.rayMul(vars.amountInRay)).rayDiv(vars.nextSupply.wadToRay())
    ).toUint128();

    uint256 amountToMint = amount + balanceIncrease;
    _mint(onBehalfOf, amountToMint, vars.previousSupply);

    emit Transfer(address(0), onBehalfOf, amountToMint);
    emit Mint(
      user,
      onBehalfOf,
      amountToMint,
      currentBalance,
      balanceIncrease,
      vars.nextStableRate,
      vars.currentAvgStableRate,
      vars.nextSupply
    );

    return (currentBalance == 0, vars.nextSupply, vars.currentAvgStableRate);
  }

  /// @inheritdoc IStableDebtToken
  function burn(
    address from,
    uint256 amount
  ) external virtual override onlyPool returns (uint256, uint256) {
    (, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(from);

    uint256 previousSupply = totalSupply();
    uint256 nextAvgStableRate = 0;
    uint256 nextSupply = 0;
    uint256 userStableRate = _userState[from].additionalData;

    // Since the total supply and each single user debt accrue separately,
    // there might be accumulation errors so that the last borrower repaying
    // might actually try to repay more than the available debt supply.
    // In this case we simply set the total supply and the avg stable rate to 0
    if (previousSupply <= amount) {
      _avgStableRate = 0;
      _totalSupply = 0;
    } else {
      nextSupply = _totalSupply = previousSupply - amount;
      uint256 firstTerm = uint256(_avgStableRate).rayMul(previousSupply.wadToRay());
      uint256 secondTerm = userStableRate.rayMul(amount.wadToRay());

      // For the same reason described above, when the last user is repaying it might
      // happen that user rate * user balance > avg rate * total supply. In that case,
      // we simply set the avg rate to 0
      if (secondTerm >= firstTerm) {
        nextAvgStableRate = _totalSupply = _avgStableRate = 0;
      } else {
        nextAvgStableRate = _avgStableRate = (
          (firstTerm - secondTerm).rayDiv(nextSupply.wadToRay())
        ).toUint128();
      }
    }

    if (amount == currentBalance) {
      _userState[from].additionalData = 0;
      _timestamps[from] = 0;
    } else {
      //solium-disable-next-line
      _timestamps[from] = uint40(block.timestamp);
    }
    //solium-disable-next-line
    _totalSupplyTimestamp = uint40(block.timestamp);

    if (balanceIncrease > amount) {
      uint256 amountToMint = balanceIncrease - amount;
      _mint(from, amountToMint, previousSupply);
      emit Transfer(address(0), from, amountToMint);
      emit Mint(
        from,
        from,
        amountToMint,
        currentBalance,
        balanceIncrease,
        userStableRate,
        nextAvgStableRate,
        nextSupply
      );
    } else {
      uint256 amountToBurn = amount - balanceIncrease;
      _burn(from, amountToBurn, previousSupply);
      emit Transfer(from, address(0), amountToBurn);
      emit Burn(from, amountToBurn, currentBalance, balanceIncrease, nextAvgStableRate, nextSupply);
    }

    return (nextSupply, nextAvgStableRate);
  }

  /**
   * @notice Calculates the increase in balance since the last user interaction
   * @param user The address of the user for which the interest is being accumulated
   * @return The previous principal balance
   * @return The new principal balance
   * @return The balance increase
   */
  function _calculateBalanceIncrease(
    address user
  ) internal view returns (uint256, uint256, uint256) {
    uint256 previousPrincipalBalance = super.balanceOf(user);

    if (previousPrincipalBalance == 0) {
      return (0, 0, 0);
    }

    uint256 newPrincipalBalance = balanceOf(user);

    return (
      previousPrincipalBalance,
      newPrincipalBalance,
      newPrincipalBalance - previousPrincipalBalance
    );
  }

  /// @inheritdoc IStableDebtToken
  function getSupplyData() external view override returns (uint256, uint256, uint256, uint40) {
    uint256 avgRate = _avgStableRate;
    return (super.totalSupply(), _calcTotalSupply(avgRate), avgRate, _totalSupplyTimestamp);
  }

  /// @inheritdoc IStableDebtToken
  function getTotalSupplyAndAvgRate() external view override returns (uint256, uint256) {
    uint256 avgRate = _avgStableRate;
    return (_calcTotalSupply(avgRate), avgRate);
  }

  /// @inheritdoc IERC20
  function totalSupply() public view virtual override returns (uint256) {
    return _calcTotalSupply(_avgStableRate);
  }

  /// @inheritdoc IStableDebtToken
  function getTotalSupplyLastUpdated() external view override returns (uint40) {
    return _totalSupplyTimestamp;
  }

  /// @inheritdoc IStableDebtToken
  function principalBalanceOf(address user) external view virtual override returns (uint256) {
    return super.balanceOf(user);
  }

  /// @inheritdoc IStableDebtToken
  function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {
    return _underlyingAsset;
  }

  /**
   * @notice Calculates the total supply
   * @param avgRate The average rate at which the total supply increases
   * @return The debt balance of the user since the last burn/mint action
   */
  function _calcTotalSupply(uint256 avgRate) internal view returns (uint256) {
    uint256 principalSupply = super.totalSupply();

    if (principalSupply == 0) {
      return 0;
    }

    uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(
      avgRate,
      _totalSupplyTimestamp
    );

    return principalSupply.rayMul(cumulatedInterest);
  }

  /**
   * @notice Mints stable debt tokens to a user
   * @param account The account receiving the debt tokens
   * @param amount The amount being minted
   * @param oldTotalSupply The total supply before the minting event
   */
  function _mint(address account, uint256 amount, uint256 oldTotalSupply) internal {
    uint128 castAmount = amount.toUint128();
    uint128 oldAccountBalance = _userState[account].balance;
    _userState[account].balance = oldAccountBalance + castAmount;

    if (address(_incentivesController) != address(0)) {
      _incentivesController.handleAction(account, oldTotalSupply, oldAccountBalance);
    }
  }

  /**
   * @notice Burns stable debt tokens of a user
   * @param account The user getting his debt burned
   * @param amount The amount being burned
   * @param oldTotalSupply The total supply before the burning event
   */
  function _burn(address account, uint256 amount, uint256 oldTotalSupply) internal {
    uint128 castAmount = amount.toUint128();
    uint128 oldAccountBalance = _userState[account].balance;
    _userState[account].balance = oldAccountBalance - castAmount;

    if (address(_incentivesController) != address(0)) {
      _incentivesController.handleAction(account, oldTotalSupply, oldAccountBalance);
    }
  }

  /// @inheritdoc EIP712Base
  function _EIP712BaseId() internal view override returns (string memory) {
    return name();
  }

  /**
   * @dev Being non transferrable, the debt token does not implement any of the
   * standard ERC20 functions for transfer and allowance.
   */
  function transfer(address, uint256) external virtual override returns (bool) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  function allowance(address, address) external view virtual override returns (uint256) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  function approve(address, uint256) external virtual override returns (bool) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  function transferFrom(address, address, uint256) external virtual override returns (bool) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  function increaseAllowance(address, uint256) external virtual override returns (bool) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  function decreaseAllowance(address, uint256) external virtual override returns (bool) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }
}



================================================
FILE: contracts/protocol/tokenization/VariableDebtToken.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';
import {SafeCast} from '../../dependencies/openzeppelin/contracts/SafeCast.sol';
import {VersionedInitializable} from '../libraries/aave-upgradeability/VersionedInitializable.sol';
import {WadRayMath} from '../libraries/math/WadRayMath.sol';
import {Errors} from '../libraries/helpers/Errors.sol';
import {IPool} from '../../interfaces/IPool.sol';
import {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol';
import {IInitializableDebtToken} from '../../interfaces/IInitializableDebtToken.sol';
import {IVariableDebtToken} from '../../interfaces/IVariableDebtToken.sol';
import {EIP712Base} from './base/EIP712Base.sol';
import {DebtTokenBase} from './base/DebtTokenBase.sol';
import {ScaledBalanceTokenBase} from './base/ScaledBalanceTokenBase.sol';

/**
 * @title VariableDebtToken
 * @author Aave
 * @notice Implements a variable debt token to track the borrowing positions of users
 * at variable rate mode
 * @dev Transfer and approve functionalities are disabled since its a non-transferable token
 */
contract VariableDebtToken is DebtTokenBase, ScaledBalanceTokenBase, IVariableDebtToken {
  using WadRayMath for uint256;
  using SafeCast for uint256;

  uint256 public constant DEBT_TOKEN_REVISION = 0x1;

  /**
   * @dev Constructor.
   * @param pool The address of the Pool contract
   */
  constructor(
    IPool pool
  )
    DebtTokenBase()
    ScaledBalanceTokenBase(pool, 'VARIABLE_DEBT_TOKEN_IMPL', 'VARIABLE_DEBT_TOKEN_IMPL', 0)
  {
    // Intentionally left blank
  }

  /// @inheritdoc IInitializableDebtToken
  function initialize(
    IPool initializingPool,
    address underlyingAsset,
    IAaveIncentivesController incentivesController,
    uint8 debtTokenDecimals,
    string memory debtTokenName,
    string memory debtTokenSymbol,
    bytes calldata params
  ) external override initializer {
    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);
    _setName(debtTokenName);
    _setSymbol(debtTokenSymbol);
    _setDecimals(debtTokenDecimals);

    _underlyingAsset = underlyingAsset;
    _incentivesController = incentivesController;

    _domainSeparator = _calculateDomainSeparator();

    emit Initialized(
      underlyingAsset,
      address(POOL),
      address(incentivesController),
      debtTokenDecimals,
      debtTokenName,
      debtTokenSymbol,
      params
    );
  }

  /// @inheritdoc VersionedInitializable
  function getRevision() internal pure virtual override returns (uint256) {
    return DEBT_TOKEN_REVISION;
  }

  /// @inheritdoc IERC20
  function balanceOf(address user) public view virtual override returns (uint256) {
    uint256 scaledBalance = super.balanceOf(user);

    if (scaledBalance == 0) {
      return 0;
    }

    return scaledBalance.rayMul(POOL.getReserveNormalizedVariableDebt(_underlyingAsset));
  }

  /// @inheritdoc IVariableDebtToken
  function mint(
    address user,
    address onBehalfOf,
    uint256 amount,
    uint256 index
  ) external virtual override onlyPool returns (bool, uint256) {
    if (user != onBehalfOf) {
      _decreaseBorrowAllowance(onBehalfOf, user, amount);
    }
    return (_mintScaled(user, onBehalfOf, amount, index), scaledTotalSupply());
  }

  /// @inheritdoc IVariableDebtToken
  function burn(
    address from,
    uint256 amount,
    uint256 index
  ) external virtual override onlyPool returns (uint256) {
    _burnScaled(from, address(0), amount, index);
    return scaledTotalSupply();
  }

  /// @inheritdoc IERC20
  function totalSupply() public view virtual override returns (uint256) {
    return super.totalSupply().rayMul(POOL.getReserveNormalizedVariableDebt(_underlyingAsset));
  }

  /// @inheritdoc EIP712Base
  function _EIP712BaseId() internal view override returns (string memory) {
    return name();
  }

  /**
   * @dev Being non transferrable, the debt token does not implement any of the
   * standard ERC20 functions for transfer and allowance.
   */
  function transfer(address, uint256) external virtual override returns (bool) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  function allowance(address, address) external view virtual override returns (uint256) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  function approve(address, uint256) external virtual override returns (bool) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  function transferFrom(address, address, uint256) external virtual override returns (bool) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  function increaseAllowance(address, uint256) external virtual override returns (bool) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  function decreaseAllowance(address, uint256) external virtual override returns (bool) {
    revert(Errors.OPERATION_NOT_SUPPORTED);
  }

  /// @inheritdoc IVariableDebtToken
  function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {
    return _underlyingAsset;
  }
}



================================================
FILE: contracts/protocol/tokenization/base/DebtTokenBase.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {Context} from '../../../dependencies/openzeppelin/contracts/Context.sol';
import {Errors} from '../../libraries/helpers/Errors.sol';
import {VersionedInitializable} from '../../libraries/aave-upgradeability/VersionedInitializable.sol';
import {ICreditDelegationToken} from '../../../interfaces/ICreditDelegationToken.sol';
import {EIP712Base} from './EIP712Base.sol';

/**
 * @title DebtTokenBase
 * @author Aave
 * @notice Base contract for different types of debt tokens, like StableDebtToken or VariableDebtToken
 */
abstract contract DebtTokenBase is
  VersionedInitializable,
  EIP712Base,
  Context,
  ICreditDelegationToken
{
  // Map of borrow allowances (delegator => delegatee => borrowAllowanceAmount)
  mapping(address => mapping(address => uint256)) internal _borrowAllowances;

  // Credit Delegation Typehash
  bytes32 public constant DELEGATION_WITH_SIG_TYPEHASH =
    keccak256('DelegationWithSig(address delegatee,uint256 value,uint256 nonce,uint256 deadline)');

  address internal _underlyingAsset;

  /**
   * @dev Constructor.
   */
  constructor() EIP712Base() {
    // Intentionally left blank
  }

  /// @inheritdoc ICreditDelegationToken
  function approveDelegation(address delegatee, uint256 amount) external override {
    _approveDelegation(_msgSender(), delegatee, amount);
  }

  /// @inheritdoc ICreditDelegationToken
  function delegationWithSig(
    address delegator,
    address delegatee,
    uint256 value,
    uint256 deadline,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external {
    require(delegator != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
    //solium-disable-next-line
    require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);
    uint256 currentValidNonce = _nonces[delegator];
    bytes32 digest = keccak256(
      abi.encodePacked(
        '\x19\x01',
        DOMAIN_SEPARATOR(),
        keccak256(
          abi.encode(DELEGATION_WITH_SIG_TYPEHASH, delegatee, value, currentValidNonce, deadline)
        )
      )
    );
    require(delegator == ecrecover(digest, v, r, s), Errors.INVALID_SIGNATURE);
    _nonces[delegator] = currentValidNonce + 1;
    _approveDelegation(delegator, delegatee, value);
  }

  /// @inheritdoc ICreditDelegationToken
  function borrowAllowance(
    address fromUser,
    address toUser
  ) external view override returns (uint256) {
    return _borrowAllowances[fromUser][toUser];
  }

  /**
   * @notice Updates the borrow allowance of a user on the specific debt token.
   * @param delegator The address delegating the borrowing power
   * @param delegatee The address receiving the delegated borrowing power
   * @param amount The allowance amount being delegated.
   */
  function _approveDelegation(address delegator, address delegatee, uint256 amount) internal {
    _borrowAllowances[delegator][delegatee] = amount;
    emit BorrowAllowanceDelegated(delegator, delegatee, _underlyingAsset, amount);
  }

  /**
   * @notice Decreases the borrow allowance of a user on the specific debt token.
   * @param delegator The address delegating the borrowing power
   * @param delegatee The address receiving the delegated borrowing power
   * @param amount The amount to subtract from the current allowance
   */
  function _decreaseBorrowAllowance(address delegator, address delegatee, uint256 amount) internal {
    uint256 newAllowance = _borrowAllowances[delegator][delegatee] - amount;

    _borrowAllowances[delegator][delegatee] = newAllowance;

    emit BorrowAllowanceDelegated(delegator, delegatee, _underlyingAsset, newAllowance);
  }
}



================================================
FILE: contracts/protocol/tokenization/base/EIP712Base.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

/**
 * @title EIP712Base
 * @author Aave
 * @notice Base contract implementation of EIP712.
 */
abstract contract EIP712Base {
  bytes public constant EIP712_REVISION = bytes('1');
  bytes32 internal constant EIP712_DOMAIN =
    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');

  // Map of address nonces (address => nonce)
  mapping(address => uint256) internal _nonces;

  bytes32 internal _domainSeparator;
  uint256 internal immutable _chainId;

  /**
   * @dev Constructor.
   */
  constructor() {
    _chainId = block.chainid;
  }

  /**
   * @notice Get the domain separator for the token
   * @dev Return cached value if chainId matches cache, otherwise recomputes separator
   * @return The domain separator of the token at current chain
   */
  function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {
    if (block.chainid == _chainId) {
      return _domainSeparator;
    }
    return _calculateDomainSeparator();
  }

  /**
   * @notice Returns the nonce value for address specified as parameter
   * @param owner The address for which the nonce is being returned
   * @return The nonce value for the input address`
   */
  function nonces(address owner) public view virtual returns (uint256) {
    return _nonces[owner];
  }

  /**
   * @notice Compute the current domain separator
   * @return The domain separator for the token
   */
  function _calculateDomainSeparator() internal view returns (bytes32) {
    return
      keccak256(
        abi.encode(
          EIP712_DOMAIN,
          keccak256(bytes(_EIP712BaseId())),
          keccak256(EIP712_REVISION),
          block.chainid,
          address(this)
        )
      );
  }

  /**
   * @notice Returns the user readable name of signing domain (e.g. token name)
   * @return The name of the signing domain
   */
  function _EIP712BaseId() internal view virtual returns (string memory);
}



================================================
FILE: contracts/protocol/tokenization/base/IncentivizedERC20.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {Context} from '../../../dependencies/openzeppelin/contracts/Context.sol';
import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';
import {IERC20Detailed} from '../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';
import {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';
import {WadRayMath} from '../../libraries/math/WadRayMath.sol';
import {Errors} from '../../libraries/helpers/Errors.sol';
import {IAaveIncentivesController} from '../../../interfaces/IAaveIncentivesController.sol';
import {IPoolAddressesProvider} from '../../../interfaces/IPoolAddressesProvider.sol';
import {IPool} from '../../../interfaces/IPool.sol';
import {IACLManager} from '../../../interfaces/IACLManager.sol';

/**
 * @title IncentivizedERC20
 * @author Aave, inspired by the Openzeppelin ERC20 implementation
 * @notice Basic ERC20 implementation
 */
abstract contract IncentivizedERC20 is Context, IERC20Detailed {
  using WadRayMath for uint256;
  using SafeCast for uint256;

  /**
   * @dev Only pool admin can call functions marked by this modifier.
   */
  modifier onlyPoolAdmin() {
    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);
    _;
  }

  /**
   * @dev Only pool can call functions marked by this modifier.
   */
  modifier onlyPool() {
    require(_msgSender() == address(POOL), Errors.CALLER_MUST_BE_POOL);
    _;
  }

  /**
   * @dev UserState - additionalData is a flexible field.
   * ATokens and VariableDebtTokens use this field store the index of the
   * user's last supply/withdrawal/borrow/repayment. StableDebtTokens use
   * this field to store the user's stable rate.
   */
  struct UserState {
    uint128 balance;
    uint128 additionalData;
  }
  // Map of users address and their state data (userAddress => userStateData)
  mapping(address => UserState) internal _userState;

  // Map of allowances (delegator => delegatee => allowanceAmount)
  mapping(address => mapping(address => uint256)) private _allowances;

  uint256 internal _totalSupply;
  string private _name;
  string private _symbol;
  uint8 private _decimals;
  IAaveIncentivesController internal _incentivesController;
  IPoolAddressesProvider internal immutable _addressesProvider;
  IPool public immutable POOL;

  /**
   * @dev Constructor.
   * @param pool The reference to the main Pool contract
   * @param name The name of the token
   * @param symbol The symbol of the token
   * @param decimals The number of decimals of the token
   */
  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals) {
    _addressesProvider = pool.ADDRESSES_PROVIDER();
    _name = name;
    _symbol = symbol;
    _decimals = decimals;
    POOL = pool;
  }

  /// @inheritdoc IERC20Detailed
  function name() public view override returns (string memory) {
    return _name;
  }

  /// @inheritdoc IERC20Detailed
  function symbol() external view override returns (string memory) {
    return _symbol;
  }

  /// @inheritdoc IERC20Detailed
  function decimals() external view override returns (uint8) {
    return _decimals;
  }

  /// @inheritdoc IERC20
  function totalSupply() public view virtual override returns (uint256) {
    return _totalSupply;
  }

  /// @inheritdoc IERC20
  function balanceOf(address account) public view virtual override returns (uint256) {
    return _userState[account].balance;
  }

  /**
   * @notice Returns the address of the Incentives Controller contract
   * @return The address of the Incentives Controller
   */
  function getIncentivesController() external view virtual returns (IAaveIncentivesController) {
    return _incentivesController;
  }

  /**
   * @notice Sets a new Incentives Controller
   * @param controller the new Incentives controller
   */
  function setIncentivesController(IAaveIncentivesController controller) external onlyPoolAdmin {
    _incentivesController = controller;
  }

  /// @inheritdoc IERC20
  function transfer(address recipient, uint256 amount) external virtual override returns (bool) {
    uint128 castAmount = amount.toUint128();
    _transfer(_msgSender(), recipient, castAmount);
    return true;
  }

  /// @inheritdoc IERC20
  function allowance(
    address owner,
    address spender
  ) external view virtual override returns (uint256) {
    return _allowances[owner][spender];
  }

  /// @inheritdoc IERC20
  function approve(address spender, uint256 amount) external virtual override returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  /// @inheritdoc IERC20
  function transferFrom(
    address sender,
    address recipient,
    uint256 amount
  ) external virtual override returns (bool) {
    uint128 castAmount = amount.toUint128();
    _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - castAmount);
    _transfer(sender, recipient, castAmount);
    return true;
  }

  /**
   * @notice Increases the allowance of spender to spend _msgSender() tokens
   * @param spender The user allowed to spend on behalf of _msgSender()
   * @param addedValue The amount being added to the allowance
   * @return `true`
   */
  function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
    return true;
  }

  /**
   * @notice Decreases the allowance of spender to spend _msgSender() tokens
   * @param spender The user allowed to spend on behalf of _msgSender()
   * @param subtractedValue The amount being subtracted to the allowance
   * @return `true`
   */
  function decreaseAllowance(
    address spender,
    uint256 subtractedValue
  ) external virtual returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);
    return true;
  }

  /**
   * @notice Transfers tokens between two users and apply incentives if defined.
   * @param sender The source address
   * @param recipient The destination address
   * @param amount The amount getting transferred
   */
  function _transfer(address sender, address recipient, uint128 amount) internal virtual {
    uint128 oldSenderBalance = _userState[sender].balance;
    _userState[sender].balance = oldSenderBalance - amount;
    uint128 oldRecipientBalance = _userState[recipient].balance;
    _userState[recipient].balance = oldRecipientBalance + amount;

    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
    if (address(incentivesControllerLocal) != address(0)) {
      uint256 currentTotalSupply = _totalSupply;
      incentivesControllerLocal.handleAction(sender, currentTotalSupply, oldSenderBalance);
      if (sender != recipient) {
        incentivesControllerLocal.handleAction(recipient, currentTotalSupply, oldRecipientBalance);
      }
    }
  }

  /**
   * @notice Approve `spender` to use `amount` of `owner`s balance
   * @param owner The address owning the tokens
   * @param spender The address approved for spending
   * @param amount The amount of tokens to approve spending of
   */
  function _approve(address owner, address spender, uint256 amount) internal virtual {
    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }

  /**
   * @notice Update the name of the token
   * @param newName The new name for the token
   */
  function _setName(string memory newName) internal {
    _name = newName;
  }

  /**
   * @notice Update the symbol for the token
   * @param newSymbol The new symbol for the token
   */
  function _setSymbol(string memory newSymbol) internal {
    _symbol = newSymbol;
  }

  /**
   * @notice Update the number of decimals for the token
   * @param newDecimals The new number of decimals for the token
   */
  function _setDecimals(uint8 newDecimals) internal {
    _decimals = newDecimals;
  }
}



================================================
FILE: contracts/protocol/tokenization/base/MintableIncentivizedERC20.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {IAaveIncentivesController} from '../../../interfaces/IAaveIncentivesController.sol';
import {IPool} from '../../../interfaces/IPool.sol';
import {IncentivizedERC20} from './IncentivizedERC20.sol';

/**
 * @title MintableIncentivizedERC20
 * @author Aave
 * @notice Implements mint and burn functions for IncentivizedERC20
 */
abstract contract MintableIncentivizedERC20 is IncentivizedERC20 {
  /**
   * @dev Constructor.
   * @param pool The reference to the main Pool contract
   * @param name The name of the token
   * @param symbol The symbol of the token
   * @param decimals The number of decimals of the token
   */
  constructor(
    IPool pool,
    string memory name,
    string memory symbol,
    uint8 decimals
  ) IncentivizedERC20(pool, name, symbol, decimals) {
    // Intentionally left blank
  }

  /**
   * @notice Mints tokens to an account and apply incentives if defined
   * @param account The address receiving tokens
   * @param amount The amount of tokens to mint
   */
  function _mint(address account, uint128 amount) internal virtual {
    uint256 oldTotalSupply = _totalSupply;
    _totalSupply = oldTotalSupply + amount;

    uint128 oldAccountBalance = _userState[account].balance;
    _userState[account].balance = oldAccountBalance + amount;

    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
    if (address(incentivesControllerLocal) != address(0)) {
      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);
    }
  }

  /**
   * @notice Burns tokens from an account and apply incentives if defined
   * @param account The account whose tokens are burnt
   * @param amount The amount of tokens to burn
   */
  function _burn(address account, uint128 amount) internal virtual {
    uint256 oldTotalSupply = _totalSupply;
    _totalSupply = oldTotalSupply - amount;

    uint128 oldAccountBalance = _userState[account].balance;
    _userState[account].balance = oldAccountBalance - amount;

    IAaveIncentivesController incentivesControllerLocal = _incentivesController;

    if (address(incentivesControllerLocal) != address(0)) {
      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);
    }
  }
}



================================================
FILE: contracts/protocol/tokenization/base/ScaledBalanceTokenBase.sol
================================================
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;

import {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';
import {Errors} from '../../libraries/helpers/Errors.sol';
import {WadRayMath} from '../../libraries/math/WadRayMath.sol';
import {IPool} from '../../../interfaces/IPool.sol';
import {IScaledBalanceToken} from '../../../interfaces/IScaledBalanceToken.sol';
import {MintableIncentivizedERC20} from './MintableIncentivizedERC20.sol';

/**
 * @title ScaledBalanceTokenBase
 * @author Aave
 * @notice Basic ERC20 implementation of scaled balance token
 */
abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBalanceToken {
  using WadRayMath for uint256;
  using SafeCast for uint256;

  /**
   * @dev Constructor.
   * @param pool The reference to the main Pool contract
   * @param name The name of the token
   * @param symbol The symbol of the token
   * @param decimals The number of decimals of the token
   */
  constructor(
    IPool pool,
    string memory name,
    string memory symbol,
    uint8 decimals
  ) MintableIncentivizedERC20(pool, name, symbol, decimals) {
    // Intentionally left blank
  }

  /// @inheritdoc IScaledBalanceToken
  function scaledBalanceOf(address user) external view override returns (uint256) {
    return super.balanceOf(user);
  }

  /// @inheritdoc IScaledBalanceToken
  function getScaledUserBalanceAndSupply(
    address user
  ) external view override returns (uint256, uint256) {
    return (super.balanceOf(user), super.totalSupply());
  }

  /// @inheritdoc IScaledBalanceToken
  function scaledTotalSupply() public view virtual override returns (uint256) {
    return super.totalSupply();
  }

  /// @inheritdoc IScaledBalanceToken
  function getPreviousIndex(address user) external view virtual override returns (uint256) {
    return _userState[user].additionalData;
  }

  /**
   * @notice Implements the basic logic to mint a scaled balance token.
   * @param caller The address performing the mint
   * @param onBehalfOf The address of the user that will receive the scaled tokens
   * @param amount The amount of tokens getting minted
   * @param index The next liquidity index of the reserve
   * @return `true` if the the previous balance of the user was 0
   */
  function _mintScaled(
    address caller,
    address onBehalfOf,
    uint256 amount,
    uint256 index
  ) internal returns (bool) {
    uint256 amountScaled = amount.rayDiv(index);
    require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);

    uint256 scaledBalance = super.balanceOf(onBehalfOf);
    uint256 balanceIncrease = scaledBalance.rayMul(index) -
      scaledBalance.rayMul(_userState[onBehalfOf].additionalData);

    _userState[onBehalfOf].additionalData = index.toUint128();

    _mint(onBehalfOf, amountScaled.toUint128());

    uint256 amountToMint = amount + balanceIncrease;
    emit Transfer(address(0), onBehalfOf, amountToMint);
    emit Mint(caller, onBehalfOf, amountToMint, balanceIncrease, index);

    return (scaledBalance == 0);
  }

  /**
   * @notice Implements the basic logic to burn a scaled balance token.
   * @dev In some instances, a burn transaction will emit a mint event
   * if the amount to burn is less than the interest that the user accrued
   * @param user The user which debt is burnt
   * @param target The address that will receive the underlying, if any
   * @param amount The amount getting burned
   * @param index The variable debt index of the reserve
   */
  function _burnScaled(address user, address target, uint256 amount, uint256 index) internal {
    uint256 amountScaled = amount.rayDiv(index);
    require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);

    uint256 scaledBalance = super.balanceOf(user);
    uint256 balanceIncrease = scaledBalance.rayMul(index) -
      scaledBalance.rayMul(_userState[user].additionalData);

    _userState[user].additionalData = index.toUint128();

    _burn(user, amountScaled.toUint128());

    if (balanceIncrease > amount) {
      uint256 amountToMint = balanceIncrease - amount;
      emit Transfer(address(0), user, amountToMint);
      emit Mint(user, user, amountToMint, balanceIncrease, index);
    } else {
      uint256 amountToBurn = amount - balanceIncrease;
      emit Transfer(user, address(0), amountToBurn);
      emit Burn(user, target, amountToBurn, balanceIncrease, index);
    }
  }

  /**
   * @notice Implements the basic logic to transfer scaled balance tokens between two users
   * @dev It emits a mint event with the interest accrued per user
   * @param sender The source address
   * @param recipient The destination address
   * @param amount The amount getting transferred
   * @param index The next liquidity index of the reserve
   */
  function _transfer(address sender, address recipient, uint256 amount, uint256 index) internal {
    uint256 senderScaledBalance = super.balanceOf(sender);
    uint256 senderBalanceIncrease = senderScaledBalance.rayMul(index) -
      senderScaledBalance.rayMul(_userState[sender].additionalData);

    uint256 recipientScaledBalance = super.balanceOf(recipient);
    uint256 recipientBalanceIncrease = recipientScaledBalance.rayMul(index) -
      recipientScaledBalance.rayMul(_userState[recipient].additionalData);

    _userState[sender].additionalData = index.toUint128();
    _userState[recipient].additionalData = index.toUint128();

    super._transfer(sender, recipient, amount.rayDiv(index).toUint128());

    if (senderBalanceIncrease > 0) {
      emit Transfer(address(0), sender, senderBalanceIncrease);
      emit Mint(_msgSender(), sender, senderBalanceIncrease, senderBalanceIncrease, index);
    }

    if (sender != recipient && recipientBalanceIncrease > 0) {
      emit Transfer(address(0), recipient, recipientBalanceIncrease);
      emit Mint(_msgSender(), recipient, recipientBalanceIncrease, recipientBalanceIncrease, index);
    }

    emit Transfer(sender, recipient, amount);
  }
}



================================================
FILE: helpers/constants.ts
================================================
// ----------------
// MATH
// ----------------

import { BigNumber } from 'ethers';
import { parseEther, parseUnits } from 'ethers/lib/utils';

export const PERCENTAGE_FACTOR = '10000';
export const HALF_PERCENTAGE = BigNumber.from(PERCENTAGE_FACTOR).div(2).toString();
export const WAD = BigNumber.from(10).pow(18).toString();
export const HALF_WAD = BigNumber.from(WAD).div(2).toString();
export const RAY = BigNumber.from(10).pow(27).toString();
export const HALF_RAY = BigNumber.from(RAY).div(2).toString();
export const WAD_RAY_RATIO = parseUnits('1', 9).toString();
export const oneEther = parseUnits('1', 18);
export const oneRay = parseUnits('1', 27);
export const MAX_UINT_AMOUNT =
  '115792089237316195423570985008687907853269984665640564039457584007913129639935';
export const MAX_BORROW_CAP = '68719476735';
export const MAX_SUPPLY_CAP = '68719476735';
export const MAX_UNBACKED_MINT_CAP = '68719476735';
export const ONE_YEAR = '31536000';
export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
export const ONE_ADDRESS = '0x0000000000000000000000000000000000000001';
// ----------------
// PROTOCOL GLOBAL PARAMS
// ----------------
export const MOCK_USD_PRICE_IN_WEI = '5848466240000000';
export const USD_ADDRESS = '0x10F7Fc1F91Ba351f9C629c5947AD69bD03C05b96';
export const AAVE_REFERRAL = '0';

export const TEST_SNAPSHOT_ID = '0x1';
export const HARDHAT_CHAINID = 31337;
export const COVERAGE_CHAINID = 1337;



================================================
FILE: helpers/contracts-helpers.ts
================================================
import { ethers } from 'ethers';
import { signTypedData_v4 } from 'eth-sig-util';
import { fromRpcSig, ECDSASignature } from 'ethereumjs-util';
import { tEthereumAddress, tStringTokenSmallUnits } from './types';
import { getContract } from '@aave/deploy-v3';
import { impersonateAccountsHardhat } from './misc-utils';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { InitializableImmutableAdminUpgradeabilityProxy } from '../types';

declare var hre: HardhatRuntimeEnvironment;

export const convertToCurrencyDecimals = async (tokenAddress: tEthereumAddress, amount: string) => {
  const token = await getContract('IERC20Detailed', tokenAddress);
  let decimals = (await token.decimals()).toString();

  return ethers.utils.parseUnits(amount, decimals);
};

export const buildPermitParams = (
  chainId: number,
  token: tEthereumAddress,
  revision: string,
  tokenName: string,
  owner: tEthereumAddress,
  spender: tEthereumAddress,
  nonce: number,
  deadline: string,
  value: tStringTokenSmallUnits
) => ({
  types: {
    EIP712Domain: [
      { name: 'name', type: 'string' },
      { name: 'version', type: 'string' },
      { name: 'chainId', type: 'uint256' },
      { name: 'verifyingContract', type: 'address' },
    ],
    Permit: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'nonce', type: 'uint256' },
      { name: 'deadline', type: 'uint256' },
    ],
  },
  primaryType: 'Permit' as const,
  domain: {
    name: tokenName,
    version: revision,
    chainId: chainId,
    verifyingContract: token,
  },
  message: {
    owner,
    spender,
    value,
    nonce,
    deadline,
  },
});

export const getSignatureFromTypedData = (
  privateKey: string,
  typedData: any // TODO: should be TypedData, from eth-sig-utils, but TS doesn't accept it
): ECDSASignature => {
  const signature = signTypedData_v4(Buffer.from(privateKey.substring(2, 66), 'hex'), {
    data: typedData,
  });
  return fromRpcSig(signature);
};

export const buildDelegationWithSigParams = (
  chainId: number,
  token: tEthereumAddress,
  revision: string,
  tokenName: string,
  delegatee: tEthereumAddress,
  nonce: number,
  deadline: string,
  value: tStringTokenSmallUnits
) => ({
  types: {
    EIP712Domain: [
      { name: 'name', type: 'string' },
      { name: 'version', type: 'string' },
      { name: 'chainId', type: 'uint256' },
      { name: 'verifyingContract', type: 'address' },
    ],
    DelegationWithSig: [
      { name: 'delegatee', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'nonce', type: 'uint256' },
      { name: 'deadline', type: 'uint256' },
    ],
  },
  primaryType: 'DelegationWithSig' as const,
  domain: {
    name: tokenName,
    version: revision,
    chainId: chainId,
    verifyingContract: token,
  },
  message: {
    delegatee,
    value,
    nonce,
    deadline,
  },
});

export const getProxyImplementation = async (proxyAdminAddress: string, proxyAddress: string) => {
  // Impersonate proxy admin
  await impersonateAccountsHardhat([proxyAdminAddress]);
  const proxyAdminSigner = await hre.ethers.getSigner(proxyAdminAddress);

  const proxy = (await hre.ethers.getContractAt(
    'InitializableImmutableAdminUpgradeabilityProxy',
    proxyAddress,
    proxyAdminSigner
  )) as InitializableImmutableAdminUpgradeabilityProxy;

  const implementationAddress = await proxy.callStatic.implementation();
  return implementationAddress;
};

export const getProxyAdmin = async (proxyAddress: string) => {
  const EIP1967_ADMIN_SLOT = '0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103';
  const adminStorageSlot = await hre.ethers.provider.getStorageAt(
    proxyAddress,
    EIP1967_ADMIN_SLOT,
    'latest'
  );
  const adminAddress = ethers.utils.defaultAbiCoder
    .decode(['address'], adminStorageSlot)
    .toString();
  return ethers.utils.getAddress(adminAddress);
};



================================================
FILE: helpers/index.ts
================================================
export * from './constants';
export * from './types';
export * from './contracts-helpers';



================================================
FILE: helpers/misc-utils.ts
================================================
import { Wallet, BigNumber } from 'ethers';
import { HardhatRuntimeEnvironment } from 'hardhat/types';

declare var hre: HardhatRuntimeEnvironment;

export const createRandomAddress = () => Wallet.createRandom().address;

export const timeLatest = async () => {
  const block = await hre.ethers.provider.getBlock('latest');
  return BigNumber.from(block.timestamp);
};

export const setBlocktime = async (time: number) => {
  await hre.ethers.provider.send('evm_setNextBlockTimestamp', [time]);
};

export const setAutomine = async (activate: boolean) => {
  await hre.network.provider.send('evm_setAutomine', [activate]);
  if (activate) await hre.network.provider.send('evm_mine', []);
};

export const setAutomineEvm = async (activate: boolean) => {
  await hre.network.provider.send('evm_setAutomine', [activate]);
};

export const impersonateAccountsHardhat = async (accounts: string[]) => {
  if (process.env.TENDERLY === 'true') {
    return;
  }
  // eslint-disable-next-line no-restricted-syntax
  for (const account of accounts) {
    // eslint-disable-next-line no-await-in-loop
    await hre.network.provider.request({
      method: 'hardhat_impersonateAccount',
      params: [account],
    });
  }
};



================================================
FILE: helpers/tenderly-utils.ts
================================================
import { HardhatRuntimeEnvironment } from 'hardhat/types';

declare var hre: HardhatRuntimeEnvironment;

export const usingTenderly = () =>
  hre &&
  ((hre as HardhatRuntimeEnvironment).network.name.includes('tenderly') ||
    process.env.TENDERLY === 'true');



================================================
FILE: helpers/types.ts
================================================
import { BigNumber } from '@ethersproject/bignumber';

export interface SymbolMap<T> {
  [symbol: string]: T;
}

export type eNetwork = eEthereumNetwork;

export enum eEthereumNetwork {
  kovan = 'kovan',
  ropsten = 'ropsten',
  main = 'main',
  coverage = 'coverage',
  hardhat = 'hardhat',
  tenderlyMain = 'tenderlyMain',
}

export enum eContractid {
  Example = 'Example',
  PoolAddressesProvider = 'PoolAddressesProvider',
  MintableERC20 = 'MintableERC20',
  MintableDelegationERC20 = 'MintableDelegationERC20',
  PoolAddressesProviderRegistry = 'PoolAddressesProviderRegistry',
  ACLManager = 'ACLManager',
  PoolParametersProvider = 'PoolParametersProvider',
  PoolConfigurator = 'PoolConfigurator',
  ValidationLogic = 'ValidationLogic',
  ReserveLogic = 'ReserveLogic',
  GenericLogic = 'GenericLogic',
  SupplyLogic = 'SupplyLogic',
  BorrowLogic = 'BorrowLogic',
  FlashLoanLogic = 'FlashLoanLogic',
  LiquidationLogic = 'LiquidationLogic',
  BridgeLogic = 'BridgeLogic',
  EModeLogic = 'EModeLogic',
  ConfiguratorLogic = 'ConfiguratorLogic',
  Pool = 'Pool',
  PriceOracle = 'PriceOracle',
  Proxy = 'Proxy',
  MockAggregator = 'MockAggregator',
  AaveOracle = 'AaveOracle',
  DefaultReserveInterestRateStrategy = 'DefaultReserveInterestRateStrategy',
  InitializableImmutableAdminUpgradeabilityProxy = 'InitializableImmutableAdminUpgradeabilityProxy',
  MockFlashLoanReceiver = 'MockFlashLoanReceiver',
  AToken = 'AToken',
  MockAToken = 'MockAToken',
  DelegationAwareAToken = 'DelegationAwareAToken',
  MockStableDebtToken = 'MockStableDebtToken',
  MockVariableDebtToken = 'MockVariableDebtToken',
  AaveProtocolDataProvider = 'AaveProtocolDataProvider',
  IERC20Detailed = 'IERC20Detailed',
  StableDebtToken = 'StableDebtToken',
  VariableDebtToken = 'VariableDebtToken',
  FeeProvider = 'FeeProvider',
  TokenDistributor = 'TokenDistributor',
  ReservesSetupHelper = 'ReservesSetupHelper',
  WETH = 'WETH',
  WETHMocked = 'WETHMocked',
  PoolImpl = 'PoolImpl',
  PoolConfiguratorImpl = 'PoolConfiguratorImpl',
  MockIncentivesController = 'MockIncentivesController',
  MockReserveConfiguration = 'MockReserveConfiguration',
  MockPool = 'MockPool',
  MockInitializableImple = 'MockInitializableImple',
  MockInitializableImpleV2 = 'MockInitializableImpleV2',
  MockInitializableFromConstructorImple = 'MockInitializableFromConstructorImple',
  MockReentrantInitializableImple = 'MockReentrantInitializableImple',
}

/*
 * Error messages
 */
export enum ProtocolErrors {
  CALLER_NOT_POOL_ADMIN = '1', // 'The caller of the function is not a pool admin'
  CALLER_NOT_EMERGENCY_ADMIN = '2', // 'The caller of the function is not an emergency admin'
  CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3', // 'The caller of the function is not a pool or emergency admin'
  CALLER_NOT_RISK_OR_POOL_ADMIN = '4', // 'The caller of the function is not a risk or pool admin'
  CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5', // 'The caller of the function is not an asset listing or pool admin'
  CALLER_NOT_BRIDGE = '6', // 'The caller of the function is not a bridge'
  ADDRESSES_PROVIDER_NOT_REGISTERED = '7', // 'Pool addresses provider is not registered'
  INVALID_ADDRESSES_PROVIDER_ID = '8', // 'Invalid id for the pool addresses provider'
  NOT_CONTRACT = '9', // 'Address is not a contract'
  CALLER_NOT_POOL_CONFIGURATOR = '10', // 'The caller of the function is not the pool configurator'
  CALLER_NOT_ATOKEN = '11', // 'The caller of the function is not an AToken'
  INVALID_ADDRESSES_PROVIDER = '12', // 'The address of the pool addresses provider is invalid'
  INVALID_FLASHLOAN_EXECUTOR_RETURN = '13', // 'Invalid return value of the flashloan executor function'
  RESERVE_ALREADY_ADDED = '14', // 'Reserve has already been added to reserve list'
  NO_MORE_RESERVES_ALLOWED = '15', // 'Maximum amount of reserves in the pool reached'
  EMODE_CATEGORY_RESERVED = '16', // 'Zero eMode category is reserved for volatile heterogeneous assets'
  INVALID_EMODE_CATEGORY_ASSIGNMENT = '17', // 'Invalid eMode category assignment to asset'
  RESERVE_LIQUIDITY_NOT_ZERO = '18', // 'The liquidity of the reserve needs to be 0'
  FLASHLOAN_PREMIUM_INVALID = '19', // 'Invalid flashloan premium'
  INVALID_RESERVE_PARAMS = '20', // 'Invalid risk parameters for the reserve'
  INVALID_EMODE_CATEGORY_PARAMS = '21', // 'Invalid risk parameters for the eMode category'
  BRIDGE_PROTOCOL_FEE_INVALID = '22', // 'Invalid bridge protocol fee'
  CALLER_MUST_BE_POOL = '23', // 'The caller of this function must be a pool'
  INVALID_MINT_AMOUNT = '24', // 'Invalid amount to mint'
  INVALID_BURN_AMOUNT = '25', // 'Invalid amount to burn'
  INVALID_AMOUNT = '26', // 'Amount must be greater than 0'
  RESERVE_INACTIVE = '27', // 'Action requires an active reserve'
  RESERVE_FROZEN = '28', // 'Action cannot be performed because the reserve is frozen'
  RESERVE_PAUSED = '29', // 'Action cannot be performed because the reserve is paused'
  BORROWING_NOT_ENABLED = '30', // 'Borrowing is not enabled'
  STABLE_BORROWING_NOT_ENABLED = '31', // 'Stable borrowing is not enabled'
  NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32', // 'User cannot withdraw more than the available balance'
  INVALID_INTEREST_RATE_MODE_SELECTED = '33', // 'Invalid interest rate mode selected'
  COLLATERAL_BALANCE_IS_ZERO = '34', // 'The collateral balance is 0'
  HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35', // 'Health factor is lesser than the liquidation threshold'
  COLLATERAL_CANNOT_COVER_NEW_BORROW = '36', // 'There is not enough collateral to cover a new borrow'
  COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37', // 'Collateral is (mostly) the same currency that is being borrowed'
  AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38', // 'The requested amount is greater than the max loan size in stable rate mode'
  NO_DEBT_OF_SELECTED_TYPE = '39', // 'For repayment of a specific type of debt, the user needs to have debt that type'
  NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40', // 'To repay on behalf of a user an explicit amount to repay is needed'
  NO_OUTSTANDING_STABLE_DEBT = '41', // 'User does not have outstanding stable rate debt on this reserve'
  NO_OUTSTANDING_VARIABLE_DEBT = '42', // 'User does not have outstanding variable rate debt on this reserve'
  UNDERLYING_BALANCE_ZERO = '43', // 'The underlying balance needs to be greater than 0'
  INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44', // 'Interest rate rebalance conditions were not met'
  HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45', // 'Health factor is not below the threshold'
  COLLATERAL_CANNOT_BE_LIQUIDATED = '46', // 'The collateral chosen cannot be liquidated'
  SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47', // 'User did not borrow the specified currency'
  INCONSISTENT_FLASHLOAN_PARAMS = '49', // 'Inconsistent flashloan parameters'
  BORROW_CAP_EXCEEDED = '50', // 'Borrow cap is exceeded'
  SUPPLY_CAP_EXCEEDED = '51', // 'Supply cap is exceeded'
  UNBACKED_MINT_CAP_EXCEEDED = '52', // 'Unbacked mint cap is exceeded'
  DEBT_CEILING_EXCEEDED = '53', // 'Debt ceiling is exceeded'
  UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54', // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
  STABLE_DEBT_NOT_ZERO = '55', // 'Stable debt supply is not zero'
  VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56', // 'Variable debt supply is not zero'
  LTV_VALIDATION_FAILED = '57', // 'Ltv validation failed'
  INCONSISTENT_EMODE_CATEGORY = '58', // 'Inconsistent eMode category'
  PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59', // 'Price oracle sentinel validation failed'
  ASSET_NOT_BORROWABLE_IN_ISOLATION = '60', // 'Asset is not borrowable in isolation mode'
  RESERVE_ALREADY_INITIALIZED = '61', // 'Reserve has already been initialized'
  USER_IN_ISOLATION_MODE_OR_LTV_ZERO = '62', // 'User is in isolation mode or ltv is zero'
  INVALID_LTV = '63', // 'Invalid ltv parameter for the reserve'
  INVALID_LIQ_THRESHOLD = '64', // 'Invalid liquidity threshold parameter for the reserve'
  INVALID_LIQ_BONUS = '65', // 'Invalid liquidity bonus parameter for the reserve'
  INVALID_DECIMALS = '66', // 'Invalid decimals parameter of the underlying asset of the reserve'
  INVALID_RESERVE_FACTOR = '67', // 'Invalid reserve factor parameter for the reserve'
  INVALID_BORROW_CAP = '68', // 'Invalid borrow cap for the reserve'
  INVALID_SUPPLY_CAP = '69', // 'Invalid supply cap for the reserve'
  INVALID_LIQUIDATION_PROTOCOL_FEE = '70', // 'Invalid liquidation protocol fee for the reserve'
  INVALID_EMODE_CATEGORY = '71', // 'Invalid eMode category for the reserve'
  INVALID_UNBACKED_MINT_CAP = '72', // 'Invalid unbacked mint cap for the reserve'
  INVALID_DEBT_CEILING = '73', // 'Invalid debt ceiling for the reserve
  INVALID_RESERVE_INDEX = '74', // 'Invalid reserve index'
  ACL_ADMIN_CANNOT_BE_ZERO = '75', // 'ACL admin cannot be set to the zero address'
  INCONSISTENT_PARAMS_LENGTH = '76', // 'Array parameters that should be equal length are not'
  ZERO_ADDRESS_NOT_VALID = '77', // 'Zero address not valid'
  INVALID_EXPIRATION = '78', // 'Invalid expiration'
  INVALID_SIGNATURE = '79', // 'Invalid signature'
  OPERATION_NOT_SUPPORTED = '80', // 'Operation not supported'
  DEBT_CEILING_NOT_ZERO = '81', // 'Debt ceiling is not zero'
  ASSET_NOT_LISTED = '82', // 'Asset is not listed'
  INVALID_OPTIMAL_USAGE_RATIO = '83', // 'Invalid optimal usage ratio'
  INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84', // 'Invalid optimal stable to total debt ratio'
  UNDERLYING_CANNOT_BE_RESCUED = '85', // 'The underlying asset cannot be rescued'
  ADDRESSES_PROVIDER_ALREADY_ADDED = '86', // 'Reserve has already been added to reserve list'
  POOL_ADDRESSES_DO_NOT_MATCH = '87', // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
  STABLE_BORROWING_ENABLED = '88', // 'Stable borrowing is enabled'
  SILOED_BORROWING_VIOLATION = '89', // user is trying to violate the siloed borrowing rule
  RESERVE_DEBT_NOT_ZERO = '90', // the total debt of the reserve needs to be 0
  FLASHLOAN_DISABLED = '91', // FlashLoaning for this asset is disabled
  // SafeCast
  SAFECAST_UINT128_OVERFLOW = "SafeCast: value doesn't fit in 128 bits",

  // Ownable
  OWNABLE_ONLY_OWNER = 'Ownable: caller is not the owner',

  // ERC20
  ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE = 'ERC20: transfer amount exceeds balance',

  // old

  INVALID_FROM_BALANCE_AFTER_TRANSFER = 'Invalid from balance after transfer',
  INVALID_TO_BALANCE_AFTER_TRANSFER = 'Invalid from balance after transfer',
  INVALID_HF = 'Invalid health factor',
}

export type tEthereumAddress = string;
export type tStringTokenBigUnits = string; // 1 ETH, or 10e6 USDC or 10e18 DAI
export type tBigNumberTokenBigUnits = BigNumber;
export type tStringTokenSmallUnits = string; // 1 wei, or 1 basic unit of USDC, or 1 basic unit of DAI
export type tBigNumberTokenSmallUnits = BigNumber;

export interface iAssetCommon<T> {
  [key: string]: T;
}
export interface iAssetBase<T> {
  WETH: T;
  DAI: T;
  TUSD: T;
  USDC: T;
  USDT: T;
  SUSD: T;
  AAVE: T;
  BAT: T;
  MKR: T;
  LINK: T;
  KNC: T;
  WBTC: T;
  MANA: T;
  ZRX: T;
  SNX: T;
  BUSD: T;
  YFI: T;
  UNI: T;
  USD: T;
  REN: T;
  ENJ: T;
  UniDAIWETH: T;
  UniWBTCWETH: T;
  UniAAVEWETH: T;
  UniBATWETH: T;
  UniDAIUSDC: T;
  UniCRVWETH: T;
  UniLINKWETH: T;
  UniMKRWETH: T;
  UniRENWETH: T;
  UniSNXWETH: T;
  UniUNIWETH: T;
  UniUSDCWETH: T;
  UniWBTCUSDC: T;
  UniYFIWETH: T;
  BptWBTCWETH: T;
  BptBALWETH: T;
  WMATIC: T;
  STAKE: T;
  xSUSHI: T;
}

export type iAssetsWithoutETH<T> = Omit<iAssetBase<T>, 'ETH'>;

export type iAssetsWithoutUSD<T> = Omit<iAssetBase<T>, 'USD'>;

export type iAavePoolAssets<T> = Pick<
  iAssetsWithoutUSD<T>,
  | 'DAI'
  | 'TUSD'
  | 'USDC'
  | 'USDT'
  | 'SUSD'
  | 'AAVE'
  | 'BAT'
  | 'MKR'
  | 'LINK'
  | 'KNC'
  | 'WBTC'
  | 'MANA'
  | 'ZRX'
  | 'SNX'
  | 'BUSD'
  | 'WETH'
  | 'YFI'
  | 'UNI'
  | 'REN'
  | 'ENJ'
  | 'xSUSHI'
>;

export type iMultiPoolsAssets<T> = iAssetCommon<T> | iAavePoolAssets<T>;

export type iAssetAggregatorBase<T> = iAssetsWithoutETH<T>;

export enum TokenContractId {
  DAI = 'DAI',
  AAVE = 'AAVE',
  TUSD = 'TUSD',
  BAT = 'BAT',
  WETH = 'WETH',
  USDC = 'USDC',
  USDT = 'USDT',
  SUSD = 'SUSD',
  ZRX = 'ZRX',
  MKR = 'MKR',
  WBTC = 'WBTC',
  LINK = 'LINK',
  KNC = 'KNC',
  MANA = 'MANA',
  REN = 'REN',
  SNX = 'SNX',
  BUSD = 'BUSD',
  USD = 'USD',
  YFI = 'YFI',
  UNI = 'UNI',
  ENJ = 'ENJ',
  UniDAIWETH = 'UniDAIWETH',
  UniWBTCWETH = 'UniWBTCWETH',
  UniAAVEWETH = 'UniAAVEWETH',
  UniBATWETH = 'UniBATWETH',
  UniDAIUSDC = 'UniDAIUSDC',
  UniCRVWETH = 'UniCRVWETH',
  UniLINKWETH = 'UniLINKWETH',
  UniMKRWETH = 'UniMKRWETH',
  UniRENWETH = 'UniRENWETH',
  UniSNXWETH = 'UniSNXWETH',
  UniUNIWETH = 'UniUNIWETH',
  UniUSDCWETH = 'UniUSDCWETH',
  UniWBTCUSDC = 'UniWBTCUSDC',
  UniYFIWETH = 'UniYFIWETH',
  BptWBTCWETH = 'BptWBTCWETH',
  BptBALWETH = 'BptBALWETH',
  WMATIC = 'WMATIC',
  STAKE = 'STAKE',
  xSUSHI = 'xSUSHI',
}

export interface IReserveParams extends IReserveBorrowParams, IReserveCollateralParams {
  aTokenImpl: eContractid;
  reserveFactor: string;
  supplyCap: string;
  strategy: IInterestRateStrategyParams;
}

export interface IInterestRateStrategyParams {
  name: string;
  optimalUsageRatio: string;
  baseVariableBorrowRate: string;
  variableRateSlope1: string;
  variableRateSlope2: string;
  stableRateSlope1: string;
  stableRateSlope2: string;
  baseStableRateOffset: string;
  stableRateExcessOffset: string;
  optimalStableToTotalDebtRatio: string;
}

export interface IReserveBorrowParams {
  borrowingEnabled: boolean;
  stableBorrowRateEnabled: boolean;
  reserveDecimals: string;
  borrowCap: string;
}

export interface IReserveCollateralParams {
  baseLTVAsCollateral: string;
  liquidationThreshold: string;
  liquidationBonus: string;
}
export interface IMarketRates {
  borrowRate: string;
}

export type iParamsPerNetwork<T> = iEthereumParamsPerNetwork<T>;

export interface iParamsPerNetworkAll<T> extends iEthereumParamsPerNetwork<T> {}

export interface iEthereumParamsPerNetwork<T> {
  [eEthereumNetwork.coverage]: T;
  [eEthereumNetwork.kovan]: T;
  [eEthereumNetwork.ropsten]: T;
  [eEthereumNetwork.main]: T;
  [eEthereumNetwork.hardhat]: T;
  [eEthereumNetwork.tenderlyMain]: T;
}

export enum RateMode {
  None = '0',
  Stable = '1',
  Variable = '2',
}

export interface IProtocolGlobalConfig {
  TokenDistributorPercentageBase: string;
  MockUsdPriceInWei: string;
  UsdAddress: tEthereumAddress;
  NilAddress: tEthereumAddress;
  OneAddress: tEthereumAddress;
  AaveReferral: string;
}

export interface IMocksConfig {
  AllAssetsInitialPrices: iAssetBase<string>;
}

export interface IRate {
  borrowRate: string;
}

export interface ICommonConfiguration {
  MarketId: string;
  ATokenNamePrefix: string;
  StableDebtTokenNamePrefix: string;
  VariableDebtTokenNamePrefix: string;
  SymbolPrefix: string;
  ProviderId: number;
  ProtocolGlobalParams: IProtocolGlobalConfig;
  Mocks: IMocksConfig;
  ProviderRegistry: tEthereumAddress | undefined;
  ProviderRegistryOwner: tEthereumAddress | undefined;
  PoolConfigurator: tEthereumAddress | undefined;
  Pool: tEthereumAddress | undefined;
  TokenDistributor: tEthereumAddress | undefined;
  AaveOracle: tEthereumAddress | undefined;
  FallbackOracle: tEthereumAddress | undefined;
  ChainlinkAggregator: tEthereumAddress | undefined;
  PoolAdmin: tEthereumAddress | undefined;
  PoolAdminIndex: number;
  EmergencyAdmin: tEthereumAddress | undefined;
  EmergencyAdminIndex: number;
  ReserveAssets: SymbolMap<tEthereumAddress> | SymbolMap<undefined>;
  ReservesConfig: iMultiPoolsAssets<IReserveParams>;
  ATokenDomainSeparator: string;
  WETH: tEthereumAddress | undefined;
  WrappedNativeToken: tEthereumAddress | undefined;
  ReserveFactorTreasuryAddress: tEthereumAddress;
  IncentivesController: tEthereumAddress | undefined;
}

export interface IAaveConfiguration extends ICommonConfiguration {
  ReservesConfig: iMultiPoolsAssets<IReserveParams>;
}

export type PoolConfiguration = ICommonConfiguration | IAaveConfiguration;



================================================
FILE: test-suites/__setup.spec.ts
================================================
import rawBRE from 'hardhat';
import { initializeMakeSuite } from './helpers/make-suite';

before(async () => {
  await rawBRE.deployments.fixture(['market']);

  console.log('-> Deployed market');

  console.log('-> Initializing test environment');
  await initializeMakeSuite();
  console.log('\n***************');
  console.log('Setup and snapshot finished');
  console.log('***************\n');
});



================================================
FILE: test-suites/aave-oracle.spec.ts
================================================
import { MOCK_CHAINLINK_AGGREGATORS_PRICES } from '@aave/deploy-v3/dist/helpers/constants';
import { expect } from 'chai';
import { oneEther, ONE_ADDRESS, ZERO_ADDRESS } from '../helpers/constants';
import { ProtocolErrors } from '../helpers/types';
import { makeSuite, TestEnv } from './helpers/make-suite';
import {
  deployMintableERC20,
  deployMockAggregator,
  evmRevert,
  evmSnapshot,
  MintableERC20,
  MockAggregator,
} from '@aave/deploy-v3';

makeSuite('AaveOracle', (testEnv: TestEnv) => {
  let snap: string;

  beforeEach(async () => {
    snap = await evmSnapshot();
  });
  afterEach(async () => {
    await evmRevert(snap);
  });

  let mockToken: MintableERC20;
  let mockAggregator: MockAggregator;
  let assetPrice: string;

  before(async () => {
    mockToken = await deployMintableERC20(['MOCK', 'MOCK', '18']);
    assetPrice = MOCK_CHAINLINK_AGGREGATORS_PRICES.ETH;
    mockAggregator = await deployMockAggregator(assetPrice);
  });

  it('Owner set a new asset source', async () => {
    const { poolAdmin, aaveOracle } = testEnv;

    // Asset has no source
    expect(await aaveOracle.getSourceOfAsset(mockToken.address)).to.be.eq(ZERO_ADDRESS);
    const priorSourcePrice = await aaveOracle.getAssetPrice(mockToken.address);
    const priorSourcesPrices = (await aaveOracle.getAssetsPrices([mockToken.address])).map((x) =>
      x.toString()
    );
    expect(priorSourcePrice).to.equal('0');
    expect(priorSourcesPrices).to.eql(['0']);

    // Add asset source
    await expect(
      aaveOracle
        .connect(poolAdmin.signer)
        .setAssetSources([mockToken.address], [mockAggregator.address])
    )
      .to.emit(aaveOracle, 'AssetSourceUpdated')
      .withArgs(mockToken.address, mockAggregator.address);

    const sourcesPrices = await (
      await aaveOracle.getAssetsPrices([mockToken.address])
    ).map((x) => x.toString());
    expect(await aaveOracle.getSourceOfAsset(mockToken.address)).to.be.eq(mockAggregator.address);
    expect(await aaveOracle.getAssetPrice(mockToken.address)).to.be.eq(assetPrice);
    expect(sourcesPrices).to.eql([assetPrice]);
  });

  it('Owner update an existing asset source', async () => {
    const { poolAdmin, aaveOracle, dai } = testEnv;

    // DAI token has already a source
    const daiSource = await aaveOracle.getSourceOfAsset(dai.address);
    expect(daiSource).to.be.not.eq(ZERO_ADDRESS);

    // Update DAI source
    await expect(
      aaveOracle.connect(poolAdmin.signer).setAssetSources([dai.address], [mockAggregator.address])
    )
      .to.emit(aaveOracle, 'AssetSourceUpdated')
      .withArgs(dai.address, mockAggregator.address);

    expect(await aaveOracle.getSourceOfAsset(dai.address)).to.be.eq(mockAggregator.address);
    expect(await aaveOracle.getAssetPrice(dai.address)).to.be.eq(assetPrice);
  });

  it('Owner tries to set a new asset source with wrong input params (revert expected)', async () => {
    const { poolAdmin, aaveOracle } = testEnv;

    await expect(
      aaveOracle.connect(poolAdmin.signer).setAssetSources([mockToken.address], [])
    ).to.be.revertedWith(ProtocolErrors.INCONSISTENT_PARAMS_LENGTH);
  });

  it('Get price of BASE_CURRENCY asset', async () => {
    const { aaveOracle } = testEnv;

    // Check returns the fixed price BASE_CURRENCY_UNIT
    expect(await aaveOracle.getAssetPrice(await aaveOracle.BASE_CURRENCY())).to.be.eq(
      await aaveOracle.BASE_CURRENCY_UNIT()
    );
  });

  it('A non-owner user tries to set a new asset source (revert expected)', async () => {
    const { users, aaveOracle } = testEnv;
    const user = users[0];

    const { CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN } = ProtocolErrors;

    await expect(
      aaveOracle.connect(user.signer).setAssetSources([mockToken.address], [mockAggregator.address])
    ).to.be.revertedWith(CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN);
  });

  it('Get price of BASE_CURRENCY asset with registered asset source for its address', async () => {
    const { poolAdmin, aaveOracle, weth } = testEnv;

    // Add asset source for BASE_CURRENCY address
    await expect(
      aaveOracle.connect(poolAdmin.signer).setAssetSources([weth.address], [mockAggregator.address])
    )
      .to.emit(aaveOracle, 'AssetSourceUpdated')
      .withArgs(weth.address, mockAggregator.address);

    // Check returns the fixed price BASE_CURRENCY_UNIT
    expect(await aaveOracle.getAssetPrice(weth.address)).to.be.eq(
      MOCK_CHAINLINK_AGGREGATORS_PRICES.WETH
    );
  });

  it('Get price of asset with no asset source', async () => {
    const { aaveOracle, oracle } = testEnv;
    const fallbackPrice = oneEther;

    // Register price on FallbackOracle
    expect(await oracle.setAssetPrice(mockToken.address, fallbackPrice));

    // Asset has no source
    expect(await aaveOracle.getSourceOfAsset(mockToken.address)).to.be.eq(ZERO_ADDRESS);

    // Returns 0 price
    expect(await aaveOracle.getAssetPrice(mockToken.address)).to.be.eq(fallbackPrice);
  });

  it('Get price of asset with 0 price and no fallback price', async () => {
    const { poolAdmin, aaveOracle } = testEnv;
    const zeroPriceMockAgg = await deployMockAggregator('0');

    // Asset has no source
    expect(await aaveOracle.getSourceOfAsset(mockToken.address)).to.be.eq(ZERO_ADDRESS);

    // Add asset source
    await expect(
      aaveOracle
        .connect(poolAdmin.signer)
        .setAssetSources([mockToken.address], [zeroPriceMockAgg.address])
    )
      .to.emit(aaveOracle, 'AssetSourceUpdated')
      .withArgs(mockToken.address, zeroPriceMockAgg.address);

    expect(await aaveOracle.getSourceOfAsset(mockToken.address)).to.be.eq(zeroPriceMockAgg.address);
    expect(await aaveOracle.getAssetPrice(mockToken.address)).to.be.eq(0);
  });

  it('Get price of asset with 0 price but non-zero fallback price', async () => {
    const { poolAdmin, aaveOracle, oracle } = testEnv;
    const zeroPriceMockAgg = await deployMockAggregator('0');
    const fallbackPrice = oneEther;

    // Register price on FallbackOracle
    expect(await oracle.setAssetPrice(mockToken.address, fallbackPrice));

    // Asset has no source
    expect(await aaveOracle.getSourceOfAsset(mockToken.address)).to.be.eq(ZERO_ADDRESS);

    // Add asset source
    await expect(
      aaveOracle
        .connect(poolAdmin.signer)
        .setAssetSources([mockToken.address], [zeroPriceMockAgg.address])
    )
      .to.emit(aaveOracle, 'AssetSourceUpdated')
      .withArgs(mockToken.address, zeroPriceMockAgg.address);

    expect(await aaveOracle.getSourceOfAsset(mockToken.address)).to.be.eq(zeroPriceMockAgg.address);
    expect(await aaveOracle.getAssetPrice(mockToken.address)).to.be.eq(fallbackPrice);
  });

  it('Owner update the FallbackOracle', async () => {
    const { poolAdmin, aaveOracle, oracle } = testEnv;

    expect(await aaveOracle.getFallbackOracle()).to.be.eq(oracle.address);

    // Update oracle source
    await expect(aaveOracle.connect(poolAdmin.signer).setFallbackOracle(ONE_ADDRESS))
      .to.emit(aaveOracle, 'FallbackOracleUpdated')
      .withArgs(ONE_ADDRESS);

    expect(await aaveOracle.getFallbackOracle()).to.be.eq(ONE_ADDRESS);
  });
});



================================================
FILE: test-suites/aave-protocol-data-provider.spec.ts
================================================
import hre from 'hardhat';
import { expect } from 'chai';
import { utils } from 'ethers';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { getMockPool, ZERO_ADDRESS } from '@aave/deploy-v3';
import { InitializableImmutableAdminUpgradeabilityProxy } from '../types';
import { impersonateAccountsHardhat } from '../helpers/misc-utils';
import { topUpNonPayableWithEther } from './helpers/utils/funds';
import { getProxyImplementation } from '../helpers/contracts-helpers';

makeSuite('AaveProtocolDataProvider: Edge cases', (testEnv: TestEnv) => {
  const MKR_ADDRESS = '0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2';
  const ETH_ADDRESS = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';

  it('getAllReservesTokens() with MKR and ETH as symbols', async () => {
    const { addressesProvider, poolAdmin, helpersContract } = testEnv;
    const { deployer } = await hre.getNamedAccounts();

    // Deploy a mock Pool
    const mockPool = await hre.deployments.deploy('MockPool', { from: deployer });

    const poolProxyAddress = await addressesProvider.getPool();
    const oldPoolImpl = await getProxyImplementation(addressesProvider.address, poolProxyAddress);

    // Update the addressesProvider with a mock pool
    await expect(addressesProvider.connect(poolAdmin.signer).setPoolImpl(mockPool.address))
      .to.emit(addressesProvider, 'PoolUpdated')
      .withArgs(oldPoolImpl, mockPool.address);

    // Add MKR and ETH addresses
    const proxiedMockPoolAddress = await addressesProvider.getPool();
    const proxiedMockPool = await getMockPool(proxiedMockPoolAddress);
    expect(await proxiedMockPool.addReserveToReservesList(MKR_ADDRESS));
    expect(await proxiedMockPool.addReserveToReservesList(ETH_ADDRESS));

    expect(await helpersContract.getAllReservesTokens()).to.be.eql([
      ['MKR', MKR_ADDRESS],
      ['ETH', ETH_ADDRESS],
    ]);
  });
});



================================================
FILE: test-suites/acl-manager.spec.ts
================================================
import { expect } from 'chai';
import { constants, utils } from 'ethers';
import { ZERO_ADDRESS } from '../helpers/constants';
import { ACLManager, ACLManager__factory } from '../types';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { ProtocolErrors } from '../helpers/types';

makeSuite('Access Control List Manager', (testEnv: TestEnv) => {
  let aclManager: ACLManager;

  const FLASH_BORROW_ADMIN_ROLE = utils.keccak256(
    utils.formatBytes32String('FLASH_BORROWER_ADMIN')
  );

  before(async () => {
    const { deployer, addressesProvider } = testEnv;
    aclManager = await new ACLManager__factory(deployer.signer).deploy(addressesProvider.address);
  });

  it('Check DEFAULT_ADMIN_ROLE', async () => {
    const { deployer, users } = testEnv;

    const DEFAULT_ADMIN_ROLE = await aclManager.DEFAULT_ADMIN_ROLE();
    expect(await aclManager.hasRole(DEFAULT_ADMIN_ROLE, deployer.address)).to.be.eq(true);
    expect(await aclManager.hasRole(DEFAULT_ADMIN_ROLE, users[0].address)).to.be.eq(false);
  });

  it('Grant FLASH_BORROW_ADMIN role', async () => {
    const {
      deployer,
      users: [flashBorrowAdmin],
    } = testEnv;

    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      false
    );
    await aclManager
      .connect(deployer.signer)
      .grantRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address);
    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      true
    );
  });

  it('FLASH_BORROW_ADMIN grant FLASH_BORROW_ROLE (revert expected)', async () => {
    const {
      users: [flashBorrowAdmin, flashBorrower],
    } = testEnv;

    expect(await aclManager.isFlashBorrower(flashBorrower.address)).to.be.eq(false);
    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      true
    );

    await expect(
      aclManager.connect(flashBorrowAdmin.signer).addFlashBorrower(flashBorrower.address)
    ).to.be.revertedWith(
      `AccessControl: account ${flashBorrowAdmin.address.toLowerCase()} is missing role ${
        constants.HashZero
      }`
    );

    expect(await aclManager.isFlashBorrower(flashBorrower.address)).to.be.eq(false);
    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      true
    );
  });

  it('Make FLASH_BORROW_ADMIN_ROLE admin of FLASH_BORROWER_ROLE', async () => {
    const { deployer } = testEnv;
    const FLASH_BORROW_ROLE = await aclManager.FLASH_BORROWER_ROLE();
    expect(await aclManager.getRoleAdmin(FLASH_BORROW_ROLE)).to.not.be.eq(FLASH_BORROW_ADMIN_ROLE);
    await aclManager
      .connect(deployer.signer)
      .setRoleAdmin(FLASH_BORROW_ROLE, FLASH_BORROW_ADMIN_ROLE);
    expect(await aclManager.getRoleAdmin(FLASH_BORROW_ROLE)).to.be.eq(FLASH_BORROW_ADMIN_ROLE);
  });

  it('FLASH_BORROW_ADMIN grant FLASH_BORROW_ROLE', async () => {
    const {
      users: [flashBorrowAdmin, flashBorrower],
    } = testEnv;

    expect(await aclManager.isFlashBorrower(flashBorrower.address)).to.be.eq(false);
    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      true
    );

    await aclManager.connect(flashBorrowAdmin.signer).addFlashBorrower(flashBorrower.address);

    expect(await aclManager.isFlashBorrower(flashBorrower.address)).to.be.eq(true);
    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      true
    );
  });

  it('DEFAULT_ADMIN tries to revoke FLASH_BORROW_ROLE (revert expected)', async () => {
    const {
      deployer,
      users: [flashBorrowAdmin, flashBorrower],
    } = testEnv;

    expect(await aclManager.isFlashBorrower(flashBorrower.address)).to.be.eq(true);
    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      true
    );

    await expect(
      aclManager.connect(deployer.signer).removeFlashBorrower(flashBorrower.address)
    ).to.be.revertedWith(
      `AccessControl: account ${deployer.address.toLowerCase()} is missing role ${FLASH_BORROW_ADMIN_ROLE}`
    );

    expect(await aclManager.isFlashBorrower(flashBorrower.address)).to.be.eq(true);
    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      true
    );
  });

  it('Grant POOL_ADMIN role', async () => {
    const {
      deployer,
      users: [, poolAdmin],
    } = testEnv;

    expect(await aclManager.isPoolAdmin(poolAdmin.address)).to.be.eq(false);
    await aclManager.connect(deployer.signer).addPoolAdmin(poolAdmin.address);
    expect(await aclManager.isPoolAdmin(poolAdmin.address)).to.be.eq(true);
  });

  it('Grant EMERGENCY_ADMIN role', async () => {
    const {
      deployer,
      users: [, , emergencyAdmin],
    } = testEnv;

    expect(await aclManager.isEmergencyAdmin(emergencyAdmin.address)).to.be.eq(false);
    await aclManager.connect(deployer.signer).addEmergencyAdmin(emergencyAdmin.address);
    expect(await aclManager.isEmergencyAdmin(emergencyAdmin.address)).to.be.eq(true);
  });

  it('Grant BRIDGE role', async () => {
    const {
      deployer,
      users: [, , , bridge],
    } = testEnv;

    expect(await aclManager.isBridge(bridge.address)).to.be.eq(false);
    await aclManager.connect(deployer.signer).addBridge(bridge.address);
    expect(await aclManager.isBridge(bridge.address)).to.be.eq(true);
  });

  it('Grant RISK_ADMIN role', async () => {
    const {
      deployer,
      users: [, , , , riskAdmin],
    } = testEnv;

    expect(await aclManager.isRiskAdmin(riskAdmin.address)).to.be.eq(false);
    await aclManager.connect(deployer.signer).addRiskAdmin(riskAdmin.address);
    expect(await aclManager.isRiskAdmin(riskAdmin.address)).to.be.eq(true);
  });

  it('Grant ASSET_LISTING_ADMIN role', async () => {
    const {
      deployer,
      users: [, , , , , assetListingAdmin],
    } = testEnv;

    expect(await aclManager.isAssetListingAdmin(assetListingAdmin.address)).to.be.eq(false);
    await aclManager.connect(deployer.signer).addAssetListingAdmin(assetListingAdmin.address);
    expect(await aclManager.isAssetListingAdmin(assetListingAdmin.address)).to.be.eq(true);
  });

  it('Revoke FLASH_BORROWER', async () => {
    const {
      users: [flashBorrowAdmin, flashBorrower],
    } = testEnv;

    expect(await aclManager.isFlashBorrower(flashBorrower.address)).to.be.eq(true);
    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      true
    );

    await aclManager.connect(flashBorrowAdmin.signer).removeFlashBorrower(flashBorrower.address);

    expect(await aclManager.isFlashBorrower(flashBorrower.address)).to.be.eq(false);
    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      true
    );
  });

  it('Revoke FLASH_BORROWER_ADMIN', async () => {
    const {
      deployer,
      users: [flashBorrowAdmin],
    } = testEnv;

    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      true
    );
    await aclManager
      .connect(deployer.signer)
      .revokeRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address);
    expect(await aclManager.hasRole(FLASH_BORROW_ADMIN_ROLE, flashBorrowAdmin.address)).to.be.eq(
      false
    );
  });

  it('Revoke POOL_ADMIN', async () => {
    const {
      deployer,
      users: [, poolAdmin],
    } = testEnv;

    expect(await aclManager.isPoolAdmin(poolAdmin.address)).to.be.eq(true);
    await aclManager.connect(deployer.signer).removePoolAdmin(poolAdmin.address);
    expect(await aclManager.isPoolAdmin(poolAdmin.address)).to.be.eq(false);
  });

  it('Revoke EMERGENCY_ADMIN', async () => {
    const {
      deployer,
      users: [, , emergencyAdmin],
    } = testEnv;

    expect(await aclManager.isEmergencyAdmin(emergencyAdmin.address)).to.be.eq(true);
    await aclManager.connect(deployer.signer).removeEmergencyAdmin(emergencyAdmin.address);
    expect(await aclManager.isEmergencyAdmin(emergencyAdmin.address)).to.be.eq(false);
  });

  it('Revoke BRIDGE', async () => {
    const {
      deployer,
      users: [, , , bridge],
    } = testEnv;

    expect(await aclManager.isBridge(bridge.address)).to.be.eq(true);
    await aclManager.connect(deployer.signer).removeBridge(bridge.address);
    expect(await aclManager.isBridge(bridge.address)).to.be.eq(false);
  });

  it('Revoke RISK_ADMIN', async () => {
    const {
      deployer,
      users: [, , , , riskAdmin],
    } = testEnv;

    expect(await aclManager.isRiskAdmin(riskAdmin.address)).to.be.eq(true);
    await aclManager.connect(deployer.signer).removeRiskAdmin(riskAdmin.address);
    expect(await aclManager.isRiskAdmin(riskAdmin.address)).to.be.eq(false);
  });

  it('Revoke ASSET_LISTING_ADMIN', async () => {
    const {
      deployer,
      users: [, , , , , assetListingAdmin],
    } = testEnv;

    expect(await aclManager.isAssetListingAdmin(assetListingAdmin.address)).to.be.eq(true);
    await aclManager.connect(deployer.signer).removeAssetListingAdmin(assetListingAdmin.address);
    expect(await aclManager.isAssetListingAdmin(assetListingAdmin.address)).to.be.eq(false);
  });

  it('Tries to deploy ACLManager when ACLAdmin is ZERO_ADDRESS (revert expected)', async () => {
    const { deployer, addressesProvider } = testEnv;

    expect(await addressesProvider.setACLAdmin(ZERO_ADDRESS));
    const deployTx = new ACLManager__factory(deployer.signer).deploy(addressesProvider.address);
    await expect(deployTx).to.be.revertedWith(ProtocolErrors.ACL_ADMIN_CANNOT_BE_ZERO);
  });
});



================================================
FILE: test-suites/addresses-provider-registry.spec.ts
================================================
import { expect } from 'chai';
import { ProtocolErrors } from '../helpers/types';
import { TestEnv, makeSuite } from './helpers/make-suite';
import { ONE_ADDRESS } from '@aave/deploy-v3';
import { ethers } from 'hardhat';

makeSuite('AddressesProviderRegistry', (testEnv: TestEnv) => {
  const NEW_ADDRESSES_PROVIDER_ID_2 = 2;
  const NEW_ADDRESSES_PROVIDER_ID_3 = 3;
  const NEW_ADDRESSES_PROVIDER_ADDRESS = ONE_ADDRESS;

  const {
    INVALID_ADDRESSES_PROVIDER_ID,
    ADDRESSES_PROVIDER_NOT_REGISTERED,
    ADDRESSES_PROVIDER_ALREADY_ADDED,
  } = ProtocolErrors;

  it('Checks the addresses provider is added to the registry', async () => {
    const { addressesProvider, registry } = testEnv;

    const providers = await registry.getAddressesProvidersList();

    expect(providers.length).to.be.equal(1, 'Invalid length of the addresses providers list');
    expect(providers[0].toString()).to.be.equal(
      addressesProvider.address,
      'Invalid addresses provider added to the list'
    );
  });

  it('Tries to register an addresses provider with id 0 (revert expected)', async () => {
    const { registry } = testEnv;

    await expect(
      registry.registerAddressesProvider(NEW_ADDRESSES_PROVIDER_ADDRESS, '0')
    ).to.be.revertedWith(INVALID_ADDRESSES_PROVIDER_ID);
  });

  it('Registers a mock addresses provider', async () => {
    const { registry } = testEnv;

    const providersBefore = await registry.getAddressesProvidersList();

    await expect(
      registry.registerAddressesProvider(
        NEW_ADDRESSES_PROVIDER_ADDRESS,
        NEW_ADDRESSES_PROVIDER_ID_2
      )
    )
      .to.emit(registry, 'AddressesProviderRegistered')
      .withArgs(NEW_ADDRESSES_PROVIDER_ADDRESS, NEW_ADDRESSES_PROVIDER_ID_2);

    expect(await registry.getAddressesProviderIdByAddress(NEW_ADDRESSES_PROVIDER_ADDRESS)).to.be.eq(
      NEW_ADDRESSES_PROVIDER_ID_2
    );

    const providersAfter = await registry.getAddressesProvidersList();
    expect(providersAfter.length).to.be.equal(
      providersBefore.length + 1,
      'Invalid length of the addresses providers list'
    );
    expect(providersAfter[1].toString()).to.be.equal(
      NEW_ADDRESSES_PROVIDER_ADDRESS,
      'Invalid addresses provider added to the list'
    );
    expect(await registry.getAddressesProviderAddressById(NEW_ADDRESSES_PROVIDER_ID_2)).to.be.equal(
      NEW_ADDRESSES_PROVIDER_ADDRESS,
      'Invalid update of id mapping'
    );
  });

  it('Registers users[2] as another addresses provider', async () => {
    const { users, registry } = testEnv;

    // Simulating an addresses provider using the users[2] wallet address
    await expect(registry.registerAddressesProvider(users[2].address, NEW_ADDRESSES_PROVIDER_ID_3))
      .to.emit(registry, 'AddressesProviderRegistered')
      .withArgs(users[2].address, NEW_ADDRESSES_PROVIDER_ID_3);

    const providers = await registry.getAddressesProvidersList();

    expect(providers.length).to.be.equal(
      NEW_ADDRESSES_PROVIDER_ID_3,
      'Invalid length of the addresses providers list'
    );
    expect(providers[2].toString()).to.be.equal(
      users[2].address,
      'Invalid addresses provider added to the list'
    );
  });

  it('Removes the mock addresses provider', async () => {
    const { users, registry, addressesProvider } = testEnv;

    const providersBefore = await registry.getAddressesProvidersList();

    expect(
      await registry.getAddressesProviderIdByAddress(NEW_ADDRESSES_PROVIDER_ADDRESS)
    ).to.be.equal(NEW_ADDRESSES_PROVIDER_ID_2);

    await expect(registry.unregisterAddressesProvider(NEW_ADDRESSES_PROVIDER_ADDRESS))
      .to.emit(registry, 'AddressesProviderUnregistered')
      .withArgs(NEW_ADDRESSES_PROVIDER_ADDRESS, NEW_ADDRESSES_PROVIDER_ID_2);

    const providersAfter = await registry.getAddressesProvidersList();

    expect(providersAfter.length).to.be.equal(
      providersBefore.length - 1,
      'Invalid length of the addresses providers list'
    );
    expect(providersAfter[0].toString()).to.be.equal(
      addressesProvider.address,
      'Invalid addresses provider added to the list'
    );
  });

  it('Tries to remove an already unregistered addressesProvider (revert expected)', async () => {
    const { users, registry } = testEnv;

    await expect(
      registry.unregisterAddressesProvider(NEW_ADDRESSES_PROVIDER_ADDRESS)
    ).to.be.revertedWith(ADDRESSES_PROVIDER_NOT_REGISTERED);
  });

  it('Tries to add an already registered addressesProvider with a different id (revert expected)', async () => {
    const { registry, addressesProvider } = testEnv;

    const id = await registry.getAddressesProviderIdByAddress(addressesProvider.address);
    expect(id).not.to.be.eq(0);

    const providersBefore = await registry.getAddressesProvidersList();
    await expect(
      registry.registerAddressesProvider(addressesProvider.address, NEW_ADDRESSES_PROVIDER_ID_2)
    ).to.be.revertedWith(ADDRESSES_PROVIDER_ALREADY_ADDED);

    const providersAfter = await registry.getAddressesProvidersList();

    expect(await registry.getAddressesProviderIdByAddress(addressesProvider.address)).to.be.eq(id);

    expect(providersAfter.length).to.be.equal(
      providersBefore.length,
      'Invalid length of the addresses providers list'
    );
    expect(providersAfter[0].toString()).to.be.equal(
      addressesProvider.address,
      'Invalid addresses provider added to the list'
    );
  });

  it('Tries to add an addressesProvider with an already used id (revert expected)', async () => {
    const { users, registry, addressesProvider } = testEnv;

    const id = await registry.getAddressesProviderIdByAddress(addressesProvider.address);
    expect(id).not.to.be.eq(0);

    // Simulating an addresses provider using the users[5] wallet address
    await expect(registry.registerAddressesProvider(users[5].address, id)).to.be.revertedWith(
      ProtocolErrors.INVALID_ADDRESSES_PROVIDER_ID
    );

    const providers = await registry.getAddressesProvidersList();
    const idMap = {};

    for (let i = 0; i < providers.length; i++) {
      const id = (await registry.getAddressesProviderIdByAddress(providers[i])).toNumber();
      if (id > 0) {
        if (idMap[id] == undefined) {
          idMap[id] = true;
        } else {
          expect(false, 'Duplicate ids').to.be.true;
        }
      }
    }
  });

  it('Reregisters the mock addresses provider after it being removed', async () => {
    const { registry } = testEnv;

    const providersBefore = await registry.getAddressesProvidersList();

    await expect(
      registry.registerAddressesProvider(
        NEW_ADDRESSES_PROVIDER_ADDRESS,
        NEW_ADDRESSES_PROVIDER_ID_2
      )
    )
      .to.emit(registry, 'AddressesProviderRegistered')
      .withArgs(NEW_ADDRESSES_PROVIDER_ADDRESS, NEW_ADDRESSES_PROVIDER_ID_2);

    expect(await registry.getAddressesProviderIdByAddress(NEW_ADDRESSES_PROVIDER_ADDRESS)).to.be.eq(
      NEW_ADDRESSES_PROVIDER_ID_2
    );

    const providersAfter = await registry.getAddressesProvidersList();
    expect(providersAfter.length).to.be.equal(
      providersBefore.length + 1,
      'Invalid length of the addresses providers list'
    );
    expect(providersAfter[providersAfter.length - 1].toString()).to.be.equal(
      NEW_ADDRESSES_PROVIDER_ADDRESS,
      'Invalid addresses provider added to the list'
    );
    expect(await registry.getAddressesProviderAddressById(NEW_ADDRESSES_PROVIDER_ID_2)).to.be.equal(
      NEW_ADDRESSES_PROVIDER_ADDRESS,
      'Invalid update of id mapping'
    );
  });

  it('Removes the last addresses provider', async () => {
    const { registry, addressesProvider } = testEnv;

    const providersBefore = await registry.getAddressesProvidersList();
    const providerToRemove = providersBefore[providersBefore.length - 1];
    const providerToRemoveId = await registry.getAddressesProviderIdByAddress(providerToRemove);

    await expect(registry.unregisterAddressesProvider(providerToRemove))
      .to.emit(registry, 'AddressesProviderUnregistered')
      .withArgs(providerToRemove, providerToRemoveId);

    const providersAfter = await registry.getAddressesProvidersList();

    expect(providersAfter.length).to.be.equal(
      providersBefore.length - 1,
      'Invalid length of the addresses providers list'
    );
    expect(providersAfter[0].toString()).to.be.equal(
      addressesProvider.address,
      'Invalid addresses provider added to the list'
    );
  });
});



================================================
FILE: test-suites/atoken-delegation-aware.spec.ts
================================================
import { DelegationAwareAToken, MintableDelegationERC20 } from '../types';
import { expect } from 'chai';
import { ZERO_ADDRESS } from '../helpers/constants';
import { ProtocolErrors } from '../helpers/types';
import { makeSuite, TestEnv } from './helpers/make-suite';
import {
  deployMintableDelegationERC20,
  deployDelegationAwareAToken,
} from '@aave/deploy-v3/dist/helpers/contract-deployments';

makeSuite('AToken: DelegationAwareAToken', (testEnv: TestEnv) => {
  let delegationAToken = <DelegationAwareAToken>{};
  let delegationERC20 = <MintableDelegationERC20>{};

  it('Deploys a new MintableDelegationERC20 and a DelegationAwareAToken', async () => {
    const { pool } = testEnv;

    delegationERC20 = await deployMintableDelegationERC20(['DEL', 'DEL', '18']);

    delegationAToken = await deployDelegationAwareAToken([
      pool.address,
      delegationERC20.address,
      ZERO_ADDRESS,
      ZERO_ADDRESS,
      'aDEL',
      'aDEL',
    ]);
  });

  it('Tries to delegate with the caller not being the Aave admin (revert expected)', async () => {
    const { users } = testEnv;

    await expect(
      delegationAToken.connect(users[1].signer).delegateUnderlyingTo(users[2].address)
    ).to.be.revertedWith(ProtocolErrors.CALLER_NOT_POOL_ADMIN);
  });

  it('Delegates to user 2', async () => {
    const { users } = testEnv;

    await expect(delegationAToken.delegateUnderlyingTo(users[2].address))
      .to.emit(delegationAToken, 'DelegateUnderlyingTo')
      .withArgs(users[2].address);

    const delegateeAddress = await delegationERC20.delegatee();

    expect(delegateeAddress).to.be.equal(users[2].address);
  });
});



================================================
FILE: test-suites/atoken-edge.spec.ts
================================================
import { expect } from 'chai';
import { utils } from 'ethers';
import { impersonateAccountsHardhat } from '../helpers/misc-utils';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { ProtocolErrors } from '../helpers/types';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { topUpNonPayableWithEther } from './helpers/utils/funds';
import { evmRevert, evmSnapshot, waitForTx } from '@aave/deploy-v3';
import { HardhatRuntimeEnvironment } from 'hardhat/types';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('AToken: Edge cases', (testEnv: TestEnv) => {
  const {
    INVALID_MINT_AMOUNT,
    INVALID_BURN_AMOUNT,
    SAFECAST_UINT128_OVERFLOW,
    CALLER_NOT_POOL_ADMIN,
  } = ProtocolErrors;

  it('Check getters', async () => {
    const { pool, users, dai, aDai } = testEnv;

    expect(await aDai.decimals()).to.be.eq(await dai.decimals());
    expect(await aDai.UNDERLYING_ASSET_ADDRESS()).to.be.eq(dai.address);
    expect(await aDai.POOL()).to.be.eq(pool.address);
    expect(await aDai.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);

    const scaledUserBalanceAndSupplyBefore = await aDai.getScaledUserBalanceAndSupply(
      users[0].address
    );
    expect(scaledUserBalanceAndSupplyBefore[0]).to.be.eq(0);
    expect(scaledUserBalanceAndSupplyBefore[1]).to.be.eq(0);

    await waitForTx(
      await dai
        .connect(users[0].signer)
        ['mint(address,uint256)'](
          users[0].address,
          await convertToCurrencyDecimals(dai.address, '1000')
        )
    );
    await waitForTx(await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT));
    await waitForTx(
      await pool
        .connect(users[0].signer)
        .deposit(
          dai.address,
          await convertToCurrencyDecimals(dai.address, '1000'),
          users[0].address,
          0
        )
    );
    const scaledUserBalanceAndSupplyAfter = await aDai.getScaledUserBalanceAndSupply(
      users[0].address
    );
    expect(scaledUserBalanceAndSupplyAfter[0]).to.be.eq(
      await convertToCurrencyDecimals(aDai.address, '1000')
    );
    expect(scaledUserBalanceAndSupplyAfter[1]).to.be.eq(
      await convertToCurrencyDecimals(aDai.address, '1000')
    );
  });

  it('approve()', async () => {
    const { users, aDai } = testEnv;
    await aDai.connect(users[0].signer).approve(users[1].address, MAX_UINT_AMOUNT);
    expect(await aDai.allowance(users[0].address, users[1].address)).to.be.eq(MAX_UINT_AMOUNT);
  });

  it('approve() with a ZERO_ADDRESS spender', async () => {
    const { users, aDai } = testEnv;
    await expect(aDai.connect(users[0].signer).approve(ZERO_ADDRESS, MAX_UINT_AMOUNT))
      .to.emit(aDai, 'Approval')
      .withArgs(users[0].address, ZERO_ADDRESS, MAX_UINT_AMOUNT);
  });

  it('transferFrom()', async () => {
    const { users, aDai } = testEnv;
    await aDai.connect(users[1].signer).transferFrom(users[0].address, users[1].address, 0);
  });

  it('increaseAllowance()', async () => {
    const { users, aDai } = testEnv;
    expect(await aDai.allowance(users[1].address, users[0].address)).to.be.eq(0);
    await aDai
      .connect(users[1].signer)
      .increaseAllowance(users[0].address, await convertToCurrencyDecimals(aDai.address, '1'));
    expect(await aDai.allowance(users[1].address, users[0].address)).to.be.eq(
      await convertToCurrencyDecimals(aDai.address, '1')
    );
  });

  it('decreaseAllowance()', async () => {
    const { users, aDai } = testEnv;
    expect(await aDai.allowance(users[1].address, users[0].address)).to.be.eq(
      await convertToCurrencyDecimals(aDai.address, '1')
    );
    await aDai
      .connect(users[1].signer)
      .decreaseAllowance(users[0].address, await convertToCurrencyDecimals(aDai.address, '1'));
    expect(await aDai.allowance(users[1].address, users[0].address)).to.be.eq(0);
  });

  it('transfer() with a ZERO_ADDRESS recipient', async () => {
    const { users, aDai } = testEnv;
    await expect(aDai.connect(users[1].signer).transfer(ZERO_ADDRESS, 0))
      .to.emit(aDai, 'Transfer')
      .withArgs(users[1].address, ZERO_ADDRESS, 0);
  });

  it('transfer() with a ZERO_ADDRESS origin', async () => {
    const { users, aDai } = testEnv;
    await expect(aDai.connect(users[1].signer).transferFrom(ZERO_ADDRESS, users[1].address, 0))
      .to.emit(aDai, 'Transfer')
      .withArgs(ZERO_ADDRESS, users[1].address, 0);
  });

  it('mint() when amountScaled == 0 (revert expected)', async () => {
    const { deployer, pool, aDai, users } = testEnv;

    // Impersonate Pool
    await topUpNonPayableWithEther(deployer.signer, [pool.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([pool.address]);
    const poolSigner = await hre.ethers.getSigner(pool.address);

    await expect(
      aDai
        .connect(poolSigner)
        .mint(users[0].address, users[0].address, 0, utils.parseUnits('1', 27))
    ).to.be.revertedWith(INVALID_MINT_AMOUNT);
  });

  it('mint() to a ZERO_ADDRESS account', async () => {
    const { deployer, pool, aDai } = testEnv;

    // Impersonate Pool
    await topUpNonPayableWithEther(deployer.signer, [pool.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([pool.address]);
    const poolSigner = await hre.ethers.getSigner(pool.address);

    const mintingAmount = await convertToCurrencyDecimals(aDai.address, '100');
    await expect(
      aDai
        .connect(poolSigner)
        .mint(ZERO_ADDRESS, ZERO_ADDRESS, mintingAmount, utils.parseUnits('1', 27))
    )
      .to.emit(aDai, 'Transfer')
      .withArgs(ZERO_ADDRESS, ZERO_ADDRESS, mintingAmount);
  });

  it('burn() when amountScaled == 0 (revert expected)', async () => {
    const { deployer, pool, aDai, users } = testEnv;

    // Impersonate Pool
    await topUpNonPayableWithEther(deployer.signer, [pool.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([pool.address]);
    const poolSigner = await hre.ethers.getSigner(pool.address);

    await expect(
      aDai
        .connect(poolSigner)
        .burn(users[0].address, users[0].address, 0, utils.parseUnits('1', 27))
    ).to.be.revertedWith(INVALID_BURN_AMOUNT);
  });

  it('burn() of a ZERO_ADDRESS account (revert expected)', async () => {
    const { deployer, pool, aDai, users } = testEnv;

    // Impersonate Pool
    await topUpNonPayableWithEther(deployer.signer, [pool.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([pool.address]);
    const poolSigner = await hre.ethers.getSigner(pool.address);

    const burnAmount = await convertToCurrencyDecimals(aDai.address, '100');
    await expect(
      aDai
        .connect(poolSigner)
        .burn(ZERO_ADDRESS, users[0].address, burnAmount, utils.parseUnits('1', 27))
    )
      .to.emit(aDai, 'Transfer')
      .withArgs(ZERO_ADDRESS, ZERO_ADDRESS, burnAmount);
  });

  it('mintToTreasury() with amount == 0', async () => {
    const { deployer, pool, aDai } = testEnv;

    // Impersonate Pool
    await topUpNonPayableWithEther(deployer.signer, [pool.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([pool.address]);
    const poolSigner = await hre.ethers.getSigner(pool.address);

    expect(await aDai.connect(poolSigner).mintToTreasury(0, utils.parseUnits('1', 27)));
  });

  it('setIncentivesController() ', async () => {
    const snapshot = await evmSnapshot();
    const { deployer, poolAdmin, aWETH, aclManager } = testEnv;

    expect(await aclManager.connect(deployer.signer).addPoolAdmin(poolAdmin.address));

    expect(await aWETH.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);
    expect(await aWETH.connect(poolAdmin.signer).setIncentivesController(ZERO_ADDRESS));
    expect(await aWETH.getIncentivesController()).to.be.eq(ZERO_ADDRESS);

    await evmRevert(snapshot);
  });

  it('setIncentivesController() from not pool admin (revert expected)', async () => {
    const {
      users: [user],
      aWETH,
    } = testEnv;

    expect(await aWETH.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);

    await expect(
      aWETH.connect(user.signer).setIncentivesController(ZERO_ADDRESS)
    ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
  });

  it('transfer() amount > MAX_UINT_128', async () => {
    const {
      aDai,
      users: [depositor, borrower],
    } = testEnv;

    expect(aDai.transfer(borrower.address, MAX_UINT_AMOUNT)).to.be.revertedWith(
      SAFECAST_UINT128_OVERFLOW
    );
  });

  it('setIncentivesController() ', async () => {
    const snapshot = await evmSnapshot();
    const { deployer, poolAdmin, aWETH, aclManager } = testEnv;

    expect(await aclManager.connect(deployer.signer).addPoolAdmin(poolAdmin.address));

    expect(await aWETH.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);
    expect(await aWETH.connect(poolAdmin.signer).setIncentivesController(ZERO_ADDRESS));
    expect(await aWETH.getIncentivesController()).to.be.eq(ZERO_ADDRESS);

    await evmRevert(snapshot);
  });

  it('setIncentivesController() from not pool admin (revert expected)', async () => {
    const {
      users: [user],
      aWETH,
    } = testEnv;

    expect(await aWETH.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);

    await expect(
      aWETH.connect(user.signer).setIncentivesController(ZERO_ADDRESS)
    ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
  });
});



================================================
FILE: test-suites/atoken-event-accounting.spec.ts
================================================
import { MockATokenRepayment } from './../types/mocks/tokens/MockATokenRepayment';
import { waitForTx, increaseTime, ZERO_ADDRESS } from '@aave/deploy-v3';
import { expect } from 'chai';
import { BigNumber, utils } from 'ethers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { RateMode } from '../helpers/types';
import { makeSuite } from './helpers/make-suite';
import { getATokenEvent, getVariableDebtTokenEvent } from './helpers/utils/tokenization-events';
import { MockATokenRepayment__factory } from '../types';

makeSuite('AToken: Mint and Burn Event Accounting', (testEnv) => {
  let firstDaiDeposit;
  let secondDaiDeposit;
  let thirdDaiDeposit;
  let accruedInterest1: BigNumber = BigNumber.from(0);
  let accruedInterest2: BigNumber = BigNumber.from(0);
  let accruedInterest3: BigNumber = BigNumber.from(0);

  let firstDaiBorrow;
  let secondDaiBorrow;
  let accruedDebt1: BigNumber = BigNumber.from(0);
  let accruedDebt2: BigNumber = BigNumber.from(0);
  let accruedDebt3: BigNumber = BigNumber.from(0);
  let aTokenRepayImpl: MockATokenRepayment;

  const transferEventSignature = utils.keccak256(
    utils.toUtf8Bytes('Transfer(address,address,uint256)')
  );

  before('User 0 deposits 100 DAI, user 1 deposits 1 WETH, borrows 50 DAI', async () => {
    const { dai, configurator, aDai, deployer, pool } = testEnv;
    firstDaiDeposit = await convertToCurrencyDecimals(dai.address, '10000');
    secondDaiDeposit = await convertToCurrencyDecimals(dai.address, '20000');
    thirdDaiDeposit = await convertToCurrencyDecimals(dai.address, '50000');

    aTokenRepayImpl = await new MockATokenRepayment__factory(deployer.signer).deploy(pool.address);

    await configurator.updateAToken({
      asset: dai.address,
      treasury: await aDai.RESERVE_TREASURY_ADDRESS(),
      incentivesController: await aDai.getIncentivesController(),
      name: await aDai.name(),
      symbol: await aDai.symbol(),
      implementation: aTokenRepayImpl.address,
      params: '0x',
    });
  });

  it('User 1 supplies DAI', async () => {
    const {
      dai,
      aDai,
      users: [depositor],
      pool,
      helpersContract,
    } = testEnv;

    // mints DAI to depositor
    await waitForTx(
      await dai
        .connect(depositor.signer)
        ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '10000'))
    );

    // approve protocol to access depositor wallet
    await waitForTx(await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT));

    const daiReserveData = await helpersContract.getReserveData(dai.address);

    const expectedBalanceIncrease = 0;

    await expect(
      pool.connect(depositor.signer).deposit(dai.address, firstDaiDeposit, depositor.address, '0')
    )
      .to.emit(aDai, 'Mint')
      .withArgs(
        depositor.address,
        depositor.address,
        firstDaiDeposit,
        expectedBalanceIncrease,
        daiReserveData.liquidityIndex
      );

    const aDaiBalance = await aDai.balanceOf(depositor.address);
    expect(aDaiBalance).to.be.equal(firstDaiDeposit);
  });

  it('User 1 supplies DAI on behalf of user 2', async () => {
    const {
      dai,
      aDai,
      users: [depositor, receiver],
      pool,
      helpersContract,
    } = testEnv;

    // mints DAI to depositor
    await waitForTx(
      await dai
        .connect(depositor.signer)
        ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '10000'))
    );

    // approve protocol to access depositor wallet
    await waitForTx(await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT));

    const daiReserveData = await helpersContract.getReserveData(dai.address);

    const expectedBalanceIncrease = 0;

    await expect(
      pool.connect(depositor.signer).deposit(dai.address, firstDaiDeposit, receiver.address, '0')
    )
      .to.emit(aDai, 'Mint')
      .withArgs(
        depositor.address,
        receiver.address,
        firstDaiDeposit,
        expectedBalanceIncrease,
        daiReserveData.liquidityIndex
      );

    const aDaiBalance = await aDai.balanceOf(receiver.address);
    expect(aDaiBalance).to.be.equal(firstDaiDeposit);
  });

  it('User 2 supplies ETH,and borrows DAI', async () => {
    const {
      dai,
      weth,
      users: [, borrower],
      pool,
      helpersContract,
    } = testEnv;

    // user 2 deposits 100 ETH
    const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '20000');

    // mints WETH to borrower
    await waitForTx(
      await weth
        .connect(borrower.signer)
        ['mint(address,uint256)'](
          borrower.address,
          await convertToCurrencyDecimals(weth.address, '20000')
        )
    );

    // approve protocol to access the borrower wallet
    await waitForTx(await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT));

    await waitForTx(
      await pool
        .connect(borrower.signer)
        .deposit(weth.address, amountETHtoDeposit, borrower.address, '0')
    );

    // Borrow DAI
    firstDaiBorrow = await convertToCurrencyDecimals(dai.address, '5000');

    await waitForTx(
      await pool
        .connect(borrower.signer)
        .borrow(dai.address, firstDaiBorrow, RateMode.Variable, '0', borrower.address)
    );

    const borrowerWethData = await helpersContract.getUserReserveData(
      weth.address,
      borrower.address
    );
    const borrowerDaiData = await helpersContract.getUserReserveData(dai.address, borrower.address);
    expect(borrowerWethData.currentATokenBalance).to.be.equal(amountETHtoDeposit);
    expect(borrowerDaiData.currentVariableDebt).to.be.equal(firstDaiBorrow);
  });

  it('User 2 borrows more DAI - confirm mint event includes accrued interest', async () => {
    const {
      dai,
      variableDebtDai,
      users: [, borrower],
      pool,
      helpersContract,
    } = testEnv;
    await increaseTime(86400);

    // execute borrow
    secondDaiBorrow = await convertToCurrencyDecimals(dai.address, '2000');
    const borrowTx = await pool
      .connect(borrower.signer)
      .borrow(dai.address, secondDaiBorrow, RateMode.Variable, '0', borrower.address);
    const borrowReceipt = await borrowTx.wait();

    const borrowerDaiData = await helpersContract.getUserReserveData(dai.address, borrower.address);
    accruedDebt1 = borrowerDaiData.currentVariableDebt.sub(firstDaiBorrow).sub(secondDaiBorrow);
    const totalMinted = secondDaiBorrow.add(accruedDebt1);

    // get transfer event
    const rawTransferEvents = borrowReceipt.logs.filter(
      (log) => log.topics[0] === transferEventSignature
    );
    expect(rawTransferEvents.length).to.equal(2, 'Incorrect number of Transfer Events');
    const parsedTransferEvent = variableDebtDai.interface.parseLog(rawTransferEvents[0]);

    // get mint event
    const parsedMintEvents = getVariableDebtTokenEvent(variableDebtDai, borrowReceipt, 'Mint');
    expect(parsedMintEvents.length).to.equal(1, 'Incorrect number of Mint Events');
    const parsedMintEvent = parsedMintEvents[0];

    // check transfer event parameters
    expect(parsedTransferEvent.args.from).to.equal(ZERO_ADDRESS);
    expect(parsedTransferEvent.args.to).to.equal(borrower.address);
    expect(parsedTransferEvent.args.value).to.be.closeTo(totalMinted, 2);

    // check mint event parameters
    expect(parsedMintEvent.caller).to.equal(borrower.address);
    expect(parsedMintEvent.onBehalfOf).to.equal(borrower.address);
    expect(parsedMintEvent.value).to.be.closeTo(totalMinted, 2);
    expect(parsedMintEvent.balanceIncrease).to.be.closeTo(accruedDebt1, 2);
  });

  it('User 1 - supplies more DAI - confirm mint event includes accrued interest', async () => {
    const {
      dai,
      aDai,
      users: [depositor],
      pool,
    } = testEnv;

    await increaseTime(86400);

    // mints DAI to depositor
    await waitForTx(
      await dai
        .connect(depositor.signer)
        ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '20000'))
    );

    // user 1 deposits 2000 DAI
    const depositTx = await waitForTx(
      await pool
        .connect(depositor.signer)
        .deposit(dai.address, secondDaiDeposit, depositor.address, '0')
    );

    const aDaiBalance = await aDai.balanceOf(depositor.address);
    accruedInterest1 = aDaiBalance.sub(firstDaiDeposit).sub(secondDaiDeposit);
    const totalMinted = secondDaiDeposit.add(accruedInterest1);

    // get transfer event
    const rawTransferEvents = depositTx.logs.filter(
      (log) => log.topics[0] === transferEventSignature
    );
    expect(rawTransferEvents.length).to.equal(2, 'Incorrect number of Transfer Events');
    const parsedTransferEvent = aDai.interface.parseLog(rawTransferEvents[1]);

    // get mint event
    const parsedMintEvents = getATokenEvent(aDai, depositTx, 'Mint');
    expect(parsedMintEvents.length).to.equal(1, 'Incorrect number of Mint Events');
    const parsedMintEvent = parsedMintEvents[0];

    // check transfer event parameters
    expect(parsedTransferEvent.args.from).to.equal(ZERO_ADDRESS);
    expect(parsedTransferEvent.args.to).to.equal(depositor.address);
    expect(parsedTransferEvent.args.value).to.be.closeTo(totalMinted, 2);

    // check mint event parameters
    expect(parsedMintEvent.caller).to.equal(depositor.address);
    expect(parsedMintEvent.onBehalfOf).to.equal(depositor.address);
    expect(parsedMintEvent.value).to.be.closeTo(totalMinted, 2);
    expect(parsedMintEvent.balanceIncrease).to.be.closeTo(accruedInterest1, 2);
  });

  it('User 1 supplies more DAI again - confirm mint event includes accrued interest', async () => {
    const {
      dai,
      aDai,
      users: [depositor],
      pool,
      helpersContract,
    } = testEnv;

    await increaseTime(86400);

    // mints DAI to depositor
    await waitForTx(
      await dai
        .connect(depositor.signer)
        ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '50000'))
    );

    // user 1 deposits 2000 DAI
    const depositTx = await pool
      .connect(depositor.signer)
      .deposit(dai.address, thirdDaiDeposit, depositor.address, '0');
    const depositReceipt = await depositTx.wait();

    const aDaiBalance = await aDai.balanceOf(depositor.address);
    accruedInterest2 = aDaiBalance
      .sub(firstDaiDeposit)
      .sub(secondDaiDeposit)
      .sub(thirdDaiDeposit)
      .sub(accruedInterest1);
    const daiReserveData = await helpersContract.getReserveData(dai.address);
    const totalMinted = thirdDaiDeposit.add(accruedInterest2);

    // get transfer event
    const rawTransferEvents = depositReceipt.logs.filter(
      (log) => log.topics[0] === transferEventSignature
    );
    expect(rawTransferEvents.length).to.equal(2, 'Incorrect number of Transfer Events');
    const parsedTransferEvent = aDai.interface.parseLog(rawTransferEvents[1]);

    // get mint event
    const parsedMintEvents = getATokenEvent(aDai, depositReceipt, 'Mint');
    expect(parsedMintEvents.length).to.equal(1, 'Incorrect number of Mint Events');
    const parsedMintEvent = parsedMintEvents[0];

    // check transfer event
    expect(parsedTransferEvent.args.from).to.equal(ZERO_ADDRESS);
    expect(parsedTransferEvent.args.to).to.be.equal(depositor.address);
    expect(parsedTransferEvent.args.value).to.be.closeTo(totalMinted, 2);

    // check mint event
    expect(parsedMintEvent.caller).to.equal(depositor.address);
    expect(parsedMintEvent.onBehalfOf).to.equal(depositor.address);
    expect(parsedMintEvent.value).to.be.closeTo(totalMinted, 2);
    expect(parsedMintEvent.balanceIncrease).to.be.closeTo(accruedInterest2, 2);
    expect(parsedMintEvent.index).to.equal(daiReserveData.liquidityIndex);
  });

  it('User 2 repays all remaining DAI', async () => {
    const {
      dai,
      aDai,
      variableDebtDai,
      users: [, borrower],
      pool,
      helpersContract,
    } = testEnv;

    await increaseTime(86400);

    //mints DAI to borrower
    await waitForTx(
      await dai
        .connect(borrower.signer)
        ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '50000'))
    );

    // approve protocol to access depositor wallet
    await waitForTx(await dai.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT));

    const daiBalanceBefore = await dai.balanceOf(borrower.address);

    // repay dai loan
    const repayTx = await pool
      .connect(borrower.signer)
      .repay(dai.address, MAX_UINT_AMOUNT, RateMode.Variable, borrower.address);

    const repayReceipt = await repayTx.wait();

    const daiBalanceAfter = await dai.balanceOf(borrower.address);
    const daiRepaid = daiBalanceBefore.sub(daiBalanceAfter);
    accruedDebt3 = daiRepaid
      .sub(firstDaiBorrow)
      .sub(accruedDebt1)
      .sub(secondDaiBorrow)
      .sub(accruedDebt2);
    const borrowerDaiData = await helpersContract.getUserReserveData(dai.address, borrower.address);
    const totalBurned = daiRepaid.sub(accruedDebt3);

    // get transfer event
    const rawTransferEvents = repayReceipt.logs.filter(
      (log) => log.topics[0] === transferEventSignature
    );
    expect(rawTransferEvents.length).to.equal(2, 'Incorrect number of Transfer Events');
    const parsedTransferEvent = variableDebtDai.interface.parseLog(rawTransferEvents[0]);

    // get burn event
    const parsedBurnEvents = getVariableDebtTokenEvent(variableDebtDai, repayReceipt, 'Burn');
    expect(parsedBurnEvents.length).to.equal(1, 'Incorrect number of Burn Events');
    const parsedBurnEvent = parsedBurnEvents[0];

    // check burn parameters
    expect(parsedTransferEvent.args.from).to.equal(borrower.address);
    expect(parsedTransferEvent.args.to).to.equal(ZERO_ADDRESS);
    expect(parsedTransferEvent.args.value).to.be.closeTo(totalBurned, 2);

    // check burn parameters
    expect(parsedBurnEvent.from).to.equal(borrower.address);
    expect(parsedBurnEvent.value).to.be.closeTo(totalBurned, 2);
    expect(parsedBurnEvent.balanceIncrease).to.be.closeTo(accruedDebt3, 2);
    expect(borrowerDaiData.currentVariableDebt).to.be.equal(0);

    // check handleRepayment function is correctly called
    await expect(repayTx)
      .to.emit(aTokenRepayImpl.attach(aDai.address), 'MockRepayment')
      .withArgs(borrower.address, borrower.address, daiRepaid);
  });

  it('User 1 withdraws all deposited funds and interest', async () => {
    const {
      dai,
      aDai,
      users: [depositor],
      pool,
      helpersContract,
    } = testEnv;
    const daiBalanceBefore = await dai.balanceOf(depositor.address);

    const withdrawTx = await pool
      .connect(depositor.signer)
      .withdraw(dai.address, MAX_UINT_AMOUNT, depositor.address);
    const withdrawReceipt = await withdrawTx.wait();

    const aDaiBalance = await aDai.balanceOf(depositor.address);
    expect(aDaiBalance).to.be.equal(0);

    const daiBalanceAfter = await dai.balanceOf(depositor.address);
    const daiWithdrawn = daiBalanceAfter.sub(daiBalanceBefore);
    accruedInterest3 = daiWithdrawn
      .sub(firstDaiDeposit)
      .sub(accruedInterest1)
      .sub(secondDaiDeposit)
      .sub(accruedInterest2)
      .sub(thirdDaiDeposit);
    const totalBurned = daiWithdrawn.sub(accruedInterest3);
    const daiReserveData = await helpersContract.getReserveData(dai.address);

    // get transfer event
    const rawTransferEvents = withdrawReceipt.logs.filter(
      (log) => log.topics[0] === transferEventSignature
    );
    expect(rawTransferEvents.length).to.equal(2, 'Incorrect number of Transfer Events');
    const parsedTransferEvent = aDai.interface.parseLog(rawTransferEvents[0]);

    // get burn event
    const parsedBurnEvents = getATokenEvent(aDai, withdrawReceipt, 'Burn');
    expect(parsedBurnEvents.length).to.equal(1, 'Incorrect number of Burn Events');
    const parsedBurnEvent = parsedBurnEvents[0];

    // check transfer parameters
    expect(parsedTransferEvent.args.from).to.equal(depositor.address);
    expect(parsedTransferEvent.args.to).to.equal(ZERO_ADDRESS);
    expect(parsedTransferEvent.args.value).to.be.closeTo(totalBurned, 2);

    // check burn parameters
    expect(parsedBurnEvent.from).to.equal(depositor.address);
    expect(parsedBurnEvent.target).to.equal(depositor.address);
    expect(parsedBurnEvent.value).to.be.closeTo(totalBurned, 2);
    expect(parsedBurnEvent.balanceIncrease).to.be.closeTo(accruedInterest3, 2);
    expect(parsedBurnEvent.index).to.equal(daiReserveData.liquidityIndex);
  });

  it('User 2 borrows, pass time and repay DAI less than accrued debt', async () => {
    const {
      dai,
      variableDebtDai,
      users: [depositor, borrower],
      pool,
    } = testEnv;

    // User 1 - Deposit DAI
    await waitForTx(
      await pool
        .connect(depositor.signer)
        .deposit(dai.address, firstDaiDeposit, depositor.address, '0')
    );

    // User 2 - Borrow DAI
    const borrowAmount = await convertToCurrencyDecimals(dai.address, '8000');
    await waitForTx(
      await pool
        .connect(borrower.signer)
        .borrow(dai.address, borrowAmount, RateMode.Variable, '0', borrower.address)
    );

    const debtBalanceBefore = await variableDebtDai.balanceOf(borrower.address);

    await increaseTime(86400);

    // repay a very small amount - less than accrued debt
    const smallRepay = BigNumber.from('100000');

    // approve protocol to access depositor wallet
    await waitForTx(await dai.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT));

    // repay DAI loan
    const repayTx = await pool
      .connect(borrower.signer)
      .repay(dai.address, smallRepay, RateMode.Variable, borrower.address);
    const repayReceipt = await repayTx.wait();

    const debtBalanceAfter = await variableDebtDai.balanceOf(borrower.address);
    const totalMinted = debtBalanceAfter.sub(debtBalanceBefore);

    // get transfer event
    const rawTransferEvents = repayReceipt.logs.filter(
      (log) => log.topics[0] === transferEventSignature
    );
    expect(rawTransferEvents.length).to.equal(2, 'Incorrect number of Transfer Events');
    const parsedTransferEvent = variableDebtDai.interface.parseLog(rawTransferEvents[0]);

    // get mint event
    const parsedMintEvents = getVariableDebtTokenEvent(variableDebtDai, repayReceipt, 'Mint');
    expect(parsedMintEvents.length).to.equal(1, 'Incorrect number of Mint Events');
    const parsedMintEvent = parsedMintEvents[0];

    // check transfer event
    expect(parsedTransferEvent.args.from).to.equal(ZERO_ADDRESS);
    expect(parsedTransferEvent.args.to).to.equal(borrower.address);
    expect(parsedTransferEvent.args.value).to.be.closeTo(totalMinted, 2);

    // check mint event
    expect(parsedMintEvent.caller).to.equal(borrower.address);
    expect(parsedMintEvent.onBehalfOf).to.equal(borrower.address);
    expect(parsedMintEvent.value).to.be.closeTo(totalMinted, 2);
    expect(parsedMintEvent.balanceIncrease).to.be.closeTo(totalMinted.add(smallRepay), 2);
  });

  it('User 1 withdraws amount less than accrued interest', async () => {
    const {
      dai,
      aDai,
      users: [depositor],
      pool,
      helpersContract,
    } = testEnv;

    // repay a very small amount - less than accrued debt
    const smallWithdrawal = BigNumber.from('100000');

    const withdrawTx = await pool
      .connect(depositor.signer)
      .withdraw(dai.address, smallWithdrawal, depositor.address);
    const withdrawReceipt = await withdrawTx.wait();

    const aTokenSupplyAfter = await aDai.balanceOf(depositor.address);
    const daiReserveData = await helpersContract.getReserveData(dai.address);
    const totalMinted = aTokenSupplyAfter.sub(firstDaiDeposit);

    // get transfer event
    const rawTransferEvents = withdrawReceipt.logs.filter(
      (log) => log.topics[0] === transferEventSignature
    );
    expect(rawTransferEvents.length).to.equal(2, 'Incorrect number of Transfer Events');
    const parsedTransferEvent = aDai.interface.parseLog(rawTransferEvents[0]);

    // get mint event
    const parsedMintEvents = getATokenEvent(aDai, withdrawReceipt, 'Mint');
    expect(parsedMintEvents.length).to.equal(1, 'Incorrect number of Mint Events');
    const parsedMintEvent = parsedMintEvents[0];

    // check transfer event
    expect(parsedTransferEvent.args.from).to.equal(ZERO_ADDRESS);
    expect(parsedTransferEvent.args.to).to.equal(depositor.address);
    expect(parsedTransferEvent.args.value).to.be.closeTo(totalMinted, 2);

    // check mint event
    expect(parsedMintEvent.caller).to.equal(depositor.address);
    expect(parsedMintEvent.onBehalfOf).to.equal(depositor.address);
    expect(parsedMintEvent.value).to.be.closeTo(totalMinted, 2);
    expect(parsedMintEvent.balanceIncrease).to.be.closeTo(totalMinted.add(smallWithdrawal), 2);
    expect(parsedMintEvent.index).to.equal(daiReserveData.liquidityIndex);
  });
});



================================================
FILE: test-suites/atoken-events.spec.ts
================================================
import {
  evmSnapshot,
  evmRevert,
  advanceTimeAndBlock,
  ZERO_ADDRESS,
  MintableERC20__factory,
} from '@aave/deploy-v3';
import { expect } from 'chai';
import { ethers } from 'hardhat';
import { BigNumber } from 'ethers';
import { TransactionReceipt } from '@ethersproject/providers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { RateMode } from '../helpers/types';
import { Pool, AToken } from '../types';
import { makeSuite, SignerWithAddress, TestEnv } from './helpers/make-suite';
import {
  supply,
  transfer,
  withdraw,
  getATokenEvent,
  transferFrom,
  printATokenEvents,
} from './helpers/utils/tokenization-events';

const DEBUG = false;

let balances = {
  balance: {},
};

const log = (str: string) => {
  if (DEBUG) console.log(str);
};

const printBalance = async (name: string, aToken: any, userAddress: string) => {
  console.log(
    name,
    'balanceOf',
    await ethers.utils.formatEther(await aToken.balanceOf(userAddress)),
    'scaledBalance',
    await ethers.utils.formatEther(await aToken.scaledBalanceOf(userAddress))
  );
};

const increaseSupplyIndex = async (
  pool: Pool,
  borrower: SignerWithAddress,
  collateral: string,
  assetToIncrease: string
) => {
  const collateralToken = MintableERC20__factory.connect(collateral, borrower.signer);
  const borrowingToken = MintableERC20__factory.connect(assetToIncrease, borrower.signer);

  await collateralToken
    .connect(borrower.signer)
    ['mint(address,uint256)'](
      borrower.address,
      await convertToCurrencyDecimals(collateralToken.address, '10000000')
    );
  await collateralToken.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);
  await pool
    .connect(borrower.signer)
    .supply(
      collateral,
      await convertToCurrencyDecimals(collateral, '100000'),
      borrower.address,
      '0'
    );

  const { aTokenAddress } = await pool.getReserveData(assetToIncrease);
  const availableLiquidity = await borrowingToken.balanceOf(aTokenAddress);
  await pool
    .connect(borrower.signer)
    .borrow(
      assetToIncrease,
      availableLiquidity.percentMul('20'),
      RateMode.Variable,
      0,
      borrower.address
    );

  await advanceTimeAndBlock(10000000000);
};

const updateBalances = (balances: any, aToken: AToken, receipt: TransactionReceipt) => {
  let events = getATokenEvent(aToken, receipt, 'Transfer');
  for (const ev of events) {
    if (ev.from == ZERO_ADDRESS || ev.to == ZERO_ADDRESS) continue;
    balances.balance[ev.from] = balances.balance[ev.from]?.sub(ev.value);
    balances.balance[ev.to] = balances.balance[ev.to]?.add(ev.value);
  }
  events = getATokenEvent(aToken, receipt, 'Mint');
  for (const ev of events) {
    balances.balance[ev.onBehalfOf] = balances.balance[ev.onBehalfOf]?.add(ev.value);
  }
  events = getATokenEvent(aToken, receipt, 'Burn');
  for (const ev of events) {
    balances.balance[ev.from] = balances.balance[ev.from]?.sub(ev.value.add(ev.balanceIncrease));
    balances.balance[ev.from] = balances.balance[ev.from]?.add(ev.balanceIncrease);
  }
};

makeSuite('AToken: Events', (testEnv: TestEnv) => {
  let alice, bob, eve, borrower, borrower2;

  let snapId;

  before(async () => {
    const { users, pool, dai, weth } = testEnv;
    [alice, bob, eve, borrower, borrower2] = users;

    const amountToMint = await convertToCurrencyDecimals(dai.address, '10000000');
    const usersToInit = [alice, bob, eve, borrower, borrower2];
    for (const user of usersToInit) {
      await dai.connect(user.signer)['mint(uint256)'](amountToMint);
      await weth.connect(user.signer)['mint(address,uint256)'](user.address, amountToMint);
      await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
      await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    }
  });

  beforeEach(async () => {
    snapId = await evmSnapshot();

    // Init balances
    balances = {
      balance: {
        [alice.address]: BigNumber.from(0),
        [bob.address]: BigNumber.from(0),
        [eve.address]: BigNumber.from(0),
      },
    };
  });

  afterEach(async () => {
    await evmRevert(snapId);
  });

  it('Alice and Bob supplies 1000, Alice transfer 500 to Bob, and withdraws 500 (without index change)', async () => {
    await testMultipleSupplyAndTransferAndWithdraw(false);
  });

  it('Alice and Bob supplies 1000, Alice transfer 500 to Bob, and withdraws 500 (with index change)', async () => {
    await testMultipleSupplyAndTransferAndWithdraw(true);
  });

  const testMultipleSupplyAndTransferAndWithdraw = async (indexChange: boolean) => {
    const { pool, dai, aDai, weth } = testEnv;

    let rcpt;
    let balanceTransferEv;
    let aliceBalanceBefore = await aDai.balanceOf(alice.address);
    let bobBalanceBefore = await aDai.balanceOf(bob.address);

    log('- Alice supplies 1000 DAI');
    rcpt = await supply(pool, alice, dai.address, '1000', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Bob supplies 1000 DAI');
    rcpt = await supply(pool, bob, dai.address, '1000', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice transfers 500 aDAI to Bob');
    const [fromScaledBefore, toScaledBefore] = await Promise.all([
      aDai.scaledBalanceOf(alice.address),
      aDai.scaledBalanceOf(bob.address),
    ]);
    rcpt = await transfer(pool, alice, dai.address, '500', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);
    balanceTransferEv = getATokenEvent(aDai, rcpt, 'BalanceTransfer')[0];
    expect(await aDai.scaledBalanceOf(alice.address)).to.be.eq(
      fromScaledBefore.sub(balanceTransferEv.value),
      'Scaled balance emitted in BalanceTransfer event does not match'
    );
    expect(await aDai.scaledBalanceOf(bob.address)).to.be.eq(
      toScaledBefore.add(balanceTransferEv.value),
      'Scaled balance emitted in BalanceTransfer event does not match'
    );

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice withdraws 500 DAI to Bob');
    rcpt = await withdraw(pool, alice, dai.address, '500', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (DEBUG) {
      await printBalance('alice', aDai, alice.address);
      await printBalance('bob', aDai, bob.address);
    }

    // Check final balances
    rcpt = await supply(pool, alice, dai.address, '1', alice.address, false);
    updateBalances(balances, aDai, rcpt);
    const aliceBalanceAfter = await aDai.balanceOf(alice.address);

    rcpt = await supply(pool, bob, dai.address, '1', bob.address, false);
    updateBalances(balances, aDai, rcpt);
    const bobBalanceAfter = await aDai.balanceOf(bob.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      2
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 2);
  };

  it('Alice supplies 1000, supplies 200, transfers 100 out, withdraws 50 withdraws 100 to Bob, withdraws 200 (without index change)', async () => {
    await testMultipleSupplyAndWithdrawalsOnBehalf(false);
  });

  it('Alice supplies 1000, supplies 200, transfers 100 out, withdraws 50 withdraws 100 to Bob, withdraws 200 (with index change)', async () => {
    await testMultipleSupplyAndWithdrawalsOnBehalf(true);
  });

  const testMultipleSupplyAndWithdrawalsOnBehalf = async (indexChange: boolean) => {
    const { pool, dai, aDai, weth } = testEnv;

    let rcpt;
    let balanceTransferEv;
    let aliceBalanceBefore = await aDai.balanceOf(alice.address);
    let bobBalanceBefore = await aDai.balanceOf(bob.address);

    log('- Alice supplies 1000 DAI');
    rcpt = await supply(pool, alice, dai.address, '1000', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice supplies 200 DAI');
    rcpt = await supply(pool, alice, dai.address, '200', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice transfers 100 aDAI to Bob');
    const [fromScaledBefore, toScaledBefore] = await Promise.all([
      aDai.scaledBalanceOf(alice.address),
      aDai.scaledBalanceOf(bob.address),
    ]);
    rcpt = await transfer(pool, alice, dai.address, '100', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);
    balanceTransferEv = getATokenEvent(aDai, rcpt, 'BalanceTransfer')[0];
    expect(await aDai.scaledBalanceOf(alice.address)).to.be.eq(
      fromScaledBefore.sub(balanceTransferEv.value),
      'Scaled balance emitted in BalanceTransfer event does not match'
    );
    expect(await aDai.scaledBalanceOf(bob.address)).to.be.eq(
      toScaledBefore.add(balanceTransferEv.value),
      'Scaled balance emitted in BalanceTransfer event does not match'
    );

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice withdraws 50 DAI');
    rcpt = await withdraw(pool, alice, dai.address, '50', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice withdraws 100 DAI to Bob');
    rcpt = await withdraw(pool, alice, dai.address, '100', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice withdraws 300 DAI');
    rcpt = await withdraw(pool, alice, dai.address, '300', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (DEBUG) {
      await printBalance('alice', aDai, alice.address);
      await printBalance('bob', aDai, bob.address);
    }

    // Check final balances
    rcpt = await supply(pool, alice, dai.address, '1', alice.address, false);
    updateBalances(balances, aDai, rcpt);
    const aliceBalanceAfter = await aDai.balanceOf(alice.address);

    rcpt = await supply(pool, bob, dai.address, '1', bob.address, false);
    updateBalances(balances, aDai, rcpt);
    const bobBalanceAfter = await aDai.balanceOf(bob.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      2
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 2);
  };

  it('Alice supplies 1000, supplies 200 to Bob, Bob supplies 100, Alice transfers 100 out, Alice withdraws 100, Alice withdraws 200 to Bob (without index change)', async () => {
    await testMultipleSupplyOnBehalfOfAndWithdrawals(false);
  });

  it('Alice supplies 1000, supplies 200 to Bob, Bob supplies 100, Alice transfers 100 out, Alice withdraws 100, Alice withdraws 200 to Bob (with index change)', async () => {
    await testMultipleSupplyOnBehalfOfAndWithdrawals(true);
  });

  const testMultipleSupplyOnBehalfOfAndWithdrawals = async (indexChange: boolean) => {
    const { pool, dai, aDai, weth } = testEnv;

    let rcpt;
    let balanceTransferEv;
    let aliceBalanceBefore = await aDai.balanceOf(alice.address);
    let bobBalanceBefore = await aDai.balanceOf(bob.address);

    log('- Alice supplies 1000 DAI');
    rcpt = await supply(pool, alice, dai.address, '1000', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice supplies 200 DAI to Bob');
    rcpt = await supply(pool, alice, dai.address, '200', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Bob supplies 100 DAI');
    rcpt = await supply(pool, bob, dai.address, '100', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice transfers 100 aDAI to Bob');
    const [fromScaledBefore, toScaledBefore] = await Promise.all([
      aDai.scaledBalanceOf(alice.address),
      aDai.scaledBalanceOf(bob.address),
    ]);
    rcpt = await transfer(pool, alice, dai.address, '100', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);
    balanceTransferEv = getATokenEvent(aDai, rcpt, 'BalanceTransfer')[0];
    expect(await aDai.scaledBalanceOf(alice.address)).to.be.eq(
      fromScaledBefore.sub(balanceTransferEv.value),
      'Scaled balance emitted in BalanceTransfer event does not match'
    );
    expect(await aDai.scaledBalanceOf(bob.address)).to.be.eq(
      toScaledBefore.add(balanceTransferEv.value),
      'Scaled balance emitted in BalanceTransfer event does not match'
    );

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice withdraws 200 DAI to Bob');
    rcpt = await withdraw(pool, alice, dai.address, '200', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (DEBUG) {
      await printBalance('alice', aDai, alice.address);
      await printBalance('bob', aDai, bob.address);
    }

    // Check final balances
    rcpt = await supply(pool, alice, dai.address, '1', alice.address, false);
    updateBalances(balances, aDai, rcpt);
    const aliceBalanceAfter = await aDai.balanceOf(alice.address);

    rcpt = await supply(pool, bob, dai.address, '1', bob.address, false);
    updateBalances(balances, aDai, rcpt);
    const bobBalanceAfter = await aDai.balanceOf(bob.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      2
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 2);
  };

  it('Alice supplies 1000, transfers 100 to Bob, transfers 500 to itself, Bob transfers 500 from Alice to itself, withdraws 400 to Bob (without index change)', async () => {
    await testMultipleTransfersAndWithdrawals(false);
  });

  it('Alice supplies 1000, transfers 100 to Bob, transfers 500 to itself, Bob transfers 500 from Alice to itself, withdraws 400 to Bob  (with index change)', async () => {
    await testMultipleTransfersAndWithdrawals(true);
  });

  const testMultipleTransfersAndWithdrawals = async (indexChange: boolean) => {
    const { pool, dai, aDai, weth } = testEnv;

    let rcpt;
    let balanceTransferEv;
    let aliceBalanceBefore = await aDai.balanceOf(alice.address);
    let bobBalanceBefore = await aDai.balanceOf(bob.address);

    log('- Alice supplies 1000 DAI');
    rcpt = await supply(pool, alice, dai.address, '1000', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice transfers 100 DAI to Bob');
    let [fromScaledBefore, toScaledBefore] = await Promise.all([
      aDai.scaledBalanceOf(alice.address),
      aDai.scaledBalanceOf(bob.address),
    ]);
    rcpt = await transfer(pool, alice, dai.address, '100', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);
    balanceTransferEv = getATokenEvent(aDai, rcpt, 'BalanceTransfer')[0];
    expect(await aDai.scaledBalanceOf(alice.address)).to.be.eq(
      fromScaledBefore.sub(balanceTransferEv.value),
      'Scaled balance emitted in BalanceTransfer event does not match'
    );
    expect(await aDai.scaledBalanceOf(bob.address)).to.be.eq(
      toScaledBefore.add(balanceTransferEv.value),
      'Scaled balance emitted in BalanceTransfer event does not match'
    );

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice transfers 500 DAI to itself');
    fromScaledBefore = await aDai.scaledBalanceOf(alice.address);
    rcpt = await transfer(pool, alice, dai.address, '500', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);
    expect(await aDai.scaledBalanceOf(alice.address)).to.be.eq(
      fromScaledBefore,
      'Scaled balance should remain the same'
    );

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Bob transfersFrom Alice 500 DAI to Alice');
    fromScaledBefore = await aDai.scaledBalanceOf(alice.address);
    expect(
      await aDai
        .connect(alice.signer)
        .approve(bob.address, await convertToCurrencyDecimals(dai.address, '500'))
    );
    rcpt = await transferFrom(pool, bob, alice.address, dai.address, '500', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);
    expect(await aDai.scaledBalanceOf(alice.address)).to.be.eq(
      fromScaledBefore,
      'Scaled balance should remain the same'
    );

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, borrower, weth.address, dai.address);
    }

    log('- Alice withdraws 400 DAI to Bob');
    rcpt = await withdraw(pool, alice, dai.address, '200', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (DEBUG) {
      await printBalance('alice', aDai, alice.address);
      await printBalance('bob', aDai, bob.address);
    }

    // Check final balances
    rcpt = await supply(pool, alice, dai.address, '1', alice.address, false);
    updateBalances(balances, aDai, rcpt);
    const aliceBalanceAfter = await aDai.balanceOf(alice.address);

    rcpt = await supply(pool, bob, dai.address, '1', bob.address, false);
    updateBalances(balances, aDai, rcpt);
    const bobBalanceAfter = await aDai.balanceOf(bob.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      2
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 2);
  };

  it('Alice supplies 300000, withdraws 200000 to Bob, withdraws 5 to Bob', async () => {
    const { pool, dai, aDai, weth } = testEnv;

    let rcpt;
    let aliceBalanceBefore = await aDai.balanceOf(alice.address);
    let bobBalanceBefore = await aDai.balanceOf(bob.address);

    log('- Alice supplies 300000 DAI');
    rcpt = await supply(pool, alice, dai.address, '300000', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    log('- Increase index due to great borrow of DAI');
    await increaseSupplyIndex(pool, borrower, weth.address, dai.address);

    log('- Alice withdraws 200000 DAI to Bob');
    rcpt = await withdraw(pool, alice, dai.address, '200000', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    log('- Increase index due to great borrow of DAI');
    await increaseSupplyIndex(pool, borrower, weth.address, dai.address);

    log('- Alice withdraws 5 DAI to Bob');
    rcpt = await withdraw(pool, alice, dai.address, '5', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (DEBUG) {
      await printBalance('alice', aDai, alice.address);
      await printBalance('bob', aDai, bob.address);
    }

    // Check final balances
    rcpt = await supply(pool, alice, dai.address, '1', alice.address, false);
    updateBalances(balances, aDai, rcpt);
    const aliceBalanceAfter = await aDai.balanceOf(alice.address);

    rcpt = await supply(pool, bob, dai.address, '1', bob.address, false);
    updateBalances(balances, aDai, rcpt);
    const bobBalanceAfter = await aDai.balanceOf(bob.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      2
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 2);
  });

  it('Bob supplies 1000, Alice supplies 200 on behalf of Bob, Bob withdraws 200 on behalf of Alice', async () => {
    const { pool, dai, aDai, weth } = testEnv;

    let rcpt;
    let aliceBalanceBefore = await aDai.balanceOf(alice.address);
    let bobBalanceBefore = await aDai.balanceOf(bob.address);

    log('- Bob supplies 1000 DAI');
    rcpt = await supply(pool, bob, dai.address, '1000', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    log('- Increase index due to great borrow of DAI');
    await increaseSupplyIndex(pool, borrower, weth.address, dai.address);

    log('- Alice supplies 200 DAI to Bob');
    rcpt = await supply(pool, alice, dai.address, '200', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    log('- Increase index due to great borrow of DAI');
    await increaseSupplyIndex(pool, borrower, weth.address, dai.address);

    log('- Bob withdraws 200 DAI to Alice');
    rcpt = await withdraw(pool, bob, dai.address, '200', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (DEBUG) {
      await printBalance('alice', aDai, alice.address);
      await printBalance('bob', aDai, bob.address);
    }

    // Check final balances
    rcpt = await supply(pool, alice, dai.address, '1', alice.address, false);
    updateBalances(balances, aDai, rcpt);
    const aliceBalanceAfter = await aDai.balanceOf(alice.address);

    rcpt = await supply(pool, bob, dai.address, '1', bob.address, false);
    updateBalances(balances, aDai, rcpt);
    const bobBalanceAfter = await aDai.balanceOf(bob.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      2
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 2);
  });

  it('Alice supplies 1000 DAI and approves aDai to Bob, Bob transfers 500 to himself and 300 to Eve, index change, principal goes back to Alice', async () => {
    const { pool, dai, aDai, weth } = testEnv;

    let rcpt;
    let aliceBalanceBefore = await aDai.balanceOf(alice.address);
    let bobBalanceBefore = await aDai.balanceOf(bob.address);
    let eveBalanceBefore = await aDai.balanceOf(eve.address);

    log('- Alice supplies 1000 DAI');
    rcpt = await supply(pool, alice, dai.address, '1000', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    log('- Alice approves aDai to Bob');
    await aDai.connect(alice.signer).approve(bob.address, MAX_UINT_AMOUNT);

    log('- Bob transfers 500 aDai from Alice to himself');
    rcpt = await transferFrom(pool, bob, alice.address, dai.address, '500', bob.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    log('- Bob transfers 300 aDai from Alice to Eve');
    rcpt = await transferFrom(pool, bob, alice.address, dai.address, '300', eve.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    log('- Increase index due to great borrow of DAI');
    await increaseSupplyIndex(pool, borrower, weth.address, dai.address);

    log('- Bob transfers 500 back to Alice');
    rcpt = await transfer(pool, bob, dai.address, '500', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    log('- Eve transfers 500 back to Alice');
    rcpt = await transfer(pool, eve, dai.address, '300', alice.address, DEBUG);
    updateBalances(balances, aDai, rcpt);

    if (DEBUG) {
      await printBalance('alice', aDai, alice.address);
      await printBalance('bob', aDai, bob.address);
      await printBalance('eve', aDai, eve.address);
    }

    // Check final balances
    rcpt = await supply(pool, alice, dai.address, '1', alice.address, false);
    updateBalances(balances, aDai, rcpt);
    const aliceBalanceAfter = await aDai.balanceOf(alice.address);

    rcpt = await supply(pool, bob, dai.address, '1', bob.address, false);
    updateBalances(balances, aDai, rcpt);
    const bobBalanceAfter = await aDai.balanceOf(bob.address);

    rcpt = await supply(pool, eve, dai.address, '1', eve.address, false);
    updateBalances(balances, aDai, rcpt);
    const eveBalanceAfter = await aDai.balanceOf(eve.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      2
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 2);
    expect(eveBalanceAfter).to.be.closeTo(eveBalanceBefore.add(balances.balance[eve.address]), 2);
  });
});



================================================
FILE: test-suites/atoken-modifiers.spec.ts
================================================
import { expect } from 'chai';
import { ProtocolErrors } from '../helpers/types';
import { makeSuite, TestEnv } from './helpers/make-suite';

makeSuite('AToken: Modifiers', (testEnv: TestEnv) => {
  const { CALLER_MUST_BE_POOL } = ProtocolErrors;

  it('Tries to invoke mint not being the Pool (revert expected)', async () => {
    const { deployer, aDai } = testEnv;
    await expect(aDai.mint(deployer.address, deployer.address, '1', '1')).to.be.revertedWith(
      CALLER_MUST_BE_POOL
    );
  });

  it('Tries to invoke burn not being the Pool (revert expected)', async () => {
    const { deployer, aDai } = testEnv;
    await expect(aDai.burn(deployer.address, deployer.address, '1', '1')).to.be.revertedWith(
      CALLER_MUST_BE_POOL
    );
  });

  it('Tries to invoke transferOnLiquidation not being the Pool (revert expected)', async () => {
    const { deployer, users, aDai } = testEnv;
    await expect(
      aDai.transferOnLiquidation(deployer.address, users[0].address, '1')
    ).to.be.revertedWith(CALLER_MUST_BE_POOL);
  });

  it('Tries to invoke transferUnderlyingTo not being the Pool (revert expected)', async () => {
    const { deployer, aDai } = testEnv;
    await expect(aDai.transferUnderlyingTo(deployer.address, '1')).to.be.revertedWith(
      CALLER_MUST_BE_POOL
    );
  });
});



================================================
FILE: test-suites/atoken-permit.spec.ts
================================================
import { waitForTx } from '@aave/deploy-v3';
import { expect } from 'chai';
import { ethers, utils } from 'ethers';
import { HARDHAT_CHAINID, MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { buildPermitParams, getSignatureFromTypedData } from '../helpers/contracts-helpers';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { getTestWallets } from './helpers/utils/wallets';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { ProtocolErrors } from '../helpers/types';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('AToken: Permit', (testEnv: TestEnv) => {
  let testWallets;

  const EIP712_REVISION = '1';

  before(async () => {
    const { dai, pool, deployer } = testEnv;

    testWallets = getTestWallets();

    // Mint DAI and deposit to Pool to for aDAI
    await waitForTx(await dai['mint(uint256)'](utils.parseEther('20000')));
    await waitForTx(await dai.approve(pool.address, utils.parseEther('20000')));

    await waitForTx(
      await pool.deposit(dai.address, utils.parseEther('20000'), deployer.address, 0)
    );
  });

  it('Checks the domain separator', async () => {
    const { aDai } = testEnv;
    const separator = await aDai.DOMAIN_SEPARATOR();

    const domain = {
      name: await aDai.name(),
      version: EIP712_REVISION,
      chainId: hre.network.config.chainId,
      verifyingContract: aDai.address,
    };
    const domainSeparator = utils._TypedDataEncoder.hashDomain(domain);

    expect(separator).to.be.equal(domainSeparator, 'Invalid domain separator');
  });

  it('Tries to submit a permit with 0 expiration (revert expected)', async () => {
    const { aDai, deployer, users } = testEnv;
    const owner = deployer;
    const spender = users[1];

    const tokenName = await aDai.name();

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = 0;
    const nonce = (await aDai.nonces(owner.address)).toNumber();
    const permitAmount = utils.parseEther('2').toString();
    const msgParams = buildPermitParams(
      chainId,
      aDai.address,
      EIP712_REVISION,
      tokenName,
      owner.address,
      spender.address,
      nonce,
      permitAmount,
      expiration.toFixed()
    );

    const ownerPrivateKey = testWallets[0].secretKey;

    expect((await aDai.allowance(owner.address, spender.address)).toString()).to.be.equal(
      '0',
      'INVALID_ALLOWANCE_BEFORE_PERMIT'
    );

    const { v, r, s } = getSignatureFromTypedData(ownerPrivateKey, msgParams);

    await expect(
      aDai
        .connect(spender.signer)
        .permit(owner.address, spender.address, permitAmount, expiration, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.INVALID_EXPIRATION);

    expect((await aDai.allowance(owner.address, spender.address)).toString()).to.be.equal(
      '0',
      'INVALID_ALLOWANCE_AFTER_PERMIT'
    );
  });

  it('Submits a permit with maximum expiration length', async () => {
    const { aDai, deployer, users } = testEnv;
    const owner = deployer;
    const spender = users[1];

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const deadline = MAX_UINT_AMOUNT;
    const nonce = (await aDai.nonces(owner.address)).toNumber();
    const permitAmount = utils.parseEther('2').toString();
    const msgParams = buildPermitParams(
      chainId,
      aDai.address,
      EIP712_REVISION,
      await aDai.name(),
      owner.address,
      spender.address,
      nonce,
      deadline,
      permitAmount
    );

    const ownerPrivateKey = testWallets[0].secretKey;

    expect((await aDai.allowance(owner.address, spender.address)).toString()).to.be.equal(
      '0',
      'INVALID_ALLOWANCE_BEFORE_PERMIT'
    );

    const { v, r, s } = getSignatureFromTypedData(ownerPrivateKey, msgParams);

    expect(
      await aDai
        .connect(spender.signer)
        .permit(owner.address, spender.address, permitAmount, deadline, v, r, s)
    );

    expect((await aDai.nonces(owner.address)).toNumber()).to.be.equal(1);
  });

  it('Cancels the previous permit', async () => {
    const { aDai, deployer, users } = testEnv;
    const owner = deployer;
    const spender = users[1];

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const deadline = MAX_UINT_AMOUNT;
    const nonce = (await aDai.nonces(owner.address)).toNumber();
    const permitAmount = '0';
    const msgParams = buildPermitParams(
      chainId,
      aDai.address,
      EIP712_REVISION,
      await aDai.name(),
      owner.address,
      spender.address,
      nonce,
      deadline,
      permitAmount
    );

    const ownerPrivateKey = testWallets[0].secretKey;

    const { v, r, s } = getSignatureFromTypedData(ownerPrivateKey, msgParams);

    expect((await aDai.allowance(owner.address, spender.address)).toString()).to.be.equal(
      ethers.utils.parseEther('2'),
      'INVALID_ALLOWANCE_BEFORE_PERMIT'
    );

    expect(
      await aDai
        .connect(spender.signer)
        .permit(owner.address, spender.address, permitAmount, deadline, v, r, s)
    );
    expect((await aDai.allowance(owner.address, spender.address)).toString()).to.be.equal(
      permitAmount,
      'INVALID_ALLOWANCE_AFTER_PERMIT'
    );

    expect((await aDai.nonces(owner.address)).toNumber()).to.be.equal(2);
  });

  it('Tries to submit a permit with invalid nonce (revert expected)', async () => {
    const { aDai, deployer, users } = testEnv;
    const owner = deployer;
    const spender = users[1];

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const deadline = MAX_UINT_AMOUNT;
    const nonce = 1000;
    const permitAmount = '0';
    const msgParams = buildPermitParams(
      chainId,
      aDai.address,
      EIP712_REVISION,
      await aDai.name(),
      owner.address,
      spender.address,
      nonce,
      deadline,
      permitAmount
    );

    const ownerPrivateKey = testWallets[0].secretKey;

    const { v, r, s } = getSignatureFromTypedData(ownerPrivateKey, msgParams);

    await expect(
      aDai
        .connect(spender.signer)
        .permit(owner.address, spender.address, permitAmount, deadline, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.INVALID_SIGNATURE);
  });

  it('Tries to submit a permit with invalid expiration (previous to the current block) (revert expected)', async () => {
    const { aDai, deployer, users } = testEnv;
    const owner = deployer;
    const spender = users[1];

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = '1';
    const nonce = (await aDai.nonces(owner.address)).toNumber();
    const permitAmount = '0';
    const msgParams = buildPermitParams(
      chainId,
      aDai.address,
      EIP712_REVISION,
      await aDai.name(),
      owner.address,
      spender.address,
      nonce,
      expiration,
      permitAmount
    );

    const ownerPrivateKey = testWallets[0].secretKey;

    const { v, r, s } = getSignatureFromTypedData(ownerPrivateKey, msgParams);

    await expect(
      aDai
        .connect(spender.signer)
        .permit(owner.address, spender.address, expiration, permitAmount, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.INVALID_EXPIRATION);
  });

  it('Tries to submit a permit with invalid signature (revert expected)', async () => {
    const { aDai, deployer, users } = testEnv;
    const owner = deployer;
    const spender = users[1];

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const deadline = MAX_UINT_AMOUNT;
    const nonce = (await aDai.nonces(owner.address)).toNumber();
    const permitAmount = '0';
    const msgParams = buildPermitParams(
      chainId,
      aDai.address,
      EIP712_REVISION,
      await aDai.name(),
      owner.address,
      spender.address,
      nonce,
      deadline,
      permitAmount
    );

    const ownerPrivateKey = testWallets[0].secretKey;

    const { v, r, s } = getSignatureFromTypedData(ownerPrivateKey, msgParams);

    await expect(
      aDai
        .connect(spender.signer)
        .permit(owner.address, ZERO_ADDRESS, permitAmount, deadline, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.INVALID_SIGNATURE);
  });

  it('Tries to submit a permit with invalid owner (revert expected)', async () => {
    const { aDai, deployer, users } = testEnv;
    const owner = deployer;
    const spender = users[1];

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = MAX_UINT_AMOUNT;
    const nonce = (await aDai.nonces(owner.address)).toNumber();
    const permitAmount = '0';
    const msgParams = buildPermitParams(
      chainId,
      aDai.address,
      EIP712_REVISION,
      await aDai.name(),
      owner.address,
      spender.address,
      nonce,
      expiration,
      permitAmount
    );

    const ownerPrivateKey = testWallets[0].secretKey;

    const { v, r, s } = getSignatureFromTypedData(ownerPrivateKey, msgParams);

    await expect(
      aDai
        .connect(spender.signer)
        .permit(ZERO_ADDRESS, spender.address, expiration, permitAmount, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.ZERO_ADDRESS_NOT_VALID);
  });
});



================================================
FILE: test-suites/atoken-repay.spec.ts
================================================
import { MockATokenRepayment } from './../types/mocks/tokens/MockATokenRepayment';
import { MockATokenRepayment__factory } from './../types/factories/mocks/tokens/MockATokenRepayment__factory';
import {
  waitForTx,
  evmSnapshot,
  evmRevert,
  DefaultReserveInterestRateStrategy__factory,
  IStableDebtToken__factory,
  IVariableDebtToken__factory,
} from '@aave/deploy-v3';
import { parseUnits } from '@ethersproject/units';
import { expect } from 'chai';
import { utils } from 'ethers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { setBlocktime, timeLatest } from '../helpers/misc-utils';
import { RateMode } from '../helpers/types';
import { TestEnv, makeSuite } from './helpers/make-suite';
import './helpers/utils/wadraymath';
import { AaveDistributionManager__factory } from '@aave/deploy-v3/dist/types/typechain/factories/@aave/safety-module/contracts/stake';

makeSuite('AToken: Repay', (testEnv: TestEnv) => {
  let snapShot: string;
  let aTokenRepayImpl: MockATokenRepayment;

  before('User 0 deposits 100 DAI, user 1 deposits 1 WETH, borrows 50 DAI', async () => {
    const {
      weth,
      pool,
      dai,
      aDai,
      users: [user0, user1],
      deployer,
      configurator,
    } = testEnv;

    const daiAmount = utils.parseEther('100');
    const wethAmount = utils.parseEther('1');
    await waitForTx(await dai.connect(user0.signer)['mint(uint256)'](daiAmount));
    await waitForTx(
      await weth.connect(user1.signer)['mint(address,uint256)'](user1.address, wethAmount)
    );

    await waitForTx(await dai.connect(user0.signer).approve(pool.address, MAX_UINT_AMOUNT));
    await waitForTx(await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT));

    aTokenRepayImpl = await new MockATokenRepayment__factory(deployer.signer).deploy(pool.address);

    await configurator.updateAToken({
      asset: dai.address,
      treasury: await aDai.RESERVE_TREASURY_ADDRESS(),
      incentivesController: await aDai.getIncentivesController(),
      name: await aDai.name(),
      symbol: await aDai.symbol(),
      implementation: aTokenRepayImpl.address,
      params: '0x',
    });

    expect(await pool.connect(user0.signer).deposit(dai.address, daiAmount, user0.address, 0));
    expect(await pool.connect(user1.signer).deposit(weth.address, wethAmount, user1.address, 0));

    expect(
      await pool.connect(user1.signer).borrow(dai.address, daiAmount.div(2), 2, 0, user1.address)
    );
  });

  beforeEach(async () => {
    snapShot = await evmSnapshot();
  });

  afterEach(async () => {
    await evmRevert(snapShot);
  });

  it('User 1 tries to repay using aTokens without actually holding aDAI', async () => {
    const {
      pool,
      dai,
      users: [, user1],
    } = testEnv;
    const repayAmount = utils.parseEther('25');

    await expect(pool.connect(user1.signer).repayWithATokens(dai.address, repayAmount, 2)).to.be
      .reverted;
  });

  it('User 1 receives 25 aDAI from user 0, repays half of the debt', async () => {
    const {
      pool,
      dai,
      aDai,
      variableDebtDai,
      users: [user0, user1],
    } = testEnv;

    const repayAmount = utils.parseEther('25');

    await expect(await aDai.connect(user0.signer).transfer(user1.address, repayAmount));

    const time = await timeLatest();

    await setBlocktime(time.add(1).toNumber());

    const balanceBefore = await aDai.balanceOf(user1.address, { blockTag: 'pending' });
    const debtBefore = await variableDebtDai.balanceOf(user1.address, { blockTag: 'pending' });

    await expect(pool.connect(user1.signer).repayWithATokens(dai.address, repayAmount, 2))
      .to.emit(pool, 'Repay')
      .withArgs(dai.address, user1.address, user1.address, repayAmount, true)
      .and.not.to.emit(aTokenRepayImpl.attach(aDai.address), 'MockRepayment');
    const balanceAfter = await aDai.balanceOf(user1.address);
    const debtAfter = await variableDebtDai.balanceOf(user1.address);

    expect(balanceAfter).to.be.closeTo(balanceBefore.sub(repayAmount), 2);
    expect(debtAfter).to.be.closeTo(debtBefore.sub(repayAmount), 2);
  });

  it('User 1 receives 25 aDAI from user 0, use all aDai to repay debt', async () => {
    const {
      pool,
      dai,
      aDai,
      variableDebtDai,
      users: [user0, user1],
    } = testEnv;

    const transferAmount = utils.parseEther('25');
    expect(await aDai.connect(user0.signer).transfer(user1.address, transferAmount));

    const time = await timeLatest();
    await setBlocktime(time.add(1).toNumber());

    const balanceBefore = await aDai.balanceOf(user1.address, { blockTag: 'pending' });
    expect(balanceBefore).to.be.gt(transferAmount);

    const debtBefore = await variableDebtDai.balanceOf(user1.address, { blockTag: 'pending' });

    const action = await pool
      .connect(user1.signer)
      .repayWithATokens(dai.address, MAX_UINT_AMOUNT, 2);

    const tx = await waitForTx(action);

    const repayEventSignature = utils.keccak256(
      utils.toUtf8Bytes('Repay(address,address,address,uint256,bool)')
    );

    await expect(action).to.not.emit(aTokenRepayImpl.attach(aDai.address), 'MockRepayment');

    const rawRepayEvents = tx.logs.filter((log) => log.topics[0] === repayEventSignature);
    const parsedRepayEvent = pool.interface.parseLog(rawRepayEvents[0]);

    expect(parsedRepayEvent.args.useATokens).to.be.true;
    expect(parsedRepayEvent.args.reserve).to.be.eq(dai.address);
    expect(parsedRepayEvent.args.repayer).to.be.eq(user1.address);
    expect(parsedRepayEvent.args.user).to.be.eq(user1.address);

    const repayAmount = parsedRepayEvent.args.amount;
    const balanceAfter = await aDai.balanceOf(user1.address);
    const debtAfter = await variableDebtDai.balanceOf(user1.address);

    expect(balanceAfter).to.be.eq(0);
    expect(debtAfter).to.be.closeTo(debtBefore.sub(repayAmount), 2);
  });

  it('User 1 receives 55 aDAI from user 0, repay all debt', async () => {
    const {
      pool,
      dai,
      aDai,
      variableDebtDai,
      users: [user0, user1],
    } = testEnv;

    const transferAmount = utils.parseEther('55');
    expect(await aDai.connect(user0.signer).transfer(user1.address, transferAmount));

    const time = await timeLatest();
    await setBlocktime(time.add(1).toNumber());

    const balanceBefore = await aDai.balanceOf(user1.address, { blockTag: 'pending' });
    const debtBefore = await variableDebtDai.balanceOf(user1.address, { blockTag: 'pending' });
    expect(debtBefore).to.be.gt(parseUnits('50', 18));

    const action = await pool
      .connect(user1.signer)
      .repayWithATokens(dai.address, MAX_UINT_AMOUNT, 2);

    const tx = await waitForTx(action);

    await expect(action).to.not.emit(aTokenRepayImpl.attach(aDai.address), 'MockRepayment');

    const repayEventSignature = utils.keccak256(
      utils.toUtf8Bytes('Repay(address,address,address,uint256,bool)')
    );

    const rawRepayEvents = tx.logs.filter((log) => log.topics[0] === repayEventSignature);
    const parsedRepayEvent = pool.interface.parseLog(rawRepayEvents[0]);

    expect(parsedRepayEvent.args.useATokens).to.be.true;
    expect(parsedRepayEvent.args.reserve).to.be.eq(dai.address);
    expect(parsedRepayEvent.args.repayer).to.be.eq(user1.address);
    expect(parsedRepayEvent.args.user).to.be.eq(user1.address);

    const repayAmount = parsedRepayEvent.args.amount;
    const balanceAfter = await aDai.balanceOf(user1.address);
    const debtAfter = await variableDebtDai.balanceOf(user1.address);

    expect(debtAfter).to.be.eq(0);
    expect(balanceAfter).to.be.eq(balanceBefore.sub(repayAmount));
  });

  it('Check interest rates after repaying with aTokens', async () => {
    const {
      weth,
      dai,
      aDai,
      pool,
      helpersContract,
      users: [user],
    } = testEnv;

    const depositAmount = parseUnits('1000', 18);
    await dai.connect(user.signer)['mint(uint256)'](depositAmount);
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).supply(dai.address, depositAmount, user.address, 0);

    const collateralAmount = parseUnits('100', 18);
    await weth.connect(user.signer)['mint(address,uint256)'](user.address, collateralAmount);
    await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).supply(weth.address, collateralAmount, user.address, 0);

    const borrowAmount = parseUnits('500', 18);
    await pool
      .connect(user.signer)
      .borrow(dai.address, borrowAmount, RateMode.Variable, 0, user.address);

    // Now we repay 250 with aTokens
    const repayAmount = parseUnits('250', 18);
    const action = await pool
      .connect(user.signer)
      .repayWithATokens(dai.address, repayAmount, RateMode.Variable);

    await expect(action).to.not.emit(aTokenRepayImpl.attach(aDai.address), 'MockRepayment');

    const reserveData = await pool.getReserveData(dai.address);
    const strategy = DefaultReserveInterestRateStrategy__factory.connect(
      reserveData.interestRateStrategyAddress,
      user.signer
    );

    const stableDebtToken = IStableDebtToken__factory.connect(
      reserveData.stableDebtTokenAddress,
      user.signer
    );
    const stableDebtData = await stableDebtToken.getSupplyData();

    const variableDebtToken = IVariableDebtToken__factory.connect(
      reserveData.variableDebtTokenAddress,
      user.signer
    );
    const scaledTotalSupply = await variableDebtToken.scaledTotalSupply();
    const variableDebt = scaledTotalSupply.rayMul(
      await pool.getReserveNormalizedVariableDebt(dai.address)
    );

    const expectedRates = await strategy.calculateInterestRates({
      unbacked: 0,
      liquidityAdded: 0,
      liquidityTaken: 0,
      totalStableDebt: stableDebtData[1],
      totalVariableDebt: variableDebt,
      aToken: aDai.address,
      reserve: dai.address,
      reserveFactor: (await helpersContract.getReserveConfigurationData(dai.address)).reserveFactor,
      averageStableBorrowRate: stableDebtData[2],
    });

    expect(reserveData.currentLiquidityRate).to.be.eq(expectedRates[0]);
    expect(reserveData.currentStableBorrowRate).to.be.eq(expectedRates[1]);
    expect(reserveData.currentVariableBorrowRate).to.be.eq(expectedRates[2]);
  });
});



================================================
FILE: test-suites/atoken-transfer.spec.ts
================================================
import { evmSnapshot, evmRevert } from '@aave/deploy-v3';
import { expect } from 'chai';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { RateMode, ProtocolErrors } from '../helpers/types';
import { makeSuite, TestEnv } from './helpers/make-suite';

makeSuite('AToken: Transfer', (testEnv: TestEnv) => {
  const {
    INVALID_FROM_BALANCE_AFTER_TRANSFER,
    INVALID_TO_BALANCE_AFTER_TRANSFER,
    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,
  } = ProtocolErrors;

  const DAI_AMOUNT_TO_DEPOSIT = '1000';

  it('User 0 deposits 1000 DAI, transfers 1000 to user 0', async () => {
    const { users, pool, dai, aDai } = testEnv;
    const snap = await evmSnapshot();

    // User 1 deposits 1000 DAI
    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, DAI_AMOUNT_TO_DEPOSIT);

    // Top up user
    expect(await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit));

    expect(await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(await aDai.getPreviousIndex(users[0].address)).to.be.eq(0);

    expect(
      await pool
        .connect(users[0].signer)
        .deposit(dai.address, amountDAItoDeposit, users[0].address, '0')
    );

    expect(await aDai.getPreviousIndex(users[0].address)).to.be.gt(0);

    await expect(aDai.connect(users[0].signer).transfer(users[0].address, amountDAItoDeposit))
      .to.emit(aDai, 'Transfer')
      .withArgs(users[0].address, users[0].address, amountDAItoDeposit);

    const name = await aDai.name();

    expect(name).to.be.equal('Aave Testnet DAI');

    const fromBalance = await aDai.balanceOf(users[0].address);
    const toBalance = await aDai.balanceOf(users[0].address);
    expect(fromBalance.toString()).to.be.eq(toBalance.toString());

    await evmRevert(snap);
  });

  it('User 0 deposits 1000 DAI, disable as collateral, transfers 1000 to user 1', async () => {
    const { users, pool, dai, aDai } = testEnv;
    const snap = await evmSnapshot();

    // User 1 deposits 1000 DAI
    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, DAI_AMOUNT_TO_DEPOSIT);

    // Top up user
    expect(await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit));

    expect(await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(
      await pool
        .connect(users[0].signer)
        .deposit(dai.address, amountDAItoDeposit, users[0].address, '0')
    );

    expect(await pool.connect(users[0].signer).setUserUseReserveAsCollateral(dai.address, false));

    await expect(aDai.connect(users[0].signer).transfer(users[1].address, amountDAItoDeposit))
      .to.emit(aDai, 'Transfer')
      .withArgs(users[0].address, users[1].address, amountDAItoDeposit);

    const name = await aDai.name();

    expect(name).to.be.equal('Aave Testnet DAI');

    const fromBalance = await aDai.balanceOf(users[0].address);
    const toBalance = await aDai.balanceOf(users[1].address);
    expect(fromBalance.toString()).to.be.equal('0', INVALID_FROM_BALANCE_AFTER_TRANSFER);
    expect(toBalance.toString()).to.be.equal(
      amountDAItoDeposit.toString(),
      INVALID_TO_BALANCE_AFTER_TRANSFER
    );

    await evmRevert(snap);
  });

  it('User 0 deposits 1000 DAI, transfers 5 to user 1 twice, then transfer 0 to user 1', async () => {
    const { users, pool, dai, aDai } = testEnv;
    const snap = await evmSnapshot();

    expect(
      await dai
        .connect(users[0].signer)
        ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, DAI_AMOUNT_TO_DEPOSIT))
    );

    expect(await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT));

    // User 1 deposits 1000 DAI
    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, DAI_AMOUNT_TO_DEPOSIT);
    const amountDAItoTransfer = await convertToCurrencyDecimals(dai.address, '5');

    expect(
      await pool
        .connect(users[0].signer)
        .deposit(dai.address, amountDAItoDeposit, users[0].address, '0')
    );

    await expect(aDai.connect(users[0].signer).transfer(users[1].address, amountDAItoTransfer))
      .to.emit(aDai, 'Transfer')
      .withArgs(users[0].address, users[1].address, amountDAItoTransfer);
    expect(await aDai.balanceOf(users[0].address)).to.be.eq(
      (await convertToCurrencyDecimals(dai.address, '995')).toString(),
      INVALID_FROM_BALANCE_AFTER_TRANSFER
    );
    expect(await aDai.balanceOf(users[1].address)).to.be.eq(
      (await convertToCurrencyDecimals(dai.address, '5')).toString(),
      INVALID_TO_BALANCE_AFTER_TRANSFER
    );

    await expect(aDai.connect(users[0].signer).transfer(users[1].address, amountDAItoTransfer))
      .to.emit(aDai, 'Transfer')
      .withArgs(users[0].address, users[1].address, amountDAItoTransfer);
    expect(await aDai.balanceOf(users[0].address)).to.be.eq(
      (await convertToCurrencyDecimals(dai.address, '990')).toString(),
      INVALID_FROM_BALANCE_AFTER_TRANSFER
    );
    expect(await aDai.balanceOf(users[1].address)).to.be.eq(
      (await convertToCurrencyDecimals(dai.address, '10')).toString(),
      INVALID_TO_BALANCE_AFTER_TRANSFER
    );

    await expect(aDai.connect(users[0].signer).transfer(users[1].address, 0))
      .to.emit(aDai, 'Transfer')
      .withArgs(users[0].address, users[1].address, 0);
    expect(await aDai.balanceOf(users[0].address)).to.be.eq(
      (await convertToCurrencyDecimals(dai.address, '990')).toString(),
      INVALID_FROM_BALANCE_AFTER_TRANSFER
    );
    expect(await aDai.balanceOf(users[1].address)).to.be.eq(
      (await convertToCurrencyDecimals(dai.address, '10')).toString(),
      INVALID_TO_BALANCE_AFTER_TRANSFER
    );

    await evmRevert(snap);
  });

  it('User 0 deposits 1000 DAI, transfers to user 1', async () => {
    const { users, pool, dai, aDai } = testEnv;

    // User 1 deposits 1000 DAI
    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, DAI_AMOUNT_TO_DEPOSIT);

    // Top up user
    expect(await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit));

    expect(await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(
      await pool
        .connect(users[0].signer)
        .deposit(dai.address, amountDAItoDeposit, users[0].address, '0')
    );

    await expect(aDai.connect(users[0].signer).transfer(users[1].address, amountDAItoDeposit))
      .to.emit(aDai, 'Transfer')
      .withArgs(users[0].address, users[1].address, amountDAItoDeposit);

    const name = await aDai.name();

    expect(name).to.be.equal('Aave Testnet DAI');

    const fromBalance = await aDai.balanceOf(users[0].address);
    const toBalance = await aDai.balanceOf(users[1].address);

    expect(fromBalance.toString()).to.be.equal('0', INVALID_FROM_BALANCE_AFTER_TRANSFER);
    expect(toBalance.toString()).to.be.equal(
      amountDAItoDeposit.toString(),
      INVALID_TO_BALANCE_AFTER_TRANSFER
    );
  });

  it('User 0 deposits 1 WETH and user 1 tries to borrow the WETH with the received DAI as collateral', async () => {
    const { users, pool, weth, helpersContract } = testEnv;
    const userAddress = await pool.signer.getAddress();

    const amountWETHtoDeposit = await convertToCurrencyDecimals(weth.address, '1');
    const amountWETHtoBorrow = await convertToCurrencyDecimals(weth.address, '0.1');

    expect(
      await weth
        .connect(users[0].signer)
        ['mint(address,uint256)'](users[0].address, amountWETHtoDeposit)
    );

    expect(await weth.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(
      await pool
        .connect(users[0].signer)
        .deposit(weth.address, amountWETHtoDeposit, userAddress, '0')
    );
    expect(
      await pool
        .connect(users[1].signer)
        .borrow(weth.address, amountWETHtoBorrow, RateMode.Stable, '0', users[1].address)
    );

    const userReserveData = await helpersContract.getUserReserveData(
      weth.address,
      users[1].address
    );

    expect(userReserveData.currentStableDebt.toString()).to.be.eq(amountWETHtoBorrow);
  });

  it('User 1 tries to transfer all the DAI used as collateral back to user 0 (revert expected)', async () => {
    const { users, aDai, dai } = testEnv;

    const amountDAItoTransfer = await convertToCurrencyDecimals(dai.address, DAI_AMOUNT_TO_DEPOSIT);

    await expect(
      aDai.connect(users[1].signer).transfer(users[0].address, amountDAItoTransfer),
      HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD
    ).to.be.revertedWith(HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD);
  });

  it('User 1 transfers a small amount of DAI used as collateral back to user 0', async () => {
    const { users, aDai, dai } = testEnv;

    const aDAItoTransfer = await convertToCurrencyDecimals(dai.address, '100');

    await expect(aDai.connect(users[1].signer).transfer(users[0].address, aDAItoTransfer))
      .to.emit(aDai, 'Transfer')
      .withArgs(users[1].address, users[0].address, aDAItoTransfer);

    const user0Balance = await aDai.balanceOf(users[0].address);

    expect(user0Balance.toString()).to.be.eq(aDAItoTransfer.toString());
  });
});



================================================
FILE: test-suites/bridge-logic.spec.ts
================================================
const { expect } = require('chai');
import { BigNumber, Event, utils } from 'ethers';
import AaveConfig from '@aave/deploy-v3/dist/markets/test';
import { waitForTx, advanceTimeAndBlock } from '@aave/deploy-v3';
import { getACLManager } from '@aave/deploy-v3/dist/helpers/contract-getters';
import { ReserveData, UserReserveData } from './helpers/utils/interfaces';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { MAX_UINT_AMOUNT, MAX_UNBACKED_MINT_CAP } from '../helpers/constants';
import { ACLManager } from '../types';
import { TestEnv, makeSuite } from './helpers/make-suite';
import { getReserveData } from './helpers/utils/helpers';
import { getTxCostAndTimestamp } from './helpers/actions';
import {
  calcExpectedReserveDataAfterMintUnbacked,
  calcExpectedReserveDataAfterBackUnbacked,
  configuration as calculationsConfiguration,
} from './helpers/utils/calculations';
import './helpers/utils/wadraymath';

const expectEqual = (
  actual: UserReserveData | ReserveData,
  expected: UserReserveData | ReserveData
) => {
  expect(actual).to.be.almostEqualOrEqual(expected);
};

makeSuite('BridgeLogic: Testing with borrows', (testEnv: TestEnv) => {
  const { INVALID_AMOUNT, CALLER_NOT_BRIDGE, UNBACKED_MINT_CAP_EXCEEDED } = ProtocolErrors;

  const depositAmount = utils.parseEther('1000');
  const borrowAmount = utils.parseEther('200');
  const withdrawAmount = utils.parseEther('100');
  const feeBps = BigNumber.from(30);
  const denominatorBP = BigNumber.from(10000);
  const bridgeProtocolFeeBps = BigNumber.from(2000);

  const mintAmount = withdrawAmount.mul(denominatorBP.sub(feeBps)).div(denominatorBP);
  const feeAmount = withdrawAmount.mul(feeBps).div(denominatorBP);

  let aclManager: ACLManager;

  before(async () => {
    calculationsConfiguration.reservesParams = AaveConfig.ReservesConfig;

    const { users, poolAdmin, configurator } = testEnv;

    aclManager = await getACLManager();

    await waitForTx(await aclManager.addBridge(users[2].address));
    await waitForTx(await aclManager.addBridge(users[3].address));

    await waitForTx(
      await configurator.connect(poolAdmin.signer).updateBridgeProtocolFee(bridgeProtocolFeeBps)
    );
  });

  it('User 0 deposit 1000 dai.', async () => {
    const { users, pool, dai } = testEnv;
    await waitForTx(await dai.connect(users[0].signer)['mint(uint256)'](depositAmount));
    await waitForTx(await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT));
    await waitForTx(
      await pool.connect(users[0].signer).deposit(dai.address, depositAmount, users[0].address, 0)
    );
  });

  it('User 1 deposit 2 eth', async () => {
    const { users, pool, weth } = testEnv;
    await waitForTx(await weth.connect(users[1].signer).deposit({ value: utils.parseEther('2') }));
    await waitForTx(await weth.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT));
    await waitForTx(
      await pool
        .connect(users[1].signer)
        .deposit(weth.address, utils.parseEther('2'), users[1].address, 0)
    );
  });

  it('User 1 borrows 200 dai with variable debt', async () => {
    const { users, pool, dai } = testEnv;
    await waitForTx(
      await pool
        .connect(users[1].signer)
        .borrow(dai.address, borrowAmount, RateMode.Variable, 0, users[1].address)
    );
  });

  it('User 1 borrows 200 dai with stable debt', async () => {
    const { users, pool, dai } = testEnv;
    await waitForTx(
      await pool
        .connect(users[1].signer)
        .borrow(dai.address, borrowAmount, RateMode.Stable, 0, users[1].address)
    );
  });

  it('User 1 tries to perform fast withdraw 100 aDai from L2 (revert expected)', async () => {
    const { users, pool, dai } = testEnv;
    await expect(
      pool.connect(users[1].signer).mintUnbacked(dai.address, mintAmount, users[0].address, 0)
    ).to.be.revertedWith(CALLER_NOT_BRIDGE);
  });

  it('User 2 tries to perform fast withdraw from L2 with no unbackedMintCap (revert expected)', async () => {
    const { users, pool, dai } = testEnv;
    // fast withdraw a100 DAI
    await expect(
      pool.connect(users[2].signer).mintUnbacked(dai.address, mintAmount, users[0].address, 0)
    ).to.be.revertedWith(UNBACKED_MINT_CAP_EXCEEDED);

    // fast withdraw 0 aDAI
    await expect(
      pool.connect(users[2].signer).mintUnbacked(dai.address, 0, users[0].address, 0)
    ).to.be.revertedWith(INVALID_AMOUNT);
  });

  it('RiskAdmin updates the unbackedMintCap to 10 aDai (10 left) and user 1 tries to perform fast withdraw 100 aDai from L2 (revert expected)', async () => {
    const { users, riskAdmin, pool, configurator, dai } = testEnv;
    expect(await configurator.connect(riskAdmin.signer).setUnbackedMintCap(dai.address, '10'));
    await expect(
      pool.connect(users[2].signer).mintUnbacked(dai.address, mintAmount, users[0].address, 0)
    ).to.be.revertedWith(UNBACKED_MINT_CAP_EXCEEDED);

    expect(
      await configurator
        .connect(riskAdmin.signer)
        .setUnbackedMintCap(dai.address, MAX_UNBACKED_MINT_CAP)
    );
  });

  it('User 2 perform fast withdraw 100 aDai from L2', async () => {
    const { users, pool, dai, helpersContract } = testEnv;
    const reserveDataBefore = await getReserveData(helpersContract, dai.address);
    const tx = await waitForTx(
      await pool.connect(users[2].signer).mintUnbacked(dai.address, mintAmount, users[2].address, 0)
    );
    const { txTimestamp } = await getTxCostAndTimestamp(tx);
    const expectedDataAfter = calcExpectedReserveDataAfterMintUnbacked(
      mintAmount.toString(),
      reserveDataBefore,
      txTimestamp
    );
    const reserveDataAfter = await getReserveData(helpersContract, dai.address);
    expectEqual(reserveDataAfter, expectedDataAfter);
  });

  it('RiskAdmin updates the unbackedMintCap to 100 aDai (0 left) and user 1 tries to perform fast withdraw 1 aDai from L2 (revert expected)', async () => {
    const { users, riskAdmin, pool, configurator, dai } = testEnv;
    expect(await configurator.connect(riskAdmin.signer).setUnbackedMintCap(dai.address, '100'));
    await expect(
      pool.connect(users[2].signer).mintUnbacked(dai.address, mintAmount, users[0].address, 0)
    ).to.be.revertedWith(UNBACKED_MINT_CAP_EXCEEDED);

    expect(
      await configurator
        .connect(riskAdmin.signer)
        .setUnbackedMintCap(dai.address, MAX_UNBACKED_MINT_CAP)
    );
  });

  it('User 2 perform another fast withdraw 100 aDai from L2', async () => {
    const { users, pool, dai, helpersContract } = testEnv;
    const reserveDataBefore = await getReserveData(helpersContract, dai.address);
    const tx = await waitForTx(
      await pool.connect(users[2].signer).mintUnbacked(dai.address, mintAmount, users[2].address, 0)
    );
    const { txTimestamp } = await getTxCostAndTimestamp(tx);
    const reserveDataAfter = await getReserveData(helpersContract, dai.address);
    const expectedDataAfter = calcExpectedReserveDataAfterMintUnbacked(
      mintAmount.toString(),
      reserveDataBefore,
      txTimestamp
    );
    expectEqual(reserveDataAfter, expectedDataAfter);
  });

  it('Wait 1 days', async () => {
    await advanceTimeAndBlock(60 * 60 * 24);
  });

  it('User 2 perform invalid fast withdraw 100 aDai from L2', async () => {
    const { users, pool, dai, helpersContract } = testEnv;
    const reserveDataBefore = await getReserveData(helpersContract, dai.address);
    const tx = await waitForTx(
      await pool.connect(users[2].signer).mintUnbacked(dai.address, mintAmount, users[2].address, 0)
    );
    const { txTimestamp } = await getTxCostAndTimestamp(tx);
    const reserveDataAfter = await getReserveData(helpersContract, dai.address);
    const expectedDataAfter = calcExpectedReserveDataAfterMintUnbacked(
      mintAmount.toString(),
      reserveDataBefore,
      txTimestamp
    );
    expectEqual(reserveDataAfter, expectedDataAfter);
  });

  it('Wait 6 days', async () => {
    await advanceTimeAndBlock(60 * 60 * 24 * 6);
  });

  it('100 bridged dai used to back unbacked', async () => {
    // Let user 3 be bridge for now
    const { users, pool, dai, aDai, helpersContract } = testEnv;
    await waitForTx(await dai.connect(users[3].signer)['mint(uint256)'](withdrawAmount));
    await waitForTx(await dai.connect(users[3].signer).approve(pool.address, MAX_UINT_AMOUNT));

    const reserveDataBefore = await getReserveData(helpersContract, dai.address);

    const tx = await waitForTx(
      await pool.connect(users[3].signer).backUnbacked(dai.address, mintAmount, feeAmount)
    );

    const { txTimestamp } = await getTxCostAndTimestamp(tx);

    const reserveDataAfter = await getReserveData(helpersContract, dai.address);

    const expectedReserveDataAfter = calcExpectedReserveDataAfterBackUnbacked(
      await aDai.scaledTotalSupply(),
      mintAmount.toString(),
      feeAmount.toString(),
      bridgeProtocolFeeBps.toString(),
      reserveDataBefore,
      txTimestamp
    );

    expectEqual(reserveDataAfter, expectedReserveDataAfter);

    // Check event values for `ReserveDataUpdated`
    const reserveDataUpdatedEvent = tx.events?.find(
      ({ event }) => event === 'ReserveDataUpdated'
    ) as Event;
    if (reserveDataUpdatedEvent) {
      const {
        reserve: eventReserve,
        liquidityRate: eventLiquidityRate,
        stableBorrowRate: eventStableBorrowRate,
        variableBorrowRate: eventVariableBorrowRate,
        liquidityIndex: eventLiquidityIndex,
        variableBorrowIndex: eventVariableBorrowIndex,
      } = reserveDataUpdatedEvent.args as utils.Result;
      expect(expectedReserveDataAfter.address).to.be.eq(eventReserve);
      expect(expectedReserveDataAfter.liquidityRate).to.be.eq(eventLiquidityRate);
      expect(expectedReserveDataAfter.stableBorrowRate).to.be.eq(eventStableBorrowRate);
      expect(expectedReserveDataAfter.variableBorrowRate).to.be.eq(eventVariableBorrowRate);
      expect(expectedReserveDataAfter.liquidityIndex).to.be.eq(eventLiquidityIndex);
      expect(expectedReserveDataAfter.variableBorrowIndex).to.be.eq(eventVariableBorrowIndex);
    }
  });

  it('user 1 performs unauthorized backing', async () => {
    const { users, pool, dai } = testEnv;
    await dai.connect(users[1].signer)['mint(uint256)'](withdrawAmount);
    await dai.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);

    await expect(
      pool.connect(users[1].signer).backUnbacked(dai.address, mintAmount, feeAmount)
    ).to.be.revertedWith(CALLER_NOT_BRIDGE);
  });

  it('100 bridged dai used to back unbacked', async () => {
    // Let user 3 be bridge for now
    const { users, pool, dai, aDai, helpersContract } = testEnv;
    await dai.connect(users[3].signer)['mint(uint256)'](withdrawAmount);
    await dai.connect(users[3].signer).approve(pool.address, MAX_UINT_AMOUNT);

    const reserveDataBefore = await getReserveData(helpersContract, dai.address);

    const tx = await waitForTx(
      await pool.connect(users[3].signer).backUnbacked(dai.address, mintAmount, feeAmount)
    );

    const { txTimestamp } = await getTxCostAndTimestamp(tx);

    const reserveDataAfter = await getReserveData(helpersContract, dai.address);

    const expectedReserveDataAfter = calcExpectedReserveDataAfterBackUnbacked(
      await aDai.scaledTotalSupply(),
      mintAmount.toString(),
      feeAmount.toString(),
      bridgeProtocolFeeBps.toString(),
      reserveDataBefore,
      txTimestamp
    );

    expectEqual(reserveDataAfter, expectedReserveDataAfter);
  });

  it('User donates 100 dai to aDai holders', async () => {
    // Let user 3 be bridge for now
    const { users, pool, dai, aDai, helpersContract } = testEnv;
    await dai.connect(users[3].signer)['mint(uint256)'](withdrawAmount);
    await dai.connect(users[3].signer).approve(pool.address, MAX_UINT_AMOUNT);

    const reserveDataBefore = await getReserveData(helpersContract, dai.address);

    const tx = await waitForTx(
      await pool.connect(users[3].signer).backUnbacked(dai.address, '0', withdrawAmount)
    );

    const { txTimestamp } = await getTxCostAndTimestamp(tx);
    const reserveDataAfter = await getReserveData(helpersContract, dai.address);

    const expectedReserveDataAfter = calcExpectedReserveDataAfterBackUnbacked(
      await aDai.scaledTotalSupply(),
      '0',
      withdrawAmount.toString(),
      bridgeProtocolFeeBps.toString(),
      reserveDataBefore,
      txTimestamp
    );

    expectEqual(reserveDataAfter, expectedReserveDataAfter);
    expect(reserveDataBefore.unbacked).to.be.eq(mintAmount);
    expect(reserveDataAfter.unbacked).to.be.eq(mintAmount);
    expect(reserveDataAfter.liquidityIndex.gt(reserveDataBefore.liquidityIndex)).to.be.eq(true);
  });

  it('Safety module cover 100 unbacked dai', async () => {
    // Let user 3 be bridge for now
    const { users, pool, dai, aDai, helpersContract } = testEnv;
    await dai.connect(users[3].signer)['mint(uint256)'](withdrawAmount);
    await dai.connect(users[3].signer).approve(pool.address, MAX_UINT_AMOUNT);

    const reserveDataBefore = await getReserveData(helpersContract, dai.address);

    const tx = await waitForTx(
      await pool.connect(users[3].signer).backUnbacked(dai.address, mintAmount, '0')
    );

    const { txTimestamp } = await getTxCostAndTimestamp(tx);
    const reserveDataAfter = await getReserveData(helpersContract, dai.address);

    const expectedReserveDataAfter = calcExpectedReserveDataAfterBackUnbacked(
      await aDai.scaledTotalSupply(),
      mintAmount.toString(),
      '0',
      bridgeProtocolFeeBps.toString(),
      reserveDataBefore,
      txTimestamp
    );

    expectEqual(reserveDataAfter, expectedReserveDataAfter);
    expect(reserveDataBefore.unbacked).to.be.eq(mintAmount);
    expect(reserveDataAfter.unbacked).to.be.eq('0');
  });
});



================================================
FILE: test-suites/configurator-borrow-cap.spec.ts
================================================
import { expect } from 'chai';
import { utils } from 'ethers';
import { advanceTimeAndBlock } from '@aave/deploy-v3';
import { MAX_UINT_AMOUNT, MAX_BORROW_CAP } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { TestEnv, makeSuite } from './helpers/make-suite';

makeSuite('PoolConfigurator: Borrow Cap', (testEnv: TestEnv) => {
  const { BORROW_CAP_EXCEEDED, INVALID_BORROW_CAP } = ProtocolErrors;

  before(async () => {
    const {
      weth,
      pool,
      dai,
      usdc,
      users: [user1],
      deployer,
    } = testEnv;

    const mintedAmount = utils.parseEther('1000000000');
    // minting for main user
    expect(await dai['mint(uint256)'](mintedAmount));
    expect(await weth['mint(address,uint256)'](deployer.address, mintedAmount));
    expect(await usdc['mint(uint256)'](mintedAmount));

    // minting for lp user
    expect(await dai.connect(user1.signer)['mint(uint256)'](mintedAmount));
    expect(await weth.connect(user1.signer)['mint(address,uint256)'](user1.address, mintedAmount));
    expect(await usdc.connect(user1.signer)['mint(uint256)'](mintedAmount));

    expect(await dai.approve(pool.address, MAX_UINT_AMOUNT));
    expect(await weth.approve(pool.address, MAX_UINT_AMOUNT));
    expect(await usdc.approve(pool.address, MAX_UINT_AMOUNT));
    expect(await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(await usdc.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT));
  });

  it('Reserves should initially have borrow cap disabled (borrowCap = 0)', async () => {
    const { dai, usdc, helpersContract } = testEnv;

    const { borrowCap: usdcBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcBorrowCap).to.be.equal('0');
    expect(daiBorrowCap).to.be.equal('0');
  });

  it('Borrows 10 stable DAI, 10 variable USDC', async () => {
    const {
      weth,
      pool,
      dai,
      usdc,
      deployer,
      users: [user1],
    } = testEnv;

    const suppliedAmount = '1000';
    const borrowedAmount = '10';

    // Deposit collateral
    expect(
      await pool.deposit(
        weth.address,
        await convertToCurrencyDecimals(weth.address, suppliedAmount),
        deployer.address,
        0
      )
    );
    // User 1 deposit more DAI and USDC to be able to borrow
    expect(
      await pool
        .connect(user1.signer)
        .deposit(
          dai.address,
          await convertToCurrencyDecimals(dai.address, suppliedAmount),
          user1.address,
          0
        )
    );

    expect(
      await pool
        .connect(user1.signer)
        .deposit(
          usdc.address,
          await convertToCurrencyDecimals(dai.address, suppliedAmount),
          user1.address,
          0
        )
    );

    // Borrow
    expect(
      await pool.borrow(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, borrowedAmount),
        2,
        0,
        deployer.address
      )
    );

    expect(
      await pool.borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, borrowedAmount),
        1,
        0,
        deployer.address
      )
    );
  });

  it('Sets the borrow cap for DAI and USDC to 10 Units', async () => {
    const { configurator, dai, usdc, helpersContract } = testEnv;

    const { borrowCap: usdcOldBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiOldBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    const newCap = 10;
    await expect(configurator.setBorrowCap(usdc.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(usdc.address, daiOldBorrowCap, newCap);
    await expect(configurator.setBorrowCap(dai.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(dai.address, usdcOldBorrowCap, newCap);

    const { borrowCap: usdcBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcBorrowCap).to.be.equal(newCap);
    expect(daiBorrowCap).to.be.equal(newCap);
  });

  it('Tries to borrow any DAI or USDC, stable or variable, (> BORROW_CAP) (revert expected)', async () => {
    const { usdc, pool, dai, deployer } = testEnv;
    const borrowedAmount = '10';

    await expect(
      pool.borrow(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, borrowedAmount),
        2,
        0,
        deployer.address
      )
    ).to.be.revertedWith(BORROW_CAP_EXCEEDED);

    await expect(
      pool.borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, borrowedAmount),
        2,
        0,
        deployer.address
      )
    ).to.be.revertedWith(BORROW_CAP_EXCEEDED);
  });

  it('Tries to set the borrow cap for USDC and DAI to > MAX_BORROW_CAP (revert expected)', async () => {
    const { configurator, usdc, dai } = testEnv;
    const newCap = Number(MAX_BORROW_CAP) + 1;

    await expect(configurator.setBorrowCap(usdc.address, newCap)).to.be.revertedWith(
      INVALID_BORROW_CAP
    );
    await expect(configurator.setBorrowCap(dai.address, newCap)).to.be.revertedWith(
      INVALID_BORROW_CAP
    );
  });

  it('Sets the borrow cap for DAI and USDC to 120 Units', async () => {
    const { configurator, usdc, dai, helpersContract } = testEnv;
    const newCap = '120';

    const { borrowCap: usdcOldBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiOldBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    await expect(configurator.setBorrowCap(usdc.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(usdc.address, usdcOldBorrowCap, newCap);
    await expect(configurator.setBorrowCap(dai.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(dai.address, daiOldBorrowCap, newCap);

    const { borrowCap: usdcBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcBorrowCap).to.be.equal(newCap);
    expect(daiBorrowCap).to.be.equal(newCap);
  });

  it('Borrows 10 stable DAI and 10 variable USDC', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const borrowedAmount = '10';
    expect(
      await pool.borrow(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, borrowedAmount),
        2,
        0,
        deployer.address
      )
    );

    expect(
      await pool.borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, borrowedAmount),
        1,
        0,
        deployer.address
      )
    );
  });

  it('Sets the borrow cap for WETH to 2 Units', async () => {
    const { configurator, weth, helpersContract } = testEnv;

    const { borrowCap: wethOldBorrowCap } = await helpersContract.getReserveCaps(weth.address);

    const newCap = 2;
    await expect(configurator.setBorrowCap(weth.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(weth.address, wethOldBorrowCap, newCap);

    const wethBorrowCap = (await helpersContract.getReserveCaps(weth.address)).borrowCap;

    expect(wethBorrowCap).to.be.equal(newCap);
  });

  it('Borrows 2 variable WETH (= BORROW_CAP)', async () => {
    const { weth, pool, deployer, helpersContract } = testEnv;

    const borrowedAmount = '2';

    await pool.borrow(
      weth.address,
      await convertToCurrencyDecimals(weth.address, borrowedAmount),
      RateMode.Variable,
      0,
      deployer.address
    );
  });

  it('Time flies and ETH debt amount goes above the limit due to accrued interests', async () => {
    const { weth, helpersContract } = testEnv;

    // Advance blocks
    await advanceTimeAndBlock(3600);

    const wethData = await helpersContract.getReserveData(weth.address);
    const totalDebt = wethData.totalVariableDebt.add(wethData.totalStableDebt);
    const wethCaps = await helpersContract.getReserveCaps(weth.address);

    expect(totalDebt).gt(wethCaps.borrowCap);
  });

  it('Tries to borrow any variable ETH (> BORROW_CAP) (revert expected)', async () => {
    const { weth, pool, deployer } = testEnv;

    const borrowedAmount = '1';
    await expect(
      pool.borrow(
        weth.address,
        await convertToCurrencyDecimals(weth.address, borrowedAmount),
        RateMode.Variable,
        0,
        deployer.address
      )
    ).to.be.revertedWith(BORROW_CAP_EXCEEDED);
  });

  it('Borrows 99 variable DAI and 99 stable USDC (< BORROW_CAP)', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const borrowedAmount = '99';
    expect(
      await pool.borrow(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, borrowedAmount),
        2,
        0,
        deployer.address
      )
    );

    expect(
      await pool.borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, borrowedAmount),
        1,
        0,
        deployer.address
      )
    );
  });

  it('Raises the borrow cap for USDC and DAI to 1000 Units', async () => {
    const { configurator, usdc, dai, helpersContract } = testEnv;

    const { borrowCap: usdcOldBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiOldBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    const newCap = '1000';
    await expect(configurator.setBorrowCap(usdc.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(usdc.address, usdcOldBorrowCap, newCap);
    await expect(configurator.setBorrowCap(dai.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(dai.address, daiOldBorrowCap, newCap);

    const { borrowCap: usdcBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcBorrowCap).to.be.equal(newCap);
    expect(daiBorrowCap).to.be.equal(newCap);
  });

  it('Borrows 100 variable DAI and 100 stable USDC (< BORROW_CAP)', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const borrowedAmount = '100';
    expect(
      await pool.borrow(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, borrowedAmount),
        1,
        0,
        deployer.address
      )
    );

    expect(
      await pool.borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, borrowedAmount),
        2,
        0,
        deployer.address
      )
    );
  });

  it('Lowers the borrow cap for USDC and DAI to 200 Units', async () => {
    const { configurator, usdc, dai, helpersContract } = testEnv;

    const { borrowCap: usdcOldBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiOldBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    const newCap = '200';
    await expect(configurator.setBorrowCap(usdc.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(usdc.address, usdcOldBorrowCap, newCap);
    await expect(configurator.setBorrowCap(dai.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(dai.address, daiOldBorrowCap, newCap);

    const { borrowCap: usdcBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcBorrowCap).to.be.equal(newCap);
    expect(daiBorrowCap).to.be.equal(newCap);
  });

  it('Tries to borrows 100 variable DAI and 100 stable USDC (> BORROW_CAP) (revert expected)', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const borrowedAmount = '100';
    await expect(
      pool.borrow(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, borrowedAmount),
        1,
        0,
        deployer.address
      )
    ).to.be.revertedWith(BORROW_CAP_EXCEEDED);

    await expect(
      pool.borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, borrowedAmount),
        2,
        0,
        deployer.address
      )
    ).to.be.revertedWith(BORROW_CAP_EXCEEDED);
  });

  it('Raises the borrow cap for USDC and DAI to MAX_BORROW_CAP', async () => {
    const { configurator, usdc, dai, helpersContract } = testEnv;

    const { borrowCap: usdcOldBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiOldBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    const newCap = MAX_BORROW_CAP;
    await expect(configurator.setBorrowCap(usdc.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(usdc.address, usdcOldBorrowCap, newCap);
    await expect(configurator.setBorrowCap(dai.address, newCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(dai.address, daiOldBorrowCap, newCap);

    const { borrowCap: usdcBorrowCap } = await helpersContract.getReserveCaps(usdc.address);
    const { borrowCap: daiBorrowCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcBorrowCap).to.be.equal(newCap);
    expect(daiBorrowCap).to.be.equal(newCap);
  });

  it('Borrows 100 variable DAI and 100 stable USDC (< BORROW_CAP)', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const borrowedAmount = '100';
    expect(
      await pool.borrow(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, borrowedAmount),
        1,
        0,
        deployer.address
      )
    );
    expect(
      await pool.borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, borrowedAmount),
        2,
        0,
        deployer.address
      )
    );
  });
});



================================================
FILE: test-suites/configurator-edge.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber } from 'ethers';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { ProtocolErrors } from '../helpers/types';
import {
  MAX_BORROW_CAP,
  MAX_UNBACKED_MINT_CAP,
  MAX_UINT_AMOUNT,
  MAX_SUPPLY_CAP,
  ZERO_ADDRESS,
} from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { impersonateAddress } from '@aave/deploy-v3';
import { topUpNonPayableWithEther } from './helpers/utils/funds';
import { parseUnits } from 'ethers/lib/utils';

makeSuite('PoolConfigurator: Edge cases', (testEnv: TestEnv) => {
  const {
    INVALID_RESERVE_FACTOR,
    INVALID_RESERVE_PARAMS,
    INVALID_LIQ_BONUS,
    FLASHLOAN_PREMIUM_INVALID,
    RESERVE_LIQUIDITY_NOT_ZERO,
    INVALID_BORROW_CAP,
    INVALID_SUPPLY_CAP,
    INVALID_UNBACKED_MINT_CAP,
    EMODE_CATEGORY_RESERVED,
    INVALID_EMODE_CATEGORY_PARAMS,
    INVALID_EMODE_CATEGORY_ASSIGNMENT,
    BRIDGE_PROTOCOL_FEE_INVALID,
    ASSET_NOT_LISTED,
  } = ProtocolErrors;

  it('ReserveConfiguration setLiquidationBonus() threshold > MAX_VALID_LIQUIDATION_THRESHOLD', async () => {
    const { poolAdmin, dai, configurator } = testEnv;
    await expect(
      configurator
        .connect(poolAdmin.signer)
        .configureReserveAsCollateral(dai.address, 5, 10, 65535 + 1)
    ).to.be.revertedWith(INVALID_LIQ_BONUS);
  });

  it('PoolConfigurator setReserveFactor() reserveFactor > PERCENTAGE_FACTOR (revert expected)', async () => {
    const { dai, configurator } = testEnv;
    const invalidReserveFactor = 20000;
    await expect(
      configurator.setReserveFactor(dai.address, invalidReserveFactor)
    ).to.be.revertedWith(INVALID_RESERVE_FACTOR);
  });

  it('ReserveConfiguration setReserveFactor() reserveFactor > MAX_VALID_RESERVE_FACTOR', async () => {
    const { dai, configurator } = testEnv;
    const invalidReserveFactor = 65536;
    await expect(
      configurator.setReserveFactor(dai.address, invalidReserveFactor)
    ).to.be.revertedWith(INVALID_RESERVE_FACTOR);
  });

  it('PoolConfigurator configureReserveAsCollateral() ltv > liquidationThreshold', async () => {
    const { poolAdmin, dai, configurator, helpersContract } = testEnv;

    const config = await helpersContract.getReserveConfigurationData(dai.address);

    await expect(
      configurator
        .connect(poolAdmin.signer)
        .configureReserveAsCollateral(
          dai.address,
          65535 + 1,
          config.liquidationThreshold,
          config.liquidationBonus
        )
    ).to.be.revertedWith(INVALID_RESERVE_PARAMS);
  });

  it('PoolConfigurator configureReserveAsCollateral() liquidationBonus < 10000', async () => {
    const { poolAdmin, dai, configurator, helpersContract } = testEnv;

    const config = await helpersContract.getReserveConfigurationData(dai.address);

    await expect(
      configurator
        .connect(poolAdmin.signer)
        .configureReserveAsCollateral(dai.address, config.ltv, config.liquidationThreshold, 10000)
    ).to.be.revertedWith(INVALID_RESERVE_PARAMS);
  });

  it('PoolConfigurator configureReserveAsCollateral() liquidationThreshold.percentMul(liquidationBonus) > PercentageMath.PERCENTAGE_FACTOR', async () => {
    const { poolAdmin, dai, configurator } = testEnv;

    await expect(
      configurator
        .connect(poolAdmin.signer)
        .configureReserveAsCollateral(dai.address, 10001, 10001, 10001)
    ).to.be.revertedWith(INVALID_RESERVE_PARAMS);
  });

  it('PoolConfigurator configureReserveAsCollateral() liquidationThreshold == 0 && liquidationBonus > 0', async () => {
    const { poolAdmin, dai, configurator } = testEnv;

    await expect(
      configurator.connect(poolAdmin.signer).configureReserveAsCollateral(dai.address, 0, 0, 10500)
    ).to.be.revertedWith(INVALID_RESERVE_PARAMS);
  });

  it('Tries to bridge protocol fee > PERCENTAGE_FACTOR (revert expected)', async () => {
    const { configurator } = testEnv;
    const newProtocolFee = 10001;
    await expect(configurator.updateBridgeProtocolFee(newProtocolFee)).to.be.revertedWith(
      BRIDGE_PROTOCOL_FEE_INVALID
    );
  });

  it('Tries to update flashloan premium total > PERCENTAGE_FACTOR (revert expected)', async () => {
    const { configurator } = testEnv;

    const newPremiumTotal = 10001;
    await expect(configurator.updateFlashloanPremiumTotal(newPremiumTotal)).to.be.revertedWith(
      FLASHLOAN_PREMIUM_INVALID
    );
  });

  it('Tries to update flashloan premium to protocol > PERCENTAGE_FACTOR (revert expected)', async () => {
    const { configurator } = testEnv;

    const newPremiumToProtocol = 10001;
    await expect(
      configurator.updateFlashloanPremiumToProtocol(newPremiumToProtocol)
    ).to.be.revertedWith(FLASHLOAN_PREMIUM_INVALID);
  });

  it('Tries to update borrowCap > MAX_BORROW_CAP (revert expected)', async () => {
    const { configurator, weth } = testEnv;
    await expect(
      configurator.setBorrowCap(weth.address, BigNumber.from(MAX_BORROW_CAP).add(1))
    ).to.be.revertedWith(INVALID_BORROW_CAP);
  });

  it('Tries to update supplyCap > MAX_SUPPLY_CAP (revert expected)', async () => {
    const { configurator, weth } = testEnv;
    await expect(
      configurator.setSupplyCap(weth.address, BigNumber.from(MAX_SUPPLY_CAP).add(1))
    ).to.be.revertedWith(INVALID_SUPPLY_CAP);
  });

  it('Tries to update unbackedMintCap > MAX_UNBACKED_MINT_CAP (revert expected)', async () => {
    const { configurator, weth } = testEnv;
    await expect(
      configurator.setUnbackedMintCap(weth.address, BigNumber.from(MAX_UNBACKED_MINT_CAP).add(1))
    ).to.be.revertedWith(INVALID_UNBACKED_MINT_CAP);
  });

  it('Tries to set borrowCap of MAX_BORROW_CAP an unlisted asset', async () => {
    const { configurator, users } = testEnv;
    const newCap = 10;
    await expect(configurator.setBorrowCap(users[5].address, newCap)).to.be.revertedWith(
      ASSET_NOT_LISTED
    );
  });

  it('Tries to add a category with id 0 (revert expected)', async () => {
    const { configurator, poolAdmin } = testEnv;

    await expect(
      configurator
        .connect(poolAdmin.signer)
        .setEModeCategory(0, '9800', '9800', '10100', ZERO_ADDRESS, 'INVALID_ID_CATEGORY')
    ).to.be.revertedWith(EMODE_CATEGORY_RESERVED);
  });

  it('Tries to add an eMode category with ltv > liquidation threshold (revert expected)', async () => {
    const { configurator, poolAdmin } = testEnv;

    const id = BigNumber.from('16');
    const ltv = BigNumber.from('9900');
    const lt = BigNumber.from('9800');
    const lb = BigNumber.from('10100');
    const oracle = ZERO_ADDRESS;
    const label = 'STABLECOINS';

    await expect(
      configurator.connect(poolAdmin.signer).setEModeCategory(id, ltv, lt, lb, oracle, label)
    ).to.be.revertedWith(INVALID_EMODE_CATEGORY_PARAMS);
  });

  it('Tries to add an eMode category with no liquidation bonus (revert expected)', async () => {
    const { configurator, poolAdmin } = testEnv;

    const id = BigNumber.from('16');
    const ltv = BigNumber.from('9800');
    const lt = BigNumber.from('9800');
    const lb = BigNumber.from('10000');
    const oracle = ZERO_ADDRESS;
    const label = 'STABLECOINS';

    await expect(
      configurator.connect(poolAdmin.signer).setEModeCategory(id, ltv, lt, lb, oracle, label)
    ).to.be.revertedWith(INVALID_EMODE_CATEGORY_PARAMS);
  });

  it('Tries to add an eMode category with too large liquidation bonus (revert expected)', async () => {
    const { configurator, poolAdmin } = testEnv;

    const id = BigNumber.from('16');
    const ltv = BigNumber.from('9800');
    const lt = BigNumber.from('9800');
    const lb = BigNumber.from('11000');
    const oracle = ZERO_ADDRESS;
    const label = 'STABLECOINS';

    await expect(
      configurator.connect(poolAdmin.signer).setEModeCategory(id, ltv, lt, lb, oracle, label)
    ).to.be.revertedWith(INVALID_EMODE_CATEGORY_PARAMS);
  });

  it('Tries to add an eMode category with liquidation threshold > 1 (revert expected)', async () => {
    const { configurator, poolAdmin } = testEnv;

    const id = BigNumber.from('16');
    const ltv = BigNumber.from('9800');
    const lt = BigNumber.from('10100');
    const lb = BigNumber.from('10100');
    const oracle = ZERO_ADDRESS;
    const label = 'STABLECOINS';

    await expect(
      configurator.connect(poolAdmin.signer).setEModeCategory(id, ltv, lt, lb, oracle, label)
    ).to.be.revertedWith(INVALID_EMODE_CATEGORY_PARAMS);
  });

  it('Tries to set DAI eMode category to undefined category (revert expected)', async () => {
    const { configurator, poolAdmin, dai } = testEnv;

    await expect(
      configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, '100')
    ).to.be.revertedWith(INVALID_EMODE_CATEGORY_ASSIGNMENT);
  });

  it('Tries to set DAI eMode category to category with too low LT (revert expected)', async () => {
    const { configurator, helpersContract, poolAdmin, dai } = testEnv;

    const { liquidationThreshold, ltv } = await helpersContract.getReserveConfigurationData(
      dai.address
    );

    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setEModeCategory(
          '100',
          ltv,
          liquidationThreshold.sub(1),
          '10100',
          ZERO_ADDRESS,
          'LT_TOO_LOW_FOR_DAI'
        )
    );

    await expect(
      configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, '100')
    ).to.be.revertedWith(INVALID_EMODE_CATEGORY_ASSIGNMENT);
  });

  it('Tries to disable the DAI reserve with liquidity on it (revert expected)', async () => {
    const { dai, pool, configurator } = testEnv;
    const userAddress = await pool.signer.getAddress();
    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    // Top up user
    expect(await dai['mint(uint256)'](amountDAItoDeposit));

    // Approve protocol to access depositor wallet
    expect(await dai.approve(pool.address, MAX_UINT_AMOUNT));

    // User 1 deposits 1000 DAI
    expect(await pool.deposit(dai.address, amountDAItoDeposit, userAddress, '0'));

    await expect(
      configurator.setReserveActive(dai.address, false),
      RESERVE_LIQUIDITY_NOT_ZERO
    ).to.be.revertedWith(RESERVE_LIQUIDITY_NOT_ZERO);
  });

  it('Tries to withdraw from an inactive reserve (revert expected)', async () => {
    const { dai, pool, configurator, helpersContract } = testEnv;
    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');
    const userAddress = await pool.signer.getAddress();

    // Impersonate configurator
    const impConfig = await impersonateAddress(configurator.address);
    await topUpNonPayableWithEther(pool.signer, [configurator.address], parseUnits('10', 18));

    // Top up user
    expect(await dai['mint(uint256)'](amountDAItoDeposit));

    // Approve protocol to access depositor wallet
    expect(await dai.approve(pool.address, MAX_UINT_AMOUNT));

    // User 1 deposits 1000 DAI
    expect(await pool.deposit(dai.address, amountDAItoDeposit, userAddress, '0'));

    // get configuration
    const daiConfiguration: BigNumber = (await pool.getConfiguration(dai.address)).data;
    const activeMask = BigNumber.from(
      '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF'
    );

    // Set new configuration with active turned off
    expect(
      await pool
        .connect(impConfig.signer)
        .setConfiguration(dai.address, { data: daiConfiguration.and(activeMask) })
    );

    const updatedConfiguration = await helpersContract.getReserveConfigurationData(dai.address);
    expect(updatedConfiguration.isActive).to.false;

    await expect(pool.withdraw(dai.address, amountDAItoDeposit, userAddress)).to.be.revertedWith(
      ProtocolErrors.RESERVE_INACTIVE
    );
  });
});



================================================
FILE: test-suites/configurator-liquidation-protocol-fee.spec.ts
================================================
import { expect } from 'chai';
import { utils } from 'ethers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { ProtocolErrors } from '../helpers/types';
import { TestEnv, makeSuite } from './helpers/make-suite';

makeSuite('PoolConfigurator: Liquidation Protocol Fee', (testEnv: TestEnv) => {
  const { INVALID_LIQUIDATION_PROTOCOL_FEE } = ProtocolErrors;

  before(async () => {
    const { weth, pool, dai, usdc, deployer } = testEnv;

    const mintedAmount = utils.parseEther('1000000000');
    await dai['mint(uint256)'](mintedAmount);
    await weth['mint(address,uint256)'](deployer.address, mintedAmount);
    await usdc['mint(uint256)'](mintedAmount);

    await dai.approve(pool.address, MAX_UINT_AMOUNT);
    await weth.approve(pool.address, MAX_UINT_AMOUNT);
    await usdc.approve(pool.address, MAX_UINT_AMOUNT);
  });

  it('Reserves should initially have protocol liquidation fee set to 0', async () => {
    const { dai, usdc, helpersContract } = testEnv;

    const usdcLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      usdc.address
    );
    const daiLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(dai.address);

    expect(usdcLiquidationProtocolFee).to.be.equal('0');
    expect(daiLiquidationProtocolFee).to.be.equal('0');
  });

  it('Sets the protocol liquidation fee to 1000 (10.00%)', async () => {
    const { configurator, dai, usdc, helpersContract } = testEnv;

    const oldUsdcLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      usdc.address
    );
    const oldDaiLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      dai.address
    );

    const liquidationProtocolFee = 1000;

    await expect(configurator.setLiquidationProtocolFee(usdc.address, liquidationProtocolFee))
      .to.emit(configurator, 'LiquidationProtocolFeeChanged')
      .withArgs(usdc.address, oldUsdcLiquidationProtocolFee, liquidationProtocolFee);
    await expect(configurator.setLiquidationProtocolFee(dai.address, liquidationProtocolFee))
      .to.emit(configurator, 'LiquidationProtocolFeeChanged')
      .withArgs(dai.address, oldDaiLiquidationProtocolFee, liquidationProtocolFee);

    const usdcLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      usdc.address
    );
    const daiLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(dai.address);

    expect(usdcLiquidationProtocolFee).to.be.equal(liquidationProtocolFee);
    expect(daiLiquidationProtocolFee).to.be.equal(liquidationProtocolFee);
  });

  it('Sets the protocol liquidation fee to 10000 (100.00%) equal to PERCENTAGE_FACTOR', async () => {
    const { configurator, dai, usdc, helpersContract } = testEnv;

    const oldUsdcLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      usdc.address
    );
    const oldDaiLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      dai.address
    );

    const liquidationProtocolFee = 10000;

    await expect(configurator.setLiquidationProtocolFee(usdc.address, liquidationProtocolFee))
      .to.emit(configurator, 'LiquidationProtocolFeeChanged')
      .withArgs(usdc.address, oldUsdcLiquidationProtocolFee, liquidationProtocolFee);
    await expect(configurator.setLiquidationProtocolFee(dai.address, liquidationProtocolFee))
      .to.emit(configurator, 'LiquidationProtocolFeeChanged')
      .withArgs(dai.address, oldDaiLiquidationProtocolFee, liquidationProtocolFee);

    const usdcLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      usdc.address
    );
    const daiLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(dai.address);

    expect(usdcLiquidationProtocolFee).to.be.equal(liquidationProtocolFee);
    expect(daiLiquidationProtocolFee).to.be.equal(liquidationProtocolFee);
  });

  it('Tries to set the protocol liquidation fee to 10001 (100.01%) > PERCENTAGE_FACTOR (revert expected)', async () => {
    const { configurator, dai, usdc } = testEnv;

    const liquidationProtocolFee = 10001;

    expect(
      configurator.setLiquidationProtocolFee(usdc.address, liquidationProtocolFee)
    ).to.be.revertedWith(INVALID_LIQUIDATION_PROTOCOL_FEE);
    expect(
      configurator.setLiquidationProtocolFee(dai.address, liquidationProtocolFee)
    ).to.be.revertedWith(INVALID_LIQUIDATION_PROTOCOL_FEE);
  });
});



================================================
FILE: test-suites/configurator-modifiers.spec.ts
================================================
import { expect } from 'chai';
import { ONE_ADDRESS } from '../helpers/constants';
import { ProtocolErrors } from '../helpers/types';
import { TestEnv, makeSuite } from './helpers/make-suite';

makeSuite('PoolConfigurator: Modifiers', (testEnv: TestEnv) => {
  const {
    CALLER_NOT_POOL_ADMIN,
    CALLER_NOT_POOL_OR_EMERGENCY_ADMIN,
    CALLER_NOT_RISK_OR_POOL_ADMIN,
    CALLER_NOT_EMERGENCY_ADMIN,
    CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN,
  } = ProtocolErrors;

  it('Test the accessibility of onlyAssetListingOrPoolAdmins modified functions', async () => {
    const { configurator, users } = testEnv;
    const nonPoolAdmin = users[2];

    const randomAddress = ONE_ADDRESS;
    const randomNumber = '0';
    const randomInitReserve = [
      {
        aTokenImpl: randomAddress,
        stableDebtTokenImpl: randomAddress,
        variableDebtTokenImpl: randomAddress,
        underlyingAssetDecimals: randomNumber,
        interestRateStrategyAddress: randomAddress,
        underlyingAsset: randomAddress,
        treasury: randomAddress,
        incentivesController: randomAddress,
        aTokenName: 'MOCK',
        aTokenSymbol: 'MOCK',
        variableDebtTokenName: 'MOCK',
        variableDebtTokenSymbol: 'MOCK',
        stableDebtTokenName: 'MOCK',
        stableDebtTokenSymbol: 'MOCK',
        params: '0x10',
      },
    ];

    const calls = [{ fn: 'initReserves', args: [randomInitReserve] }];
    for (const call of calls) {
      await expect(
        configurator.connect(nonPoolAdmin.signer)[call.fn](...call.args)
      ).to.be.revertedWith(CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN);
    }
  });

  it('Test the accessibility of onlyPoolAdmin modified functions', async () => {
    const { configurator, users } = testEnv;
    const nonPoolAdmin = users[2];

    const randomAddress = ONE_ADDRESS;
    const randomNumber = '0';
    const randomUpdateAToken = {
      asset: randomAddress,
      treasury: randomAddress,
      incentivesController: randomAddress,
      name: 'MOCK',
      symbol: 'MOCK',
      implementation: randomAddress,
      params: '0x10',
    };
    const randomUpdateDebtToken = {
      asset: randomAddress,
      incentivesController: randomAddress,
      name: 'MOCK',
      symbol: 'MOCK',
      implementation: randomAddress,
      params: '0x10',
    };

    const calls = [
      { fn: 'dropReserve', args: [randomAddress] },
      { fn: 'updateAToken', args: [randomUpdateAToken] },
      { fn: 'updateStableDebtToken', args: [randomUpdateDebtToken] },
      { fn: 'updateVariableDebtToken', args: [randomUpdateDebtToken] },
      { fn: 'setReserveActive', args: [randomAddress, true] },
      { fn: 'setReserveActive', args: [randomAddress, false] },
      { fn: 'updateFlashloanPremiumTotal', args: [randomNumber] },
      { fn: 'updateFlashloanPremiumToProtocol', args: [randomNumber] },
      { fn: 'updateFlashloanPremiumToProtocol', args: [randomNumber] },
    ];
    for (const call of calls) {
      await expect(
        configurator.connect(nonPoolAdmin.signer)[call.fn](...call.args)
      ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
    }
  });

  it('Test the accessibility of onlyRiskOrPoolAdmins modified functions', async () => {
    const { configurator, users } = testEnv;
    const nonRiskOrPoolAdmins = users[3];

    const randomAddress = ONE_ADDRESS;
    const randomNumber = '0';

    const calls = [
      { fn: 'setReserveBorrowing', args: [randomAddress, false] },
      { fn: 'setReserveBorrowing', args: [randomAddress, true] },
      {
        fn: 'configureReserveAsCollateral',
        args: [randomAddress, randomNumber, randomNumber, randomNumber],
      },
      { fn: 'setReserveStableRateBorrowing', args: [randomAddress, true] },
      { fn: 'setReserveStableRateBorrowing', args: [randomAddress, false] },
      { fn: 'setReserveFreeze', args: [randomAddress, true] },
      { fn: 'setReserveFreeze', args: [randomAddress, false] },
      { fn: 'setReserveFactor', args: [randomAddress, randomNumber] },
      { fn: 'setBorrowCap', args: [randomAddress, randomNumber] },
      { fn: 'setSupplyCap', args: [randomAddress, randomNumber] },
      { fn: 'setReserveInterestRateStrategyAddress', args: [randomAddress, randomAddress] },
      {
        fn: 'setEModeCategory',
        args: [randomNumber, randomNumber, randomNumber, randomNumber, randomAddress, ''],
      },
      { fn: 'setAssetEModeCategory', args: [randomAddress, randomNumber] },
      { fn: 'setDebtCeiling', args: [randomAddress, randomNumber] },
    ];
    for (const call of calls) {
      await expect(
        configurator.connect(nonRiskOrPoolAdmins.signer)[call.fn](...call.args)
      ).to.be.revertedWith(CALLER_NOT_RISK_OR_POOL_ADMIN);
    }
  });

  it('Tries to pause reserve with non-emergency-admin account (revert expected)', async () => {
    const { configurator, weth, riskAdmin } = testEnv;
    await expect(
      configurator.connect(riskAdmin.signer).setReservePause(weth.address, true),
      CALLER_NOT_POOL_ADMIN
    ).to.be.revertedWith(CALLER_NOT_POOL_OR_EMERGENCY_ADMIN);
  });

  it('Tries to unpause reserve with non-emergency-admin account (revert expected)', async () => {
    const { configurator, weth, riskAdmin } = testEnv;
    await expect(
      configurator.connect(riskAdmin.signer).setReservePause(weth.address, false),
      CALLER_NOT_POOL_ADMIN
    ).to.be.revertedWith(CALLER_NOT_POOL_OR_EMERGENCY_ADMIN);
  });

  it('Tries to pause pool with not emergency admin (revert expected)', async () => {
    const { users, configurator } = testEnv;
    await expect(configurator.connect(users[0].signer).setPoolPause(true)).to.be.revertedWith(
      CALLER_NOT_EMERGENCY_ADMIN
    );
  });
});



================================================
FILE: test-suites/configurator-rate-strategy.spec.ts
================================================
import hre from 'hardhat';
import { expect } from 'chai';
import { utils } from 'ethers';
import { ZeroReserveInterestRateStrategy__factory } from '../types';
import { TestEnv, makeSuite } from './helpers/make-suite';
import './helpers/utils/wadraymath';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS, evmRevert, evmSnapshot } from '@aave/deploy-v3';

makeSuite('PoolConfigurator: Set Rate Strategy', (testEnv: TestEnv) => {
  let snap: string;

  beforeEach(async () => {
    snap = await evmSnapshot();
  });
  afterEach(async () => {
    await evmRevert(snap);
  });

  it('Update Interest Rate of a reserve', async () => {
    const {
      poolAdmin,
      configurator,
      pool,
      helpersContract,
      weth,
      dai,
      usdc,
      users: [depositor, borrower],
    } = testEnv;

    // Utilize the DAI pool
    const mintedAmount = utils.parseEther('100');
    expect(await dai.connect(depositor.signer)['mint(uint256)'](mintedAmount));
    expect(await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(
      await pool.connect(depositor.signer).deposit(dai.address, mintedAmount, depositor.address, 0)
    );
    expect(
      await weth.connect(borrower.signer)['mint(address,uint256)'](borrower.address, mintedAmount)
    );
    expect(await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(
      await pool.connect(borrower.signer).deposit(weth.address, mintedAmount, borrower.address, 0)
    );
    expect(
      await pool
        .connect(borrower.signer)
        .borrow(dai.address, utils.parseEther('1'), 1, 0, borrower.address)
    );

    // PoolAdmin updates IR strategy address
    const strategyUSDC = await helpersContract.getInterestRateStrategyAddress(usdc.address);
    const reserveDataBefore = await pool.getReserveData(dai.address);

    await expect(
      configurator
        .connect(poolAdmin.signer)
        .setReserveInterestRateStrategyAddress(dai.address, strategyUSDC)
    )
      .to.emit(configurator, 'ReserveInterestRateStrategyChanged')
      .withArgs(dai.address, reserveDataBefore.interestRateStrategyAddress, strategyUSDC);

    const reserveDataAfter = await pool.getReserveData(dai.address);

    expect(reserveDataAfter.interestRateStrategyAddress).to.be.eq(strategyUSDC);

    // Indexes and rates are the same until a new operation is performed
    expect(reserveDataBefore.liquidityIndex).to.be.eq(reserveDataAfter.liquidityIndex);
    expect(reserveDataBefore.currentLiquidityRate).to.be.eq(reserveDataAfter.currentLiquidityRate);
    expect(reserveDataBefore.variableBorrowIndex).to.be.eq(reserveDataAfter.variableBorrowIndex);
    expect(reserveDataBefore.currentVariableBorrowRate).to.be.eq(
      reserveDataAfter.currentVariableBorrowRate
    );
    expect(reserveDataBefore.currentStableBorrowRate).to.be.eq(
      reserveDataAfter.currentStableBorrowRate
    );
    expect(reserveDataBefore.lastUpdateTimestamp).to.be.eq(reserveDataAfter.lastUpdateTimestamp);

    // Reserve interaction so IR gets applied
    expect(
      await pool
        .connect(borrower.signer)
        .borrow(dai.address, utils.parseEther('1'), 1, 0, borrower.address)
    );

    // Rates get updated
    const reserveDataUpdated = await pool.getReserveData(dai.address);
    expect(reserveDataAfter.interestRateStrategyAddress).to.be.eq(
      reserveDataUpdated.interestRateStrategyAddress
    );

    expect(reserveDataAfter.currentLiquidityRate).to.be.not.eq(
      reserveDataUpdated.currentLiquidityRate
    );
    expect(reserveDataAfter.currentVariableBorrowRate).to.be.not.eq(
      reserveDataUpdated.currentVariableBorrowRate
    );
    expect(reserveDataAfter.currentStableBorrowRate).to.be.not.eq(
      reserveDataUpdated.currentStableBorrowRate
    );
    expect(reserveDataAfter.lastUpdateTimestamp).to.be.lt(reserveDataUpdated.lastUpdateTimestamp);
  });

  it('Update Interest Rate of a reserve with ZERO_ADDRESS and bricks the reserve (revert expected)', async () => {
    const {
      poolAdmin,
      configurator,
      pool,
      weth,
      dai,
      users: [depositor, borrower],
    } = testEnv;

    // Utilize the DAI pool
    const mintedAmount = utils.parseEther('100');
    expect(await dai.connect(depositor.signer)['mint(uint256)'](mintedAmount));
    expect(await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(
      await pool.connect(depositor.signer).deposit(dai.address, mintedAmount, depositor.address, 0)
    );
    expect(
      await weth.connect(borrower.signer)['mint(address,uint256)'](borrower.address, mintedAmount)
    );
    expect(await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(
      await pool.connect(borrower.signer).deposit(weth.address, mintedAmount, borrower.address, 0)
    );
    expect(
      await pool
        .connect(borrower.signer)
        .borrow(dai.address, utils.parseEther('1'), 1, 0, borrower.address)
    );

    // PoolAdmin updates IR strategy address
    const reserveDataBefore = await pool.getReserveData(dai.address);

    await expect(
      configurator
        .connect(poolAdmin.signer)
        .setReserveInterestRateStrategyAddress(dai.address, ZERO_ADDRESS)
    )
      .to.emit(configurator, 'ReserveInterestRateStrategyChanged')
      .withArgs(dai.address, reserveDataBefore.interestRateStrategyAddress, ZERO_ADDRESS);

    // Reserve interaction so IR gets applied
    await expect(
      pool
        .connect(borrower.signer)
        .borrow(dai.address, utils.parseEther('1'), 1, 0, borrower.address)
    ).reverted;
  });

  it('ZeroReserveInterestRateStrategy - Checks all rates are 0', async () => {
    const { deployer, addressesProvider } = testEnv;
    const zeroStrategy = await new ZeroReserveInterestRateStrategy__factory(deployer.signer).deploy(
      addressesProvider.address
    );

    expect(await zeroStrategy.OPTIMAL_USAGE_RATIO()).to.be.eq(0);
    expect(await zeroStrategy.OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO()).to.be.eq(0);
    expect(await zeroStrategy.MAX_EXCESS_USAGE_RATIO()).to.be.eq(0);
    expect(await zeroStrategy.MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO()).to.be.eq(0);
    expect(await zeroStrategy.getVariableRateSlope1()).to.be.eq(0);
    expect(await zeroStrategy.getVariableRateSlope2()).to.be.eq(0);
    expect(await zeroStrategy.getStableRateSlope1()).to.be.eq(0);
    expect(await zeroStrategy.getStableRateSlope2()).to.be.eq(0);
    expect(await zeroStrategy.getStableRateExcessOffset()).to.be.eq(0);
    expect(await zeroStrategy.getBaseStableBorrowRate()).to.be.eq(0);
    expect(await zeroStrategy.getBaseVariableBorrowRate()).to.be.eq(0);
    expect(await zeroStrategy.getMaxVariableBorrowRate()).to.be.eq(0);

    const {
      0: currentLiquidityRate,
      1: currentStableBorrowRate,
      2: currentVariableBorrowRate,
    } = await zeroStrategy.calculateInterestRates({
      unbacked: 0,
      liquidityAdded: 0,
      liquidityTaken: 0,
      totalStableDebt: 0,
      totalVariableDebt: 0,
      averageStableBorrowRate: 0,
      reserveFactor: 0,
      reserve: ZERO_ADDRESS,
      aToken: ZERO_ADDRESS,
    });

    expect(currentLiquidityRate).to.be.eq(0, 'Invalid liquidity rate');
    expect(currentStableBorrowRate).to.be.eq(0, 'Invalid stable rate');
    expect(currentVariableBorrowRate).to.be.eq(0, 'Invalid variable rate');
  });

  it('ZeroReserveInterestRateStrategy - Update a reserve with ZeroInterestRateStrategy to set zero rates', async () => {
    const {
      deployer,
      poolAdmin,
      configurator,
      pool,
      addressesProvider,
      weth,
      dai,
      variableDebtDai,
      stableDebtDai,
      users: [depositor, borrower, stableBorrower],
    } = testEnv;

    const zeroStrategy = await new ZeroReserveInterestRateStrategy__factory(deployer.signer).deploy(
      addressesProvider.address
    );
    // Utilize the DAI pool
    const mintedAmount = utils.parseEther('100');
    expect(await dai.connect(depositor.signer)['mint(uint256)'](mintedAmount));
    expect(await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(
      await pool.connect(depositor.signer).deposit(dai.address, mintedAmount, depositor.address, 0)
    );
    expect(
      await weth.connect(borrower.signer)['mint(address,uint256)'](borrower.address, mintedAmount)
    );
    expect(await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(
      await pool.connect(borrower.signer).deposit(weth.address, mintedAmount, borrower.address, 0)
    );
    expect(
      await pool
        .connect(borrower.signer)
        .borrow(dai.address, utils.parseEther('1'), 2, 0, borrower.address)
    );
    expect(
      await weth
        .connect(stableBorrower.signer)
        ['mint(address,uint256)'](stableBorrower.address, mintedAmount)
    );
    expect(await weth.connect(stableBorrower.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(
      await pool
        .connect(stableBorrower.signer)
        .deposit(weth.address, mintedAmount, stableBorrower.address, 0)
    );
    expect(
      await pool
        .connect(stableBorrower.signer)
        .borrow(dai.address, utils.parseEther('1'), 1, 0, stableBorrower.address)
    );

    // PoolAdmin updates IR strategy address
    const reserveDataBefore = await pool.getReserveData(dai.address);

    await expect(
      configurator
        .connect(poolAdmin.signer)
        .setReserveInterestRateStrategyAddress(dai.address, zeroStrategy.address)
    )
      .to.emit(configurator, 'ReserveInterestRateStrategyChanged')
      .withArgs(dai.address, reserveDataBefore.interestRateStrategyAddress, zeroStrategy.address);

    const reserveDataAfter = await pool.getReserveData(dai.address);
    expect(reserveDataAfter.interestRateStrategyAddress).to.be.eq(zeroStrategy.address);

    // Indexes and rates are the same until a new operation is performed
    expect(reserveDataBefore.liquidityIndex).to.be.eq(reserveDataAfter.liquidityIndex);
    expect(reserveDataBefore.currentLiquidityRate).to.be.eq(reserveDataAfter.currentLiquidityRate);
    expect(reserveDataBefore.variableBorrowIndex).to.be.eq(reserveDataAfter.variableBorrowIndex);
    expect(reserveDataBefore.currentVariableBorrowRate).to.be.eq(
      reserveDataAfter.currentVariableBorrowRate
    );
    expect(reserveDataBefore.currentStableBorrowRate).to.be.eq(
      reserveDataAfter.currentStableBorrowRate
    );
    expect(reserveDataBefore.lastUpdateTimestamp).to.be.eq(reserveDataAfter.lastUpdateTimestamp);

    // Reserve interaction so IR gets applied
    expect(
      await pool
        .connect(borrower.signer)
        .borrow(dai.address, utils.parseEther('1'), 1, 0, borrower.address)
    );

    // Rates get updated
    const reserveDataUpdated = await pool.getReserveData(dai.address);
    expect(reserveDataAfter.interestRateStrategyAddress).to.be.eq(zeroStrategy.address);
    expect(reserveDataAfter.currentLiquidityRate).to.be.not.eq(
      reserveDataUpdated.currentLiquidityRate
    );
    expect(reserveDataAfter.currentVariableBorrowRate).to.be.not.eq(
      reserveDataUpdated.currentVariableBorrowRate
    );
    expect(reserveDataAfter.currentStableBorrowRate).to.be.not.eq(
      reserveDataUpdated.currentStableBorrowRate
    );
    expect(reserveDataAfter.lastUpdateTimestamp).to.be.lt(reserveDataUpdated.lastUpdateTimestamp);

    expect(reserveDataUpdated.currentLiquidityRate).to.be.eq(0);
    expect(reserveDataUpdated.currentVariableBorrowRate).to.be.eq(0);
    expect(reserveDataUpdated.currentStableBorrowRate).to.be.eq(0);

    // Stable borrow gets rebalanced
    await expect(
      pool.connect(depositor.signer).rebalanceStableBorrowRate(dai.address, stableBorrower.address)
    )
      .to.emit(pool, 'RebalanceStableBorrowRate')
      .withArgs(dai.address, stableBorrower.address);

    // Stable borrow can be rebalanced as many times the rebalancer likes
    await expect(
      pool.connect(depositor.signer).rebalanceStableBorrowRate(dai.address, stableBorrower.address)
    )
      .to.emit(pool, 'RebalanceStableBorrowRate')
      .withArgs(dai.address, stableBorrower.address);
  });
});



================================================
FILE: test-suites/configurator-supply-cap.spec.ts
================================================
import { advanceTimeAndBlock } from '@aave/deploy-v3';
import { expect } from 'chai';
import { utils } from 'ethers';
import { MAX_UINT_AMOUNT, MAX_SUPPLY_CAP } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { ProtocolErrors } from '../helpers/types';
import { TestEnv, makeSuite } from './helpers/make-suite';

makeSuite('PoolConfigurator: Supply Cap', (testEnv: TestEnv) => {
  const { SUPPLY_CAP_EXCEEDED, INVALID_SUPPLY_CAP } = ProtocolErrors;

  before(async () => {
    const { weth, pool, dai, usdc, deployer } = testEnv;

    const mintedAmount = utils.parseEther('1000000000');
    await dai['mint(uint256)'](mintedAmount);
    await weth['mint(address,uint256)'](deployer.address, mintedAmount);
    await usdc['mint(uint256)'](mintedAmount);

    await dai.approve(pool.address, MAX_UINT_AMOUNT);
    await weth.approve(pool.address, MAX_UINT_AMOUNT);
    await usdc.approve(pool.address, MAX_UINT_AMOUNT);
  });

  it('Reserves should initially have supply cap disabled (supplyCap = 0)', async () => {
    const { dai, usdc, helpersContract } = testEnv;

    let usdcSupplyCap = (await helpersContract.getReserveCaps(usdc.address)).supplyCap;
    let daiSupplyCap = (await helpersContract.getReserveCaps(dai.address)).supplyCap;

    expect(usdcSupplyCap).to.be.equal('0');
    expect(daiSupplyCap).to.be.equal('0');
  });

  it('Supply 1000 Dai, 1000 USDC and 1000 WETH', async () => {
    const { weth, pool, dai, usdc, deployer } = testEnv;

    const suppliedAmount = '1000';

    await pool.deposit(
      usdc.address,
      await convertToCurrencyDecimals(usdc.address, suppliedAmount),
      deployer.address,
      0
    );

    await pool.deposit(
      dai.address,
      await convertToCurrencyDecimals(dai.address, suppliedAmount),
      deployer.address,
      0
    );
    await pool.deposit(
      weth.address,
      await convertToCurrencyDecimals(weth.address, suppliedAmount),
      deployer.address,
      0
    );
  });

  it('Sets the supply cap for DAI and USDC to 1000 Unit, leaving 0 Units to reach the limit', async () => {
    const { configurator, dai, usdc, helpersContract } = testEnv;

    const { supplyCap: oldUsdcSupplyCap } = await helpersContract.getReserveCaps(usdc.address);
    const { supplyCap: oldDaiSupplyCap } = await helpersContract.getReserveCaps(dai.address);

    const newCap = '1000';

    await expect(configurator.setSupplyCap(usdc.address, newCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(usdc.address, oldUsdcSupplyCap, newCap);
    await expect(configurator.setSupplyCap(dai.address, newCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(dai.address, oldDaiSupplyCap, newCap);

    const { supplyCap: usdcSupplyCap } = await helpersContract.getReserveCaps(usdc.address);
    const { supplyCap: daiSupplyCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcSupplyCap).to.be.equal(newCap);
    expect(daiSupplyCap).to.be.equal(newCap);
  });

  it('Tries to supply any DAI or USDC (> SUPPLY_CAP) (revert expected)', async () => {
    const { usdc, pool, dai, deployer } = testEnv;
    const suppliedAmount = '10';

    await expect(
      pool.deposit(usdc.address, suppliedAmount, deployer.address, 0)
    ).to.be.revertedWith(SUPPLY_CAP_EXCEEDED);

    await expect(
      pool.deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, suppliedAmount),
        deployer.address,
        0
      )
    ).to.be.revertedWith(SUPPLY_CAP_EXCEEDED);
  });

  it('Tries to set the supply cap for USDC and DAI to > MAX_SUPPLY_CAP (revert expected)', async () => {
    const { configurator, usdc, dai } = testEnv;
    const newCap = Number(MAX_SUPPLY_CAP) + 1;

    await expect(configurator.setSupplyCap(usdc.address, newCap)).to.be.revertedWith(
      INVALID_SUPPLY_CAP
    );
    await expect(configurator.setSupplyCap(dai.address, newCap)).to.be.revertedWith(
      INVALID_SUPPLY_CAP
    );
  });

  it('Sets the supply cap for usdc and DAI to 1110 Units, leaving 110 Units to reach the limit', async () => {
    const { configurator, usdc, dai, helpersContract } = testEnv;

    const { supplyCap: oldUsdcSupplyCap } = await helpersContract.getReserveCaps(usdc.address);
    const { supplyCap: oldDaiSupplyCap } = await helpersContract.getReserveCaps(dai.address);

    const newCap = '1110';
    await expect(configurator.setSupplyCap(usdc.address, newCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(usdc.address, oldUsdcSupplyCap, newCap);
    await expect(configurator.setSupplyCap(dai.address, newCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(dai.address, oldDaiSupplyCap, newCap);

    const { supplyCap: usdcSupplyCap } = await helpersContract.getReserveCaps(usdc.address);
    const { supplyCap: daiSupplyCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcSupplyCap).to.be.equal(newCap);
    expect(daiSupplyCap).to.be.equal(newCap);
  });

  it('Supply 10 DAI and 10 USDC, leaving 100 Units to reach the limit', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const suppliedAmount = '10';
    await pool.deposit(
      usdc.address,
      await convertToCurrencyDecimals(usdc.address, suppliedAmount),
      deployer.address,
      0
    );

    await pool.deposit(
      dai.address,
      await convertToCurrencyDecimals(dai.address, suppliedAmount),
      deployer.address,
      0
    );
  });

  it('Tries to supply 101 DAI and 101 USDC (> SUPPLY_CAP) 1 unit above the limit (revert expected)', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const suppliedAmount = '101';

    await expect(
      pool.deposit(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, suppliedAmount),
        deployer.address,
        0
      )
    ).to.be.revertedWith(SUPPLY_CAP_EXCEEDED);

    await expect(
      pool.deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, suppliedAmount),
        deployer.address,
        0
      )
    ).to.be.revertedWith(SUPPLY_CAP_EXCEEDED);
  });

  it('Supply 99 DAI and 99 USDC (< SUPPLY_CAP), leaving 1 Units to reach the limit', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const suppliedAmount = '99';
    await pool.deposit(
      usdc.address,
      await convertToCurrencyDecimals(usdc.address, suppliedAmount),
      deployer.address,
      0
    );

    await pool.deposit(
      dai.address,
      await convertToCurrencyDecimals(dai.address, suppliedAmount),
      deployer.address,
      0
    );
  });

  it('Supply 1 DAI and 1 USDC (= SUPPLY_CAP), reaching the limit', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const suppliedAmount = '1';
    await pool.deposit(
      usdc.address,
      await convertToCurrencyDecimals(usdc.address, suppliedAmount),
      deployer.address,
      0
    );

    await pool.deposit(
      dai.address,
      await convertToCurrencyDecimals(dai.address, suppliedAmount),
      deployer.address,
      0
    );
  });

  it('Time flies and DAI and USDC supply amount goes above the limit due to accrued interests', async () => {
    const { usdc, pool, dai, deployer, helpersContract } = testEnv;

    // Advance blocks
    await advanceTimeAndBlock(3600);

    const daiData = await helpersContract.getReserveData(dai.address);
    const daiCaps = await helpersContract.getReserveCaps(dai.address);
    const usdcData = await helpersContract.getReserveData(usdc.address);
    const usdcCaps = await helpersContract.getReserveCaps(usdc.address);

    expect(daiData.totalAToken).gt(daiCaps.supplyCap);
    expect(usdcData.totalAToken).gt(usdcCaps.supplyCap);
  });

  it('Raises the supply cap for USDC and DAI to 2000 Units, leaving 800 Units to reach the limit', async () => {
    const { configurator, usdc, dai, helpersContract } = testEnv;

    const { supplyCap: oldUsdcSupplyCap } = await helpersContract.getReserveCaps(usdc.address);
    const { supplyCap: oldDaiSupplyCap } = await helpersContract.getReserveCaps(dai.address);

    const newCap = '2000';
    await expect(configurator.setSupplyCap(usdc.address, newCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(usdc.address, oldUsdcSupplyCap, newCap);
    await expect(configurator.setSupplyCap(dai.address, newCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(dai.address, oldDaiSupplyCap, newCap);

    const { supplyCap: usdcSupplyCap } = await helpersContract.getReserveCaps(usdc.address);
    const { supplyCap: daiSupplyCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcSupplyCap).to.be.equal(newCap);
    expect(daiSupplyCap).to.be.equal(newCap);
  });

  it('Supply 100 DAI and 100 USDC, leaving 700 Units to reach the limit', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const suppliedAmount = '100';
    await pool.deposit(
      usdc.address,
      await convertToCurrencyDecimals(usdc.address, suppliedAmount),
      deployer.address,
      0
    );

    await pool.deposit(
      dai.address,
      await convertToCurrencyDecimals(dai.address, suppliedAmount),
      deployer.address,
      0
    );
  });

  it('Lowers the supply cap for USDC and DAI to 1200 Units (suppliedAmount > supplyCap)', async () => {
    const { configurator, usdc, dai, helpersContract } = testEnv;

    const { supplyCap: oldUsdcSupplyCap } = await helpersContract.getReserveCaps(usdc.address);
    const { supplyCap: oldDaiSupplyCap } = await helpersContract.getReserveCaps(dai.address);

    const newCap = '1200';
    await expect(configurator.setSupplyCap(usdc.address, newCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(usdc.address, oldUsdcSupplyCap, newCap);
    await expect(configurator.setSupplyCap(dai.address, newCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(dai.address, oldDaiSupplyCap, newCap);

    const { supplyCap: usdcSupplyCap } = await helpersContract.getReserveCaps(usdc.address);
    const { supplyCap: daiSupplyCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcSupplyCap).to.be.equal(newCap);
    expect(daiSupplyCap).to.be.equal(newCap);
  });

  it('Tries to supply 100 DAI and 100 USDC (> SUPPLY_CAP) (revert expected)', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const suppliedAmount = '100';

    await expect(
      pool.deposit(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, suppliedAmount),
        deployer.address,
        0
      )
    ).to.be.revertedWith(SUPPLY_CAP_EXCEEDED);

    await expect(
      pool.deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, suppliedAmount),
        deployer.address,
        0
      )
    ).to.be.revertedWith(SUPPLY_CAP_EXCEEDED);
  });

  it('Raises the supply cap for USDC and DAI to MAX_SUPPLY_CAP', async () => {
    const { configurator, usdc, dai, helpersContract } = testEnv;

    const { supplyCap: oldUsdcSupplyCap } = await helpersContract.getReserveCaps(usdc.address);
    const { supplyCap: oldDaiSupplyCap } = await helpersContract.getReserveCaps(dai.address);

    const newCap = MAX_SUPPLY_CAP;
    await expect(configurator.setSupplyCap(usdc.address, newCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(usdc.address, oldUsdcSupplyCap, newCap);
    await expect(configurator.setSupplyCap(dai.address, newCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(dai.address, oldDaiSupplyCap, newCap);

    const { supplyCap: usdcSupplyCap } = await helpersContract.getReserveCaps(usdc.address);
    const { supplyCap: daiSupplyCap } = await helpersContract.getReserveCaps(dai.address);

    expect(usdcSupplyCap).to.be.equal(newCap);
    expect(daiSupplyCap).to.be.equal(newCap);
  });

  it('Supply 100 DAI and 100 USDC', async () => {
    const { usdc, pool, dai, deployer } = testEnv;

    const suppliedAmount = '100';
    await pool.deposit(
      usdc.address,
      await convertToCurrencyDecimals(usdc.address, suppliedAmount),
      deployer.address,
      0
    );

    await pool.deposit(
      dai.address,
      await convertToCurrencyDecimals(dai.address, suppliedAmount),
      deployer.address,
      0
    );
  });
});



================================================
FILE: test-suites/configurator.spec.ts
================================================
import { expect } from 'chai';
import { utils, BigNumber, BigNumberish } from 'ethers';
import { strategyWETH } from '@aave/deploy-v3/dist/markets/test/reservesConfigs';
import { getFirstSigner } from '@aave/deploy-v3/dist/helpers/utilities/signer';
import { MAX_UINT_AMOUNT, ONE_ADDRESS, RAY, ZERO_ADDRESS } from '../helpers/constants';
import { ProtocolErrors } from '../helpers/types';
import {
  AaveProtocolDataProvider,
  AToken__factory,
  MintableERC20__factory,
  MockReserveInterestRateStrategy__factory,
  StableDebtToken__factory,
  VariableDebtToken__factory,
} from '../types';
import { TestEnv, makeSuite } from './helpers/make-suite';
import { advanceTimeAndBlock, evmRevert, evmSnapshot } from '@aave/deploy-v3';

type ReserveConfigurationValues = {
  reserveDecimals: string;
  baseLTVAsCollateral: string;
  liquidationThreshold: string;
  liquidationBonus: string;
  reserveFactor: string;
  usageAsCollateralEnabled: boolean;
  borrowingEnabled: boolean;
  stableBorrowRateEnabled: boolean;
  isActive: boolean;
  isFrozen: boolean;
  isPaused: boolean;
  eModeCategory: BigNumber;
  borrowCap: string;
  supplyCap: string;
};

const expectReserveConfigurationData = async (
  helpersContract: AaveProtocolDataProvider,
  asset: string,
  values: ReserveConfigurationValues
) => {
  const [reserveCfg, eModeCategory, reserveCaps, isPaused] = await getReserveData(
    helpersContract,
    asset
  );
  expect(reserveCfg.decimals).to.be.eq(values.reserveDecimals, 'reserveDecimals is not correct');
  expect(reserveCfg.ltv).to.be.eq(values.baseLTVAsCollateral, 'ltv is not correct');
  expect(reserveCfg.liquidationThreshold).to.be.eq(
    values.liquidationThreshold,
    'liquidationThreshold is not correct'
  );
  expect(reserveCfg.liquidationBonus).to.be.eq(
    values.liquidationBonus,
    'liquidationBonus is not correct'
  );
  expect(reserveCfg.reserveFactor).to.be.eq(values.reserveFactor, 'reserveFactor is not correct');
  expect(reserveCfg.usageAsCollateralEnabled).to.be.eq(
    values.usageAsCollateralEnabled,
    'usageAsCollateralEnabled is not correct'
  );
  expect(reserveCfg.borrowingEnabled).to.be.eq(
    values.borrowingEnabled,
    'borrowingEnabled is not correct'
  );
  expect(reserveCfg.stableBorrowRateEnabled).to.be.eq(
    values.stableBorrowRateEnabled,
    'stableBorrowRateEnabled is not correct'
  );
  expect(reserveCfg.isActive).to.be.eq(values.isActive, 'isActive is not correct');
  expect(reserveCfg.isFrozen).to.be.eq(values.isFrozen, 'isFrozen is not correct');
  expect(isPaused).to.be.equal(values.isPaused, 'isPaused is not correct');
  expect(eModeCategory).to.be.eq(values.eModeCategory, 'eModeCategory is not correct');
  expect(reserveCaps.borrowCap).to.be.eq(values.borrowCap, 'borrowCap is not correct');
  expect(reserveCaps.supplyCap).to.be.eq(values.supplyCap, 'supplyCap is not correct');
};

const getReserveData = async (helpersContract: AaveProtocolDataProvider, asset: string) => {
  return Promise.all([
    helpersContract.getReserveConfigurationData(asset),
    helpersContract.getReserveEModeCategory(asset),
    helpersContract.getReserveCaps(asset),
    helpersContract.getPaused(asset),
    helpersContract.getLiquidationProtocolFee(asset),
    helpersContract.getUnbackedMintCap(asset),
  ]);
};

makeSuite('PoolConfigurator', (testEnv: TestEnv) => {
  let baseConfigValues: ReserveConfigurationValues;
  const { RESERVE_LIQUIDITY_NOT_ZERO, INVALID_DEBT_CEILING, RESERVE_DEBT_NOT_ZERO } =
    ProtocolErrors;

  before(() => {
    const {
      reserveDecimals,
      baseLTVAsCollateral,
      liquidationThreshold,
      liquidationBonus,
      reserveFactor,
      borrowingEnabled,
      stableBorrowRateEnabled,
      borrowCap,
      supplyCap,
    } = strategyWETH;
    baseConfigValues = {
      reserveDecimals,
      baseLTVAsCollateral,
      liquidationThreshold,
      liquidationBonus,
      reserveFactor,
      usageAsCollateralEnabled: true,
      borrowingEnabled,
      stableBorrowRateEnabled,
      isActive: true,
      isFrozen: false,
      isPaused: false,
      eModeCategory: BigNumber.from(0),
      borrowCap: borrowCap,
      supplyCap: supplyCap,
    };
  });

  it('InitReserves via AssetListing admin', async () => {
    const { addressesProvider, configurator, poolAdmin, aclManager, users, pool } = testEnv;

    // const snapId
    const assetListingAdmin = users[4];
    // Add new AssetListingAdmin
    expect(
      await aclManager.connect(poolAdmin.signer).addAssetListingAdmin(assetListingAdmin.address)
    );

    // Deploy mock `InitReserveInput`
    const mockToken = await new MintableERC20__factory(await getFirstSigner()).deploy(
      'MOCK',
      'MOCK',
      '18'
    );
    const stableDebtTokenImplementation = await new StableDebtToken__factory(
      await getFirstSigner()
    ).deploy(pool.address);
    const variableDebtTokenImplementation = await new VariableDebtToken__factory(
      await getFirstSigner()
    ).deploy(pool.address);
    const aTokenImplementation = await new AToken__factory(await getFirstSigner()).deploy(
      pool.address
    );
    const mockRateStrategy = await new MockReserveInterestRateStrategy__factory(
      await getFirstSigner()
    ).deploy(addressesProvider.address, 0, 0, 0, 0, 0, 0);

    // Init the reserve
    const initInputParams: {
      aTokenImpl: string;
      stableDebtTokenImpl: string;
      variableDebtTokenImpl: string;
      underlyingAssetDecimals: BigNumberish;
      interestRateStrategyAddress: string;
      underlyingAsset: string;
      treasury: string;
      incentivesController: string;
      aTokenName: string;
      aTokenSymbol: string;
      variableDebtTokenName: string;
      variableDebtTokenSymbol: string;
      stableDebtTokenName: string;
      stableDebtTokenSymbol: string;
      params: string;
    }[] = [
      {
        aTokenImpl: aTokenImplementation.address,
        stableDebtTokenImpl: stableDebtTokenImplementation.address,
        variableDebtTokenImpl: variableDebtTokenImplementation.address,
        underlyingAssetDecimals: 18,
        interestRateStrategyAddress: mockRateStrategy.address,
        underlyingAsset: mockToken.address,
        treasury: ZERO_ADDRESS,
        incentivesController: ZERO_ADDRESS,
        aTokenName: 'AMOCK',
        aTokenSymbol: 'AMOCK',
        variableDebtTokenName: 'VMOCK',
        variableDebtTokenSymbol: 'VMOCK',
        stableDebtTokenName: 'SMOCK',
        stableDebtTokenSymbol: 'SMOCK',
        params: '0x10',
      },
    ];

    expect(await configurator.connect(assetListingAdmin.signer).initReserves(initInputParams));
  });

  it('Deactivates the ETH reserve', async () => {
    const { configurator, weth, helpersContract } = testEnv;
    expect(await configurator.setReserveActive(weth.address, false));
    const { isActive } = await helpersContract.getReserveConfigurationData(weth.address);
    expect(isActive).to.be.equal(false);
  });

  it('Reactivates the ETH reserve', async () => {
    const { configurator, weth, helpersContract } = testEnv;
    expect(await configurator.setReserveActive(weth.address, true));
    const { isActive } = await helpersContract.getReserveConfigurationData(weth.address);
    expect(isActive).to.be.equal(true);
  });

  it('Pauses the ETH reserve by pool admin', async () => {
    const { configurator, weth, helpersContract } = testEnv;
    await expect(configurator.setReservePause(weth.address, true))
      .to.emit(configurator, 'ReservePaused')
      .withArgs(weth.address, true);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      isPaused: true,
    });
  });

  it('Unpauses the ETH reserve by pool admin', async () => {
    const { configurator, helpersContract, weth } = testEnv;
    await expect(configurator.setReservePause(weth.address, false))
      .to.emit(configurator, 'ReservePaused')
      .withArgs(weth.address, false);

    await expectReserveConfigurationData(helpersContract, weth.address, { ...baseConfigValues });
  });

  it('Pauses the ETH reserve by emergency admin', async () => {
    const { configurator, weth, helpersContract, emergencyAdmin } = testEnv;
    await expect(configurator.connect(emergencyAdmin.signer).setReservePause(weth.address, true))
      .to.emit(configurator, 'ReservePaused')
      .withArgs(weth.address, true);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      isPaused: true,
    });
  });

  it('Unpauses the ETH reserve by emergency admin', async () => {
    const { configurator, helpersContract, weth, emergencyAdmin } = testEnv;
    await expect(configurator.connect(emergencyAdmin.signer).setReservePause(weth.address, false))
      .to.emit(configurator, 'ReservePaused')
      .withArgs(weth.address, false);

    await expectReserveConfigurationData(helpersContract, weth.address, { ...baseConfigValues });
  });

  it('Freezes the ETH reserve by pool Admin', async () => {
    const { configurator, weth, helpersContract } = testEnv;

    await expect(configurator.setReserveFreeze(weth.address, true))
      .to.emit(configurator, 'ReserveFrozen')
      .withArgs(weth.address, true);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      isFrozen: true,
    });
  });

  it('Unfreezes the ETH reserve by Pool admin', async () => {
    const { configurator, helpersContract, weth } = testEnv;
    await expect(configurator.setReserveFreeze(weth.address, false))
      .to.emit(configurator, 'ReserveFrozen')
      .withArgs(weth.address, false);

    await expectReserveConfigurationData(helpersContract, weth.address, { ...baseConfigValues });
  });

  it('Freezes the ETH reserve by Risk Admin', async () => {
    const { configurator, weth, helpersContract, riskAdmin } = testEnv;
    await expect(configurator.connect(riskAdmin.signer).setReserveFreeze(weth.address, true))
      .to.emit(configurator, 'ReserveFrozen')
      .withArgs(weth.address, true);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      isFrozen: true,
    });
  });

  it('Unfreezes the ETH reserve by Risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;
    await expect(configurator.connect(riskAdmin.signer).setReserveFreeze(weth.address, false))
      .to.emit(configurator, 'ReserveFrozen')
      .withArgs(weth.address, false);

    await expectReserveConfigurationData(helpersContract, weth.address, { ...baseConfigValues });
  });

  it('Deactivates the ETH reserve for borrowing via pool admin while stable borrowing is active (revert expected)', async () => {
    const { configurator, helpersContract, weth } = testEnv;
    await expect(configurator.setReserveBorrowing(weth.address, false)).to.be.revertedWith(
      ProtocolErrors.STABLE_BORROWING_ENABLED
    );
    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
    });
  });

  it('Deactivates the ETH reserve for borrowing via risk admin while stable borrowing is active (revert expected)', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;

    await expect(
      configurator.connect(riskAdmin.signer).setReserveBorrowing(weth.address, false)
    ).to.be.revertedWith(ProtocolErrors.STABLE_BORROWING_ENABLED);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
    });
  });

  it('Disable stable borrow rate on the ETH reserve via pool admin', async () => {
    const snap = await evmSnapshot();
    const { configurator, helpersContract, weth } = testEnv;
    await expect(configurator.setReserveStableRateBorrowing(weth.address, false))
      .to.emit(configurator, 'ReserveStableRateBorrowing')
      .withArgs(weth.address, false);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      stableBorrowRateEnabled: false,
    });
    await evmRevert(snap);
  });

  it('Disable stable borrow rate on the ETH reserve via risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;
    await expect(
      configurator.connect(riskAdmin.signer).setReserveStableRateBorrowing(weth.address, false)
    )
      .to.emit(configurator, 'ReserveStableRateBorrowing')
      .withArgs(weth.address, false);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      stableBorrowRateEnabled: false,
    });
  });

  it('Deactivates the ETH reserve for borrowing via pool admin', async () => {
    const snap = await evmSnapshot();
    const { configurator, helpersContract, weth } = testEnv;
    await expect(configurator.setReserveBorrowing(weth.address, false))
      .to.emit(configurator, 'ReserveBorrowing')
      .withArgs(weth.address, false);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      borrowingEnabled: false,
      stableBorrowRateEnabled: false,
    });
    await evmRevert(snap);
  });

  it('Deactivates the ETH reserve for borrowing via risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;
    await expect(configurator.connect(riskAdmin.signer).setReserveBorrowing(weth.address, false))
      .to.emit(configurator, 'ReserveBorrowing')
      .withArgs(weth.address, false);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      borrowingEnabled: false,
      stableBorrowRateEnabled: false,
    });
  });

  it('Enables stable borrow rate on the ETH reserve via pool admin while borrowing is disabled (revert expected)', async () => {
    const { configurator, helpersContract, weth } = testEnv;
    await expect(configurator.setReserveStableRateBorrowing(weth.address, true)).to.be.revertedWith(
      ProtocolErrors.BORROWING_NOT_ENABLED
    );

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      borrowingEnabled: false,
      stableBorrowRateEnabled: false,
    });
  });

  it('Enables stable borrow rate on the ETH reserve via risk admin while borrowing is disabled (revert expected)', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;
    await expect(
      configurator.connect(riskAdmin.signer).setReserveStableRateBorrowing(weth.address, true)
    ).to.be.revertedWith(ProtocolErrors.BORROWING_NOT_ENABLED);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      borrowingEnabled: false,
      stableBorrowRateEnabled: false,
    });
  });

  it('Activates the ETH reserve for borrowing via pool admin', async () => {
    const snap = await evmSnapshot();
    const { configurator, weth, helpersContract } = testEnv;
    expect(await configurator.setReserveBorrowing(weth.address, true))
      .to.emit(configurator, 'ReserveBorrowing')
      .withArgs(weth.address, true);

    const { variableBorrowIndex } = await helpersContract.getReserveData(weth.address);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      stableBorrowRateEnabled: false,
    });
    expect(variableBorrowIndex.toString()).to.be.equal(RAY);
    await evmRevert(snap);
  });

  it('Activates the ETH reserve for borrowing via risk admin', async () => {
    const { configurator, weth, helpersContract, riskAdmin } = testEnv;
    expect(await configurator.connect(riskAdmin.signer).setReserveBorrowing(weth.address, true))
      .to.emit(configurator, 'ReserveBorrowing')
      .withArgs(weth.address, true);

    const { variableBorrowIndex } = await helpersContract.getReserveData(weth.address);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      stableBorrowRateEnabled: false,
    });
    expect(variableBorrowIndex.toString()).to.be.equal(RAY);
  });

  it('Enables stable borrow rate on the ETH reserve via pool admin', async () => {
    const snap = await evmSnapshot();
    const { configurator, helpersContract, weth } = testEnv;
    expect(await configurator.setReserveStableRateBorrowing(weth.address, true))
      .to.emit(configurator, 'ReserveStableRateBorrowing')
      .withArgs(weth.address, true);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
    });
    await evmRevert(snap);
  });

  it('Enables stable borrow rate on the ETH reserve via risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;
    expect(
      await configurator.connect(riskAdmin.signer).setReserveStableRateBorrowing(weth.address, true)
    )
      .to.emit(configurator, 'ReserveStableRateBorrowing')
      .withArgs(weth.address, true);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
    });
  });

  it('Deactivates the ETH reserve as collateral via pool admin', async () => {
    const { configurator, helpersContract, weth } = testEnv;
    expect(await configurator.configureReserveAsCollateral(weth.address, 0, 0, 0))
      .to.emit(configurator, 'CollateralConfigurationChanged')
      .withArgs(weth.address, 0, 0, 0);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      baseLTVAsCollateral: '0',
      liquidationThreshold: '0',
      liquidationBonus: '0',
      usageAsCollateralEnabled: false,
    });
  });

  it('Activates the ETH reserve as collateral via pool admin', async () => {
    const { configurator, helpersContract, weth } = testEnv;
    expect(await configurator.configureReserveAsCollateral(weth.address, '8000', '8250', '10500'))
      .to.emit(configurator, 'CollateralConfigurationChanged')
      .withArgs(weth.address, '8000', '8250', '10500');

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      baseLTVAsCollateral: '8000',
      liquidationThreshold: '8250',
      liquidationBonus: '10500',
    });
  });

  it('Deactivates the ETH reserve as collateral via risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;
    expect(
      await configurator
        .connect(riskAdmin.signer)
        .configureReserveAsCollateral(weth.address, 0, 0, 0)
    )
      .to.emit(configurator, 'CollateralConfigurationChanged')
      .withArgs(weth.address, 0, 0, 0);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      baseLTVAsCollateral: '0',
      liquidationThreshold: '0',
      liquidationBonus: '0',
      usageAsCollateralEnabled: false,
    });
  });

  it('Activates the ETH reserve as collateral via risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;
    expect(
      await configurator
        .connect(riskAdmin.signer)
        .configureReserveAsCollateral(weth.address, '8000', '8250', '10500')
    )
      .to.emit(configurator, 'CollateralConfigurationChanged')
      .withArgs(weth.address, '8000', '8250', '10500');

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      baseLTVAsCollateral: '8000',
      liquidationThreshold: '8250',
      liquidationBonus: '10500',
    });
  });

  it('Changes the reserve factor of WETH via pool admin', async () => {
    const { configurator, helpersContract, weth } = testEnv;

    const { reserveFactor: oldReserveFactor } = await helpersContract.getReserveConfigurationData(
      weth.address
    );

    const newReserveFactor = '1000';
    expect(await configurator.setReserveFactor(weth.address, newReserveFactor))
      .to.emit(configurator, 'ReserveFactorChanged')
      .withArgs(weth.address, oldReserveFactor, newReserveFactor);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      reserveFactor: newReserveFactor,
    });
  });

  it('Changes the reserve factor of WETH via risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;

    const { reserveFactor: oldReserveFactor } = await helpersContract.getReserveConfigurationData(
      weth.address
    );

    const newReserveFactor = '1000';
    expect(
      await configurator.connect(riskAdmin.signer).setReserveFactor(weth.address, newReserveFactor)
    )
      .to.emit(configurator, 'ReserveFactorChanged')
      .withArgs(weth.address, oldReserveFactor, newReserveFactor);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      reserveFactor: newReserveFactor,
    });
  });

  it('Updates the reserve factor of WETH equal to PERCENTAGE_FACTOR', async () => {
    const snapId = await evmSnapshot();
    const { configurator, helpersContract, weth, poolAdmin } = testEnv;

    const { reserveFactor: oldReserveFactor } = await helpersContract.getReserveConfigurationData(
      weth.address
    );

    const newReserveFactor = '10000';
    expect(
      await configurator.connect(poolAdmin.signer).setReserveFactor(weth.address, newReserveFactor)
    )
      .to.emit(configurator, 'ReserveFactorChanged')
      .withArgs(weth.address, oldReserveFactor, newReserveFactor);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      reserveFactor: newReserveFactor,
    });
    await evmRevert(snapId);
  });

  it('Updates the unbackedMintCap of WETH via pool admin', async () => {
    const { configurator, helpersContract, weth } = testEnv;

    const oldWethUnbackedMintCap = await helpersContract.getUnbackedMintCap(weth.address);

    const newUnbackedMintCap = '10000';
    expect(await configurator.setUnbackedMintCap(weth.address, newUnbackedMintCap))
      .to.emit(configurator, 'UnbackedMintCapChanged')
      .withArgs(weth.address, oldWethUnbackedMintCap, newUnbackedMintCap);

    expect(await helpersContract.getUnbackedMintCap(weth.address)).to.be.eq(newUnbackedMintCap);
  });

  it('Updates the unbackedMintCap of WETH via risk admin', async () => {
    const { configurator, helpersContract, weth } = testEnv;

    const oldWethUnbackedMintCap = await helpersContract.getUnbackedMintCap(weth.address);

    const newUnbackedMintCap = '20000';
    expect(await configurator.setUnbackedMintCap(weth.address, newUnbackedMintCap))
      .to.emit(configurator, 'UnbackedMintCapChanged')
      .withArgs(weth.address, oldWethUnbackedMintCap, newUnbackedMintCap);

    expect(await helpersContract.getUnbackedMintCap(weth.address)).to.be.eq(newUnbackedMintCap);
  });

  it('Updates the borrowCap of WETH via pool admin', async () => {
    const { configurator, helpersContract, weth } = testEnv;

    const { borrowCap: wethOldBorrowCap } = await helpersContract.getReserveCaps(weth.address);

    const newBorrowCap = '3000000';
    expect(await configurator.setBorrowCap(weth.address, newBorrowCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(weth.address, wethOldBorrowCap, newBorrowCap);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      borrowCap: newBorrowCap,
    });
  });

  it('Updates the borrowCap of WETH risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;

    const { borrowCap: wethOldBorrowCap } = await helpersContract.getReserveCaps(weth.address);

    const newBorrowCap = '3000000';
    expect(await configurator.connect(riskAdmin.signer).setBorrowCap(weth.address, newBorrowCap))
      .to.emit(configurator, 'BorrowCapChanged')
      .withArgs(weth.address, wethOldBorrowCap, newBorrowCap);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      borrowCap: newBorrowCap,
    });
  });

  it('Updates the supplyCap of WETH via pool admin', async () => {
    const { configurator, helpersContract, weth } = testEnv;

    const { supplyCap: oldWethSupplyCap } = await helpersContract.getReserveCaps(weth.address);

    const newBorrowCap = '3000000';
    const newSupplyCap = '3000000';
    expect(await configurator.setSupplyCap(weth.address, newSupplyCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(weth.address, oldWethSupplyCap, newSupplyCap);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      borrowCap: newBorrowCap,
      supplyCap: newSupplyCap,
    });
  });

  it('Updates the supplyCap of WETH via risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;

    const { supplyCap: oldWethSupplyCap } = await helpersContract.getReserveCaps(weth.address);

    const newBorrowCap = '3000000';
    const newSupplyCap = '3000000';
    expect(await configurator.connect(riskAdmin.signer).setSupplyCap(weth.address, newSupplyCap))
      .to.emit(configurator, 'SupplyCapChanged')
      .withArgs(weth.address, oldWethSupplyCap, newSupplyCap);

    await expectReserveConfigurationData(helpersContract, weth.address, {
      ...baseConfigValues,
      borrowCap: newBorrowCap,
      supplyCap: newSupplyCap,
    });
  });

  it('Updates the ReserveInterestRateStrategy address of WETH via pool admin', async () => {
    const { poolAdmin, pool, configurator, weth } = testEnv;

    const { interestRateStrategyAddress: interestRateStrategyAddressBefore } =
      await pool.getReserveData(weth.address);

    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setReserveInterestRateStrategyAddress(weth.address, ZERO_ADDRESS)
    )
      .to.emit(configurator, 'ReserveInterestRateStrategyChanged')
      .withArgs(weth.address, interestRateStrategyAddressBefore, ZERO_ADDRESS);
    const { interestRateStrategyAddress: interestRateStrategyAddressAfter } =
      await pool.getReserveData(weth.address);

    expect(interestRateStrategyAddressBefore).to.not.be.eq(ZERO_ADDRESS);
    expect(interestRateStrategyAddressAfter).to.be.eq(ZERO_ADDRESS);

    //reset interest rate strategy to the correct one
    await configurator
      .connect(poolAdmin.signer)
      .setReserveInterestRateStrategyAddress(weth.address, interestRateStrategyAddressBefore);
  });

  it('Updates the ReserveInterestRateStrategy address of WETH via risk admin', async () => {
    const { riskAdmin, pool, configurator, weth } = testEnv;

    const { interestRateStrategyAddress: interestRateStrategyAddressBefore } =
      await pool.getReserveData(weth.address);

    expect(
      await configurator
        .connect(riskAdmin.signer)
        .setReserveInterestRateStrategyAddress(weth.address, ONE_ADDRESS)
    )
      .to.emit(configurator, 'ReserveInterestRateStrategyChanged')
      .withArgs(weth.address, interestRateStrategyAddressBefore, ONE_ADDRESS);
    const { interestRateStrategyAddress: interestRateStrategyAddressAfter } =
      await pool.getReserveData(weth.address);

    expect(interestRateStrategyAddressBefore).to.not.be.eq(ONE_ADDRESS);
    expect(interestRateStrategyAddressAfter).to.be.eq(ONE_ADDRESS);

    //reset interest rate strategy to the correct one
    await configurator
      .connect(riskAdmin.signer)
      .setReserveInterestRateStrategyAddress(weth.address, interestRateStrategyAddressBefore);
  });

  it('Register a new risk Admin', async () => {
    const { aclManager, poolAdmin, users, riskAdmin } = testEnv;

    const riskAdminRole = await aclManager.RISK_ADMIN_ROLE();

    const newRiskAdmin = users[3].address;
    expect(await aclManager.addRiskAdmin(newRiskAdmin))
      .to.emit(aclManager, 'RoleGranted')
      .withArgs(riskAdminRole, newRiskAdmin, poolAdmin.address);

    expect(await aclManager.isRiskAdmin(riskAdmin.address)).to.be.true;
    expect(await aclManager.isRiskAdmin(newRiskAdmin)).to.be.true;
  });

  it('Unregister the new risk admin', async () => {
    const { aclManager, poolAdmin, users, riskAdmin } = testEnv;

    const riskAdminRole = await aclManager.RISK_ADMIN_ROLE();

    const newRiskAdmin = users[3].address;
    expect(await aclManager.removeRiskAdmin(newRiskAdmin))
      .to.emit(aclManager, 'RoleRevoked')
      .withArgs(riskAdminRole, newRiskAdmin, poolAdmin.address);

    expect(await aclManager.isRiskAdmin(riskAdmin.address)).to.be.true;
    expect(await aclManager.isRiskAdmin(newRiskAdmin)).to.be.false;
  });

  it('Authorized a new flash borrower', async () => {
    const { aclManager, poolAdmin, users } = testEnv;

    const authorizedFlashBorrowerRole = await aclManager.FLASH_BORROWER_ROLE();

    const authorizedFlashBorrower = users[4].address;
    expect(await aclManager.addFlashBorrower(authorizedFlashBorrower))
      .to.emit(aclManager, 'RoleGranted')
      .withArgs(authorizedFlashBorrowerRole, authorizedFlashBorrower, poolAdmin.address);

    expect(await aclManager.isFlashBorrower(authorizedFlashBorrower)).to.be.true;
  });

  it('Unauthorized flash borrower', async () => {
    const { aclManager, poolAdmin, users } = testEnv;

    const authorizedFlashBorrowerRole = await aclManager.FLASH_BORROWER_ROLE();

    const authorizedFlashBorrower = users[4].address;
    expect(await aclManager.removeFlashBorrower(authorizedFlashBorrower))
      .to.emit(aclManager, 'RoleRevoked')
      .withArgs(authorizedFlashBorrowerRole, authorizedFlashBorrower, poolAdmin.address);

    expect(await aclManager.isFlashBorrower(authorizedFlashBorrower)).to.be.false;
  });

  it('Updates bridge protocol fee equal to PERCENTAGE_FACTOR', async () => {
    const { pool, configurator } = testEnv;
    const newProtocolFee = 10000;

    const oldBridgeProtocolFee = await pool.BRIDGE_PROTOCOL_FEE();

    expect(await configurator.updateBridgeProtocolFee(newProtocolFee))
      .to.emit(configurator, 'BridgeProtocolFeeUpdated')
      .withArgs(oldBridgeProtocolFee, newProtocolFee);

    expect(await pool.BRIDGE_PROTOCOL_FEE()).to.be.eq(newProtocolFee);
  });

  it('Updates bridge protocol fee', async () => {
    const { pool, configurator } = testEnv;

    const oldBridgeProtocolFee = await pool.BRIDGE_PROTOCOL_FEE();

    const newProtocolFee = 2000;

    expect(await configurator.updateBridgeProtocolFee(newProtocolFee))
      .to.emit(configurator, 'BridgeProtocolFeeUpdated')
      .withArgs(oldBridgeProtocolFee, newProtocolFee);

    expect(await pool.BRIDGE_PROTOCOL_FEE()).to.be.eq(newProtocolFee);
  });

  it('Updates flash loan premiums equal to PERCENTAGE_FACTOR: 10000 toProtocol, 10000 total', async () => {
    const snapId = await evmSnapshot();

    const { pool, configurator } = testEnv;

    const oldFlashloanPremiumTotal = await pool.FLASHLOAN_PREMIUM_TOTAL();
    const oldFlashloanPremiumToProtocol = await pool.FLASHLOAN_PREMIUM_TO_PROTOCOL();

    const newPremiumTotal = 10000;
    const newPremiumToProtocol = 10000;

    expect(await configurator.updateFlashloanPremiumTotal(newPremiumTotal))
      .to.emit(configurator, 'FlashloanPremiumTotalUpdated')
      .withArgs(oldFlashloanPremiumTotal, newPremiumTotal);
    expect(await configurator.updateFlashloanPremiumToProtocol(newPremiumToProtocol))
      .to.emit(configurator, 'FlashloanPremiumToProtocolUpdated')
      .withArgs(oldFlashloanPremiumToProtocol, newPremiumToProtocol);

    expect(await pool.FLASHLOAN_PREMIUM_TOTAL()).to.be.eq(newPremiumTotal);
    expect(await pool.FLASHLOAN_PREMIUM_TO_PROTOCOL()).to.be.eq(newPremiumToProtocol);

    await evmRevert(snapId);
  });

  it('Updates flash loan premiums: 10 toProtocol, 40 total', async () => {
    const { pool, configurator } = testEnv;

    const oldFlashloanPremiumTotal = await pool.FLASHLOAN_PREMIUM_TOTAL();
    const oldFlashloanPremiumToProtocol = await pool.FLASHLOAN_PREMIUM_TO_PROTOCOL();

    const newPremiumTotal = 40;
    const newPremiumToProtocol = 10;

    expect(await configurator.updateFlashloanPremiumTotal(newPremiumTotal))
      .to.emit(configurator, 'FlashloanPremiumTotalUpdated')
      .withArgs(oldFlashloanPremiumTotal, newPremiumTotal);
    expect(await configurator.updateFlashloanPremiumToProtocol(newPremiumToProtocol))
      .to.emit(configurator, 'FlashloanPremiumToProtocolUpdated')
      .withArgs(oldFlashloanPremiumToProtocol, newPremiumToProtocol);

    expect(await pool.FLASHLOAN_PREMIUM_TOTAL()).to.be.eq(newPremiumTotal);
    expect(await pool.FLASHLOAN_PREMIUM_TO_PROTOCOL()).to.be.eq(newPremiumToProtocol);
  });

  it('Adds a new eMode category for stablecoins', async () => {
    const { configurator, pool, poolAdmin } = testEnv;

    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setEModeCategory('1', '9800', '9800', '10100', ONE_ADDRESS, 'STABLECOINS')
    )
      .to.emit(configurator, 'EModeCategoryAdded')
      .withArgs(1, 9800, 9800, 10100, ONE_ADDRESS, 'STABLECOINS');

    const categoryData = await pool.getEModeCategoryData(1);
    expect(categoryData.ltv).to.be.equal(9800, 'invalid eMode category ltv');
    expect(categoryData.liquidationThreshold).to.be.equal(
      9800,
      'invalid eMode category liq threshold'
    );
    expect(categoryData.liquidationBonus).to.be.equal(10100, 'invalid eMode category liq bonus');
    expect(categoryData.priceSource).to.be.equal(
      ONE_ADDRESS,
      'invalid eMode category price source'
    );
  });

  it('Set a eMode category to an asset', async () => {
    const { configurator, pool, helpersContract, poolAdmin, dai } = testEnv;

    const oldCategoryId = await helpersContract.getReserveEModeCategory(dai.address);

    const newCategoryId = 1;

    expect(await configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, '1'))
      .to.emit(configurator, 'EModeAssetCategoryChanged')
      .withArgs(dai.address, oldCategoryId, newCategoryId);

    const categoryData = await pool.getEModeCategoryData(newCategoryId);
    expect(categoryData.ltv).to.be.equal(9800, 'invalid eMode category ltv');
    expect(categoryData.liquidationThreshold).to.be.equal(
      9800,
      'invalid eMode category liq threshold'
    );
    expect(categoryData.liquidationBonus).to.be.equal(10100, 'invalid eMode category liq bonus');
    expect(categoryData.priceSource).to.be.equal(
      ONE_ADDRESS,
      'invalid eMode category price source'
    );
  });

  it('Sets siloed borrowing through the pool admin', async () => {
    const { configurator, helpersContract, weth, poolAdmin } = testEnv;

    const oldSiloedBorrowing = await helpersContract.getSiloedBorrowing(weth.address);

    expect(await configurator.connect(poolAdmin.signer).setSiloedBorrowing(weth.address, true))
      .to.emit(configurator, 'SiloedBorrowingChanged')
      .withArgs(weth.address, oldSiloedBorrowing, true);

    const newSiloedBorrowing = await helpersContract.getSiloedBorrowing(weth.address);

    expect(newSiloedBorrowing).to.be.eq(true, 'Invalid siloed borrowing state');
  });

  it('Sets siloed borrowing through the risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;

    const oldSiloedBorrowing = await helpersContract.getSiloedBorrowing(weth.address);

    expect(await configurator.connect(riskAdmin.signer).setSiloedBorrowing(weth.address, false))
      .to.emit(configurator, 'SiloedBorrowingChanged')
      .withArgs(weth.address, oldSiloedBorrowing, false);

    const newSiloedBorrowing = await helpersContract.getSiloedBorrowing(weth.address);

    expect(newSiloedBorrowing).to.be.eq(false, 'Invalid siloed borrowing state');
  });

  it('Resets the siloed borrowing mode. Tries to set siloed borrowing after the asset has been borrowed (revert expected)', async () => {
    const snap = await evmSnapshot();

    const {
      configurator,
      weth,
      dai,
      riskAdmin,
      pool,
      users: [user1, user2],
    } = testEnv;

    await configurator.connect(riskAdmin.signer).setSiloedBorrowing(weth.address, false);

    const wethAmount = utils.parseEther('1');
    const daiAmount = utils.parseEther('1000');
    // user 1 supplies WETH
    await weth.connect(user1.signer)['mint(address,uint256)'](user1.address, wethAmount);

    await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool.connect(user1.signer).supply(weth.address, wethAmount, user1.address, '0');

    // user 2 supplies DAI, borrows WETH
    await dai.connect(user2.signer)['mint(uint256)'](daiAmount);

    await dai.connect(user2.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool.connect(user2.signer).supply(dai.address, daiAmount, user2.address, '0');

    await pool.connect(user2.signer).borrow(weth.address, '100', 2, '0', user2.address);

    await expect(configurator.setSiloedBorrowing(weth.address, true)).to.be.revertedWith(
      RESERVE_DEBT_NOT_ZERO
    );

    await evmRevert(snap);
  });

  it('Sets a debt ceiling through the pool admin', async () => {
    const { configurator, helpersContract, weth, poolAdmin } = testEnv;

    const oldDebtCeiling = await helpersContract.getDebtCeiling(weth.address);

    const newDebtCeiling = '1';
    expect(
      await configurator.connect(poolAdmin.signer).setDebtCeiling(weth.address, newDebtCeiling)
    )
      .to.emit(configurator, 'DebtCeilingChanged')
      .withArgs(weth.address, oldDebtCeiling, newDebtCeiling);

    const newCeiling = await helpersContract.getDebtCeiling(weth.address);

    expect(newCeiling).to.be.eq(newDebtCeiling, 'Invalid debt ceiling');
  });

  it('Sets a debt ceiling through the risk admin', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;

    const oldDebtCeiling = await helpersContract.getDebtCeiling(weth.address);

    const newDebtCeiling = '10';
    expect(
      await configurator.connect(riskAdmin.signer).setDebtCeiling(weth.address, newDebtCeiling)
    )
      .to.emit(configurator, 'DebtCeilingChanged')
      .withArgs(weth.address, oldDebtCeiling, newDebtCeiling);

    const newCeiling = await helpersContract.getDebtCeiling(weth.address);

    expect(newCeiling).to.be.eq(newDebtCeiling, 'Invalid debt ceiling');
  });

  it('Sets a debt ceiling larger than max (revert expected)', async () => {
    const { configurator, helpersContract, weth, riskAdmin } = testEnv;

    const MAX_VALID_DEBT_CEILING = BigNumber.from('1099511627775');
    const debtCeiling = MAX_VALID_DEBT_CEILING.add(1);

    const currentCeiling = await helpersContract.getDebtCeiling(weth.address);

    await expect(
      configurator.connect(riskAdmin.signer).setDebtCeiling(weth.address, debtCeiling)
    ).to.be.revertedWith(INVALID_DEBT_CEILING);

    const newCeiling = await helpersContract.getDebtCeiling(weth.address);
    expect(newCeiling).to.be.eq(currentCeiling, 'Invalid debt ceiling');
  });

  it('Resets the WETH debt ceiling. Tries to set debt ceiling after liquidity has been provided (revert expected)', async () => {
    const {
      configurator,
      weth,
      riskAdmin,
      pool,
      users: [user1],
    } = testEnv;

    await configurator.connect(riskAdmin.signer).setDebtCeiling(weth.address, '0');

    // user 1 deposits
    await weth.connect(user1.signer)['mint(address,uint256)'](user1.address, '100');

    await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool.connect(user1.signer).supply(weth.address, '100', user1.address, '0');

    await expect(configurator.setDebtCeiling(weth.address, '100')).to.be.revertedWith(
      RESERVE_LIQUIDITY_NOT_ZERO
    );
  });

  it('Withdraws supplied liquidity, sets WETH debt ceiling', async () => {
    const {
      configurator,
      helpersContract,
      weth,
      riskAdmin,
      pool,
      users: [user1],
    } = testEnv;

    await pool.connect(user1.signer).withdraw(weth.address, MAX_UINT_AMOUNT, user1.address);

    await configurator.connect(riskAdmin.signer).setDebtCeiling(weth.address, '100');

    const newCeiling = await helpersContract.getDebtCeiling(weth.address);

    expect(newCeiling).to.be.eq('100');
  });

  it('Readds liquidity, increases WETH debt ceiling', async () => {
    const {
      configurator,
      helpersContract,
      weth,
      riskAdmin,
      pool,
      users: [user1],
    } = testEnv;

    await pool.connect(user1.signer).supply(weth.address, '100', user1.address, '0');

    await configurator.connect(riskAdmin.signer).setDebtCeiling(weth.address, '200');

    const newCeiling = await helpersContract.getDebtCeiling(weth.address);

    expect(newCeiling).to.be.eq('200');
  });

  it('Read debt ceiling decimals', async () => {
    const { helpersContract } = testEnv;
    expect(await helpersContract.getDebtCeilingDecimals()).to.be.eq(2);
  });

  it('Check that the reserves have flashloans enabled', async () => {
    const { weth, aave, usdc, dai, helpersContract } = testEnv;

    const wethFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(weth.address);
    expect(wethFlashLoanEnabled).to.be.equal(true);

    const aaveFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(aave.address);
    expect(aaveFlashLoanEnabled).to.be.equal(true);

    const usdcFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(usdc.address);
    expect(usdcFlashLoanEnabled).to.be.equal(true);

    const daiFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(dai.address);
    expect(daiFlashLoanEnabled).to.be.equal(true);
  });

  it('Disable weth flashloans', async () => {
    const { weth, configurator, helpersContract } = testEnv;

    expect(await configurator.setReserveFlashLoaning(weth.address, false));

    const wethFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(weth.address);
    expect(wethFlashLoanEnabled).to.be.equal(false);
  });
});



================================================
FILE: test-suites/debt-token-delegation-permit.spec.ts
================================================
import { evmSnapshot, evmRevert } from '@aave/deploy-v3';
import { expect } from 'chai';
import { BigNumber, utils } from 'ethers';
import { HARDHAT_CHAINID, MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import {
  buildDelegationWithSigParams,
  convertToCurrencyDecimals,
  getSignatureFromTypedData,
} from '../helpers/contracts-helpers';
import { timeLatest } from '../helpers/misc-utils';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { getTestWallets } from './helpers/utils/wallets';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { ProtocolErrors } from '../helpers/types';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('DebtToken: Permit Delegation', (testEnv: TestEnv) => {
  let snapId;

  beforeEach(async () => {
    snapId = await evmSnapshot();
  });
  afterEach(async () => {
    await evmRevert(snapId);
  });

  let daiMintedAmount: BigNumber;
  let wethMintedAmount: BigNumber;
  let testWallets;

  const MINT_AMOUNT = '1000';
  const EIP712_REVISION = '1';

  before(async () => {
    const {
      pool,
      weth,
      dai,
      deployer: user1,
      users: [user2],
    } = testEnv;
    testWallets = getTestWallets();

    // Setup the pool
    daiMintedAmount = await convertToCurrencyDecimals(dai.address, MINT_AMOUNT);
    wethMintedAmount = await convertToCurrencyDecimals(weth.address, MINT_AMOUNT);

    expect(await dai['mint(uint256)'](daiMintedAmount));
    expect(await dai.approve(pool.address, daiMintedAmount));
    expect(await pool.deposit(dai.address, daiMintedAmount, user1.address, 0));
    expect(
      await weth.connect(user2.signer)['mint(address,uint256)'](user2.address, wethMintedAmount)
    );
    expect(await weth.connect(user2.signer).approve(pool.address, wethMintedAmount));
    expect(
      await pool.connect(user2.signer).deposit(weth.address, wethMintedAmount, user2.address, 0)
    );
  });

  it('Checks the domain separator', async () => {
    const { variableDebtDai, stableDebtDai } = testEnv;
    const variableSeparator = await variableDebtDai.DOMAIN_SEPARATOR();
    const stableSeparator = await stableDebtDai.DOMAIN_SEPARATOR();

    const variableDomain = {
      name: await variableDebtDai.name(),
      version: EIP712_REVISION,
      chainId: hre.network.config.chainId,
      verifyingContract: variableDebtDai.address,
    };
    const stableDomain = {
      name: await stableDebtDai.name(),
      version: EIP712_REVISION,
      chainId: hre.network.config.chainId,
      verifyingContract: stableDebtDai.address,
    };
    const variableDomainSeparator = utils._TypedDataEncoder.hashDomain(variableDomain);
    const stableDomainSeparator = utils._TypedDataEncoder.hashDomain(stableDomain);

    expect(variableSeparator).to.be.equal(
      variableDomainSeparator,
      'Invalid variable domain separator'
    );
    expect(stableSeparator).to.be.equal(stableDomainSeparator, 'Invalid stable domain separator');
  });

  it('User 3 borrows variable interest dai on behalf of user 2 via permit', async () => {
    const {
      pool,
      variableDebtDai,
      dai,
      deployer: user1,
      users: [user2, user3],
    } = testEnv;

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = MAX_UINT_AMOUNT;
    const nonce = (await variableDebtDai.nonces(user2.address)).toNumber();
    const permitAmount = daiMintedAmount.div(3);
    const msgParams = buildDelegationWithSigParams(
      chainId,
      variableDebtDai.address,
      EIP712_REVISION,
      await variableDebtDai.name(),
      user3.address,
      nonce,
      expiration,
      permitAmount.toString()
    );

    const user2PrivateKey = testWallets[1].secretKey;
    expect(
      (await variableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');

    const { v, r, s } = getSignatureFromTypedData(user2PrivateKey, msgParams);

    expect(
      await variableDebtDai
        .connect(user1.signer)
        .delegationWithSig(user2.address, user3.address, permitAmount, expiration, v, r, s)
    );

    expect(
      (await variableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal(permitAmount);

    await pool.connect(user3.signer).borrow(dai.address, permitAmount, 2, 0, user2.address);
    expect(
      (await variableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');
  });

  it('User 3 borrows stable interest dai on behalf of user 2 via permit', async () => {
    const {
      pool,
      stableDebtDai,
      dai,
      deployer: user1,
      users: [user2, user3],
    } = testEnv;

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = MAX_UINT_AMOUNT;
    const nonce = (await stableDebtDai.nonces(user2.address)).toNumber();
    const permitAmount = daiMintedAmount.div(3);
    const msgParams = buildDelegationWithSigParams(
      chainId,
      stableDebtDai.address,
      EIP712_REVISION,
      await stableDebtDai.name(),
      user3.address,
      nonce,
      expiration,
      permitAmount.toString()
    );

    const user2PrivateKey = testWallets[1].secretKey;
    expect(
      (await stableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');

    const { v, r, s } = getSignatureFromTypedData(user2PrivateKey, msgParams);

    expect(
      await stableDebtDai
        .connect(user1.signer)
        .delegationWithSig(user2.address, user3.address, permitAmount, expiration, v, r, s)
    );

    expect(
      (await stableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal(permitAmount);

    await pool
      .connect(user3.signer)
      .borrow(dai.address, daiMintedAmount.div(10), 1, 0, user2.address);

    expect(
      (await stableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal(permitAmount.sub(daiMintedAmount.div(10)));
  });

  it('Stable debt delegation with delegator == address(0)', async () => {
    const {
      stableDebtDai,
      deployer: user1,
      users: [user2, user3],
    } = testEnv;

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = MAX_UINT_AMOUNT;
    const nonce = (await stableDebtDai.nonces(user2.address)).toNumber();
    const EIP712_REVISION = await stableDebtDai.EIP712_REVISION();
    const permitAmount = daiMintedAmount.div(3);
    const msgParams = buildDelegationWithSigParams(
      chainId,
      stableDebtDai.address,
      EIP712_REVISION,
      await stableDebtDai.name(),
      user3.address,
      nonce,
      expiration,
      permitAmount.toString()
    );

    const user2PrivateKey = testWallets[1].secretKey;
    expect(
      (await stableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');

    const { v, r, s } = getSignatureFromTypedData(user2PrivateKey, msgParams);

    await expect(
      stableDebtDai
        .connect(user1.signer)
        .delegationWithSig(ZERO_ADDRESS, user3.address, permitAmount, expiration, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.ZERO_ADDRESS_NOT_VALID);

    expect(
      (await stableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');
  });

  it('Stable debt delegation with block.timestamp > deadline', async () => {
    const {
      stableDebtDai,
      deployer: user1,
      users: [user2, user3],
    } = testEnv;

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = (await timeLatest()).sub(500).toString();
    const nonce = (await stableDebtDai.nonces(user2.address)).toNumber();
    const permitAmount = daiMintedAmount.div(3);
    const msgParams = buildDelegationWithSigParams(
      chainId,
      stableDebtDai.address,
      EIP712_REVISION,
      await stableDebtDai.name(),
      user3.address,
      nonce,
      expiration,
      permitAmount.toString()
    );

    const user2PrivateKey = testWallets[1].secretKey;
    expect(
      (await stableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');

    const { v, r, s } = getSignatureFromTypedData(user2PrivateKey, msgParams);

    await expect(
      stableDebtDai
        .connect(user1.signer)
        .delegationWithSig(user2.address, user3.address, permitAmount, expiration, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.INVALID_EXPIRATION);

    expect(
      (await stableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');
  });

  it('Stable debt delegation with wrong delegator', async () => {
    const {
      stableDebtDai,
      deployer: user1,
      users: [user2, user3],
    } = testEnv;

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = MAX_UINT_AMOUNT;
    const nonce = (await stableDebtDai.nonces(user2.address)).toNumber();
    const EIP712_REVISION = await stableDebtDai.EIP712_REVISION();
    const permitAmount = daiMintedAmount.div(3);
    const msgParams = buildDelegationWithSigParams(
      chainId,
      stableDebtDai.address,
      EIP712_REVISION,
      await stableDebtDai.name(),
      user3.address,
      nonce,
      expiration,
      permitAmount.toString()
    );

    const user2PrivateKey = testWallets[1].secretKey;
    expect(
      (await stableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');

    const { v, r, s } = getSignatureFromTypedData(user2PrivateKey, msgParams);

    await expect(
      stableDebtDai
        .connect(user1.signer)
        .delegationWithSig(user1.address, user3.address, permitAmount, expiration, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.INVALID_SIGNATURE);

    expect(
      (await stableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');
  });

  it('Variable debt delegation with delegator == address(0)', async () => {
    const {
      variableDebtDai,
      deployer: user1,
      users: [user2, user3],
    } = testEnv;

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = MAX_UINT_AMOUNT;
    const nonce = (await variableDebtDai.nonces(user2.address)).toNumber();
    const permitAmount = daiMintedAmount.div(3);
    const msgParams = buildDelegationWithSigParams(
      chainId,
      variableDebtDai.address,
      EIP712_REVISION,
      await variableDebtDai.name(),
      user3.address,
      nonce,
      expiration,
      permitAmount.toString()
    );

    const user2PrivateKey = testWallets[1].secretKey;
    expect(
      (await variableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');

    const { v, r, s } = getSignatureFromTypedData(user2PrivateKey, msgParams);

    await expect(
      variableDebtDai
        .connect(user1.signer)
        .delegationWithSig(ZERO_ADDRESS, user3.address, permitAmount, expiration, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.ZERO_ADDRESS_NOT_VALID);

    expect(
      (await variableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');
  });

  it('Variable debt delegation with block.timestamp > deadline', async () => {
    const {
      variableDebtDai,
      deployer: user1,
      users: [user2, user3],
    } = testEnv;

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = (await timeLatest()).sub(500).toString();
    const nonce = (await variableDebtDai.nonces(user2.address)).toNumber();
    const permitAmount = daiMintedAmount.div(3);
    const msgParams = buildDelegationWithSigParams(
      chainId,
      variableDebtDai.address,
      EIP712_REVISION,
      await variableDebtDai.name(),
      user3.address,
      nonce,
      expiration,
      permitAmount.toString()
    );

    const user2PrivateKey = testWallets[1].secretKey;
    expect(
      (await variableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');

    const { v, r, s } = getSignatureFromTypedData(user2PrivateKey, msgParams);

    await expect(
      variableDebtDai
        .connect(user1.signer)
        .delegationWithSig(user2.address, user3.address, permitAmount, expiration, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.INVALID_EXPIRATION);

    expect(
      (await variableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');
  });

  it('Variable debt delegation with wrong delegator', async () => {
    const {
      variableDebtDai,
      deployer: user1,
      users: [user2, user3],
    } = testEnv;

    const chainId = hre.network.config.chainId || HARDHAT_CHAINID;
    const expiration = MAX_UINT_AMOUNT;
    const nonce = (await variableDebtDai.nonces(user2.address)).toNumber();
    const permitAmount = daiMintedAmount.div(3);
    const msgParams = buildDelegationWithSigParams(
      chainId,
      variableDebtDai.address,
      EIP712_REVISION,
      await variableDebtDai.name(),
      user3.address,
      nonce,
      expiration,
      permitAmount.toString()
    );

    const user2PrivateKey = testWallets[1].secretKey;
    expect(
      (await variableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');

    const { v, r, s } = getSignatureFromTypedData(user2PrivateKey, msgParams);

    await expect(
      variableDebtDai
        .connect(user1.signer)
        .delegationWithSig(user1.address, user3.address, permitAmount, expiration, v, r, s)
    ).to.be.revertedWith(ProtocolErrors.INVALID_SIGNATURE);

    expect(
      (await variableDebtDai.borrowAllowance(user2.address, user3.address)).toString()
    ).to.be.equal('0');
  });
});



================================================
FILE: test-suites/emode.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, utils } from 'ethers';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { makeSuite, TestEnv } from './helpers/make-suite';
import './helpers/utils/wadraymath';
import { parseUnits, formatUnits, parseEther } from '@ethersproject/units';
import { evmSnapshot, evmRevert, VariableDebtToken__factory, aave } from '@aave/deploy-v3';

makeSuite('EfficiencyMode', (testEnv: TestEnv) => {
  const {
    INCONSISTENT_EMODE_CATEGORY,
    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,
    COLLATERAL_CANNOT_COVER_NEW_BORROW,
    INVALID_EMODE_CATEGORY_PARAMS,
  } = ProtocolErrors;

  let snapSetup: string;

  const CATEGORIES = {
    STABLECOINS: {
      id: BigNumber.from('1'),
      ltv: BigNumber.from('9800'),
      lt: BigNumber.from('9800'),
      lb: BigNumber.from('10100'),
      oracle: ZERO_ADDRESS,
      label: 'STABLECOINS',
    },
    ETHEREUM: {
      id: BigNumber.from('2'),
      ltv: BigNumber.from('9800'),
      lt: BigNumber.from('9800'),
      lb: BigNumber.from('10100'),
      oracle: ZERO_ADDRESS,
      label: 'ETHEREUM',
    },
  };

  before(async () => {
    const {
      pool,
      dai,
      usdc,
      weth,
      users: [user0, user1, user2],
      aaveOracle,
      aave,
      oracle,
    } = testEnv;
    const mintAmount = utils.parseEther('10000');

    await dai.connect(user0.signer)['mint(uint256)'](mintAmount);
    await usdc.connect(user0.signer)['mint(uint256)'](mintAmount);
    await weth.connect(user0.signer)['mint(address,uint256)'](user0.address, mintAmount);
    await usdc.connect(user1.signer)['mint(uint256)'](mintAmount);
    await weth.connect(user1.signer)['mint(address,uint256)'](user1.address, mintAmount);
    await dai.connect(user2.signer)['mint(uint256)'](mintAmount);

    await dai.connect(user0.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await usdc.connect(user0.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await weth.connect(user0.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await usdc.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await dai.connect(user2.signer).approve(pool.address, MAX_UINT_AMOUNT);

    snapSetup = await evmSnapshot();
  });

  it('Admin adds a category for stablecoins with DAI and USDC', async () => {
    const { configurator, helpersContract, dai, usdc, poolAdmin } = testEnv;

    const { id, ltv, lt, lb, oracle, label } = CATEGORIES.STABLECOINS;

    expect(
      await configurator.connect(poolAdmin.signer).setEModeCategory(id, ltv, lt, lb, oracle, label)
    );
    expect(await configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, id));
    expect(await configurator.connect(poolAdmin.signer).setAssetEModeCategory(usdc.address, id));

    expect(await helpersContract.getReserveEModeCategory(dai.address)).to.be.eq(id);
    expect(await helpersContract.getReserveEModeCategory(usdc.address)).to.be.eq(id);
  });

  it('Admin adds a category for ethereum with WETH', async () => {
    const { configurator, helpersContract, weth, poolAdmin } = testEnv;

    const { id, ltv, lt, lb, oracle, label } = CATEGORIES.ETHEREUM;

    expect(
      await configurator.connect(poolAdmin.signer).setEModeCategory(id, ltv, lt, lb, oracle, label)
    );
    expect(await configurator.connect(poolAdmin.signer).setAssetEModeCategory(weth.address, id));

    expect(await helpersContract.getReserveEModeCategory(weth.address)).to.be.eq(id);
  });

  it('User 0 activates eMode for stablecoins category', async () => {
    const {
      pool,
      users: [user0],
    } = testEnv;

    expect(await pool.connect(user0.signer).setUserEMode(CATEGORIES.STABLECOINS.id))
      .to.emit(pool, 'UserEModeSet')
      .withArgs(user0.address, CATEGORIES.STABLECOINS.id);

    expect(await pool.getUserEMode(user0.address)).to.be.eq(CATEGORIES.STABLECOINS.id);
  });

  it('User 0 supplies 100 DAI, user 1 supplies 100 USDC', async () => {
    const {
      pool,
      dai,
      usdc,
      helpersContract,
      users: [user0, user1],
    } = testEnv;

    expect(
      await pool
        .connect(user0.signer)
        .supply(dai.address, await convertToCurrencyDecimals(dai.address, '100'), user0.address, 0)
    );
    const { usageAsCollateralEnabled: user0UseAsCollateral } =
      await helpersContract.getUserReserveData(dai.address, user0.address);
    expect(user0UseAsCollateral).to.be.true;

    expect(
      await pool
        .connect(user1.signer)
        .supply(
          usdc.address,
          await convertToCurrencyDecimals(usdc.address, '100'),
          user1.address,
          0
        )
    );
    const { usageAsCollateralEnabled: user1UseAsCollateral } =
      await helpersContract.getUserReserveData(usdc.address, user1.address);
    expect(user1UseAsCollateral).to.be.true;
  });

  it('User 0 borrows 98 USDC and tries to deactivate eMode (revert expected)', async () => {
    const {
      pool,
      usdc,
      users: [user0],
    } = testEnv;
    expect(
      await pool
        .connect(user0.signer)
        .borrow(
          usdc.address,
          await convertToCurrencyDecimals(usdc.address, '98'),
          RateMode.Variable,
          0,
          user0.address
        )
    );

    const userCategory = await pool.getUserEMode(user0.address);
    await expect(pool.connect(user0.signer).setUserEMode(0)).to.be.revertedWith(
      HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD
    );
    expect(await pool.getUserEMode(user0.address)).to.be.eq(userCategory);
  });

  it('User 0 tries to sends aTokens to user 3 (revert expected)', async () => {
    const {
      pool,
      dai,
      aDai,
      users: [user0, , , user3],
    } = testEnv;

    expect(await pool.getUserEMode(user0.address)).to.be.eq(CATEGORIES.STABLECOINS.id);
    expect(await pool.getUserEMode(user3.address)).to.be.eq(0);

    await expect(
      aDai
        .connect(user0.signer)
        .transfer(user3.address, await convertToCurrencyDecimals(dai.address, '10'))
    ).to.be.revertedWith(HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD);

    expect(await pool.getUserEMode(user0.address)).to.be.eq(CATEGORIES.STABLECOINS.id);
    expect(await pool.getUserEMode(user3.address)).to.be.eq(0);
  });

  it('User 0 repays 50 USDC and withdraws 10 DAI', async () => {
    const {
      pool,
      dai,
      usdc,
      users: [user0],
    } = testEnv;
    expect(
      await pool
        .connect(user0.signer)
        .repay(
          usdc.address,
          await convertToCurrencyDecimals(usdc.address, '50'),
          RateMode.Variable,
          user0.address
        )
    )
      .to.emit(pool, 'Repay')
      .withArgs(
        usdc.address,
        user0.address,
        user0.address,
        await convertToCurrencyDecimals(usdc.address, '50'),
        false
      );
    expect(
      await pool
        .connect(user0.signer)
        .withdraw(dai.address, await convertToCurrencyDecimals(dai.address, '10'), user0.address)
    );
  });

  it('User 0 supplies WETH (non-category asset), increasing borrowing power', async () => {
    const {
      pool,
      helpersContract,
      weth,
      users: [user0],
    } = testEnv;
    const userDataBefore = await pool.getUserAccountData(user0.address);

    expect(
      await pool
        .connect(user0.signer)
        .supply(weth.address, await convertToCurrencyDecimals(weth.address, '1'), user0.address, 0)
    );
    const { usageAsCollateralEnabled } = await helpersContract.getUserReserveData(
      weth.address,
      user0.address
    );
    expect(usageAsCollateralEnabled).to.be.true;

    const userDataAfter = await pool.getUserAccountData(user0.address);
    expect(userDataBefore.availableBorrowsBase).to.be.lt(userDataAfter.availableBorrowsBase);
    expect(userDataBefore.totalCollateralBase).to.be.lt(userDataAfter.totalCollateralBase);
    expect(userDataBefore.totalDebtBase).to.be.eq(userDataAfter.totalDebtBase);
    expect(userDataBefore.healthFactor).to.be.lt(userDataAfter.healthFactor);
  });

  it('User 1 supplies 1 WETH and activates eMode for ethereum category', async () => {
    const {
      pool,
      helpersContract,
      weth,
      users: [, user1],
      aaveOracle,
    } = testEnv;
    const wethPrice = await aaveOracle.getAssetPrice(weth.address);

    const userDataBeforeSupply = await pool.getUserAccountData(user1.address);

    // Supply 1 WETH, increasing totalCollateralBase
    const wethToSupply = await convertToCurrencyDecimals(weth.address, '1');
    expect(await pool.connect(user1.signer).supply(weth.address, wethToSupply, user1.address, 0));
    const { usageAsCollateralEnabled } = await helpersContract.getUserReserveData(
      weth.address,
      user1.address
    );
    expect(usageAsCollateralEnabled).to.be.true;
    const userDataBeforeEMode = await pool.getUserAccountData(user1.address);
    expect(userDataBeforeSupply.totalCollateralBase).to.be.eq(
      userDataBeforeEMode.totalCollateralBase.sub(wethToSupply.wadMul(wethPrice))
    );

    // Activate EMode, increasing availableBorrowsBase
    expect(await pool.connect(user1.signer).setUserEMode(CATEGORIES.ETHEREUM.id))
      .to.emit(pool, 'UserEModeSet')
      .withArgs(user1.address, CATEGORIES.ETHEREUM.id);
    expect(await pool.getUserEMode(user1.address)).to.be.eq(CATEGORIES.ETHEREUM.id);

    const userDataAfterEMode = await pool.getUserAccountData(user1.address);
    expect(userDataBeforeEMode.totalCollateralBase).to.be.eq(
      userDataAfterEMode.totalCollateralBase
    );
    expect(userDataBeforeEMode.availableBorrowsBase).to.be.lt(
      userDataAfterEMode.availableBorrowsBase
    );
  });

  it('User 0 tries to activate eMode for ethereum category (revert expected)', async () => {
    const {
      pool,
      users: [user0],
    } = testEnv;

    const userCategory = await pool.getUserEMode(user0.address);
    await expect(
      pool.connect(user0.signer).setUserEMode(CATEGORIES.ETHEREUM.id)
    ).to.be.revertedWith(INCONSISTENT_EMODE_CATEGORY);
    expect(await pool.getUserEMode(user0.address)).to.be.eq(userCategory);
  });

  it('User 0 tries to borrow (non-category asset) WETH (revert expected)', async () => {
    const {
      pool,
      weth,
      users: [user0],
    } = testEnv;

    await expect(
      pool
        .connect(user0.signer)
        .borrow(
          weth.address,
          await convertToCurrencyDecimals(weth.address, '0.0001'),
          RateMode.Variable,
          0,
          user0.address
        )
    ).to.be.revertedWith(INCONSISTENT_EMODE_CATEGORY);
  });

  it('User 1 tries to borrow (non-category asset) DAI (revert expected)', async () => {
    const {
      pool,
      dai,
      users: [, user1],
    } = testEnv;

    await expect(
      pool
        .connect(user1.signer)
        .borrow(
          dai.address,
          await convertToCurrencyDecimals(dai.address, '10'),
          RateMode.Variable,
          0,
          user1.address
        )
    ).to.be.revertedWith(INCONSISTENT_EMODE_CATEGORY);
  });

  it('User 0 repays USDC debt and activates eMode for ethereum category', async () => {
    const {
      pool,
      usdc,
      users: [user0],
    } = testEnv;

    expect(
      await pool
        .connect(user0.signer)
        .repay(usdc.address, MAX_UINT_AMOUNT, RateMode.Variable, user0.address)
    );

    expect(await pool.connect(user0.signer).setUserEMode(CATEGORIES.ETHEREUM.id));
    expect(await pool.getUserEMode(user0.address)).to.be.eq(CATEGORIES.ETHEREUM.id);
  });

  it('User 1 activates eMode for stablecoins category', async () => {
    const {
      pool,
      users: [, user1],
    } = testEnv;

    expect(await pool.connect(user1.signer).setUserEMode(CATEGORIES.STABLECOINS.id));
    expect(await pool.getUserEMode(user1.address)).to.be.eq(CATEGORIES.STABLECOINS.id);
  });

  it('User 0 tries to borrow (non-category asset) USDC (revert expected)', async () => {
    const {
      pool,
      usdc,
      users: [user0],
    } = testEnv;

    await expect(
      pool
        .connect(user0.signer)
        .borrow(
          usdc.address,
          await convertToCurrencyDecimals(usdc.address, '5'),
          RateMode.Stable,
          0,
          user0.address
        )
    ).to.be.revertedWith(INCONSISTENT_EMODE_CATEGORY);
  });

  it('User 0 sends aTokens to user 3', async () => {
    const {
      pool,
      dai,
      aDai,
      users: [user0, , , user3],
    } = testEnv;

    expect(await pool.getUserEMode(user0.address)).to.be.eq(CATEGORIES.ETHEREUM.id);
    expect(await pool.getUserEMode(user3.address)).to.be.eq(0);

    const transferAmount = await convertToCurrencyDecimals(dai.address, '10');

    const balanceBeforeUser0 = await aDai.balanceOf(user0.address);
    const balanceBeforeUser3 = await aDai.balanceOf(user3.address);

    expect(await aDai.connect(user0.signer).transfer(user3.address, transferAmount));

    expect(await pool.getUserEMode(user0.address)).to.be.eq(CATEGORIES.ETHEREUM.id);
    expect(await pool.getUserEMode(user3.address)).to.be.eq(0);

    expect(await aDai.balanceOf(user0.address)).to.be.eq(balanceBeforeUser0.sub(transferAmount));
    expect(await aDai.balanceOf(user3.address)).to.be.eq(balanceBeforeUser3.add(transferAmount));
  });

  it('User 0 sends aTokens to user 3', async () => {
    const {
      pool,
      dai,
      aDai,
      users: [user0, , , user3],
    } = testEnv;

    expect(await pool.getUserEMode(user0.address)).to.be.eq(CATEGORIES.ETHEREUM.id);
    expect(await pool.getUserEMode(user3.address)).to.be.eq(0);

    const balanceBeforeUser0 = await aDai.balanceOf(user0.address);
    const balanceBeforeUser3 = await aDai.balanceOf(user3.address);

    const transferAmount = await convertToCurrencyDecimals(dai.address, '10');
    expect(await aDai.connect(user0.signer).transfer(user3.address, transferAmount));

    expect(await pool.getUserEMode(user0.address)).to.be.eq(CATEGORIES.ETHEREUM.id);
    expect(await pool.getUserEMode(user3.address)).to.be.eq(0);

    expect(await aDai.balanceOf(user0.address)).to.be.eq(balanceBeforeUser0.sub(transferAmount));
    expect(await aDai.balanceOf(user3.address)).to.be.eq(balanceBeforeUser3.add(transferAmount));
  });

  it('Credit delegation from EMode user, delegatee borrows non EMode asset (revert expected)', async () => {
    const snap = await evmSnapshot();
    const {
      pool,
      helpersContract,
      dai,
      weth,
      usdc,
      users: [, , , user3, user4, user5],
    } = testEnv;
    const { id } = CATEGORIES.STABLECOINS;

    expect(await helpersContract.getReserveEModeCategory(dai.address)).to.be.eq(id);
    expect(await helpersContract.getReserveEModeCategory(usdc.address)).to.be.eq(id);
    expect(await helpersContract.getReserveEModeCategory(weth.address)).to.not.be.eq(id);

    const wethData = await pool.getReserveData(weth.address);
    const variableDebtWETH = VariableDebtToken__factory.connect(
      wethData.variableDebtTokenAddress,
      user4.signer
    );

    expect(
      await weth
        .connect(user3.signer)
        ['mint(address,uint256)'](user3.address, parseUnits('100', 18))
    );
    expect(await weth.connect(user3.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(
      await pool.connect(user3.signer).supply(weth.address, parseUnits('100', 18), user3.address, 0)
    );

    expect(await dai.connect(user4.signer)['mint(uint256)'](parseUnits('100', 18)));
    expect(await dai.connect(user4.signer).approve(pool.address, MAX_UINT_AMOUNT));

    // Alice deposit 100 dai
    expect(
      await pool.connect(user4.signer).supply(dai.address, parseUnits('100', 18), user4.address, 0)
    );

    // Alice set eMode to stablecoins
    expect(await pool.connect(user4.signer).setUserEMode(CATEGORIES.STABLECOINS.id));
    expect(await pool.getUserEMode(user4.address)).to.be.eq(CATEGORIES.STABLECOINS.id);

    // Alice delegates 1 weth with variable rate to Bob.
    expect(
      await variableDebtWETH
        .connect(user4.signer)
        .approveDelegation(user5.address, parseUnits('1', 18))
    );

    const bobWethBalanceBefore = await weth.balanceOf(user5.address);

    // Bob borrows 0.01 weth on behalf of Alice (should revert)
    await expect(
      pool.connect(user5.signer).borrow(weth.address, parseUnits('0.01', 18), 2, 0, user4.address)
    ).to.be.revertedWith(INCONSISTENT_EMODE_CATEGORY);

    expect(await weth.balanceOf(user5.address)).to.be.eq(
      bobWethBalanceBefore,
      'Bob forced Alice to borrow WETH while in stablecoin emode'
    );
    await evmRevert(snap);
  });

  it('Credit delegation to EMode user, user tries do abuse EMode to liquidate delegator (revert expected)', async () => {
    const {
      pool,
      helpersContract,
      dai,
      usdc,
      users: [, , , user3, user4, user5],
    } = testEnv;
    const { id } = CATEGORIES.STABLECOINS;

    expect(await helpersContract.getReserveEModeCategory(dai.address)).to.be.eq(id);
    expect(await helpersContract.getReserveEModeCategory(usdc.address)).to.be.eq(id);

    const usdcData = await pool.getReserveData(usdc.address);
    const variableDebtUSDC = VariableDebtToken__factory.connect(
      usdcData.variableDebtTokenAddress,
      user4.signer
    );

    expect(await usdc.connect(user3.signer)['mint(uint256)'](parseUnits('100', 6)));
    expect(await usdc.connect(user3.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(
      await pool.connect(user3.signer).supply(usdc.address, parseUnits('100', 6), user3.address, 0)
    );

    expect(await dai.connect(user4.signer)['mint(uint256)'](parseUnits('100', 18)));
    expect(await dai.connect(user4.signer).approve(pool.address, MAX_UINT_AMOUNT));

    // Alice deposit 100 dai
    expect(
      await pool.connect(user4.signer).supply(dai.address, parseUnits('100', 18), user4.address, 0)
    );

    // Alice delegates 100 usdc with variable rate to Bob.
    expect(
      await variableDebtUSDC
        .connect(user4.signer)
        .approveDelegation(user5.address, parseUnits('100', 6))
    );

    // Bob set eMode to stablecoins
    expect(await pool.connect(user5.signer).setUserEMode(CATEGORIES.STABLECOINS.id));
    expect(await pool.getUserEMode(user5.address)).to.be.eq(CATEGORIES.STABLECOINS.id);

    // Bob borrows 90 usdc on behalf of Alice
    await expect(
      pool.connect(user5.signer).borrow(usdc.address, parseUnits('90', 6), 2, 0, user4.address)
    ).to.be.revertedWith(COLLATERAL_CANNOT_COVER_NEW_BORROW);

    // Alice is still in a position where she CANNOT be liquidated
    const user4Data = await pool.getUserAccountData(user4.address);
    expect(user4Data.healthFactor).to.be.gt(parseEther('1'));
  });

  it('Admin sets LTV of stablecoins eMode category to zero (revert expected)', async () => {
    const {
      configurator,
      pool,
      users: [, user1],
    } = testEnv;

    const { id } = CATEGORIES.STABLECOINS;

    const eModeData = await pool.getEModeCategoryData(id);
    const newLtv = BigNumber.from(0);

    await expect(
      configurator.setEModeCategory(
        id,
        newLtv,
        eModeData.liquidationThreshold,
        eModeData.liquidationBonus,
        eModeData.priceSource,
        eModeData.label
      )
    ).to.be.revertedWith(INVALID_EMODE_CATEGORY_PARAMS);
  });

  it('Admin sets Liquidation Threshold of stablecoins eMode category to zero (revert expected)', async () => {
    const { configurator, pool } = testEnv;

    const { id } = CATEGORIES.STABLECOINS;

    const eModeData = await pool.getEModeCategoryData(id);
    const newLiquidationThreshold = BigNumber.from(0);

    await expect(
      configurator.setEModeCategory(
        id,
        eModeData.ltv,
        newLiquidationThreshold,
        eModeData.liquidationBonus,
        eModeData.priceSource,
        eModeData.label
      )
    ).to.be.revertedWith(INVALID_EMODE_CATEGORY_PARAMS);
  });

  it('Admin lowers LTV of stablecoins eMode category below an asset within the eModes individual LTV (revert expected)', async () => {
    const { configurator, pool, dai, usdc, helpersContract } = testEnv;

    const { id } = CATEGORIES.STABLECOINS;

    const eModeData = await pool.getEModeCategoryData(id);

    // find the min LTV of assets in eMode and submit a new LTV lower
    const daiLtv = (await helpersContract.getReserveConfigurationData(dai.address)).ltv;
    const usdcLtv = (await helpersContract.getReserveConfigurationData(usdc.address)).ltv;
    const maxExistingLtv = daiLtv.sub(usdcLtv).gte(0) ? daiLtv : usdcLtv;
    const newLtv = maxExistingLtv.sub(1);

    await expect(
      configurator.setEModeCategory(
        id,
        newLtv,
        eModeData.liquidationThreshold,
        eModeData.liquidationBonus,
        eModeData.priceSource,
        eModeData.label
      )
    ).to.be.revertedWith(INVALID_EMODE_CATEGORY_PARAMS);
  });

  it('Admin lowers LTV of stablecoins eMode category, decreasing user borrowing power', async () => {
    const {
      configurator,
      pool,
      users: [, user1],
    } = testEnv;

    const { id } = CATEGORIES.STABLECOINS;

    const userDataBefore = await pool.getUserAccountData(user1.address);

    const eModeData = await pool.getEModeCategoryData(id);
    const newLtv = BigNumber.from('9500');

    expect(
      await configurator.setEModeCategory(
        id,
        newLtv,
        eModeData.liquidationThreshold,
        eModeData.liquidationBonus,
        eModeData.priceSource,
        eModeData.label
      )
    );

    const userDataAfter = await pool.getUserAccountData(user1.address);

    expect(userDataAfter.availableBorrowsBase).to.be.lt(userDataBefore.availableBorrowsBase);
  });

  it('User 1 withdraws 0.7 WETH and borrows 100 USDC', async () => {
    const {
      pool,
      weth,
      usdc,
      users: [, user1],
    } = testEnv;

    expect(
      await pool
        .connect(user1.signer)
        .withdraw(weth.address, await convertToCurrencyDecimals(weth.address, '0.7'), user1.address)
    );

    expect(
      await pool
        .connect(user1.signer)
        .borrow(
          usdc.address,
          await convertToCurrencyDecimals(usdc.address, '100'),
          RateMode.Variable,
          0,
          user1.address
        )
    );
  });

  it('Admin lowers LT of stablecoins eMode category below an asset within the eModes individual LT (revert expected)', async () => {
    const { configurator, pool } = testEnv;

    const { id } = CATEGORIES.STABLECOINS;

    const eModeData = await pool.getEModeCategoryData(id);

    const newLtv = BigNumber.from(8300);
    const newLt = BigNumber.from(8500);

    await expect(
      configurator.setEModeCategory(
        id,
        newLtv,
        newLt,
        eModeData.liquidationBonus,
        eModeData.priceSource,
        eModeData.label
      )
    ).to.be.revertedWith(INVALID_EMODE_CATEGORY_PARAMS);
  });

  it('Admin lowers LT of stablecoins eMode category, decreasing user health factor', async () => {
    const {
      configurator,
      pool,
      users: [, user1],
    } = testEnv;

    const { id } = CATEGORIES.STABLECOINS;

    const userDataBefore = await pool.getUserAccountData(user1.address);

    const eModeData = await pool.getEModeCategoryData(id);
    const newLt = eModeData.ltv;

    expect(
      await configurator.setEModeCategory(
        id,
        eModeData.ltv,
        newLt,
        eModeData.liquidationBonus,
        eModeData.priceSource,
        eModeData.label
      )
    );

    const userDataAfter = await pool.getUserAccountData(user1.address);
    expect(userDataAfter.healthFactor).to.be.lt(userDataBefore.healthFactor);
  });

  it('Admin adds a category for stablecoins with DAI (own price feed)', async () => {
    const { configurator, pool, poolAdmin, dai, usdc } = testEnv;
    const { ltv, lt, lb, label } = CATEGORIES.STABLECOINS;

    const id = 3;
    const categoryOracle = usdc.address;

    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setEModeCategory(id, ltv, lt, lb, categoryOracle, label)
    )
      .to.emit(configurator, 'EModeCategoryAdded')
      .withArgs(id, ltv, lt, lb, categoryOracle, label);

    const categoryData = await pool.getEModeCategoryData(id);
    expect(categoryData.ltv).to.be.equal(ltv, 'invalid eMode category ltv');
    expect(categoryData.liquidationThreshold).to.be.equal(
      lt,
      'invalid eMode category liq threshold'
    );
    expect(categoryData.liquidationBonus).to.be.equal(lb, 'invalid eMode category liq bonus');
    expect(categoryData.priceSource).to.be.equal(
      categoryOracle,
      'invalid eMode category price source'
    );
    expect(await configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, id));
  });

  it('User 2 supplies DAI and activates eMode for stablecoins (own price feed)', async () => {
    const {
      pool,
      dai,
      usdc,
      aaveOracle,
      users: [, , user2],
    } = testEnv;

    const id = 3;
    const daiAmount = utils.parseUnits('1000', 18);

    expect(await pool.connect(user2.signer).supply(dai.address, daiAmount, user2.address, 0));

    const daiPrice = await aaveOracle.getAssetPrice(dai.address);
    const usdcPrice = await aaveOracle.getAssetPrice(usdc.address);

    const dataBefore = await pool.getUserAccountData(user2.address);
    const expectedCollateralDaiPrice = daiAmount.wadMul(daiPrice);
    expect(dataBefore.totalCollateralBase).to.be.eq(expectedCollateralDaiPrice);

    expect(await pool.connect(user2.signer).setUserEMode(id));
    expect(await pool.getUserEMode(user2.address)).to.be.eq(id);

    const dataAfter = await pool.getUserAccountData(user2.address);
    const expectedCollateralUsdcPrice = daiAmount.wadMul(usdcPrice);
    expect(dataAfter.totalCollateralBase).to.be.eq(expectedCollateralUsdcPrice);
  });

  it('User 0 deactivate eMode', async () => {
    const {
      pool,
      users: [user0],
    } = testEnv;

    const userDataBefore = await pool.getUserAccountData(user0.address);

    expect(await pool.connect(user0.signer).setUserEMode(0));
    expect(await pool.getUserEMode(user0.address)).to.be.eq(0);

    const userDataAfter = await pool.getUserAccountData(user0.address);
    expect(userDataAfter.totalCollateralBase).to.be.eq(userDataBefore.totalCollateralBase);
    expect(userDataAfter.availableBorrowsBase).to.be.lt(userDataBefore.availableBorrowsBase);
    expect(userDataAfter.healthFactor).to.be.eq(userDataBefore.healthFactor);
  });

  it('Remove DAI from stablecoin eMode category', async () => {
    const { configurator, poolAdmin, dai, helpersContract } = testEnv;
    expect(await helpersContract.getReserveEModeCategory(dai.address)).to.not.be.eq(0);
    expect(await configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, 0));
    expect(await helpersContract.getReserveEModeCategory(dai.address)).to.be.eq(0);
  });

  it('User supplies USDC, activates eMode for ethereum category and borrowing power keeps the same', async () => {
    await evmRevert(snapSetup);

    const {
      configurator,
      helpersContract,
      weth,
      usdc,
      poolAdmin,
      pool,
      users: [user],
    } = testEnv;

    // Setup eMode category for eth, use weth oracle as price source.
    const { id, ltv, lt, lb, label } = CATEGORIES.ETHEREUM;
    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setEModeCategory(id, ltv, lt, lb, weth.address, label)
    );
    expect(await configurator.connect(poolAdmin.signer).setAssetEModeCategory(weth.address, id));
    expect(await helpersContract.getReserveEModeCategory(weth.address)).to.be.eq(id);
    const data = await pool.getEModeCategoryData(id);
    expect(data.priceSource).to.be.eq(weth.address);

    // Deposit USDC
    expect(
      await pool
        .connect(user.signer)
        .supply(usdc.address, utils.parseUnits('100', 6), user.address, 0)
    );

    // Look at power
    const baseUnit = utils.parseUnits('1', 8);
    const userDataBefore = await pool.getUserAccountData(user.address);
    expect(userDataBefore.totalCollateralBase).to.be.eq(baseUnit.mul(100));

    // Activate eMode for ETH
    expect(await pool.connect(user.signer).setUserEMode(id));

    // Look at power
    const userDataAfter = await pool.getUserAccountData(user.address);

    // Expect collateral to have equal value
    expect(userDataAfter.totalCollateralBase).to.be.eq(userDataBefore.totalCollateralBase);
    expect(userDataAfter.availableBorrowsBase).to.be.eq(userDataBefore.availableBorrowsBase);
    expect(userDataAfter.currentLiquidationThreshold).to.be.eq(
      userDataBefore.currentLiquidationThreshold
    );
    expect(userDataAfter.ltv).to.be.eq(userDataBefore.ltv);
    expect(userDataAfter.healthFactor).to.be.eq(userDataBefore.healthFactor);
  });
});



================================================
FILE: test-suites/emptyrun.coverage.spec.ts
================================================
import { makeSuite } from './helpers/make-suite';

/* Workaround to fix 0 coverage report issue */

makeSuite('Empty run for coverage', () => {});



================================================
FILE: test-suites/interest-overflow.spec.ts
================================================
import { expect } from 'chai';
import { BigNumberish, BigNumber, utils } from 'ethers';
import { impersonateAccountsHardhat } from '../helpers/misc-utils';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { getFirstSigner } from '@aave/deploy-v3/dist/helpers/utilities/signer';
import { topUpNonPayableWithEther } from './helpers/utils/funds';
import { makeSuite } from './helpers/make-suite';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import {
  MintableERC20,
  StableDebtToken,
  MockReserveInterestRateStrategy,
  MintableERC20__factory,
  MockReserveInterestRateStrategy__factory,
  AToken__factory,
  VariableDebtToken__factory,
  StableDebtToken__factory,
  MockFlashLoanReceiver__factory,
} from '../types';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { evmSnapshot, evmRevert, increaseTime } from '@aave/deploy-v3';

declare var hre: HardhatRuntimeEnvironment;
makeSuite('Interest Rate and Index Overflow', (testEnv) => {
  const { SAFECAST_UINT128_OVERFLOW } = ProtocolErrors;

  let mockToken: MintableERC20;
  let mockStableDebtToken: StableDebtToken;
  let mockRateStrategy: MockReserveInterestRateStrategy;

  let snap: string;

  before(async () => {
    const { pool, poolAdmin, configurator, dai, helpersContract, addressesProvider } = testEnv;

    mockToken = await new MintableERC20__factory(await getFirstSigner()).deploy(
      'MOCK',
      'MOCK',
      '18'
    );

    let stableDebtTokenImplementation = await new StableDebtToken__factory(
      await getFirstSigner()
    ).deploy(pool.address);
    let variableDebtTokenImplementation = await new VariableDebtToken__factory(
      await getFirstSigner()
    ).deploy(pool.address);
    const aTokenImplementation = await new AToken__factory(await getFirstSigner()).deploy(
      pool.address
    );

    mockRateStrategy = await new MockReserveInterestRateStrategy__factory(
      await getFirstSigner()
    ).deploy(addressesProvider.address, 0, 0, 0, 0, 0, 0);

    // Init the reserve
    let initInputParams: {
      aTokenImpl: string;
      stableDebtTokenImpl: string;
      variableDebtTokenImpl: string;
      underlyingAssetDecimals: BigNumberish;
      interestRateStrategyAddress: string;
      underlyingAsset: string;
      treasury: string;
      incentivesController: string;
      aTokenName: string;
      aTokenSymbol: string;
      variableDebtTokenName: string;
      variableDebtTokenSymbol: string;
      stableDebtTokenName: string;
      stableDebtTokenSymbol: string;
      params: string;
    }[] = [
      {
        aTokenImpl: aTokenImplementation.address,
        stableDebtTokenImpl: stableDebtTokenImplementation.address,
        variableDebtTokenImpl: variableDebtTokenImplementation.address,
        underlyingAssetDecimals: 18,
        interestRateStrategyAddress: mockRateStrategy.address,
        underlyingAsset: mockToken.address,
        treasury: ZERO_ADDRESS,
        incentivesController: ZERO_ADDRESS,
        aTokenName: 'AMOCK',
        aTokenSymbol: 'AMOCK',
        variableDebtTokenName: 'VMOCK',
        variableDebtTokenSymbol: 'VMOCK',
        stableDebtTokenName: 'SMOCK',
        stableDebtTokenSymbol: 'SMOCK',
        params: '0x10',
      },
    ];

    await configurator.connect(poolAdmin.signer).initReserves(initInputParams);

    // Configuration
    const daiReserveConfigurationData = await helpersContract.getReserveConfigurationData(
      dai.address
    );

    const maxCap = 68719476735;
    const inputParams: {
      asset: string;
      baseLTV: BigNumberish;
      liquidationThreshold: BigNumberish;
      liquidationBonus: BigNumberish;
      reserveFactor: BigNumberish;
      borrowCap: BigNumberish;
      supplyCap: BigNumberish;
      stableBorrowingEnabled: boolean;
      borrowingEnabled: boolean;
    }[] = [
      {
        asset: mockToken.address,
        baseLTV: daiReserveConfigurationData.ltv,
        liquidationThreshold: daiReserveConfigurationData.liquidationThreshold,
        liquidationBonus: daiReserveConfigurationData.liquidationBonus,
        reserveFactor: daiReserveConfigurationData.reserveFactor,
        borrowCap: maxCap,
        supplyCap: maxCap,
        stableBorrowingEnabled: true,
        borrowingEnabled: true,
      },
    ];

    const i = 0;
    await configurator
      .connect(poolAdmin.signer)
      .configureReserveAsCollateral(
        inputParams[i].asset,
        inputParams[i].baseLTV,
        inputParams[i].liquidationThreshold,
        inputParams[i].liquidationBonus
      );
    await configurator.connect(poolAdmin.signer).setReserveBorrowing(inputParams[i].asset, true);

    await configurator
      .connect(poolAdmin.signer)
      .setSupplyCap(inputParams[i].asset, inputParams[i].supplyCap);
    await configurator
      .connect(poolAdmin.signer)
      .setReserveFactor(inputParams[i].asset, inputParams[i].reserveFactor);

    const reserveData = await pool.getReserveData(mockToken.address);
    mockStableDebtToken = StableDebtToken__factory.connect(
      reserveData.stableDebtTokenAddress,
      await getFirstSigner()
    );
  });

  beforeEach(async () => {
    snap = await evmSnapshot();
  });

  afterEach(async () => {
    await evmRevert(snap);
  });

  it('ReserveLogic `updateInterestRates` with nextLiquidityRate > type(uint128).max (revert expected)', async () => {
    const {
      pool,
      users: [user],
    } = testEnv;

    await mockToken
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(mockToken.address, '10000'));
    await mockToken.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await mockRateStrategy.setLiquidityRate(MAX_UINT_AMOUNT);

    await expect(
      pool
        .connect(user.signer)
        .deposit(
          mockToken.address,
          await convertToCurrencyDecimals(mockToken.address, '1000'),
          user.address,
          0
        )
    ).to.be.revertedWith(SAFECAST_UINT128_OVERFLOW);
  });

  it('ReserveLogic `updateInterestRates` with nextStableRate > type(uint128).max (revert expected)', async () => {
    const {
      pool,
      users: [user],
    } = testEnv;

    await mockToken
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(mockToken.address, '10000'));
    await mockToken.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await mockRateStrategy.setStableBorrowRate(MAX_UINT_AMOUNT);

    await expect(
      pool
        .connect(user.signer)
        .deposit(
          mockToken.address,
          await convertToCurrencyDecimals(mockToken.address, '1000'),
          user.address,
          0
        )
    ).to.be.revertedWith(SAFECAST_UINT128_OVERFLOW);
  });

  it('ReserveLogic `updateInterestRates` with nextVariableRate > type(uint128).max (revert expected)', async () => {
    const {
      pool,
      users: [user],
    } = testEnv;

    await mockToken
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(mockToken.address, '10000'));
    await mockToken.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await mockRateStrategy.setVariableBorrowRate(MAX_UINT_AMOUNT);

    await expect(
      pool
        .connect(user.signer)
        .deposit(
          mockToken.address,
          await convertToCurrencyDecimals(mockToken.address, '1000'),
          user.address,
          0
        )
    ).to.be.revertedWith(SAFECAST_UINT128_OVERFLOW);
  });

  it('ReserveLogic `_updateIndexes` with nextLiquidityIndex > type(uint128).max (revert expected)', async () => {
    const {
      pool,
      users: [user],
      dai,
    } = testEnv;

    await dai
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(mockToken.address, '10000'));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(mockToken.address, '1000'),
        user.address,
        0
      );

    await mockToken
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(mockToken.address, '1000'));
    await mockToken.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(user.signer)
      .deposit(
        mockToken.address,
        await convertToCurrencyDecimals(mockToken.address, '1000'),
        user.address,
        0
      );

    // Set liquidity rate to max
    await mockRateStrategy.setLiquidityRate(BigNumber.from(2).pow(128).sub(1));
    // Borrow funds
    await pool
      .connect(user.signer)
      .borrow(
        mockToken.address,
        await convertToCurrencyDecimals(mockToken.address, '100'),
        RateMode.Variable,
        0,
        user.address
      );

    // set borrow rate to max
    await mockRateStrategy.setVariableBorrowRate(BigNumber.from(2).pow(128).sub(1));

    // Increase time such that the next liquidity index overflow because of interest
    await increaseTime(60 * 60 * 24 * 500);

    await expect(
      pool
        .connect(user.signer)
        .deposit(
          mockToken.address,
          await convertToCurrencyDecimals(mockToken.address, '1000'),
          user.address,
          0
        )
    ).to.be.revertedWith(SAFECAST_UINT128_OVERFLOW);
  });

  it('ReserveLogic `_updateIndexes` with nextVariableBorrowIndex > type(uint128).max (revert expected)', async () => {
    const {
      pool,
      users: [user],
      dai,
    } = testEnv;

    await dai
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(mockToken.address, '10000'));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(mockToken.address, '10000'),
        user.address,
        0
      );

    await mockToken
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(mockToken.address, '10000'));
    await mockToken.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(user.signer)
      .deposit(
        mockToken.address,
        await convertToCurrencyDecimals(mockToken.address, '1000'),
        user.address,
        0
      );

    await mockRateStrategy.setLiquidityRate(BigNumber.from(10).pow(27));
    await mockRateStrategy.setVariableBorrowRate(BigNumber.from(2).pow(110).sub(1));
    await pool
      .connect(user.signer)
      .borrow(
        mockToken.address,
        await convertToCurrencyDecimals(mockToken.address, '100'),
        RateMode.Variable,
        0,
        user.address
      );

    await increaseTime(60 * 60 * 24 * 365);

    await expect(
      pool
        .connect(user.signer)
        .deposit(
          mockToken.address,
          await convertToCurrencyDecimals(mockToken.address, '1000'),
          user.address,
          0
        )
    ).to.be.revertedWith(SAFECAST_UINT128_OVERFLOW);
  });

  it('ReserveLogic `cumulateToLiquidityIndex` with liquidityIndex > type(uint128).max (revert expected)', async () => {
    const {
      pool,
      users: [user],
      dai,
      aDai,
      addressesProvider,
    } = testEnv;

    const toBorrow = BigNumber.from(2).pow(80);

    await dai.connect(user.signer)['mint(uint256)'](toBorrow.add(1));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool.connect(user.signer).deposit(dai.address, 1, user.address, 0);
    await dai.connect(user.signer).transfer(aDai.address, toBorrow);

    const mockFlashLoan = await new MockFlashLoanReceiver__factory(await getFirstSigner()).deploy(
      addressesProvider.address
    );

    await expect(
      pool
        .connect(user.signer)
        .flashLoan(
          mockFlashLoan.address,
          [dai.address],
          [toBorrow],
          [RateMode.None],
          user.address,
          '0x00',
          0
        )
    ).to.be.revertedWith(SAFECAST_UINT128_OVERFLOW);
  });

  it('StableDebtToken `mint` with nextStableRate > type(uint128).max (revert expected)', async () => {
    const {
      deployer,
      pool,
      users: [user],
    } = testEnv;

    // Impersonate the Pool
    await topUpNonPayableWithEther(deployer.signer, [pool.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([pool.address]);
    const poolSigner = await hre.ethers.getSigner(pool.address);

    const rate = BigNumber.from(2).pow(128); // Max + 1

    await expect(
      mockStableDebtToken
        .connect(poolSigner)
        .mint(
          user.address,
          user.address,
          await convertToCurrencyDecimals(mockStableDebtToken.address, '100'),
          rate
        )
    ).to.be.revertedWith(SAFECAST_UINT128_OVERFLOW);
  });
});



================================================
FILE: test-suites/isolation-mode.spec.ts
================================================
const { expect } = require('chai');
import { utils, BigNumber } from 'ethers';
import { ReserveData, UserReserveData } from './helpers/utils/interfaces';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { AAVE_REFERRAL, MAX_UINT_AMOUNT, MAX_UNBACKED_MINT_CAP } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { TestEnv, makeSuite } from './helpers/make-suite';
import './helpers/utils/wadraymath';
import {
  increaseTime,
  waitForTx,
  evmSnapshot,
  evmRevert,
  advanceTimeAndBlock,
} from '@aave/deploy-v3';
import { getReserveData, getUserData } from './helpers/utils/helpers';
import { getTxCostAndTimestamp } from './helpers/actions';
import AaveConfig from '@aave/deploy-v3/dist/markets/test';
import { getACLManager } from '@aave/deploy-v3/dist/helpers/contract-getters';
import {
  calcExpectedReserveDataAfterMintUnbacked,
  configuration as calculationsConfiguration,
} from './helpers/utils/calculations';

const expectEqual = (
  actual: UserReserveData | ReserveData,
  expected: UserReserveData | ReserveData
) => {
  expect(actual).to.be.almostEqualOrEqual(expected);
};

makeSuite('Isolation mode', (testEnv: TestEnv) => {
  const ISOLATED_COLLATERAL_SUPPLIER_ROLE = utils.keccak256(
    utils.toUtf8Bytes('ISOLATED_COLLATERAL_SUPPLIER')
  );

  const depositAmount = utils.parseEther('1000');
  const borrowAmount = utils.parseEther('200');
  const ceilingAmount = '10000';

  const withdrawAmount = utils.parseEther('100');
  const feeBps = BigNumber.from(30);
  const denominatorBP = BigNumber.from(10000);
  const mintAmount = withdrawAmount.mul(denominatorBP.sub(feeBps)).div(denominatorBP);
  const bridgeProtocolFeeBps = BigNumber.from(2000);

  const {
    ASSET_NOT_BORROWABLE_IN_ISOLATION,
    DEBT_CEILING_EXCEEDED,
    USER_IN_ISOLATION_MODE_OR_LTV_ZERO,
  } = ProtocolErrors;

  let aclManager;
  let oracleBaseDecimals;
  let snapshot;

  before(async () => {
    const {
      configurator,
      dai,
      usdc,
      aave,
      users,
      poolAdmin,
      aaveOracle,
      addressesProvider,
      oracle,
    } = testEnv;
    calculationsConfiguration.reservesParams = AaveConfig.ReservesConfig;

    //set debt ceiling for aave
    await configurator.setDebtCeiling(aave.address, ceilingAmount);

    //set category 1 for DAI and USDC
    await configurator.setBorrowableInIsolation(dai.address, true);
    await configurator.setBorrowableInIsolation(usdc.address, true);

    // configure bridge
    aclManager = await getACLManager();
    await waitForTx(await aclManager.addBridge(users[2].address));

    await waitForTx(
      await configurator.connect(poolAdmin.signer).updateBridgeProtocolFee(bridgeProtocolFeeBps)
    );

    // configure oracle
    oracleBaseDecimals = (await aaveOracle.BASE_CURRENCY_UNIT()).toString().length - 1;
    await waitForTx(await addressesProvider.setPriceOracle(oracle.address));

    snapshot = await evmSnapshot();
  });

  it('User 0 supply 1000 dai.', async () => {
    const { users, pool, dai } = testEnv;
    await dai.connect(users[0].signer)['mint(uint256)'](depositAmount);
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[0].signer).supply(dai.address, depositAmount, users[0].address, 0);
  });

  it('User 1 supply 2 aave. Checks that aave is not activated as collateral.', async () => {
    const snap = await evmSnapshot();
    const { users, pool, aave, helpersContract } = testEnv;
    await aave.connect(users[1].signer)['mint(uint256)'](utils.parseEther('2'));
    await aave.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[1].signer)
      .supply(aave.address, utils.parseEther('2'), users[1].address, 0);
    const userData = await helpersContract.getUserReserveData(aave.address, users[1].address);

    expect(userData.usageAsCollateralEnabled).to.be.eq(false);
    await evmRevert(snap);
  });

  it('User 1 as ISOLATED_COLLATERAL_SUPPLIER_ROLE supply 2 aave to user 2. Checks that aave is activated as isolated collateral.', async () => {
    const snap = await evmSnapshot();
    const { users, pool, aave, helpersContract, deployer } = testEnv;

    await aave.connect(users[1].signer)['mint(uint256)'](utils.parseEther('2'));
    await aave.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await aclManager
      .connect(deployer.signer)
      .grantRole(ISOLATED_COLLATERAL_SUPPLIER_ROLE, users[1].address);
    const hasRole = await aclManager
      .connect(users[1].address)
      .hasRole(ISOLATED_COLLATERAL_SUPPLIER_ROLE, users[1].address);
    expect(hasRole).to.be.eq(true);

    await pool
      .connect(users[1].signer)
      .supply(aave.address, utils.parseEther('2'), users[2].address, 0);
    const userData = await helpersContract.getUserReserveData(aave.address, users[2].address);
    expect(userData.usageAsCollateralEnabled).to.be.eq(true);
    await evmRevert(snap);
  });

  it('User 1 supply 2 aave. Enables collateral. Checks that aave is activated as isolated collateral.', async () => {
    const { users, pool, aave, helpersContract } = testEnv;

    await aave.connect(users[1].signer)['mint(uint256)'](utils.parseEther('2'));
    await aave.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[1].signer)
      .supply(aave.address, utils.parseEther('2'), users[1].address, 0);
    await pool.connect(users[1].signer).setUserUseReserveAsCollateral(aave.address, true);
    const userData = await helpersContract.getUserReserveData(aave.address, users[1].address);

    expect(userData.usageAsCollateralEnabled).to.be.eq(true);
  });

  it('User 1 supply 1 eth. Checks that eth is NOT activated as collateral ', async () => {
    const { users, pool, weth, helpersContract } = testEnv;
    await weth
      .connect(users[1].signer)
      ['mint(address,uint256)'](users[1].address, utils.parseEther('1'));
    await weth.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[1].signer)
      .supply(weth.address, utils.parseEther('1'), users[1].address, 0);

    const userData = await helpersContract.getUserReserveData(weth.address, users[1].address);

    expect(userData.usageAsCollateralEnabled).to.be.eq(false);
  });

  it('User 1 tries to use eth as collateral (revert expected)', async () => {
    const { users, pool, weth, helpersContract } = testEnv;

    const userDataBefore = await helpersContract.getUserReserveData(weth.address, users[1].address);
    expect(userDataBefore.usageAsCollateralEnabled).to.be.eq(false);

    await expect(
      pool.connect(users[1].signer).setUserUseReserveAsCollateral(weth.address, true)
    ).to.be.revertedWith(USER_IN_ISOLATION_MODE_OR_LTV_ZERO);

    const userDataAfter = await helpersContract.getUserReserveData(weth.address, users[1].address);
    expect(userDataAfter.usageAsCollateralEnabled).to.be.eq(false);
  });

  it('User 2 deposit dai and aave, then tries to use aave as collateral (revert expected)', async () => {
    const snap = await evmSnapshot();
    const {
      users: [, , user2],
      pool,
      dai,
      aave,
      helpersContract,
    } = testEnv;

    await dai.connect(user2.signer)['mint(uint256)'](utils.parseEther('1'));
    await dai.connect(user2.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user2.signer).supply(dai.address, utils.parseEther('1'), user2.address, 0);

    await aave.connect(user2.signer)['mint(uint256)'](utils.parseEther('1'));
    await aave.connect(user2.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user2.signer).supply(aave.address, utils.parseEther('1'), user2.address, 0);

    const userDaiDataBefore = await helpersContract.getUserReserveData(dai.address, user2.address);
    expect(userDaiDataBefore.usageAsCollateralEnabled).to.be.eq(true);

    const userAaveDataBefore = await helpersContract.getUserReserveData(
      aave.address,
      user2.address
    );
    expect(userAaveDataBefore.usageAsCollateralEnabled).to.be.eq(false);

    await expect(
      pool.connect(user2.signer).setUserUseReserveAsCollateral(aave.address, true)
    ).to.be.revertedWith(USER_IN_ISOLATION_MODE_OR_LTV_ZERO);

    const userDataAfter = await helpersContract.getUserReserveData(aave.address, user2.address);
    expect(userDataAfter.usageAsCollateralEnabled).to.be.eq(false);

    await evmRevert(snap);
  });

  it('User 2 (as bridge) mint 100 unbacked dai to user 1. Checks that dai is NOT activated as collateral', async () => {
    const { users, riskAdmin, pool, configurator, dai, helpersContract } = testEnv;

    // configure unbacked cap for dai
    expect(await configurator.connect(riskAdmin.signer).setUnbackedMintCap(dai.address, '10'));
    expect(
      await configurator
        .connect(riskAdmin.signer)
        .setUnbackedMintCap(dai.address, MAX_UNBACKED_MINT_CAP)
    );

    const reserveDataBefore = await getReserveData(helpersContract, dai.address);
    const tx = await waitForTx(
      await pool.connect(users[2].signer).mintUnbacked(dai.address, mintAmount, users[1].address, 0)
    );
    const { txTimestamp } = await getTxCostAndTimestamp(tx);
    const expectedDataAfter = calcExpectedReserveDataAfterMintUnbacked(
      mintAmount.toString(),
      reserveDataBefore,
      txTimestamp
    );
    const reserveDataAfter = await getReserveData(helpersContract, dai.address);
    expectEqual(reserveDataAfter, expectedDataAfter);

    const userData = await helpersContract.getUserReserveData(dai.address, users[1].address);
    expect(userData.usageAsCollateralEnabled).to.be.eq(false);
  });

  it('User 2 (as bridge) mint 100 unbacked aave (isolated) to user 3. Checks that aave is NOT activated as collateral', async () => {
    const { users, riskAdmin, pool, configurator, aave, helpersContract } = testEnv;

    // configure unbacked cap for dai
    expect(await configurator.connect(riskAdmin.signer).setUnbackedMintCap(aave.address, '10'));
    expect(
      await configurator
        .connect(riskAdmin.signer)
        .setUnbackedMintCap(aave.address, MAX_UNBACKED_MINT_CAP)
    );

    const reserveDataBefore = await getReserveData(helpersContract, aave.address);
    const tx = await waitForTx(
      await pool
        .connect(users[2].signer)
        .mintUnbacked(aave.address, mintAmount, users[3].address, 0)
    );
    const { txTimestamp } = await getTxCostAndTimestamp(tx);
    const expectedDataAfter = calcExpectedReserveDataAfterMintUnbacked(
      mintAmount.toString(),
      reserveDataBefore,
      txTimestamp
    );
    const reserveDataAfter = await getReserveData(helpersContract, aave.address);
    expectEqual(reserveDataAfter, expectedDataAfter);

    const userData = await helpersContract.getUserReserveData(aave.address, users[3].address);
    expect(userData.usageAsCollateralEnabled).to.be.eq(false);
  });

  it('User 2 supply 100 DAI, transfers to user 1. Checks that DAI is NOT activated as collateral for user 1', async () => {
    const { dai, aDai, users, pool, helpersContract } = testEnv;

    const amount = utils.parseEther('100');
    await dai.connect(users[2].signer)['mint(uint256)'](amount);
    await dai.connect(users[2].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[2].signer).supply(dai.address, amount, users[2].address, 0);

    await aDai.connect(users[2].signer).transfer(users[1].address, amount);

    const userData = await helpersContract.getUserReserveData(dai.address, users[1].address);

    expect(userData.usageAsCollateralEnabled).to.be.eq(false);
  });

  it('User 1 withdraws everything. User supplies WETH then AAVE. Checks AAVE is not enabled as collateral', async () => {
    const { dai, aave, weth, users, pool, helpersContract } = testEnv;

    await pool
      .connect(users[1].signer)
      .withdraw(weth.address, utils.parseEther('1'), users[1].address);

    await pool
      .connect(users[1].signer)
      .withdraw(aave.address, utils.parseEther('2'), users[1].address);

    await pool.connect(users[1].signer).withdraw(dai.address, MAX_UINT_AMOUNT, users[1].address);

    const amount = utils.parseEther('1');

    await pool.connect(users[1].signer).supply(weth.address, amount, users[1].address, 0);

    await pool.connect(users[1].signer).supply(aave.address, amount, users[1].address, 0);

    const userData = await helpersContract.getUserReserveData(aave.address, users[1].address);

    expect(userData.usageAsCollateralEnabled).to.be.eq(false);
  });

  it('User 2 supplies DAI, transfers to user 1. Checks DAI is enabled as collateral', async () => {
    const { dai, aDai, users, pool, helpersContract } = testEnv;

    const amount = utils.parseEther('100');
    await dai.connect(users[2].signer)['mint(uint256)'](amount);
    await pool.connect(users[2].signer).supply(dai.address, amount, users[2].address, 0);

    await aDai.connect(users[2].signer).transfer(users[1].address, amount);

    const userData = await helpersContract.getUserReserveData(dai.address, users[1].address);
    expect(userData.usageAsCollateralEnabled).to.be.eq(true);
  });

  it('User 1 withdraws everything. User 2 supplies ETH, User 1 supplies AAVE, tries to borrow ETH (revert expected)', async () => {
    const { dai, aave, weth, users, pool } = testEnv;

    await pool
      .connect(users[1].signer)
      .withdraw(weth.address, utils.parseEther('1'), users[1].address);

    await pool
      .connect(users[1].signer)
      .withdraw(aave.address, utils.parseEther('1'), users[1].address);

    await pool
      .connect(users[1].signer)
      .withdraw(dai.address, utils.parseEther('100'), users[1].address);

    const wethAmount = utils.parseEther('1');
    await weth.connect(users[2].signer)['mint(address,uint256)'](users[2].address, wethAmount);
    await weth.connect(users[2].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[2].signer).supply(weth.address, wethAmount, users[2].address, 0);

    const aaveAmount = utils.parseEther('100');
    await aave.connect(users[1].signer)['mint(uint256)'](aaveAmount);
    await aave.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[1].signer).supply(aave.address, aaveAmount, users[1].address, 0);
    await pool.connect(users[1].signer).setUserUseReserveAsCollateral(aave.address, true);

    await expect(
      pool
        .connect(users[1].signer)
        .borrow(weth.address, utils.parseEther('0.01'), '2', 0, users[1].address)
    ).to.be.revertedWith(ASSET_NOT_BORROWABLE_IN_ISOLATION);
  });

  it('User 2 tries to borrow some ETH on behalf of User 1 (revert expected)', async () => {
    const { users, pool, dai, weth } = testEnv;

    await expect(
      pool
        .connect(users[2].signer)
        .borrow(
          weth.address,
          utils.parseEther('0.0000001'),
          RateMode.Variable,
          AAVE_REFERRAL,
          users[1].address
        )
    ).to.be.revertedWith(ASSET_NOT_BORROWABLE_IN_ISOLATION);
  });

  it('User 1 borrows 10 DAI. Check debt ceiling', async () => {
    const { dai, aave, users, pool } = testEnv;

    const borrowAmount = utils.parseEther('10');
    await expect(
      pool.connect(users[1].signer).borrow(dai.address, borrowAmount, '2', 0, users[1].address)
    )
      .to.emit(pool, 'IsolationModeTotalDebtUpdated')
      .withArgs(aave.address, 1000);

    const reserveData = await pool.getReserveData(aave.address);

    expect(reserveData.isolationModeTotalDebt).to.be.eq('1000');
  });

  it('User 3 deposits 100 AAVE, borrows 10 DAI. Check debt ceiling', async () => {
    const { dai, aave, users, pool } = testEnv;

    const aaveAmount = utils.parseEther('100');
    await aave.connect(users[3].signer)['mint(uint256)'](aaveAmount);
    await aave.connect(users[3].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[3].signer).supply(aave.address, aaveAmount, users[3].address, 0);
    await pool.connect(users[3].signer).setUserUseReserveAsCollateral(aave.address, true);

    const borrowAmount = utils.parseEther('10');
    await expect(
      pool.connect(users[3].signer).borrow(dai.address, borrowAmount, '2', 0, users[3].address)
    )
      .to.emit(pool, 'IsolationModeTotalDebtUpdated')
      .withArgs(aave.address, 2000);
    const reserveData = await pool.getReserveData(aave.address);

    expect(reserveData.isolationModeTotalDebt).to.be.eq('2000');
  });

  it('User 4 deposits 500 AAVE, tries to borrow past the debt ceiling (revert expected)', async () => {
    const { dai, aave, users, pool } = testEnv;

    const aaveAmount = utils.parseEther('500');
    await aave.connect(users[3].signer)['mint(uint256)'](aaveAmount);
    await aave.connect(users[3].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[3].signer).supply(aave.address, aaveAmount, users[3].address, 0);
    await pool.connect(users[3].signer).setUserUseReserveAsCollateral(aave.address, true);

    const borrowAmount = utils.parseEther('100');
    await expect(
      pool.connect(users[3].signer).borrow(dai.address, borrowAmount, '2', 0, users[3].address)
    ).to.be.revertedWith(DEBT_CEILING_EXCEEDED);
  });

  it('Push time forward one year. User 1, User 3 repay debt. Ensure debt ceiling is 0', async () => {
    const { dai, aave, users, pool } = testEnv;

    await increaseTime(60 * 60 * 24 * 365);

    const mintAmount = utils.parseEther('100');
    await dai.connect(users[3].signer)['mint(uint256)'](mintAmount);
    await dai.connect(users[3].signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool.connect(users[3].signer).repay(dai.address, MAX_UINT_AMOUNT, '2', users[3].address);

    await dai.connect(users[1].signer)['mint(uint256)'](mintAmount);
    await dai.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);

    await expect(
      pool.connect(users[1].signer).repay(dai.address, MAX_UINT_AMOUNT, '2', users[1].address)
    )
      .to.emit(pool, 'IsolationModeTotalDebtUpdated')
      .withArgs(aave.address, 0);
    const reserveData = await pool.getReserveData(aave.address);

    expect(reserveData.isolationModeTotalDebt).to.be.eq('0');
  });

  it('Perform liquidation of isolation mode asset', async () => {
    // We need to look at how the user getting liquidated was positioned. If the asset is isolation mode, then it needs to impact that as well
    const {
      dai,
      aave,
      oracle,
      addressesProvider,
      helpersContract,
      users: [, , , , borrower, liquidator],
      pool,
    } = testEnv;

    // Fund depositor and liquidator
    const liquidatorAmount = utils.parseUnits('1000', 18);
    await dai.connect(liquidator.signer)['mint(uint256)'](liquidatorAmount.mul(2));
    await dai.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(liquidator.signer)
      .supply(dai.address, liquidatorAmount, liquidator.address, 0);

    const userGlobalDataBefore = await pool.getUserAccountData(borrower.address);
    expect(userGlobalDataBefore.totalCollateralBase).to.be.eq(0);

    const depositAmount = utils.parseUnits('1', 18);
    await aave.connect(borrower.signer)['mint(uint256)'](depositAmount);
    await aave.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(borrower.signer).supply(aave.address, depositAmount, borrower.address, 0);
    await pool.connect(borrower.signer).setUserUseReserveAsCollateral(aave.address, true);

    const userData = await helpersContract.getUserReserveData(aave.address, borrower.address);
    expect(userData.usageAsCollateralEnabled).to.be.eq(true);

    const borrowAmount = utils.parseUnits('50', 18);
    await pool
      .connect(borrower.signer)
      .borrow(dai.address, borrowAmount, RateMode.Variable, '0', borrower.address);

    const daiPrice = await oracle.getAssetPrice(dai.address);
    await oracle.setAssetPrice(dai.address, daiPrice.mul(10));

    const userGlobalData = await pool.getUserAccountData(borrower.address);

    expect(userGlobalData.healthFactor).to.be.lt(utils.parseEther('1'));

    const isolationModeTotalDebtBefore = (await pool.getReserveData(aave.address))
      .isolationModeTotalDebt;
    const expectedAmountAfter = isolationModeTotalDebtBefore.sub(
      borrowAmount.div(2).div(BigNumber.from(10).pow(16))
    );

    await expect(
      pool
        .connect(liquidator.signer)
        .liquidationCall(aave.address, dai.address, borrower.address, borrowAmount.div(2), false)
    )
      .to.emit(pool, 'IsolationModeTotalDebtUpdated')
      .withArgs(aave.address, expectedAmountAfter);

    const isolationModeTotalDebtAfter = (await pool.getReserveData(aave.address))
      .isolationModeTotalDebt;

    expect(isolationModeTotalDebtAfter).to.be.eq(expectedAmountAfter);
  });

  it('User 5 supplies weth and dai. User 6 supplies AAVE and transfers to User 5', async () => {
    const { weth, dai, aave, aAave, users, pool, helpersContract } = testEnv;

    const wethAmount = utils.parseEther('1');
    await weth.connect(users[5].signer)['mint(address,uint256)'](users[5].address, wethAmount);
    await weth.connect(users[5].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[5].signer).supply(weth.address, wethAmount, users[5].address, 0);

    const daiAmount = utils.parseEther('100');
    await dai.connect(users[5].signer)['mint(uint256)'](daiAmount);
    await dai.connect(users[5].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[5].signer).supply(dai.address, daiAmount, users[5].address, 0);

    const aaveAmount = utils.parseEther('100');
    await aave.connect(users[6].signer)['mint(uint256)'](aaveAmount);
    await aave.connect(users[6].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[6].signer).supply(aave.address, aaveAmount, users[6].address, 0);
    await aAave.connect(users[6].signer).transfer(users[5].address, aaveAmount);

    const wethUserData = await helpersContract.getUserReserveData(weth.address, users[5].address);
    const daiUserData = await helpersContract.getUserReserveData(dai.address, users[5].address);
    const aaveUserData = await helpersContract.getUserReserveData(aave.address, users[5].address);
    expect(daiUserData.usageAsCollateralEnabled).to.be.eq(true);
    expect(wethUserData.usageAsCollateralEnabled).to.be.eq(true);
    expect(aaveUserData.usageAsCollateralEnabled).to.be.eq(false);
  });

  it('User 5 supplies isolation mode asset is liquidated by User 6', async () => {
    const { dai, aave, users, pool, helpersContract, oracle } = testEnv;

    await evmRevert(snapshot);
    snapshot = await evmSnapshot();
    // supply dai as user 6, so user 5 can borrow
    const daiAmount = utils.parseEther('700');
    await dai.connect(users[6].signer)['mint(uint256)'](daiAmount);
    await dai.connect(users[6].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[6].signer).supply(dai.address, daiAmount, users[6].address, 0);

    const aaveAmount = utils.parseEther('.3');
    await aave.connect(users[5].signer)['mint(uint256)'](aaveAmount);
    await aave.connect(users[5].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[5].signer).supply(aave.address, aaveAmount, users[5].address, 0);
    await pool.connect(users[5].signer).setUserUseReserveAsCollateral(aave.address, true);

    // borrow with health factor just above 1
    const userGlobalData = await pool.getUserAccountData(users[5].address);
    const daiPrice = await oracle.getAssetPrice(dai.address);
    let amountDAIToBorrow = await convertToCurrencyDecimals(
      dai.address,
      userGlobalData.availableBorrowsBase.div(daiPrice.toString()).percentMul(9999).toString()
    );
    await pool
      .connect(users[5].signer)
      .borrow(dai.address, amountDAIToBorrow, RateMode.Variable, 0, users[5].address);

    // advance time so health factor is less than one and liquidate
    await advanceTimeAndBlock(86400 * 365 * 100);
    const userDaiReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      users[5].address
    );
    const amountToLiquidate = userDaiReserveDataBefore.currentVariableDebt.div(2);
    await dai.connect(users[6].signer)['mint(uint256)'](daiAmount);
    await dai.connect(users[6].signer).approve(pool.address, MAX_UINT_AMOUNT);
    const tx = await pool
      .connect(users[6].signer)
      .liquidationCall(aave.address, dai.address, users[5].address, amountToLiquidate, true);
    await tx.wait();

    // confirm the newly received aave tokens (in isolation mode) cannot be used as collateral
    const userData = await helpersContract.getUserReserveData(aave.address, users[6].address);
    expect(userData.usageAsCollateralEnabled).to.be.eq(false);
  });

  it('User 1 supplies AAVE and borrows DAI in isolation, AAVE exits isolation. User 1 repay and withdraw. AAVE enters isolation again', async () => {
    await evmRevert(snapshot);

    const { pool, configurator, helpersContract, users, poolAdmin, dai, aave } = testEnv;

    // Depositor supplies DAI
    await dai.connect(users[0].signer)['mint(uint256)'](depositAmount);
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[0].signer).supply(dai.address, depositAmount, users[0].address, 0);

    // User 1 supplies AAVE in isolation mode
    const aaveAmountToSupply = utils.parseEther('2');
    await aave.connect(users[1].signer)['mint(uint256)'](aaveAmountToSupply);
    await aave.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[1].signer)
      .supply(aave.address, aaveAmountToSupply, users[1].address, 0);
    await pool.connect(users[1].signer).setUserUseReserveAsCollateral(aave.address, true);

    // User 1 borrows DAI against isolated AAVE
    const { isolationModeTotalDebt: isolationModeTotalDebtBeforeBorrow } =
      await pool.getReserveData(aave.address);
    const isolationModeTotalDebtAfterBorrow = isolationModeTotalDebtBeforeBorrow.add(1000);
    const daiAmountToBorrow = utils.parseEther('10');
    expect(
      await pool
        .connect(users[1].signer)
        .borrow(dai.address, daiAmountToBorrow, '2', 0, users[1].address)
    )
      .to.emit(pool, 'IsolationModeTotalDebtUpdated')
      .withArgs(aave.address, isolationModeTotalDebtAfterBorrow);

    const reserveDataAfterBorrow = await pool.getReserveData(aave.address);
    expect(reserveDataAfterBorrow.isolationModeTotalDebt).to.be.eq(
      isolationModeTotalDebtAfterBorrow
    );

    // AAVE exits isolation mode (debt ceiling = 0)
    const oldAaveDebtCeiling = await helpersContract.getDebtCeiling(aave.address);
    const newAaveDebtCeiling = 0;
    expect(
      await configurator.connect(poolAdmin.signer).setDebtCeiling(aave.address, newAaveDebtCeiling)
    )
      .to.emit(configurator, 'DebtCeilingChanged')
      .withArgs(aave.address, oldAaveDebtCeiling, newAaveDebtCeiling);

    expect(await helpersContract.getDebtCeiling(aave.address)).to.be.eq(newAaveDebtCeiling);
    expect((await pool.getReserveData(aave.address)).isolationModeTotalDebt).to.be.eq(
      0,
      'isolationModeTotalDebt when entering isolation mode'
    );

    // User 1 borrows 1 DAI
    await pool
      .connect(users[1].signer)
      .borrow(dai.address, utils.parseEther('1'), '2', 0, users[1].address);

    // User 1 repays debt and withdraw
    await dai.connect(users[1].signer)['mint(uint256)'](utils.parseEther('20'));
    await dai.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[1].signer).repay(dai.address, MAX_UINT_AMOUNT, '2', users[1].address);
    await pool.connect(users[1].signer).withdraw(aave.address, MAX_UINT_AMOUNT, users[1].address);

    // AAVE enters isolation mode again
    expect(await configurator.connect(poolAdmin.signer).setDebtCeiling(aave.address, 100))
      .to.emit(configurator, 'DebtCeilingChanged')
      .withArgs(aave.address, 0, 100);

    expect(await helpersContract.getDebtCeiling(aave.address)).to.be.eq(100);
    expect((await pool.getReserveData(aave.address)).isolationModeTotalDebt).to.be.eq(
      0,
      'isolationModeTotalDebt when entering isolation mode'
    );
  });
});



================================================
FILE: test-suites/liquidation-atoken.spec.ts
================================================
import { MockATokenRepayment__factory } from './../types/factories/mocks/tokens/MockATokenRepayment__factory';
import { expect } from 'chai';
import { BigNumber } from 'ethers';
import { MAX_UINT_AMOUNT, oneEther } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { calcExpectedVariableDebtTokenBalance } from './helpers/utils/calculations';
import { getUserData, getReserveData } from './helpers/utils/helpers';
import { makeSuite } from './helpers/make-suite';
import { waitForTx } from '@aave/deploy-v3';
import { HardhatRuntimeEnvironment } from 'hardhat/types';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('Pool Liquidation: Liquidator receiving aToken', (testEnv) => {
  const {
    HEALTH_FACTOR_NOT_BELOW_THRESHOLD,
    INVALID_HF,
    SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER,
    COLLATERAL_CANNOT_BE_LIQUIDATED,
  } = ProtocolErrors;

  let oracleBaseDecimals: number;

  before(async () => {
    const { aaveOracle, addressesProvider, oracle, deployer, pool, configurator, aDai, dai } =
      testEnv;
    oracleBaseDecimals = (await (await aaveOracle.BASE_CURRENCY_UNIT()).toString().length) - 1;

    await waitForTx(await addressesProvider.setPriceOracle(oracle.address));

    const aTokenRepayImpl = await new MockATokenRepayment__factory(deployer.signer).deploy(
      pool.address
    );

    await configurator.updateAToken({
      asset: dai.address,
      treasury: await aDai.RESERVE_TREASURY_ADDRESS(),
      incentivesController: await aDai.getIncentivesController(),
      name: await aDai.name(),
      symbol: await aDai.symbol(),
      implementation: aTokenRepayImpl.address,
      params: '0x',
    });
  });

  after(async () => {
    const { aaveOracle, addressesProvider } = testEnv;
    await waitForTx(await addressesProvider.setPriceOracle(aaveOracle.address));
  });

  it('Deposits WETH, borrows DAI/Check liquidation fails because health factor is above 1', async () => {
    const {
      dai,
      weth,
      users: [depositor, borrower],
      pool,
      oracle,
    } = testEnv;

    //mints DAI to depositor
    await dai
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    //approve protocol to access depositor wallet
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //user 1 deposits DAI
    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');
    await pool
      .connect(depositor.signer)
      .deposit(dai.address, amountDAItoDeposit, depositor.address, '0');

    const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '0.3');

    //mints WETH to borrower
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](borrower.address, amountETHtoDeposit);

    //approve protocol to access borrower wallet
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //user 2 deposits WETH
    await pool
      .connect(borrower.signer)
      .deposit(weth.address, amountETHtoDeposit, borrower.address, '0');

    //user 2 borrows
    const userGlobalData = await pool.getUserAccountData(borrower.address);
    const daiPrice = await oracle.getAssetPrice(dai.address);
    const amountDAIToBorrow = await convertToCurrencyDecimals(
      dai.address,
      userGlobalData.availableBorrowsBase.div(daiPrice.toString()).percentMul(9500).toString()
    );
    await pool
      .connect(borrower.signer)
      .borrow(dai.address, amountDAIToBorrow, RateMode.Variable, '0', borrower.address);

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    expect(userGlobalDataAfter.currentLiquidationThreshold).to.be.equal(
      8250,
      'Invalid liquidation threshold'
    );

    //someone tries to liquidate user 2
    await expect(
      pool.liquidationCall(weth.address, dai.address, borrower.address, 1, true)
    ).to.be.revertedWith(HEALTH_FACTOR_NOT_BELOW_THRESHOLD);
  });

  it('Drop the health factor below 1', async () => {
    const {
      dai,
      users: [, borrower],
      pool,
      oracle,
      aaveOracle,
    } = testEnv;

    const daiPrice = await oracle.getAssetPrice(dai.address);

    await oracle.setAssetPrice(dai.address, daiPrice.percentMul(11500));

    const userGlobalData = await pool.getUserAccountData(borrower.address);

    expect(userGlobalData.healthFactor).to.be.lt(oneEther, INVALID_HF);
  });

  it('Tries to liquidate a different currency than the loan principal (revert expected)', async () => {
    const {
      pool,
      users: [, borrower],
      weth,
    } = testEnv;
    //user 2 tries to borrow
    await expect(
      pool.liquidationCall(weth.address, weth.address, borrower.address, oneEther, true)
    ).to.be.revertedWith(SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER);
  });

  it('Tries to liquidate a different collateral than the borrower collateral (revert expected)', async () => {
    const {
      pool,
      dai,
      users: [, borrower],
    } = testEnv;

    await expect(
      pool.liquidationCall(dai.address, dai.address, borrower.address, oneEther, true)
    ).to.be.revertedWith(COLLATERAL_CANNOT_BE_LIQUIDATED);
  });

  it('Liquidates the borrow', async () => {
    const {
      pool,
      dai,
      aDai,
      weth,
      users: [, borrower],
      oracle,
      helpersContract,
      deployer,
    } = testEnv;

    //mints dai to the caller

    await dai['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    //approve protocol to access depositor wallet
    await dai.approve(pool.address, MAX_UINT_AMOUNT);

    const daiReserveDataBefore = await getReserveData(helpersContract, dai.address);
    const ethReserveDataBefore = await getReserveData(helpersContract, weth.address);

    const userReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const userWethReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      weth.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentVariableDebt.div(2);

    // The supply is the same, but there should be a change in who has what. The liquidator should have received what the borrower lost.
    const tx = await pool.liquidationCall(
      weth.address,
      dai.address,
      borrower.address,
      amountToLiquidate,
      true
    );

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      dai.address,
      borrower.address
    );

    const userWethReserveDataAfter = await helpersContract.getUserReserveData(
      weth.address,
      borrower.address
    );

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    const daiReserveDataAfter = await getReserveData(helpersContract, dai.address);
    const ethReserveDataAfter = await getReserveData(helpersContract, weth.address);

    const collateralPrice = await oracle.getAssetPrice(weth.address);
    const principalPrice = await oracle.getAssetPrice(dai.address);

    const collateralDecimals = (await helpersContract.getReserveConfigurationData(weth.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(dai.address))
      .decimals;

    const expectedCollateralLiquidated = principalPrice
      .mul(amountToLiquidate)
      .percentMul(10500)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    expect(expectedCollateralLiquidated).to.be.closeTo(
      userWethReserveDataBefore.currentATokenBalance.sub(
        userWethReserveDataAfter.currentATokenBalance
      ),
      2,
      'Invalid collateral amount liquidated'
    );

    if (!tx.blockNumber) {
      expect(false, 'Invalid block number');
      return;
    }

    const txTimestamp = BigNumber.from(
      (await hre.ethers.provider.getBlock(tx.blockNumber)).timestamp
    );

    const variableDebtBeforeTx = calcExpectedVariableDebtTokenBalance(
      daiReserveDataBefore,
      userReserveDataBefore,
      txTimestamp
    );

    expect(userGlobalDataAfter.healthFactor).to.be.gt(oneEther, 'Invalid health factor');

    expect(userReserveDataAfter.currentVariableDebt).to.be.closeTo(
      variableDebtBeforeTx.sub(amountToLiquidate),
      2,
      'Invalid user borrow balance after liquidation'
    );

    expect(daiReserveDataAfter.availableLiquidity).to.be.closeTo(
      daiReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    expect(ethReserveDataAfter.availableLiquidity).to.be.closeTo(
      ethReserveDataBefore.availableLiquidity,
      2,
      'Invalid collateral available liquidity'
    );

    expect(daiReserveDataAfter.totalLiquidity).to.be.closeTo(
      daiReserveDataBefore.totalLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal total liquidity'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(daiReserveDataAfter.liquidityIndex).to.be.gte(
      daiReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(daiReserveDataAfter.liquidityRate).to.be.lt(
      daiReserveDataBefore.liquidityRate,
      'Invalid liquidity APY'
    );

    // We need the scaled balances here
    expect(ethReserveDataAfter.totalLiquidity).to.be.closeTo(
      ethReserveDataBefore.totalLiquidity,
      2,
      'Invalid collateral total liquidity'
    );

    expect(
      (await helpersContract.getUserReserveData(weth.address, deployer.address))
        .usageAsCollateralEnabled
    ).to.be.true;

    // check handleRepayment function is correctly called
    await expect(tx)
      .to.emit(MockATokenRepayment__factory.connect(aDai.address, borrower.signer), 'MockRepayment')
      .withArgs(deployer.address, borrower.address, amountToLiquidate);
  });

  it('User 3 deposits 2000 USDC, user 4 0.12 WETH, user 4 borrows - drops HF, liquidates the borrow', async () => {
    const {
      users: [, , , depositor, borrower],
      pool,
      usdc,
      oracle,
      weth,
      helpersContract,
    } = testEnv;

    //mints USDC to depositor
    await usdc
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '2000'));

    //approve protocol to access depositor wallet
    await usdc.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //user 3 deposits 1000 USDC
    const amountUSDCtoDeposit = await convertToCurrencyDecimals(usdc.address, '2000');

    await pool
      .connect(depositor.signer)
      .deposit(usdc.address, amountUSDCtoDeposit, depositor.address, '0');

    //user 4 deposits ETH
    const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '0.12');

    //mints WETH to borrower
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](borrower.address, amountETHtoDeposit);

    //approve protocol to access borrower wallet
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(borrower.signer)
      .deposit(weth.address, amountETHtoDeposit, borrower.address, '0');

    //user 4 borrows
    const userGlobalData = await pool.getUserAccountData(borrower.address);

    const usdcPrice = await oracle.getAssetPrice(usdc.address);

    const amountUSDCToBorrow = await convertToCurrencyDecimals(
      usdc.address,
      userGlobalData.availableBorrowsBase.div(usdcPrice).percentMul(9502).toString()
    );

    await pool
      .connect(borrower.signer)
      .borrow(usdc.address, amountUSDCToBorrow, RateMode.Stable, '0', borrower.address);

    //drops HF below 1

    await oracle.setAssetPrice(usdc.address, usdcPrice.percentMul(11200));

    //mints dai to the liquidator

    await usdc['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    //approve protocol to access depositor wallet
    await usdc.approve(pool.address, MAX_UINT_AMOUNT);

    const userReserveDataBefore = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const usdcReserveDataBefore = await getReserveData(helpersContract, usdc.address);
    const ethReserveDataBefore = await getReserveData(helpersContract, weth.address);
    const userWethReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      weth.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2);

    await pool.liquidationCall(
      weth.address,
      usdc.address,
      borrower.address,
      amountToLiquidate,
      true
    );

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const userWethReserveDataAfter = await helpersContract.getUserReserveData(
      weth.address,
      borrower.address
    );

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    const usdcReserveDataAfter = await getReserveData(helpersContract, usdc.address);
    const ethReserveDataAfter = await getReserveData(helpersContract, weth.address);

    const collateralPrice = await oracle.getAssetPrice(weth.address);
    const principalPrice = await oracle.getAssetPrice(usdc.address);

    const collateralDecimals = (await helpersContract.getReserveConfigurationData(weth.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(usdc.address))
      .decimals;

    const expectedCollateralLiquidated = principalPrice
      .mul(amountToLiquidate)
      .percentMul(10500)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    expect(expectedCollateralLiquidated).to.be.eq(
      userWethReserveDataBefore.currentATokenBalance.sub(
        userWethReserveDataAfter.currentATokenBalance
      ),
      'Invalid collateral amount liquidated'
    );

    expect(userGlobalDataAfter.healthFactor).to.be.gt(oneEther, 'Invalid health factor');

    expect(userReserveDataAfter.currentStableDebt).to.be.closeTo(
      userReserveDataBefore.currentStableDebt.sub(amountToLiquidate),
      2,
      'Invalid user borrow balance after liquidation'
    );

    expect(usdcReserveDataAfter.availableLiquidity).to.be.closeTo(
      usdcReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    expect(usdcReserveDataAfter.totalLiquidity).to.be.closeTo(
      usdcReserveDataBefore.totalLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal total liquidity'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(usdcReserveDataAfter.liquidityIndex).to.be.gte(
      usdcReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(usdcReserveDataAfter.liquidityRate).to.be.lt(
      usdcReserveDataBefore.liquidityRate,
      'Invalid liquidity APY'
    );

    expect(ethReserveDataAfter.availableLiquidity).to.be.closeTo(
      ethReserveDataBefore.availableLiquidity,
      2,
      'Invalid collateral available liquidity'
    );

    expect(ethReserveDataAfter.totalLiquidity).to.be.closeTo(
      ethReserveDataBefore.totalLiquidity,
      2,
      'Invalid collateral total liquidity'
    );
  });
});



================================================
FILE: test-suites/liquidation-edge.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, utils } from 'ethers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { RateMode } from '../helpers/types';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';

import './helpers/utils/wadraymath';
import {
  evmSnapshot,
  evmRevert,
  waitForTx,
  AToken__factory,
  StableDebtToken__factory,
  VariableDebtToken__factory,
} from '@aave/deploy-v3';

makeSuite('Pool Liquidation: Edge cases', (testEnv: TestEnv) => {
  let snap: string;

  beforeEach(async () => {
    snap = await evmSnapshot();
  });
  afterEach(async () => {
    await evmRevert(snap);
  });

  before(async () => {
    const { addressesProvider, oracle } = testEnv;

    await waitForTx(await addressesProvider.setPriceOracle(oracle.address));
  });

  after(async () => {
    const { aaveOracle, addressesProvider } = testEnv;
    await waitForTx(await addressesProvider.setPriceOracle(aaveOracle.address));
  });

  it('ValidationLogic `executeLiquidationCall` where user has variable and stable debt, but variable debt is insufficient to cover the full liquidation amount', async () => {
    const { pool, users, dai, weth, oracle } = testEnv;

    const depositor = users[0];
    const borrower = users[1];

    // Deposit dai
    await dai
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000000'));
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '10000'),
        depositor.address,
        0
      );

    // Deposit eth, borrow dai
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](borrower.address, utils.parseEther('0.9'));
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(borrower.signer)
      .deposit(weth.address, utils.parseEther('0.9'), borrower.address, 0);

    const daiPrice = await oracle.getAssetPrice(dai.address);

    await oracle.setAssetPrice(dai.address, daiPrice.percentDiv('2700'));

    // Borrow
    await pool
      .connect(borrower.signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '500'),
        RateMode.Stable,
        0,
        borrower.address
      );

    // Borrow
    await pool
      .connect(borrower.signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '220'),
        RateMode.Variable,
        0,
        borrower.address
      );

    await oracle.setAssetPrice(dai.address, daiPrice.percentMul(600_00));

    expect(
      await pool
        .connect(depositor.signer)
        .liquidationCall(weth.address, dai.address, borrower.address, MAX_UINT_AMOUNT, false)
    );
  });

  it('Liquidation repay asset completely, asset should not be set as borrowed anymore', async () => {
    const { pool, users, dai, usdc, weth, oracle } = testEnv;

    const depositor = users[0];
    const borrower = users[1];

    // Deposit dai
    await dai
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000000'));
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '10000'),
        depositor.address,
        0
      );

    // Deposit usdc
    await usdc
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));
    await usdc.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .deposit(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, '1000'),
        depositor.address,
        0
      );

    // Deposit eth, borrow dai
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](borrower.address, utils.parseEther('0.9'));
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(borrower.signer)
      .deposit(weth.address, utils.parseEther('0.9'), borrower.address, 0);

    // Borrow usdc
    await pool
      .connect(borrower.signer)
      .borrow(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, '1000'),
        RateMode.Variable,
        0,
        borrower.address
      );

    // Borrow dai stable
    await pool
      .connect(borrower.signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '100'),
        RateMode.Stable,
        0,
        borrower.address
      );

    // Borrow dai variable
    await pool
      .connect(borrower.signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '100'),
        RateMode.Variable,
        0,
        borrower.address
      );

    // Increase usdc price to allow liquidation
    const usdcPrice = await oracle.getAssetPrice(usdc.address);
    await oracle.setAssetPrice(usdc.address, usdcPrice.mul(10));

    const daiData = await pool.getReserveData(dai.address);
    const variableDebtToken = VariableDebtToken__factory.connect(
      daiData.variableDebtTokenAddress,
      depositor.signer
    );
    const stableDebtToken = StableDebtToken__factory.connect(
      daiData.stableDebtTokenAddress,
      depositor.signer
    );

    expect(await variableDebtToken.balanceOf(borrower.address)).to.be.gt(0);
    expect(await stableDebtToken.balanceOf(borrower.address)).to.be.gt(0);

    const userConfigBefore = BigNumber.from(
      (await pool.getUserConfiguration(borrower.address)).data
    );

    expect(
      await pool
        .connect(depositor.signer)
        .liquidationCall(weth.address, dai.address, borrower.address, MAX_UINT_AMOUNT, false)
    );

    const userConfigAfter = BigNumber.from(
      (await pool.getUserConfiguration(borrower.address)).data
    );

    const isBorrowing = (conf, id) =>
      conf
        .div(BigNumber.from(2).pow(BigNumber.from(id).mul(2)))
        .and(1)
        .gt(0);

    expect(await variableDebtToken.balanceOf(borrower.address)).to.be.eq(0);
    expect(await stableDebtToken.balanceOf(borrower.address)).to.be.eq(0);

    expect(isBorrowing(userConfigBefore, daiData.id)).to.be.true;
    expect(isBorrowing(userConfigAfter, daiData.id)).to.be.false;
  });

  it('Liquidate the whole WETH collateral with 10% liquidation fee, asset should not be set as collateralized anymore', async () => {
    const { pool, users, dai, usdc, weth, aWETH, oracle, configurator } = testEnv;

    await configurator.setLiquidationProtocolFee(weth.address, '1000'); // 10%

    const depositor = users[0];
    const borrower = users[1];

    // Deposit dai
    await dai
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000000'));
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '10000'),
        depositor.address,
        0
      );

    // Deposit usdc
    await usdc
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000000'));
    await usdc.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .deposit(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, '1000'),
        depositor.address,
        0
      );

    // Deposit eth, borrow dai
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](borrower.address, utils.parseEther('0.9'));
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(borrower.signer)
      .deposit(weth.address, utils.parseEther('0.9'), borrower.address, 0);

    // Borrow usdc
    await pool
      .connect(borrower.signer)
      .borrow(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, '1000'),
        RateMode.Variable,
        0,
        borrower.address
      );

    // Borrow dai stable
    await pool
      .connect(borrower.signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '100'),
        RateMode.Stable,
        0,
        borrower.address
      );

    // Borrow dai variable
    await pool
      .connect(borrower.signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '100'),
        RateMode.Variable,
        0,
        borrower.address
      );

    // HF = (0.9 * 0.85) / (1000 * 0.0005 + 100 * 0.0005 + 100 * 0.0005) = 1.275

    // Increase usdc price to allow liquidation
    const usdcPrice = await oracle.getAssetPrice(usdc.address);
    await oracle.setAssetPrice(usdc.address, usdcPrice.mul(10));

    // HF = (0.9 * 0.85) / (1000 * 0.005 + 100 * 0.0005 + 100 * 0.0005) = 0.15
    //
    // close factor = 1
    // $WETH_collateral = 0.9
    // $USDC_debt = 1000 * 0.005 = 5

    const wethData = await pool.getReserveData(weth.address);
    const aWETHToken = AToken__factory.connect(wethData.aTokenAddress, depositor.signer);

    expect(await aWETHToken.balanceOf(borrower.address)).to.be.gt(0);

    const userConfigBefore = BigNumber.from(
      (await pool.getUserConfiguration(borrower.address)).data
    );

    expect(await usdc.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(
      await pool
        .connect(depositor.signer)
        .liquidationCall(weth.address, usdc.address, borrower.address, MAX_UINT_AMOUNT, false)
    );

    const userConfigAfter = BigNumber.from(
      (await pool.getUserConfiguration(borrower.address)).data
    );

    const isUsingAsCollateral = (conf, id) =>
      conf
        .div(BigNumber.from(2).pow(BigNumber.from(id).mul(2).add(1)))
        .and(1)
        .gt(0);

    expect(await aWETHToken.balanceOf(borrower.address)).to.be.eq(0);

    expect(isUsingAsCollateral(userConfigBefore, wethData.id)).to.be.true;
    expect(isUsingAsCollateral(userConfigAfter, wethData.id)).to.be.false;
  });
});



================================================
FILE: test-suites/liquidation-emode-interest.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, utils } from 'ethers';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { calcExpectedVariableDebtTokenBalance } from './helpers/utils/calculations';
import { getReserveData, getUserData } from './helpers/utils/helpers';
import { makeSuite, TestEnv } from './helpers/make-suite';
import './helpers/utils/wadraymath';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { waitForTx, increaseTime } from '@aave/deploy-v3';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('Pool Liquidation: Liquidates borrows in eMode through interest', (testEnv: TestEnv) => {
  const { INVALID_HF } = ProtocolErrors;

  const CATEGORY = {
    id: BigNumber.from('1'),
    ltv: BigNumber.from('9800'),
    lt: BigNumber.from('9850'),
    lb: BigNumber.from('10100'),
    oracle: ZERO_ADDRESS,
    label: 'STABLECOINS',
  };

  before(async () => {
    const { addressesProvider, oracle } = testEnv;

    await waitForTx(await addressesProvider.setPriceOracle(oracle.address));
  });

  after(async () => {
    const { aaveOracle, addressesProvider } = testEnv;
    await waitForTx(await addressesProvider.setPriceOracle(aaveOracle.address));
  });

  it('Adds category id 1 (stablecoins)', async () => {
    const { configurator, pool, poolAdmin } = testEnv;

    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setEModeCategory(
          CATEGORY.id,
          CATEGORY.ltv,
          CATEGORY.lt,
          CATEGORY.lb,
          CATEGORY.oracle,
          CATEGORY.label
        )
    );

    const categoryData = await pool.getEModeCategoryData(CATEGORY.id);

    expect(categoryData.ltv).to.be.equal(CATEGORY.ltv, 'invalid eMode category ltv');
    expect(categoryData.liquidationThreshold).to.be.equal(
      CATEGORY.lt,
      'invalid eMode category liq threshold'
    );
    expect(categoryData.liquidationBonus).to.be.equal(
      CATEGORY.lb,
      'invalid eMode category liq bonus'
    );
    expect(categoryData.priceSource).to.be.equal(
      CATEGORY.oracle,
      'invalid eMode category price source'
    );
  });

  it('Add DAI and USDC to category id 1', async () => {
    const { configurator, poolAdmin, dai, usdc } = testEnv;

    expect(
      await configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, CATEGORY.id)
    );
    expect(
      await configurator.connect(poolAdmin.signer).setAssetEModeCategory(usdc.address, CATEGORY.id)
    );
  });

  it('Someone funds the DAI pool', async () => {
    const {
      pool,
      users: [daiFunder],
      dai,
    } = testEnv;
    const supplyAmount = utils.parseUnits('10000', 18);

    await dai.connect(daiFunder.signer)['mint(uint256)'](supplyAmount);
    await dai.connect(daiFunder.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool.connect(daiFunder.signer).supply(dai.address, supplyAmount, daiFunder.address, 0);
  });

  it('Deposit USDC with eMode', async () => {
    const {
      pool,
      users: [, borrower],
      usdc,
    } = testEnv;

    await usdc.connect(borrower.signer)['mint(uint256)'](utils.parseUnits('10000', 6));
    await usdc.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(borrower.signer)
      .supply(usdc.address, utils.parseUnits('10000', 6), borrower.address, 0);

    await pool.connect(borrower.signer).setUserEMode(CATEGORY.id);
  });

  it('Borrow as much DAI as possible', async () => {
    const {
      pool,
      users: [, borrower],
      dai,
      oracle,
    } = testEnv;

    const userGlobalData = await pool.getUserAccountData(borrower.address);
    const daiPrice = await oracle.getAssetPrice(dai.address);

    const amountDAIToBorrow = await convertToCurrencyDecimals(
      dai.address,
      userGlobalData.availableBorrowsBase.div(daiPrice).toString()
    );

    await pool
      .connect(borrower.signer)
      .borrow(dai.address, amountDAIToBorrow, RateMode.Variable, 0, borrower.address);
  });

  it('Drop HF below 1', async () => {
    const {
      users: [, borrower],
      pool,
    } = testEnv;

    const userGlobalDataBefore = await pool.getUserAccountData(borrower.address);
    expect(userGlobalDataBefore.healthFactor).to.be.gt(utils.parseUnits('1', 18), INVALID_HF);
    await increaseTime(60 * 60 * 24 * 3);

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);
    expect(userGlobalDataAfter.healthFactor).to.be.lt(utils.parseUnits('1', 18), INVALID_HF);
  });

  it('Liquidates the borrow', async () => {
    const {
      dai,
      usdc,
      users: [, borrower, liquidator],
      pool,
      oracle,
      helpersContract,
    } = testEnv;

    await dai.connect(liquidator.signer)['mint(uint256)'](utils.parseUnits('100000', 18));
    await dai.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const daiReserveDataBefore = await getReserveData(helpersContract, dai.address);
    const usdcReserveDataBefore = await getReserveData(helpersContract, usdc.address);
    const userReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentVariableDebt.div(2);
    const userGlobalDataBefore = await pool.getUserAccountData(borrower.address);

    const tx = await pool
      .connect(liquidator.signer)
      .liquidationCall(usdc.address, dai.address, borrower.address, amountToLiquidate, false);

    const daiReserveDataAfter = await getReserveData(helpersContract, dai.address);
    const usdcReserveDataAfter = await getReserveData(helpersContract, usdc.address);
    const userReserveDataAfter = await helpersContract.getUserReserveData(
      dai.address,
      borrower.address
    );

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    expect(userGlobalDataAfter.healthFactor).to.be.gt(userGlobalDataBefore.healthFactor);
    expect(userGlobalDataAfter.totalCollateralBase).to.be.lt(
      userGlobalDataBefore.totalCollateralBase
    );
    expect(userGlobalDataAfter.totalDebtBase).to.be.lt(userGlobalDataBefore.totalDebtBase);

    const collateralPrice = await oracle.getAssetPrice(usdc.address);
    const principalPrice = await oracle.getAssetPrice(dai.address);
    const collateralDecimals = (await helpersContract.getReserveConfigurationData(usdc.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(dai.address))
      .decimals;

    const expectedCollateralLiquidated = principalPrice
      .mul(amountToLiquidate)
      .percentMul(CATEGORY.lb)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    if (!tx.blockNumber) {
      expect(false, 'Invalid block number');
      return;
    }

    const txTimestamp = BigNumber.from(
      (await hre.ethers.provider.getBlock(tx.blockNumber)).timestamp
    );

    const variableDebtBeforeTx = calcExpectedVariableDebtTokenBalance(
      daiReserveDataBefore,
      userReserveDataBefore,
      txTimestamp
    );

    expect(userReserveDataAfter.currentVariableDebt).to.be.closeTo(
      variableDebtBeforeTx.sub(amountToLiquidate),
      2,
      'Invalid user borrow balance after liquidation'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(daiReserveDataAfter.liquidityIndex).to.be.gte(
      daiReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(daiReserveDataAfter.liquidityRate).to.be.lt(
      daiReserveDataBefore.liquidityRate,
      'Invalid liquidity APY'
    );

    expect(daiReserveDataAfter.availableLiquidity).to.be.closeTo(
      daiReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    expect(usdcReserveDataAfter.availableLiquidity).to.be.closeTo(
      usdcReserveDataBefore.availableLiquidity.sub(expectedCollateralLiquidated),
      2,
      'Invalid collateral available liquidity'
    );
  });
});



================================================
FILE: test-suites/liquidation-emode.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, utils } from 'ethers';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { getReserveData, getUserData } from './helpers/utils/helpers';
import './helpers/utils/wadraymath';
import { evmRevert, evmSnapshot, waitForTx } from '@aave/deploy-v3';

makeSuite('Pool Liquidation: Liquidates borrows in eMode with price change', (testEnv: TestEnv) => {
  const { INVALID_HF } = ProtocolErrors;

  const CATEGORY = {
    id: BigNumber.from('1'),
    ltv: BigNumber.from('9800'),
    lt: BigNumber.from('9850'),
    lb: BigNumber.from('10100'),
    oracle: ZERO_ADDRESS,
    label: 'STABLECOINS',
  };

  let snap: string;

  before(async () => {
    const { addressesProvider, oracle } = testEnv;
    await waitForTx(await addressesProvider.setPriceOracle(oracle.address));
    snap = await evmSnapshot();
  });

  after(async () => {
    const { aaveOracle, addressesProvider } = testEnv;
    await waitForTx(await addressesProvider.setPriceOracle(aaveOracle.address));
  });

  it('Adds category id 1 (stablecoins)', async () => {
    const { configurator, pool, poolAdmin } = testEnv;

    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setEModeCategory(
          1,
          CATEGORY.ltv,
          CATEGORY.lt,
          CATEGORY.lb,
          CATEGORY.oracle,
          CATEGORY.label
        )
    );

    const categoryData = await pool.getEModeCategoryData(CATEGORY.id);

    expect(categoryData.ltv).to.be.equal(CATEGORY.ltv, 'invalid eMode category ltv');
    expect(categoryData.liquidationThreshold).to.be.equal(
      CATEGORY.lt,
      'invalid eMode category liq threshold'
    );
    expect(categoryData.liquidationBonus).to.be.equal(
      CATEGORY.lb,
      'invalid eMode category liq bonus'
    );
    expect(categoryData.priceSource).to.be.equal(
      CATEGORY.oracle,
      'invalid eMode category price source'
    );
  });

  it('Add DAI and USDC to category id 1', async () => {
    const { configurator, pool, helpersContract, poolAdmin, dai, usdc } = testEnv;

    await configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, CATEGORY.id);
    await configurator.connect(poolAdmin.signer).setAssetEModeCategory(usdc.address, CATEGORY.id);

    expect(await helpersContract.getReserveEModeCategory(dai.address)).to.be.eq(CATEGORY.id);
    expect(await helpersContract.getReserveEModeCategory(usdc.address)).to.be.eq(CATEGORY.id);
  });

  it('Someone funds the DAI pool', async () => {
    const {
      pool,
      users: [daiFunder],
      dai,
    } = testEnv;
    const supplyAmount = utils.parseUnits('1', 36);

    await dai.connect(daiFunder.signer)['mint(uint256)'](supplyAmount);
    await dai.connect(daiFunder.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool.connect(daiFunder.signer).supply(dai.address, supplyAmount, daiFunder.address, 0);
  });

  it('Deposit USDC with eMode', async () => {
    const {
      pool,
      users: [, depositor],
      usdc,
    } = testEnv;

    await usdc.connect(depositor.signer)['mint(uint256)'](utils.parseUnits('10000', 6));
    await usdc.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(depositor.signer)
      .supply(usdc.address, utils.parseUnits('10000', 6), depositor.address, 0);

    await pool.connect(depositor.signer).setUserEMode(CATEGORY.id);
    expect(await pool.getUserEMode(depositor.address)).to.be.eq(CATEGORY.id);
  });

  it('Borrow 98% LTV in dai', async () => {
    const {
      pool,
      users: [, depositor],
      dai,
      oracle,
    } = testEnv;

    const userGlobalData = await pool.getUserAccountData(depositor.address);
    const daiPrice = await oracle.getAssetPrice(dai.address);

    const amountDAIToBorrow = await convertToCurrencyDecimals(
      dai.address,
      userGlobalData.availableBorrowsBase.div(daiPrice).toString()
    );

    await pool
      .connect(depositor.signer)
      .borrow(dai.address, amountDAIToBorrow, RateMode.Variable, 0, depositor.address);
  });

  it('Drop HF below 1', async () => {
    const {
      dai,
      users: [, depositor],
      pool,
      oracle,
    } = testEnv;

    const daiPrice = await oracle.getAssetPrice(dai.address);

    const userGlobalDataBefore = await pool.getUserAccountData(depositor.address);
    expect(userGlobalDataBefore.healthFactor).to.be.gt(utils.parseUnits('1', 18));

    await oracle.setAssetPrice(
      dai.address,
      daiPrice.mul(userGlobalDataBefore.healthFactor).div(utils.parseUnits('1', 18))
    );

    const userGlobalDataMid = await pool.getUserAccountData(depositor.address);
    expect(userGlobalDataMid.healthFactor).to.be.gt(utils.parseUnits('1', 18));

    await oracle.setAssetPrice(dai.address, (await oracle.getAssetPrice(dai.address)).add(1));

    const userGlobalDataAfter = await pool.getUserAccountData(depositor.address);
    expect(userGlobalDataAfter.healthFactor).to.be.lt(utils.parseUnits('1', 18), INVALID_HF);
  });

  it('Liquidates the borrow', async () => {
    const {
      dai,
      usdc,
      users: [, borrower, , liquidator],
      pool,
      oracle,
      helpersContract,
    } = testEnv;

    await dai.connect(liquidator.signer)['mint(uint256)'](utils.parseUnits('100000', 18));
    await dai.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const daiReserveDataBefore = await getReserveData(helpersContract, dai.address);
    const usdcReserveDataBefore = await getReserveData(helpersContract, usdc.address);
    const userReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentVariableDebt.div(2);

    const userGlobalDataBefore = await pool.getUserAccountData(borrower.address);

    await pool
      .connect(liquidator.signer)
      .liquidationCall(usdc.address, dai.address, borrower.address, amountToLiquidate, false);

    const daiReserveDataAfter = await getReserveData(helpersContract, dai.address);
    const usdcReserveDataAfter = await getReserveData(helpersContract, usdc.address);
    const userReserveDataAfter = await helpersContract.getUserReserveData(
      dai.address,
      borrower.address
    );

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);
    expect(userGlobalDataAfter.healthFactor).to.be.gt(userGlobalDataBefore.healthFactor);
    expect(userGlobalDataAfter.totalCollateralBase).to.be.lt(
      userGlobalDataBefore.totalCollateralBase
    );
    expect(userGlobalDataAfter.totalDebtBase).to.be.lt(userGlobalDataBefore.totalDebtBase);

    const collateralPrice = await oracle.getAssetPrice(usdc.address);
    const principalPrice = await oracle.getAssetPrice(dai.address);
    const collateralDecimals = (await helpersContract.getReserveConfigurationData(usdc.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(dai.address))
      .decimals;

    const expectedCollateralLiquidated = principalPrice
      .mul(amountToLiquidate)
      .percentMul(CATEGORY.lb)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    expect(userReserveDataAfter.currentVariableDebt).to.be.closeTo(
      userReserveDataBefore.currentVariableDebt.sub(amountToLiquidate),
      3,
      'Invalid user borrow balance after liquidation'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(daiReserveDataAfter.liquidityIndex).to.be.eq(
      daiReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(daiReserveDataAfter.liquidityRate).to.be.eq(0, 'Invalid liquidity APY');

    expect(daiReserveDataAfter.availableLiquidity).to.be.closeTo(
      daiReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    expect(usdcReserveDataAfter.availableLiquidity).to.be.closeTo(
      usdcReserveDataBefore.availableLiquidity.sub(expectedCollateralLiquidated),
      2,
      'Invalid collateral available liquidity'
    );
  });

  it('Liquidation of non-eMode collateral with eMode debt for user in EMode', async () => {
    await evmRevert(snap);
    snap = await evmSnapshot();

    const {
      helpersContract,
      oracle,
      configurator,
      pool,
      poolAdmin,
      dai,
      usdc,
      weth,
      aWETH,
      users: [user1, user2],
    } = testEnv;

    // Create category
    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setEModeCategory(
          1,
          CATEGORY.ltv,
          CATEGORY.lt,
          CATEGORY.lb,
          CATEGORY.oracle,
          CATEGORY.label
        )
    );

    const categoryData = await pool.getEModeCategoryData(CATEGORY.id);

    expect(categoryData.ltv).to.be.equal(CATEGORY.ltv, 'invalid eMode category ltv');
    expect(categoryData.liquidationThreshold).to.be.equal(
      CATEGORY.lt,
      'invalid eMode category liq threshold'
    );
    expect(categoryData.liquidationBonus).to.be.equal(
      CATEGORY.lb,
      'invalid eMode category liq bonus'
    );
    expect(categoryData.priceSource).to.be.equal(
      CATEGORY.oracle,
      'invalid eMode category price source'
    );

    // Add Dai and USDC to category
    await configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, CATEGORY.id);
    await configurator.connect(poolAdmin.signer).setAssetEModeCategory(usdc.address, CATEGORY.id);
    expect(await helpersContract.getReserveEModeCategory(dai.address)).to.be.eq(CATEGORY.id);
    expect(await helpersContract.getReserveEModeCategory(usdc.address)).to.be.eq(CATEGORY.id);

    // User 1 supply 1 dai + 1 eth, user 2 supply 10000 usdc
    const wethSupplyAmount = utils.parseUnits('1', 18);
    const daiSupplyAmount = utils.parseUnits('1', 18);
    const usdcSupplyAmount = utils.parseUnits('10000', 6);

    expect(await dai.connect(user1.signer)['mint(uint256)'](daiSupplyAmount));
    expect(
      await weth.connect(user1.signer)['mint(address,uint256)'](user1.address, wethSupplyAmount)
    );
    expect(await usdc.connect(user2.signer)['mint(uint256)'](usdcSupplyAmount.mul(2)));

    expect(await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(await usdc.connect(user2.signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(await pool.connect(user1.signer).supply(dai.address, daiSupplyAmount, user1.address, 0));
    expect(
      await pool.connect(user1.signer).supply(weth.address, wethSupplyAmount, user1.address, 0)
    );
    expect(
      await pool.connect(user2.signer).supply(usdc.address, usdcSupplyAmount, user2.address, 0)
    );

    // Activate emode
    expect(await pool.connect(user1.signer).setUserEMode(CATEGORY.id));

    // Borrow a as much usdc as possible
    const userData = await pool.getUserAccountData(user1.address);
    const toBorrow = userData.availableBorrowsBase.div(100);

    expect(
      await pool
        .connect(user1.signer)
        .borrow(usdc.address, toBorrow, RateMode.Variable, 0, user1.address)
    );

    // Drop weth price
    const wethPrice = await oracle.getAssetPrice(weth.address);

    const userGlobalDataBefore = await pool.getUserAccountData(user1.address);
    expect(userGlobalDataBefore.healthFactor).to.be.gt(utils.parseUnits('1', 18));

    await oracle.setAssetPrice(weth.address, wethPrice.percentMul(9000));

    const userGlobalDataAfter = await pool.getUserAccountData(user1.address);
    expect(userGlobalDataAfter.healthFactor).to.be.lt(utils.parseUnits('1', 18), INVALID_HF);

    const balanceBefore = await aWETH.balanceOf(user1.address);

    // Liquidate
    await pool
      .connect(user2.signer)
      .liquidationCall(weth.address, usdc.address, user1.address, toBorrow.div(2), false);

    const balanceAfter = await aWETH.balanceOf(user1.address);

    const debtPrice = await oracle.getAssetPrice(usdc.address);
    const collateralPrice = await oracle.getAssetPrice(weth.address);

    const wethConfig = await helpersContract.getReserveConfigurationData(weth.address);

    const expectedCollateralLiquidated = debtPrice
      .mul(toBorrow.div(2))
      .percentMul(wethConfig.liquidationBonus)
      .mul(BigNumber.from(10).pow(18))
      .div(collateralPrice.mul(BigNumber.from(10).pow(6)));

    const collateralLiquidated = balanceBefore.sub(balanceAfter);
    expect(collateralLiquidated).to.be.closeTo(expectedCollateralLiquidated, 2);
  });

  it('Liquidation of eMode collateral with eMode debt in EMode with custom price feed', async () => {
    await evmRevert(snap);
    snap = await evmSnapshot();

    const {
      helpersContract,
      oracle,
      configurator,
      pool,
      poolAdmin,
      dai,
      usdc,
      weth,
      aDai,
      users: [user1, user2],
    } = testEnv;

    // We need an extra oracle for prices. USe user address as asset in price oracle
    const EMODE_ORACLE_ADDRESS = user1.address;
    await oracle.setAssetPrice(EMODE_ORACLE_ADDRESS, utils.parseUnits('1', 8));
    await oracle.setAssetPrice(dai.address, utils.parseUnits('0.99', 8));
    await oracle.setAssetPrice(usdc.address, utils.parseUnits('1.01', 8));
    await oracle.setAssetPrice(weth.address, utils.parseUnits('4000', 8));

    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setEModeCategory(
          1,
          CATEGORY.ltv,
          CATEGORY.lt,
          CATEGORY.lb,
          EMODE_ORACLE_ADDRESS,
          CATEGORY.label
        )
    );

    const categoryData = await pool.getEModeCategoryData(CATEGORY.id);

    expect(categoryData.ltv).to.be.equal(CATEGORY.ltv, 'invalid eMode category ltv');
    expect(categoryData.liquidationThreshold).to.be.equal(
      CATEGORY.lt,
      'invalid eMode category liq threshold'
    );
    expect(categoryData.liquidationBonus).to.be.equal(
      CATEGORY.lb,
      'invalid eMode category liq bonus'
    );
    expect(categoryData.priceSource).to.be.equal(
      EMODE_ORACLE_ADDRESS,
      'invalid eMode category price source'
    );

    // Add Dai and USDC to category
    await configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, CATEGORY.id);
    await configurator.connect(poolAdmin.signer).setAssetEModeCategory(usdc.address, CATEGORY.id);
    expect(await helpersContract.getReserveEModeCategory(dai.address)).to.be.eq(CATEGORY.id);
    expect(await helpersContract.getReserveEModeCategory(usdc.address)).to.be.eq(CATEGORY.id);

    // User 1 supply 5000 dai + 1 eth, user 2 supply 10000 usdc
    const wethSupplyAmount = utils.parseUnits('1', 18);
    const daiSupplyAmount = utils.parseUnits('5000', 18);
    const usdcSupplyAmount = utils.parseUnits('10000', 6);

    expect(await dai.connect(user1.signer)['mint(uint256)'](daiSupplyAmount));
    expect(
      await weth.connect(user1.signer)['mint(address,uint256)'](user1.address, wethSupplyAmount)
    );
    expect(await usdc.connect(user2.signer)['mint(uint256)'](usdcSupplyAmount.mul(2)));

    expect(await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(await usdc.connect(user2.signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(await pool.connect(user1.signer).supply(dai.address, daiSupplyAmount, user1.address, 0));
    expect(
      await pool.connect(user1.signer).supply(weth.address, wethSupplyAmount, user1.address, 0)
    );
    expect(
      await pool.connect(user2.signer).supply(usdc.address, usdcSupplyAmount, user2.address, 0)
    );

    // Activate emode
    expect(await pool.connect(user1.signer).setUserEMode(CATEGORY.id));

    // Borrow as much usdc as possible
    const userData = await pool.getUserAccountData(user1.address);
    const toBorrow = userData.availableBorrowsBase.div(100);

    expect(
      await pool
        .connect(user1.signer)
        .borrow(usdc.address, toBorrow, RateMode.Variable, 0, user1.address)
    );

    // Increase EMODE oracle price
    const oraclePrice = await oracle.getAssetPrice(EMODE_ORACLE_ADDRESS);

    const userGlobalDataBefore = await pool.getUserAccountData(user1.address);
    expect(userGlobalDataBefore.healthFactor).to.be.gt(utils.parseUnits('1', 18));

    await oracle.setAssetPrice(EMODE_ORACLE_ADDRESS, oraclePrice.mul(2));

    const userGlobalDataAfter = await pool.getUserAccountData(user1.address);
    expect(userGlobalDataAfter.healthFactor).to.be.lt(utils.parseUnits('1', 18), INVALID_HF);

    const balanceBefore = await aDai.balanceOf(user1.address);

    // Liquidate
    await pool
      .connect(user2.signer)
      .liquidationCall(dai.address, usdc.address, user1.address, toBorrow.div(2), false);

    const balanceAfter = await aDai.balanceOf(user1.address);

    const debtPrice = await oracle.getAssetPrice(EMODE_ORACLE_ADDRESS);
    const collateralPrice = await oracle.getAssetPrice(EMODE_ORACLE_ADDRESS);

    const expectedCollateralLiquidated = debtPrice
      .mul(toBorrow.div(2))
      .percentMul(CATEGORY.lb)
      .mul(BigNumber.from(10).pow(18))
      .div(collateralPrice.mul(BigNumber.from(10).pow(6)));

    const collateralLiquidated = balanceBefore.sub(balanceAfter);

    expect(collateralLiquidated).to.be.closeTo(expectedCollateralLiquidated, 2);
  });

  it('Liquidation of non-eMode collateral with eMode debt in eMode with custom price feed', async () => {
    await evmRevert(snap);
    snap = await evmSnapshot();

    const {
      helpersContract,
      oracle,
      configurator,
      pool,
      poolAdmin,
      dai,
      usdc,
      weth,
      aWETH,
      users: [user1, user2],
    } = testEnv;

    // We need an extra oracle for prices. USe user address as asset in price oracle
    const EMODE_ORACLE_ADDRESS = user1.address;
    await oracle.setAssetPrice(EMODE_ORACLE_ADDRESS, utils.parseUnits('1', 8));
    await oracle.setAssetPrice(dai.address, utils.parseUnits('0.99', 8));
    await oracle.setAssetPrice(usdc.address, utils.parseUnits('1.01', 8));
    await oracle.setAssetPrice(weth.address, utils.parseUnits('4000', 8));

    // Create category
    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setEModeCategory(
          1,
          CATEGORY.ltv,
          CATEGORY.lt,
          CATEGORY.lb,
          EMODE_ORACLE_ADDRESS,
          CATEGORY.label
        )
    );

    const categoryData = await pool.getEModeCategoryData(CATEGORY.id);

    expect(categoryData.ltv).to.be.equal(CATEGORY.ltv, 'invalid eMode category ltv');
    expect(categoryData.liquidationThreshold).to.be.equal(
      CATEGORY.lt,
      'invalid eMode category liq threshold'
    );
    expect(categoryData.liquidationBonus).to.be.equal(
      CATEGORY.lb,
      'invalid eMode category liq bonus'
    );
    expect(categoryData.priceSource).to.be.equal(
      EMODE_ORACLE_ADDRESS,
      'invalid eMode category price source'
    );

    // Add Dai and USDC to category
    await configurator.connect(poolAdmin.signer).setAssetEModeCategory(dai.address, CATEGORY.id);
    await configurator.connect(poolAdmin.signer).setAssetEModeCategory(usdc.address, CATEGORY.id);
    expect(await helpersContract.getReserveEModeCategory(dai.address)).to.be.eq(CATEGORY.id);
    expect(await helpersContract.getReserveEModeCategory(usdc.address)).to.be.eq(CATEGORY.id);

    // User 1 supply 1 dai + 1 eth, user 2 supply 10000 usdc
    const wethSupplyAmount = utils.parseUnits('1', 18);
    const daiSupplyAmount = utils.parseUnits('1', 18);
    const usdcSupplyAmount = utils.parseUnits('10000', 6);

    expect(await dai.connect(user1.signer)['mint(uint256)'](daiSupplyAmount));
    expect(
      await weth.connect(user1.signer)['mint(address,uint256)'](user1.address, wethSupplyAmount)
    );
    expect(await usdc.connect(user2.signer)['mint(uint256)'](usdcSupplyAmount.mul(2)));

    expect(await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(await usdc.connect(user2.signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(await pool.connect(user1.signer).supply(dai.address, daiSupplyAmount, user1.address, 0));
    expect(
      await pool.connect(user1.signer).supply(weth.address, wethSupplyAmount, user1.address, 0)
    );
    expect(
      await pool.connect(user2.signer).supply(usdc.address, usdcSupplyAmount, user2.address, 0)
    );

    // Activate emode
    expect(await pool.connect(user1.signer).setUserEMode(CATEGORY.id));

    // Borrow a as much usdc as possible
    const userData = await pool.getUserAccountData(user1.address);
    const toBorrow = userData.availableBorrowsBase.div(100);

    expect(
      await pool
        .connect(user1.signer)
        .borrow(usdc.address, toBorrow, RateMode.Variable, 0, user1.address)
    );

    // Drop weth price
    const oraclePrice = await oracle.getAssetPrice(EMODE_ORACLE_ADDRESS);

    const userGlobalDataBefore = await pool.getUserAccountData(user1.address);
    expect(userGlobalDataBefore.healthFactor).to.be.gt(utils.parseUnits('1', 18));

    await oracle.setAssetPrice(EMODE_ORACLE_ADDRESS, oraclePrice.mul(2));

    const userGlobalDataAfter = await pool.getUserAccountData(user1.address);
    expect(userGlobalDataAfter.healthFactor).to.be.lt(utils.parseUnits('1', 18), INVALID_HF);

    const balanceBefore = await aWETH.balanceOf(user1.address);

    // Liquidate
    await pool
      .connect(user2.signer)
      .liquidationCall(weth.address, usdc.address, user1.address, toBorrow.div(2), false);

    const balanceAfter = await aWETH.balanceOf(user1.address);

    const debtPrice = await oracle.getAssetPrice(EMODE_ORACLE_ADDRESS);
    const collateralPrice = await oracle.getAssetPrice(weth.address);

    const wethConfig = await helpersContract.getReserveConfigurationData(weth.address);

    const expectedCollateralLiquidated = debtPrice
      .mul(toBorrow.div(2))
      .percentMul(wethConfig.liquidationBonus)
      .mul(BigNumber.from(10).pow(18))
      .div(collateralPrice.mul(BigNumber.from(10).pow(6)));

    const collateralLiquidated = balanceBefore.sub(balanceAfter);
    expect(collateralLiquidated).to.be.closeTo(expectedCollateralLiquidated, 2);
  });
});



================================================
FILE: test-suites/liquidation-underlying.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, utils } from 'ethers';
import { MAX_UINT_AMOUNT, oneEther } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { calcExpectedStableDebtTokenBalance } from './helpers/utils/calculations';
import { getReserveData, getUserData } from './helpers/utils/helpers';
import { makeSuite } from './helpers/make-suite';
import { increaseTime, waitForTx } from '@aave/deploy-v3';

import { HardhatRuntimeEnvironment } from 'hardhat/types';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('Pool Liquidation: Liquidator receiving the underlying asset', (testEnv) => {
  const { INVALID_HF } = ProtocolErrors;

  before(async () => {
    const { addressesProvider, oracle } = testEnv;

    await waitForTx(await addressesProvider.setPriceOracle(oracle.address));
  });

  after(async () => {
    const { aaveOracle, addressesProvider } = testEnv;
    await waitForTx(await addressesProvider.setPriceOracle(aaveOracle.address));
  });

  it("It's not possible to liquidate on a non-active collateral or a non active principal", async () => {
    const {
      configurator,
      weth,
      pool,
      users: [, user],
      dai,
    } = testEnv;
    await configurator.setReserveActive(weth.address, false);

    await expect(
      pool.liquidationCall(weth.address, dai.address, user.address, utils.parseEther('1000'), false)
    ).to.be.revertedWith('27');

    await configurator.setReserveActive(weth.address, true);

    await configurator.setReserveActive(dai.address, false);

    await expect(
      pool.liquidationCall(weth.address, dai.address, user.address, utils.parseEther('1000'), false)
    ).to.be.revertedWith('27');

    await configurator.setReserveActive(dai.address, true);
  });

  it('Deposits WETH, borrows DAI', async () => {
    const {
      dai,
      weth,
      users: [depositor, borrower],
      pool,
      oracle,
    } = testEnv;

    //mints DAI to depositor
    await dai
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    //approve protocol to access depositor wallet
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //user 1 deposits 1000 DAI
    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await pool
      .connect(depositor.signer)
      .deposit(dai.address, amountDAItoDeposit, depositor.address, '0');
    //user 2 deposits  ETH
    const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '0.06775');

    //mints WETH to borrower
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](
        borrower.address,
        await convertToCurrencyDecimals(weth.address, '1000')
      );

    //approve protocol to access the borrower wallet
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(borrower.signer)
      .deposit(weth.address, amountETHtoDeposit, borrower.address, '0');

    //user 2 borrows

    const userGlobalData = await pool.getUserAccountData(borrower.address);
    const daiPrice = await oracle.getAssetPrice(dai.address);

    const amountDAIToBorrow = await convertToCurrencyDecimals(
      dai.address,
      userGlobalData.availableBorrowsBase.div(daiPrice).percentMul(9500).toString()
    );

    await pool
      .connect(borrower.signer)
      .borrow(dai.address, amountDAIToBorrow, RateMode.Stable, '0', borrower.address);

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    expect(userGlobalDataAfter.currentLiquidationThreshold).to.be.equal(8250, INVALID_HF);
  });

  it('Drop the health factor below 1', async () => {
    const {
      dai,
      users: [, borrower],
      pool,
      oracle,
    } = testEnv;

    const daiPrice = await oracle.getAssetPrice(dai.address);

    await oracle.setAssetPrice(dai.address, daiPrice.percentMul(11800));

    const userGlobalData = await pool.getUserAccountData(borrower.address);

    expect(userGlobalData.healthFactor).to.be.lt(oneEther, INVALID_HF);
  });

  it('Liquidates the borrow', async () => {
    const {
      dai,
      weth,
      users: [, borrower, , liquidator],
      pool,
      oracle,
      helpersContract,
    } = testEnv;

    //mints dai to the liquidator
    await dai
      .connect(liquidator.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    //approve protocol to access the liquidator wallet
    await dai.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const daiReserveDataBefore = await getReserveData(helpersContract, dai.address);
    const ethReserveDataBefore = await getReserveData(helpersContract, weth.address);

    const userReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2);

    await increaseTime(100);

    const tx = await pool
      .connect(liquidator.signer)
      .liquidationCall(weth.address, dai.address, borrower.address, amountToLiquidate, false);

    const userReserveDataAfter = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const daiReserveDataAfter = await getReserveData(helpersContract, dai.address);
    const ethReserveDataAfter = await getReserveData(helpersContract, weth.address);

    const collateralPrice = await oracle.getAssetPrice(weth.address);
    const principalPrice = await oracle.getAssetPrice(dai.address);

    const collateralDecimals = (await helpersContract.getReserveConfigurationData(weth.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(dai.address))
      .decimals;

    const expectedCollateralLiquidated = principalPrice
      .mul(amountToLiquidate)
      .percentMul(10500)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    if (!tx.blockNumber) {
      expect(false, 'Invalid block number');
      return;
    }
    const txTimestamp = BigNumber.from(
      (await hre.ethers.provider.getBlock(tx.blockNumber)).timestamp
    );

    const stableDebtBeforeTx = calcExpectedStableDebtTokenBalance(
      userReserveDataBefore.principalStableDebt,
      userReserveDataBefore.stableBorrowRate,
      userReserveDataBefore.stableRateLastUpdated,
      txTimestamp
    );

    expect(userReserveDataAfter.currentStableDebt).to.be.closeTo(
      stableDebtBeforeTx.sub(amountToLiquidate),
      2,
      'Invalid user debt after liquidation'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(daiReserveDataAfter.liquidityIndex).to.be.gte(
      daiReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(daiReserveDataAfter.liquidityRate).to.be.lt(
      daiReserveDataBefore.liquidityRate,
      'Invalid liquidity APY'
    );

    expect(daiReserveDataAfter.totalLiquidity).to.be.closeTo(
      daiReserveDataBefore.totalLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal total liquidity'
    );

    expect(ethReserveDataAfter.totalLiquidity).to.be.closeTo(
      ethReserveDataBefore.totalLiquidity.sub(expectedCollateralLiquidated),
      2,
      'Invalid collateral total liquidity'
    );

    expect(daiReserveDataAfter.availableLiquidity).to.be.closeTo(
      daiReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    expect(ethReserveDataAfter.availableLiquidity).to.be.closeTo(
      ethReserveDataBefore.availableLiquidity.sub(expectedCollateralLiquidated),
      2,
      'Invalid collateral available liquidity'
    );
  });

  it('User 3 deposits 1000 USDC, user 4 0.06775 WETH, user 4 borrows - drops HF, liquidates the borrow', async () => {
    const {
      usdc,
      users: [, , , depositor, borrower, liquidator],
      pool,
      oracle,
      weth,
      helpersContract,
    } = testEnv;

    //mints USDC to depositor
    await usdc
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    //approve protocol to access depositor wallet
    await usdc.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //depositor deposits 1000 USDC
    const amountUSDCtoDeposit = await convertToCurrencyDecimals(usdc.address, '1000');

    await pool
      .connect(depositor.signer)
      .deposit(usdc.address, amountUSDCtoDeposit, depositor.address, '0');

    //borrower deposits ETH
    const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '0.06775');

    //mints WETH to borrower
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](
        borrower.address,
        await convertToCurrencyDecimals(weth.address, '1000')
      );

    //approve protocol to access the borrower wallet
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(borrower.signer)
      .deposit(weth.address, amountETHtoDeposit, borrower.address, '0');

    //borrower borrows
    const userGlobalData = await pool.getUserAccountData(borrower.address);

    const usdcPrice = await oracle.getAssetPrice(usdc.address);

    const amountUSDCToBorrow = await convertToCurrencyDecimals(
      usdc.address,
      userGlobalData.availableBorrowsBase.div(usdcPrice).percentMul(9502).toString()
    );

    await pool
      .connect(borrower.signer)
      .borrow(usdc.address, amountUSDCToBorrow, RateMode.Stable, '0', borrower.address);

    //drops HF below 1
    await oracle.setAssetPrice(usdc.address, usdcPrice.percentMul(11200));

    //mints dai to the liquidator

    await usdc
      .connect(liquidator.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    //approve protocol to access depositor wallet
    await usdc.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const userReserveDataBefore = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const usdcReserveDataBefore = await getReserveData(helpersContract, usdc.address);
    const ethReserveDataBefore = await getReserveData(helpersContract, weth.address);

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2);

    await pool
      .connect(liquidator.signer)
      .liquidationCall(weth.address, usdc.address, borrower.address, amountToLiquidate, false);

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    const usdcReserveDataAfter = await getReserveData(helpersContract, usdc.address);
    const ethReserveDataAfter = await getReserveData(helpersContract, weth.address);

    const collateralPrice = await oracle.getAssetPrice(weth.address);
    const principalPrice = await oracle.getAssetPrice(usdc.address);

    const collateralDecimals = (await helpersContract.getReserveConfigurationData(weth.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(usdc.address))
      .decimals;

    const expectedCollateralLiquidated = principalPrice
      .mul(BigNumber.from(amountToLiquidate))
      .percentMul(10500)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    expect(userGlobalDataAfter.healthFactor).to.be.gt(oneEther, 'Invalid health factor');

    expect(userReserveDataAfter.currentStableDebt).to.be.closeTo(
      userReserveDataBefore.currentStableDebt.sub(amountToLiquidate),
      2,
      'Invalid user borrow balance after liquidation'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(usdcReserveDataAfter.liquidityIndex).to.be.gte(
      usdcReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(usdcReserveDataAfter.liquidityRate).to.be.lt(
      usdcReserveDataBefore.liquidityRate,
      'Invalid liquidity APY'
    );

    expect(usdcReserveDataAfter.totalLiquidity).to.be.closeTo(
      usdcReserveDataBefore.totalLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal total liquidity'
    );

    expect(ethReserveDataAfter.totalLiquidity).to.be.closeTo(
      ethReserveDataBefore.totalLiquidity.sub(expectedCollateralLiquidated),
      2,
      'Invalid collateral total liquidity'
    );

    expect(usdcReserveDataAfter.availableLiquidity).to.be.closeTo(
      usdcReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    expect(ethReserveDataAfter.availableLiquidity).to.be.closeTo(
      ethReserveDataBefore.availableLiquidity.sub(expectedCollateralLiquidated),
      2,
      'Invalid collateral available liquidity'
    );
  });

  it('User 4 deposits 0.033 AAVE - drops HF, liquidates the AAVE, which results on a lower amount being liquidated', async () => {
    const {
      aave,
      usdc,
      users: [, , , , borrower, liquidator],
      pool,
      oracle,
      helpersContract,
    } = testEnv;

    //mints AAVE to borrower
    await aave
      .connect(borrower.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(aave.address, '0.033'));

    //approve protocol to access the borrower wallet
    await aave.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //borrower deposits 1 AAVE
    const amountToDeposit = await convertToCurrencyDecimals(aave.address, '0.033');

    await pool
      .connect(borrower.signer)
      .deposit(aave.address, amountToDeposit, borrower.address, '0');
    const usdcPrice = await oracle.getAssetPrice(usdc.address);

    //drops HF below 1
    await oracle.setAssetPrice(usdc.address, usdcPrice.percentMul(11400));

    //mints usdc to the liquidator
    await usdc
      .connect(liquidator.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    //approve protocol to access liquidator wallet
    await usdc.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const userReserveDataBefore = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const usdcReserveDataBefore = await getReserveData(helpersContract, usdc.address);
    const aaveReserveDataBefore = await getReserveData(helpersContract, aave.address);

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2);

    const collateralPrice = await oracle.getAssetPrice(aave.address);
    const principalPrice = await oracle.getAssetPrice(usdc.address);

    await pool
      .connect(liquidator.signer)
      .liquidationCall(aave.address, usdc.address, borrower.address, amountToLiquidate, false);

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    const usdcReserveDataAfter = await getReserveData(helpersContract, usdc.address);
    const aaveReserveDataAfter = await getReserveData(helpersContract, aave.address);

    const aaveConfiguration = await helpersContract.getReserveConfigurationData(aave.address);
    const collateralDecimals = aaveConfiguration.decimals;
    const liquidationBonus = aaveConfiguration.liquidationBonus;

    const principalDecimals = (await helpersContract.getReserveConfigurationData(usdc.address))
      .decimals;

    const expectedCollateralLiquidated = oneEther.mul('33').div('1000');

    const expectedPrincipal = collateralPrice
      .mul(expectedCollateralLiquidated)
      .mul(BigNumber.from(10).pow(principalDecimals))
      .div(principalPrice.mul(BigNumber.from(10).pow(collateralDecimals)))
      .percentDiv(liquidationBonus);

    expect(userGlobalDataAfter.healthFactor).to.be.gt(oneEther, 'Invalid health factor');

    expect(userReserveDataAfter.currentStableDebt).to.be.closeTo(
      userReserveDataBefore.currentStableDebt.sub(expectedPrincipal),
      2,
      'Invalid user borrow balance after liquidation'
    );

    expect(usdcReserveDataAfter.totalLiquidity).to.be.closeTo(
      usdcReserveDataBefore.totalLiquidity.add(expectedPrincipal),
      2,
      'Invalid principal total liquidity'
    );

    expect(aaveReserveDataAfter.totalLiquidity).to.be.closeTo(
      aaveReserveDataBefore.totalLiquidity.sub(expectedCollateralLiquidated),
      2,
      'Invalid collateral total liquidity'
    );

    expect(usdcReserveDataAfter.availableLiquidity).to.be.closeTo(
      usdcReserveDataBefore.availableLiquidity.add(expectedPrincipal),
      2,
      'Invalid principal available liquidity'
    );

    expect(aaveReserveDataAfter.availableLiquidity).to.be.closeTo(
      aaveReserveDataBefore.availableLiquidity.sub(expectedCollateralLiquidated),
      2,
      'Invalid collateral available liquidity'
    );
  });
});



================================================
FILE: test-suites/liquidation-with-fee.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber } from '@ethersproject/bignumber';
import { MAX_UINT_AMOUNT, oneEther } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { AToken__factory } from '../types';
import { calcExpectedStableDebtTokenBalance } from './helpers/utils/calculations';
import { getReserveData, getUserData } from './helpers/utils/helpers';
import { makeSuite } from './helpers/make-suite';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { waitForTx, increaseTime, evmSnapshot, evmRevert } from '@aave/deploy-v3';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('Pool Liquidation: Add fee to liquidations', (testEnv) => {
  const { INVALID_HF } = ProtocolErrors;

  before(async () => {
    const { addressesProvider, oracle } = testEnv;

    await waitForTx(await addressesProvider.setPriceOracle(oracle.address));
  });

  after(async () => {
    const { aaveOracle, addressesProvider } = testEnv;
    await waitForTx(await addressesProvider.setPriceOracle(aaveOracle.address));
  });

  it('position should be liquidated when turn on liquidation protocol fee.', async () => {
    const {
      pool,
      users: [depositor, borrower, liquidator],
      usdc,
      weth,
      oracle,
      configurator,
      helpersContract,
    } = testEnv;

    const snapId = await evmSnapshot();

    const daiPrice = await oracle.getAssetPrice(usdc.address);

    //1. Depositor supplies 10000 USDC and 10 ETH
    await usdc
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '10000'));
    await usdc.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .supply(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, '10000'),
        depositor.address,
        0
      );

    await weth
      .connect(depositor.signer)
      ['mint(address,uint256)'](
        depositor.address,
        await convertToCurrencyDecimals(weth.address, '10')
      );
    await weth.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .supply(
        weth.address,
        await convertToCurrencyDecimals(weth.address, '10'),
        depositor.address,
        0
      );

    //2. Borrower supplies 10 ETH, and borrows as much USDC as it can
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](
        borrower.address,
        await convertToCurrencyDecimals(weth.address, '10')
      );
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(borrower.signer)
      .supply(
        weth.address,
        await convertToCurrencyDecimals(weth.address, '10'),
        borrower.address,
        0
      );

    const { availableBorrowsBase } = await pool.getUserAccountData(borrower.address);
    let toBorrow = availableBorrowsBase.div(daiPrice);
    await pool
      .connect(borrower.signer)
      .borrow(usdc.address, toBorrow, RateMode.Variable, 0, borrower.address);

    //3. Liquidator supplies 10000 USDC and borrow 5 ETH
    await usdc
      .connect(liquidator.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '20000'));
    await usdc.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(liquidator.signer)
      .supply(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, '10000'),
        liquidator.address,
        0
      );

    await pool
      .connect(liquidator.signer)
      .borrow(
        weth.address,
        await convertToCurrencyDecimals(weth.address, '1'),
        RateMode.Variable,
        0,
        liquidator.address
      );

    //4. Advance block to make ETH income index > 1
    await increaseTime(86400);

    //5. Decrease weth price to allow liquidation
    await oracle.setAssetPrice(usdc.address, '8000000000000000'); //weth = 500 usdc

    //7. Turn on liquidation protocol fee
    expect(await configurator.setLiquidationProtocolFee(weth.address, 500));
    const wethLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      weth.address
    );
    expect(wethLiquidationProtocolFee).to.be.eq(500);

    const tryMaxTimes = 20;
    for (let i = 1; i <= tryMaxTimes; i++) {
      const tmpSnap = await evmSnapshot();
      await increaseTime(i);
      expect(
        await pool
          .connect(liquidator.signer)
          .liquidationCall(weth.address, usdc.address, borrower.address, MAX_UINT_AMOUNT, false)
      );

      if (i !== tryMaxTimes) {
        await evmRevert(tmpSnap);
      }
    }
    expect(await weth.balanceOf(liquidator.address)).to.be.gt(
      await convertToCurrencyDecimals(weth.address, '5')
    );

    await evmRevert(snapId);
  });

  it('Sets the WETH protocol liquidation fee to 1000 (10.00%)', async () => {
    const { configurator, weth, aave, helpersContract } = testEnv;

    const oldWethLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      weth.address
    );
    const oldAaveLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      aave.address
    );

    const wethLiquidationProtocolFeeInput = 1000;
    const aaveLiquidationProtocolFeeInput = 500;

    expect(
      await configurator.setLiquidationProtocolFee(weth.address, wethLiquidationProtocolFeeInput)
    )
      .to.emit(configurator, 'LiquidationProtocolFeeChanged')
      .withArgs(weth.address, oldWethLiquidationProtocolFee, wethLiquidationProtocolFeeInput);
    expect(
      await configurator.setLiquidationProtocolFee(aave.address, aaveLiquidationProtocolFeeInput)
    )
      .to.emit(configurator, 'LiquidationProtocolFeeChanged')
      .withArgs(aave.address, oldAaveLiquidationProtocolFee, aaveLiquidationProtocolFeeInput);

    const wethLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      weth.address
    );
    const aaveLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      aave.address
    );

    expect(wethLiquidationProtocolFee).to.be.equal(wethLiquidationProtocolFeeInput);
    expect(aaveLiquidationProtocolFee).to.be.equal(aaveLiquidationProtocolFeeInput);
  });

  it('Deposits WETH, borrows DAI', async () => {
    const {
      dai,
      weth,
      users: [depositor, borrower],
      pool,
      oracle,
    } = testEnv;

    //mints DAI to depositor
    await dai
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    //approve protocol to access depositor wallet
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //user 1 deposits 1000 DAI
    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await pool
      .connect(depositor.signer)
      .deposit(dai.address, amountDAItoDeposit, depositor.address, '0');
    //user 2 deposits 1 ETH
    const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '0.06775');

    //mints WETH to borrower
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](
        borrower.address,
        await convertToCurrencyDecimals(weth.address, '1000')
      );

    //approve protocol to access the borrower wallet
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(borrower.signer)
      .deposit(weth.address, amountETHtoDeposit, borrower.address, '0');

    //user 2 borrows

    const userGlobalData = await pool.getUserAccountData(borrower.address);
    const daiPrice = await oracle.getAssetPrice(dai.address);

    const amountDAIToBorrow = await convertToCurrencyDecimals(
      dai.address,
      userGlobalData.availableBorrowsBase.div(daiPrice).percentMul(9500).toString()
    );

    await pool
      .connect(borrower.signer)
      .borrow(dai.address, amountDAIToBorrow, RateMode.Stable, '0', borrower.address);

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    expect(userGlobalDataAfter.currentLiquidationThreshold).to.be.equal(8250, INVALID_HF);
  });

  it('Drop the health factor below 1', async () => {
    const {
      dai,
      users: [, borrower],
      pool,
      oracle,
    } = testEnv;

    const daiPrice = await oracle.getAssetPrice(dai.address);

    await oracle.setAssetPrice(dai.address, daiPrice.percentMul(11800));

    const userGlobalData = await pool.getUserAccountData(borrower.address);

    expect(userGlobalData.healthFactor).to.be.lt(oneEther, INVALID_HF);
  });

  it('Liquidates the borrow', async () => {
    const {
      dai,
      weth,
      aWETH,
      users: [, borrower, , liquidator],
      pool,
      oracle,
      helpersContract,
    } = testEnv;

    //mints dai to the liquidator
    await dai
      .connect(liquidator.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    //approve protocol to access the liquidator wallet
    await dai.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const daiReserveDataBefore = await getReserveData(helpersContract, dai.address);
    const ethReserveDataBefore = await getReserveData(helpersContract, weth.address);

    const liquidatorBalanceBefore = await weth.balanceOf(liquidator.address);

    const treasuryAddress = await aWETH.RESERVE_TREASURY_ADDRESS();
    const treasuryDataBefore = await helpersContract.getUserReserveData(
      weth.address,
      treasuryAddress
    );
    const treasuryBalanceBefore = treasuryDataBefore.currentATokenBalance;

    const userReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2);

    const wethLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      weth.address
    );

    await increaseTime(100);

    const tx = await pool
      .connect(liquidator.signer)
      .liquidationCall(weth.address, dai.address, borrower.address, amountToLiquidate, false);

    const userReserveDataAfter = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const daiReserveDataAfter = await getReserveData(helpersContract, dai.address);
    const ethReserveDataAfter = await getReserveData(helpersContract, weth.address);

    const liquidatorBalanceAfter = await weth.balanceOf(liquidator.address);

    const treasuryDataAfter = await helpersContract.getUserReserveData(
      weth.address,
      treasuryAddress
    );
    const treasuryBalanceAfter = treasuryDataAfter.currentATokenBalance;

    const collateralPrice = await oracle.getAssetPrice(weth.address);
    const principalPrice = await oracle.getAssetPrice(dai.address);

    const collateralDecimals = (await helpersContract.getReserveConfigurationData(weth.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(dai.address))
      .decimals;

    const baseCollateral = principalPrice
      .mul(amountToLiquidate)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    const bonusCollateral = baseCollateral.percentMul(10500).sub(baseCollateral);
    const totalCollateralLiquidated = baseCollateral.add(bonusCollateral);
    const liquidationProtocolFees = bonusCollateral.percentMul(wethLiquidationProtocolFee);
    const expectedLiquidationReward = totalCollateralLiquidated.sub(liquidationProtocolFees);

    if (!tx.blockNumber) {
      expect(false, 'Invalid block number');
      return;
    }
    const txTimestamp = BigNumber.from(
      (await hre.ethers.provider.getBlock(tx.blockNumber)).timestamp
    );

    const stableDebtBeforeTx = calcExpectedStableDebtTokenBalance(
      userReserveDataBefore.principalStableDebt,
      userReserveDataBefore.stableBorrowRate,
      userReserveDataBefore.stableRateLastUpdated,
      txTimestamp
    );

    expect(userReserveDataAfter.currentStableDebt).to.be.closeTo(
      stableDebtBeforeTx.sub(amountToLiquidate),
      2,
      'Invalid user debt after liquidation'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(daiReserveDataAfter.liquidityIndex).to.be.gte(
      daiReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(daiReserveDataAfter.liquidityRate).to.be.lt(
      daiReserveDataBefore.liquidityRate,
      'Invalid liquidity APY'
    );

    expect(daiReserveDataAfter.availableLiquidity).to.be.closeTo(
      daiReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    expect(ethReserveDataAfter.availableLiquidity).to.be.closeTo(
      ethReserveDataBefore.availableLiquidity.sub(expectedLiquidationReward),
      2,
      'Invalid collateral available liquidity'
    );

    expect(treasuryBalanceAfter).to.be.closeTo(
      treasuryBalanceBefore.add(liquidationProtocolFees),
      2,
      'Invalid treasury increase'
    );

    expect(liquidatorBalanceAfter).to.be.closeTo(
      liquidatorBalanceBefore.add(expectedLiquidationReward),
      2,
      'Invalid liquidator balance'
    );

    expect(daiReserveDataAfter.totalLiquidity).to.be.closeTo(
      daiReserveDataBefore.totalLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal total liquidity'
    );

    expect(ethReserveDataAfter.totalLiquidity).to.be.closeTo(
      ethReserveDataBefore.totalLiquidity.sub(
        totalCollateralLiquidated.sub(liquidationProtocolFees)
      ),
      2,
      'Invalid collateral total liquidity'
    );
  });

  it('User 3 deposits 1000 USDC, user 4 0.06775 WETH, user 4 borrows - drops HF, liquidates the borrow', async () => {
    const {
      usdc,
      users: [, , , depositor, borrower, liquidator],
      pool,
      oracle,
      weth,
      aWETH,
      helpersContract,
    } = testEnv;

    //mints USDC to depositor
    await usdc
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    //approve protocol to access depositor wallet
    await usdc.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //depositor deposits 1000 USDC
    const amountUSDCtoDeposit = await convertToCurrencyDecimals(usdc.address, '1000');

    await pool
      .connect(depositor.signer)
      .deposit(usdc.address, amountUSDCtoDeposit, depositor.address, '0');

    //borrower deposits 1 ETH
    const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '0.06775');

    //mints WETH to borrower
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](
        borrower.address,
        await convertToCurrencyDecimals(weth.address, '1000')
      );

    //approve protocol to access the borrower wallet
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(borrower.signer)
      .deposit(weth.address, amountETHtoDeposit, borrower.address, '0');

    //borrower borrows
    const userGlobalData = await pool.getUserAccountData(borrower.address);

    const usdcPrice = await oracle.getAssetPrice(usdc.address);

    const amountUSDCToBorrow = await convertToCurrencyDecimals(
      usdc.address,
      userGlobalData.availableBorrowsBase.div(usdcPrice).percentMul(9502).toString()
    );

    await pool
      .connect(borrower.signer)
      .borrow(usdc.address, amountUSDCToBorrow, RateMode.Stable, '0', borrower.address);

    //drops HF below 1
    await oracle.setAssetPrice(usdc.address, usdcPrice.percentMul(11200));

    //mints usdc to the liquidator
    await usdc
      .connect(liquidator.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    //approve protocol to access liquidator wallet
    await usdc.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const userReserveDataBefore = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const usdcReserveDataBefore = await getReserveData(helpersContract, usdc.address);
    const ethReserveDataBefore = await getReserveData(helpersContract, weth.address);

    const liquidatorBalanceBefore = await weth.balanceOf(liquidator.address);

    const treasuryAddress = await aWETH.RESERVE_TREASURY_ADDRESS();
    const treasuryDataBefore = await helpersContract.getUserReserveData(
      weth.address,
      treasuryAddress
    );
    const treasuryBalanceBefore = treasuryDataBefore.currentATokenBalance;

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2);

    const wethLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      weth.address
    );

    await pool
      .connect(liquidator.signer)
      .liquidationCall(weth.address, usdc.address, borrower.address, amountToLiquidate, false);

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    const usdcReserveDataAfter = await getReserveData(helpersContract, usdc.address);
    const ethReserveDataAfter = await getReserveData(helpersContract, weth.address);

    const liquidatorBalanceAfter = await weth.balanceOf(liquidator.address);
    const treasuryDataAfter = await helpersContract.getUserReserveData(
      weth.address,
      treasuryAddress
    );
    const treasuryBalanceAfter = treasuryDataAfter.currentATokenBalance;

    const collateralPrice = await oracle.getAssetPrice(weth.address);
    const principalPrice = await oracle.getAssetPrice(usdc.address);

    const collateralDecimals = (await helpersContract.getReserveConfigurationData(weth.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(usdc.address))
      .decimals;

    const baseCollateral = principalPrice
      .mul(amountToLiquidate)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    const bonusCollateral = baseCollateral.percentMul(10500).sub(baseCollateral);
    const totalCollateralLiquidated = baseCollateral.add(bonusCollateral);
    const liquidationProtocolFees = bonusCollateral.percentMul(wethLiquidationProtocolFee);
    const expectedLiquidationReward = totalCollateralLiquidated.sub(liquidationProtocolFees);

    expect(userGlobalDataAfter.healthFactor).to.be.gt(oneEther, 'Invalid health factor');

    expect(userReserveDataAfter.currentStableDebt).to.be.closeTo(
      userReserveDataBefore.currentStableDebt.sub(amountToLiquidate),
      2,
      'Invalid user borrow balance after liquidation'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(usdcReserveDataAfter.liquidityIndex).to.be.gte(
      usdcReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(usdcReserveDataAfter.liquidityRate).to.be.lt(
      usdcReserveDataBefore.liquidityRate,
      'Invalid liquidity APY'
    );

    expect(usdcReserveDataAfter.availableLiquidity).to.be.closeTo(
      usdcReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    expect(ethReserveDataAfter.availableLiquidity).to.be.closeTo(
      ethReserveDataBefore.availableLiquidity.sub(expectedLiquidationReward),
      2,
      'Invalid collateral available liquidity'
    );

    expect(treasuryBalanceAfter).to.be.closeTo(
      treasuryBalanceBefore.add(liquidationProtocolFees),
      2,
      'Invalid treasury increase'
    );

    expect(liquidatorBalanceAfter).to.be.closeTo(
      liquidatorBalanceBefore.add(expectedLiquidationReward),
      2,
      'Invalid liquidator balance'
    );

    expect(usdcReserveDataAfter.totalLiquidity).to.be.closeTo(
      usdcReserveDataBefore.totalLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal total liquidity'
    );

    expect(ethReserveDataAfter.totalLiquidity).to.be.closeTo(
      ethReserveDataBefore.totalLiquidity.sub(
        totalCollateralLiquidated.sub(liquidationProtocolFees)
      ),
      2,
      'Invalid collateral total liquidity'
    );
  });

  it('User 4 deposits 0.03 AAVE - drops HF, liquidates the AAVE, which results on a lower amount being liquidated', async () => {
    const snap = await evmSnapshot();
    const {
      aave,
      usdc,
      users: [, , , , borrower, liquidator],
      pool,
      oracle,
      helpersContract,
    } = testEnv;

    //mints AAVE to borrower
    await aave
      .connect(borrower.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(aave.address, '0.03'));

    //approve protocol to access the borrower wallet
    await aave.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //borrower deposits AAVE
    const amountToDeposit = await convertToCurrencyDecimals(aave.address, '0.03');

    await pool
      .connect(borrower.signer)
      .deposit(aave.address, amountToDeposit, borrower.address, '0');
    const usdcPrice = await oracle.getAssetPrice(usdc.address);

    //drops HF below 1
    await oracle.setAssetPrice(usdc.address, usdcPrice.percentMul(11400));

    //mints usdc to the liquidator
    await usdc
      .connect(liquidator.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    //approve protocol to access liquidator wallet
    await usdc.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const userReserveDataBefore = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const usdcReserveDataBefore = await getReserveData(helpersContract, usdc.address);
    const aaveReserveDataBefore = await getReserveData(helpersContract, aave.address);

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2);

    const collateralPrice = await oracle.getAssetPrice(aave.address);
    const principalPrice = await oracle.getAssetPrice(usdc.address);

    const aaveTokenAddresses = await helpersContract.getReserveTokensAddresses(aave.address);
    const aAaveTokenAddress = await aaveTokenAddresses.aTokenAddress;
    const aAaveTokenContract = await AToken__factory.connect(
      aAaveTokenAddress,
      hre.ethers.provider
    );
    const aAaveTokenBalanceBefore = await aAaveTokenContract.balanceOf(liquidator.address);
    const borrowerATokenBalance = await aAaveTokenContract.balanceOf(borrower.address);

    const treasuryAddress = await aAaveTokenContract.RESERVE_TREASURY_ADDRESS();
    const treasuryDataBefore = await helpersContract.getUserReserveData(
      aave.address,
      treasuryAddress
    );
    const treasuryBalanceBefore = treasuryDataBefore.currentATokenBalance;

    await pool
      .connect(liquidator.signer)
      .liquidationCall(aave.address, usdc.address, borrower.address, amountToLiquidate, true);

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    const usdcReserveDataAfter = await getReserveData(helpersContract, usdc.address);
    const aaveReserveDataAfter = await getReserveData(helpersContract, aave.address);

    const aaveConfiguration = await helpersContract.getReserveConfigurationData(aave.address);
    const collateralDecimals = aaveConfiguration.decimals;
    const liquidationBonus = aaveConfiguration.liquidationBonus;

    const principalDecimals = (await helpersContract.getReserveConfigurationData(usdc.address))
      .decimals;

    const expectedCollateralLiquidated = oneEther.mul(30).div(1000);

    const aaveLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      aave.address
    );

    const expectedPrincipal = collateralPrice
      .mul(expectedCollateralLiquidated)
      .mul(BigNumber.from(10).pow(principalDecimals))
      .div(principalPrice.mul(BigNumber.from(10).pow(collateralDecimals)))
      .percentDiv(liquidationBonus);

    const bonusCollateral = borrowerATokenBalance.sub(
      borrowerATokenBalance.percentDiv(liquidationBonus)
    );
    const liquidationProtocolFee = bonusCollateral.percentMul(aaveLiquidationProtocolFee);
    const expectedLiquidationReward = borrowerATokenBalance.sub(liquidationProtocolFee);

    const aAaveTokenBalanceAfter = await aAaveTokenContract.balanceOf(liquidator.address);

    const treasuryDataAfter = await helpersContract.getUserReserveData(
      aave.address,
      treasuryAddress
    );
    const treasuryBalanceAfter = treasuryDataAfter.currentATokenBalance;

    expect(userGlobalDataAfter.healthFactor).to.be.gt(oneEther, 'Invalid health factor');

    expect(userReserveDataAfter.currentStableDebt).to.be.closeTo(
      userReserveDataBefore.currentStableDebt.sub(expectedPrincipal),
      2,
      'Invalid user borrow balance after liquidation'
    );

    expect(usdcReserveDataAfter.availableLiquidity).to.be.closeTo(
      usdcReserveDataBefore.availableLiquidity.add(expectedPrincipal),
      2,
      'Invalid principal available liquidity'
    );

    expect(aaveReserveDataAfter.availableLiquidity).to.be.closeTo(
      aaveReserveDataBefore.availableLiquidity,
      2,
      'Invalid collateral available liquidity'
    );

    expect(usdcReserveDataAfter.totalLiquidity).to.be.closeTo(
      usdcReserveDataBefore.totalLiquidity.add(expectedPrincipal),
      2,
      'Invalid principal total liquidity'
    );

    expect(aaveReserveDataAfter.totalLiquidity).to.be.closeTo(
      aaveReserveDataBefore.totalLiquidity,
      2,
      'Invalid collateral total liquidity'
    );

    expect(aAaveTokenBalanceBefore).to.be.equal(
      aAaveTokenBalanceAfter.sub(expectedLiquidationReward),
      'Liquidator aToken balance incorrect'
    );

    expect(treasuryBalanceBefore).to.be.equal(
      treasuryBalanceAfter.sub(liquidationProtocolFee),
      'Treasury aToken balance incorrect'
    );

    await evmRevert(snap);
  });

  it('Set liquidationProtocolFee to 0. User 4 deposits 0.03 AAVE - drops HF, liquidates the AAVE, which results on a lower amount being liquidated', async () => {
    const {
      aave,
      usdc,
      users: [, , , , borrower, liquidator],
      pool,
      oracle,
      helpersContract,
      configurator,
    } = testEnv;

    const oldAaveLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      aave.address
    );

    expect(await configurator.setLiquidationProtocolFee(aave.address, 0))
      .to.emit(configurator, 'LiquidationProtocolFeeChanged')
      .withArgs(aave.address, oldAaveLiquidationProtocolFee, 0);

    //mints AAVE to borrower
    await aave
      .connect(borrower.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(aave.address, '0.03'));

    //approve protocol to access the borrower wallet
    await aave.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //borrower deposits AAVE
    const amountToDeposit = await convertToCurrencyDecimals(aave.address, '0.03');

    await pool
      .connect(borrower.signer)
      .deposit(aave.address, amountToDeposit, borrower.address, '0');
    const usdcPrice = await oracle.getAssetPrice(usdc.address);

    //drops HF below 1
    await oracle.setAssetPrice(usdc.address, usdcPrice.percentMul(11400));

    //mints usdc to the liquidator
    await usdc
      .connect(liquidator.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    //approve protocol to access liquidator wallet
    await usdc.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const userReserveDataBefore = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const usdcReserveDataBefore = await getReserveData(helpersContract, usdc.address);
    const aaveReserveDataBefore = await getReserveData(helpersContract, aave.address);

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2);

    const collateralPrice = await oracle.getAssetPrice(aave.address);
    const principalPrice = await oracle.getAssetPrice(usdc.address);

    const aaveTokenAddresses = await helpersContract.getReserveTokensAddresses(aave.address);
    const aAaveTokenAddress = await aaveTokenAddresses.aTokenAddress;
    const aAaveTokenContract = await AToken__factory.connect(
      aAaveTokenAddress,
      hre.ethers.provider
    );
    const aAaveTokenBalanceBefore = await aAaveTokenContract.balanceOf(liquidator.address);
    const borrowerATokenBalance = await aAaveTokenContract.balanceOf(borrower.address);

    const treasuryAddress = await aAaveTokenContract.RESERVE_TREASURY_ADDRESS();
    const treasuryDataBefore = await helpersContract.getUserReserveData(
      aave.address,
      treasuryAddress
    );
    const treasuryBalanceBefore = treasuryDataBefore.currentATokenBalance;

    await pool
      .connect(liquidator.signer)
      .liquidationCall(aave.address, usdc.address, borrower.address, amountToLiquidate, true);

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    const usdcReserveDataAfter = await getReserveData(helpersContract, usdc.address);
    const aaveReserveDataAfter = await getReserveData(helpersContract, aave.address);

    const aaveConfiguration = await helpersContract.getReserveConfigurationData(aave.address);
    const collateralDecimals = aaveConfiguration.decimals;
    const liquidationBonus = aaveConfiguration.liquidationBonus;

    const principalDecimals = (await helpersContract.getReserveConfigurationData(usdc.address))
      .decimals;

    const expectedCollateralLiquidated = oneEther.mul(30).div(1000);

    const aaveLiquidationProtocolFee = await helpersContract.getLiquidationProtocolFee(
      aave.address
    );

    const expectedPrincipal = collateralPrice
      .mul(expectedCollateralLiquidated)
      .mul(BigNumber.from(10).pow(principalDecimals))
      .div(principalPrice.mul(BigNumber.from(10).pow(collateralDecimals)))
      .percentDiv(liquidationBonus);

    const bonusCollateral = borrowerATokenBalance.sub(
      borrowerATokenBalance.percentDiv(liquidationBonus)
    );
    const liquidationProtocolFee = bonusCollateral.percentMul(aaveLiquidationProtocolFee);
    const expectedLiquidationReward = borrowerATokenBalance.sub(liquidationProtocolFee);

    const aAaveTokenBalanceAfter = await aAaveTokenContract.balanceOf(liquidator.address);

    const treasuryDataAfter = await helpersContract.getUserReserveData(
      aave.address,
      treasuryAddress
    );
    const treasuryBalanceAfter = treasuryDataAfter.currentATokenBalance;

    expect(userGlobalDataAfter.healthFactor).to.be.gt(oneEther, 'Invalid health factor');

    expect(userReserveDataAfter.currentStableDebt).to.be.closeTo(
      userReserveDataBefore.currentStableDebt.sub(expectedPrincipal),
      2,
      'Invalid user borrow balance after liquidation'
    );

    expect(usdcReserveDataAfter.availableLiquidity).to.be.closeTo(
      usdcReserveDataBefore.availableLiquidity.add(expectedPrincipal),
      2,
      'Invalid principal available liquidity'
    );

    expect(aaveReserveDataAfter.availableLiquidity).to.be.closeTo(
      aaveReserveDataBefore.availableLiquidity,
      2,
      'Invalid collateral available liquidity'
    );

    expect(usdcReserveDataAfter.totalLiquidity).to.be.closeTo(
      usdcReserveDataBefore.totalLiquidity.add(expectedPrincipal),
      2,
      'Invalid principal total liquidity'
    );

    expect(aaveReserveDataAfter.totalLiquidity).to.be.closeTo(
      aaveReserveDataBefore.totalLiquidity,
      2,
      'Invalid collateral total liquidity'
    );

    expect(aAaveTokenBalanceBefore).to.be.equal(
      aAaveTokenBalanceAfter.sub(expectedLiquidationReward),
      'Liquidator aToken balance incorrect'
    );

    expect(treasuryBalanceBefore).to.be.equal(
      treasuryBalanceAfter.sub(liquidationProtocolFee),
      'Treasury aToken balance incorrect'
    );
  });
});



================================================
FILE: test-suites/liquidity-indexes.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber } from '@ethersproject/bignumber';
import { ethers } from 'ethers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import {
  evmSnapshot,
  evmRevert,
  MockFlashLoanReceiver,
  getMockFlashLoanReceiver,
} from '@aave/deploy-v3';
import './helpers/utils/wadraymath';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('Pool: liquidity indexes misc tests', (testEnv: TestEnv) => {
  const TOTAL_PREMIUM = 9;
  const PREMIUM_TO_PROTOCOL = 3000;

  let _mockFlashLoanReceiver = {} as MockFlashLoanReceiver;

  let snap: string;

  const setupForFlashloan = async (testEnv: TestEnv) => {
    const {
      configurator,
      pool,
      weth,
      aave,
      dai,
      users: [user0],
      deployer,
    } = testEnv;

    _mockFlashLoanReceiver = await getMockFlashLoanReceiver();

    await configurator.updateFlashloanPremiumTotal(TOTAL_PREMIUM);
    await configurator.updateFlashloanPremiumToProtocol(PREMIUM_TO_PROTOCOL);

    const userAddress = user0.address;
    const amountToDeposit = ethers.utils.parseEther('1');

    await weth['mint(address,uint256)'](deployer.address, amountToDeposit);

    await weth.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(weth.address, amountToDeposit, userAddress, '0');

    await aave['mint(uint256)'](amountToDeposit);

    await aave.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(aave.address, amountToDeposit, userAddress, '0');
    await dai['mint(uint256)'](amountToDeposit);

    await dai.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(dai.address, amountToDeposit, userAddress, '0');
  };

  before(async () => {
    await setupForFlashloan(testEnv);
  });

  beforeEach(async () => {
    snap = await evmSnapshot();
  });

  afterEach(async () => {
    await evmRevert(snap);
  });

  it('Validates that the flash loan fee properly takes into account both aToken supply and accruedToTreasury', async () => {
    const {
      pool,
      helpersContract,
      weth,
      aWETH,
      users: [depositorWeth],
    } = testEnv;

    /**
     * 1. Flashes 0.8 WETH
     * 2. Flashes again 0.8 ETH (to have accruedToTreasury)
     * 3. Validates that liquidity index took into account both aToken supply and accruedToTreasury
     */

    const wethFlashBorrowedAmount = ethers.utils.parseEther('0.8');

    await pool.flashLoan(
      _mockFlashLoanReceiver.address,
      [weth.address],
      [wethFlashBorrowedAmount],
      [0],
      _mockFlashLoanReceiver.address,
      '0x10',
      '0'
    );

    await pool.flashLoan(
      _mockFlashLoanReceiver.address,
      [weth.address],
      [wethFlashBorrowedAmount],
      [0],
      _mockFlashLoanReceiver.address,
      '0x10',
      '0'
    );

    const wethReserveDataAfterSecondFlash = await helpersContract.getReserveData(weth.address);

    const totalScaledWithTreasuryAfterSecondFlash = (
      await aWETH.scaledBalanceOf(depositorWeth.address)
    ).add(wethReserveDataAfterSecondFlash.accruedToTreasuryScaled.toString());

    expect(await weth.balanceOf(aWETH.address)).to.be.closeTo(
      BigNumber.from(totalScaledWithTreasuryAfterSecondFlash.toString()).rayMul(
        wethReserveDataAfterSecondFlash.liquidityIndex
      ),
      1,
      'Scaled total supply not (+/- 1) equal to WETH balance of aWETH'
    );
  });
});



================================================
FILE: test-suites/ltv-validation.spec.ts
================================================
import { expect } from 'chai';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { TestEnv, makeSuite } from './helpers/make-suite';
import { evmRevert, evmSnapshot } from '@aave/deploy-v3';
import { parseUnits } from 'ethers/lib/utils';

makeSuite('LTV validation', (testEnv: TestEnv) => {
  const { LTV_VALIDATION_FAILED, USER_IN_ISOLATION_MODE_OR_LTV_ZERO } = ProtocolErrors;

  let snap: string;
  before(async () => {
    snap = await evmSnapshot();
  });

  it('User 1 deposits 10 Dai, 10 USDC, user 2 deposits 0.071 WETH', async () => {
    const {
      pool,
      dai,
      usdc,
      weth,
      users: [user1, user2],
    } = testEnv;

    const daiAmount = await convertToCurrencyDecimals(dai.address, '10');
    const usdcAmount = await convertToCurrencyDecimals(usdc.address, '10');
    const wethAmount = await convertToCurrencyDecimals(weth.address, '0.071');

    await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await usdc.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await weth.connect(user2.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await dai.connect(user1.signer)['mint(uint256)'](daiAmount);
    await usdc.connect(user1.signer)['mint(uint256)'](usdcAmount);
    await weth.connect(user2.signer)['mint(address,uint256)'](user2.address, wethAmount);

    await pool.connect(user1.signer).deposit(dai.address, daiAmount, user1.address, 0);

    await pool.connect(user1.signer).deposit(usdc.address, usdcAmount, user1.address, 0);

    await pool.connect(user2.signer).deposit(weth.address, wethAmount, user2.address, 0);
  });

  it('Sets the LTV of DAI to 0', async () => {
    const {
      configurator,
      dai,
      helpersContract,
      users: [],
    } = testEnv;

    expect(await configurator.configureReserveAsCollateral(dai.address, 0, 8000, 10500))
      .to.emit(configurator, 'CollateralConfigurationChanged')
      .withArgs(dai.address, 0, 8000, 10500);

    const ltv = (await helpersContract.getReserveConfigurationData(dai.address)).ltv;

    expect(ltv).to.be.equal(0);
  });

  it('Borrows 0.000414 WETH', async () => {
    const {
      pool,
      weth,
      users: [user1],
    } = testEnv;
    const borrowedAmount = await convertToCurrencyDecimals(weth.address, '0.000414');

    expect(
      await pool.connect(user1.signer).borrow(weth.address, borrowedAmount, 1, 0, user1.address)
    );
  });

  it('Tries to withdraw USDC (revert expected)', async () => {
    const {
      pool,
      usdc,
      users: [user1],
    } = testEnv;

    const withdrawnAmount = await convertToCurrencyDecimals(usdc.address, '1');

    await expect(
      pool.connect(user1.signer).withdraw(usdc.address, withdrawnAmount, user1.address)
    ).to.be.revertedWith(LTV_VALIDATION_FAILED);
  });

  it('Withdraws DAI', async () => {
    const {
      pool,
      dai,
      aDai,
      users: [user1],
    } = testEnv;

    const aDaiBalanceBefore = await aDai.balanceOf(user1.address);

    const withdrawnAmount = await convertToCurrencyDecimals(dai.address, '1');

    expect(await pool.connect(user1.signer).withdraw(dai.address, withdrawnAmount, user1.address));

    const aDaiBalanceAfter = await aDai.balanceOf(user1.address);

    expect(aDaiBalanceAfter).to.be.eq(aDaiBalanceBefore.sub(withdrawnAmount));
  });

  it('User 1 deposit dai, DAI ltv drops to 0, then tries borrow', async () => {
    await evmRevert(snap);
    const {
      pool,
      dai,
      weth,
      users: [user1, user2],
      configurator,
      helpersContract,
    } = testEnv;

    const daiAmount = await convertToCurrencyDecimals(dai.address, '10');
    const wethAmount = await convertToCurrencyDecimals(weth.address, '10');
    const borrowWethAmount = await convertToCurrencyDecimals(weth.address, '5');

    await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await weth.connect(user2.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await dai.connect(user1.signer)['mint(uint256)'](daiAmount);
    await weth.connect(user2.signer)['mint(address,uint256)'](user2.address, wethAmount);

    await pool.connect(user1.signer).supply(dai.address, daiAmount, user1.address, 0);
    await pool.connect(user2.signer).supply(weth.address, wethAmount, user2.address, 0);

    // Set DAI LTV = 0
    expect(await configurator.configureReserveAsCollateral(dai.address, 0, 8000, 10500))
      .to.emit(configurator, 'CollateralConfigurationChanged')
      .withArgs(dai.address, 0, 8000, 10500);
    const ltv = (await helpersContract.getReserveConfigurationData(dai.address)).ltv;
    expect(ltv).to.be.equal(0);

    // Borrow all the weth because of issue in collateral needed.
    await expect(
      pool
        .connect(user1.signer)
        .borrow(weth.address, borrowWethAmount, RateMode.Variable, 0, user1.address)
    ).to.be.revertedWith(LTV_VALIDATION_FAILED);

    const userData = await pool.getUserAccountData(user1.address);
    expect(userData.totalCollateralBase).to.be.eq(parseUnits('10', 8));
    expect(userData.totalDebtBase).to.be.eq(0);
  });

  it('User 1 deposit dai as collateral, ltv drops to 0, tries to enable as collateral (nothing should happen)', async () => {
    await evmRevert(snap);
    const {
      pool,
      dai,
      users: [user1],
      configurator,
      helpersContract,
    } = testEnv;

    const daiAmount = await convertToCurrencyDecimals(dai.address, '10');

    await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await dai.connect(user1.signer)['mint(uint256)'](daiAmount);

    await pool.connect(user1.signer).supply(dai.address, daiAmount, user1.address, 0);

    // Set DAI LTV = 0
    expect(await configurator.configureReserveAsCollateral(dai.address, 0, 8000, 10500))
      .to.emit(configurator, 'CollateralConfigurationChanged')
      .withArgs(dai.address, 0, 8000, 10500);
    const ltv = (await helpersContract.getReserveConfigurationData(dai.address)).ltv;
    expect(ltv).to.be.equal(0);

    const userDataBefore = await helpersContract.getUserReserveData(dai.address, user1.address);
    expect(userDataBefore.usageAsCollateralEnabled).to.be.eq(true);

    await pool.connect(user1.signer).setUserUseReserveAsCollateral(dai.address, true);

    const userDataAfter = await helpersContract.getUserReserveData(dai.address, user1.address);
    expect(userDataAfter.usageAsCollateralEnabled).to.be.eq(true);
  });

  it('User 1 deposit zero ltv dai, tries to enable as collateral (revert expected)', async () => {
    await evmRevert(snap);
    const {
      pool,
      dai,
      users: [user1],
      configurator,
      helpersContract,
    } = testEnv;

    // Clean user's state by withdrawing all aDAI
    await pool.connect(user1.signer).withdraw(dai.address, MAX_UINT_AMOUNT, user1.address);

    // Set DAI LTV = 0
    expect(await configurator.configureReserveAsCollateral(dai.address, 0, 8000, 10500))
      .to.emit(configurator, 'CollateralConfigurationChanged')
      .withArgs(dai.address, 0, 8000, 10500);
    const ltv = (await helpersContract.getReserveConfigurationData(dai.address)).ltv;
    expect(ltv).to.be.equal(0);

    const daiAmount = await convertToCurrencyDecimals(dai.address, '10');

    await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await dai.connect(user1.signer)['mint(uint256)'](daiAmount);

    await pool.connect(user1.signer).supply(dai.address, daiAmount, user1.address, 0);

    await expect(
      pool.connect(user1.signer).setUserUseReserveAsCollateral(dai.address, true)
    ).to.be.revertedWith(USER_IN_ISOLATION_MODE_OR_LTV_ZERO);
  });

  it('User 1 deposit zero ltv dai, dai should not be enabled as collateral', async () => {
    await evmRevert(snap);
    const {
      pool,
      dai,
      users: [user1],
      configurator,
      helpersContract,
    } = testEnv;

    // Set DAI LTV = 0
    expect(await configurator.configureReserveAsCollateral(dai.address, 0, 8000, 10500))
      .to.emit(configurator, 'CollateralConfigurationChanged')
      .withArgs(dai.address, 0, 8000, 10500);
    const ltv = (await helpersContract.getReserveConfigurationData(dai.address)).ltv;
    expect(ltv).to.be.equal(0);

    const daiAmount = await convertToCurrencyDecimals(dai.address, '10');

    await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await dai.connect(user1.signer)['mint(uint256)'](daiAmount);

    await pool.connect(user1.signer).supply(dai.address, daiAmount, user1.address, 0);

    const userData = await helpersContract.getUserReserveData(dai.address, user1.address);
    expect(userData.usageAsCollateralEnabled).to.be.eq(false);
  });

  it('User 1 deposit dai, DAI ltv drops to 0, transfers dai, dai should not be enabled as collateral for receiver', async () => {
    await evmRevert(snap);
    const {
      pool,
      dai,
      aDai,
      users: [user1, user2],
      configurator,
      helpersContract,
    } = testEnv;

    const daiAmount = await convertToCurrencyDecimals(dai.address, '10');

    await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await dai.connect(user1.signer)['mint(uint256)'](daiAmount);

    await pool.connect(user1.signer).supply(dai.address, daiAmount, user1.address, 0);

    // Set DAI LTV = 0
    expect(await configurator.configureReserveAsCollateral(dai.address, 0, 8000, 10500))
      .to.emit(configurator, 'CollateralConfigurationChanged')
      .withArgs(dai.address, 0, 8000, 10500);
    const ltv = (await helpersContract.getReserveConfigurationData(dai.address)).ltv;
    expect(ltv).to.be.equal(0);

    // Transfer 0 LTV DAI to user2
    await aDai.connect(user1.signer).transfer(user2.address, 1);
    const userData = await helpersContract.getUserReserveData(dai.address, user2.address);
    expect(userData.usageAsCollateralEnabled).to.be.eq(false);
  });
});



================================================
FILE: test-suites/mint-to-treasury.spec.ts
================================================
import { expect } from 'chai';
import { RateMode } from '../helpers/types';
import { MAX_UINT_AMOUNT, ONE_YEAR } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { makeSuite, TestEnv } from './helpers/make-suite';
import './helpers/utils/wadraymath';
import { advanceTimeAndBlock } from '@aave/deploy-v3';

makeSuite('Mint To Treasury', (testEnv: TestEnv) => {
  it('User 0 deposits 1000 DAI. Borrower borrows 100 DAI. Clock moved forward one year. Calculates and verifies the amount accrued to the treasury', async () => {
    const { users, pool, dai, helpersContract } = testEnv;

    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');
    const amountDAItoBorrow = await convertToCurrencyDecimals(dai.address, '100');

    await expect(await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit));

    // user 0 deposits 1000 DAI
    await expect(await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT));
    await expect(
      await pool
        .connect(users[0].signer)
        .deposit(dai.address, amountDAItoDeposit, users[0].address, '0')
    );

    await expect(
      await pool
        .connect(users[0].signer)
        .borrow(dai.address, amountDAItoBorrow, RateMode.Variable, '0', users[0].address)
    );

    const { reserveFactor } = await helpersContract.getReserveConfigurationData(dai.address);

    await advanceTimeAndBlock(parseInt(ONE_YEAR));

    await expect(await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit));

    await expect(
      await pool
        .connect(users[0].signer)
        .deposit(dai.address, amountDAItoDeposit, users[0].address, '0')
    );

    const { liquidityIndex, variableBorrowIndex } = await pool.getReserveData(dai.address);

    const expectedAccruedToTreasury = amountDAItoBorrow
      .rayMul(variableBorrowIndex)
      .sub(amountDAItoBorrow)
      .percentMul(reserveFactor)
      .rayDiv(liquidityIndex);

    const { accruedToTreasury } = await pool.getReserveData(dai.address);

    expect(accruedToTreasury).to.be.closeTo(expectedAccruedToTreasury, 2);
  });

  it('Mints the accrued to the treasury', async () => {
    const { users, pool, dai, aDai } = testEnv;

    const treasuryAddress = await aDai.RESERVE_TREASURY_ADDRESS();
    const { accruedToTreasury } = await pool.getReserveData(dai.address);

    await expect(await pool.connect(users[0].signer).mintToTreasury([dai.address]));

    const normalizedIncome = await pool.getReserveNormalizedIncome(dai.address);
    const treasuryBalance = await aDai.balanceOf(treasuryAddress);

    const expectedTreasuryBalance = accruedToTreasury.rayMul(normalizedIncome);

    expect(treasuryBalance).to.be.closeTo(
      expectedTreasuryBalance,
      2,
      'Invalid treasury balance after minting'
    );
  });
});



================================================
FILE: test-suites/no-incentives-controller.spec.ts
================================================
import { expect } from 'chai';
import { BigNumberish } from 'ethers';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { RateMode } from '../helpers/types';
import {
  AToken__factory,
  ERC20,
  ERC20__factory,
  MintableERC20,
  MintableERC20__factory,
  StableDebtToken__factory,
  VariableDebtToken__factory,
} from '../types';
import { getFirstSigner } from '@aave/deploy-v3/dist/helpers/utilities/signer';
import { makeSuite } from './helpers/make-suite';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { setBlocktime, timeLatest } from '../helpers/misc-utils';
import { config } from 'process';

makeSuite('Reserve Without Incentives Controller', (testEnv) => {
  let mockToken: MintableERC20;
  let aMockToken: ERC20;
  let mockStableDebt: ERC20;
  let mockVariableDebt: ERC20;

  before(async () => {
    const { pool, poolAdmin, configurator, dai, helpersContract } = testEnv;

    mockToken = await new MintableERC20__factory(await getFirstSigner()).deploy(
      'MOCK',
      'MOCK',
      '18'
    );

    const stableDebtTokenImplementation = await new StableDebtToken__factory(
      await getFirstSigner()
    ).deploy(pool.address);
    const variableDebtTokenImplementation = await new VariableDebtToken__factory(
      await getFirstSigner()
    ).deploy(pool.address);
    const aTokenImplementation = await new AToken__factory(await getFirstSigner()).deploy(
      pool.address
    );

    const daiData = await pool.getReserveData(dai.address);

    const interestRateStrategyAddress = daiData.interestRateStrategyAddress;

    // Init the reserve
    const initInputParams: {
      aTokenImpl: string;
      stableDebtTokenImpl: string;
      variableDebtTokenImpl: string;
      underlyingAssetDecimals: BigNumberish;
      interestRateStrategyAddress: string;
      underlyingAsset: string;
      treasury: string;
      incentivesController: string;
      aTokenName: string;
      aTokenSymbol: string;
      variableDebtTokenName: string;
      variableDebtTokenSymbol: string;
      stableDebtTokenName: string;
      stableDebtTokenSymbol: string;
      params: string;
    }[] = [
      {
        aTokenImpl: aTokenImplementation.address,
        stableDebtTokenImpl: stableDebtTokenImplementation.address,
        variableDebtTokenImpl: variableDebtTokenImplementation.address,
        underlyingAssetDecimals: 18,
        interestRateStrategyAddress: interestRateStrategyAddress,
        underlyingAsset: mockToken.address,
        treasury: ZERO_ADDRESS,
        incentivesController: ZERO_ADDRESS,
        aTokenName: 'AMOCK',
        aTokenSymbol: 'AMOCK',
        variableDebtTokenName: 'VMOCK',
        variableDebtTokenSymbol: 'VMOCK',
        stableDebtTokenName: 'SMOCK',
        stableDebtTokenSymbol: 'SMOCK',
        params: '0x10',
      },
    ];

    // Add the mock reserve
    await configurator.connect(poolAdmin.signer).initReserves(initInputParams);

    // Configuration
    const daiReserveConfigurationData = await helpersContract.getReserveConfigurationData(
      dai.address
    );

    const inputParams: {
      asset: string;
      baseLTV: BigNumberish;
      liquidationThreshold: BigNumberish;
      liquidationBonus: BigNumberish;
      reserveFactor: BigNumberish;
      borrowCap: BigNumberish;
      supplyCap: BigNumberish;
      stableBorrowingEnabled: boolean;
      borrowingEnabled: boolean;
    }[] = [
      {
        asset: mockToken.address,
        baseLTV: daiReserveConfigurationData.ltv,
        liquidationThreshold: daiReserveConfigurationData.liquidationThreshold,
        liquidationBonus: daiReserveConfigurationData.liquidationBonus,
        reserveFactor: daiReserveConfigurationData.reserveFactor,
        borrowCap: 68719476735,
        supplyCap: 68719476735,
        stableBorrowingEnabled: true,
        borrowingEnabled: true,
      },
    ];

    const i = 0;
    await configurator
      .connect(poolAdmin.signer)
      .configureReserveAsCollateral(
        inputParams[i].asset,
        inputParams[i].baseLTV,
        inputParams[i].liquidationThreshold,
        inputParams[i].liquidationBonus
      );
    await configurator.connect(poolAdmin.signer).setReserveBorrowing(inputParams[i].asset, true);

    await configurator.setBorrowCap(inputParams[i].asset, inputParams[i].borrowCap);
    await configurator.setReserveStableRateBorrowing(
      inputParams[i].asset,
      inputParams[i].stableBorrowingEnabled
    );

    await configurator
      .connect(poolAdmin.signer)
      .setSupplyCap(inputParams[i].asset, inputParams[i].supplyCap);
    await configurator
      .connect(poolAdmin.signer)
      .setReserveFactor(inputParams[i].asset, inputParams[i].reserveFactor);

    const reserveData = await pool.getReserveData(mockToken.address);
    aMockToken = ERC20__factory.connect(reserveData.aTokenAddress, await getFirstSigner());
    mockStableDebt = ERC20__factory.connect(
      reserveData.stableDebtTokenAddress,
      await getFirstSigner()
    );
    mockVariableDebt = ERC20__factory.connect(
      reserveData.variableDebtTokenAddress,
      await getFirstSigner()
    );
  });

  it('Deposit mock tokens into aave', async () => {
    const {
      pool,
      users: [user],
    } = testEnv;

    expect(await aMockToken.balanceOf(user.address)).to.be.eq(0);

    await mockToken
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(mockToken.address, '10000'));
    await mockToken.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .deposit(
        mockToken.address,
        await convertToCurrencyDecimals(mockToken.address, '1000'),
        user.address,
        0
      );

    expect(await aMockToken.balanceOf(user.address)).to.be.eq(
      await convertToCurrencyDecimals(aMockToken.address, '1000')
    );
  });

  it('Transfer aMock tokens', async () => {
    const {
      users: [sender, receiver],
    } = testEnv;

    expect(await aMockToken.balanceOf(sender.address)).to.be.eq(
      await convertToCurrencyDecimals(aMockToken.address, '1000')
    );
    expect(await aMockToken.balanceOf(receiver.address)).to.be.eq(0);

    await aMockToken
      .connect(sender.signer)
      .transfer(receiver.address, await convertToCurrencyDecimals(aMockToken.address, '1000'));
    expect(await aMockToken.balanceOf(sender.address)).to.be.eq(0);
    expect(await aMockToken.balanceOf(receiver.address)).to.be.eq(
      await convertToCurrencyDecimals(aMockToken.address, '1000')
    );
  });

  it('Borrow mock tokens with stable rate', async () => {
    const {
      pool,
      users: [, , user],
      dai,
    } = testEnv;

    expect(await aMockToken.balanceOf(user.address)).to.be.eq(0);
    expect(await mockToken.balanceOf(user.address)).to.be.eq(0);
    expect(await mockVariableDebt.balanceOf(user.address)).to.be.eq(0);
    expect(await mockStableDebt.balanceOf(user.address)).to.be.eq(0);

    await dai
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '10000'));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .deposit(dai.address, await convertToCurrencyDecimals(dai.address, '10000'), user.address, 0);
    await pool
      .connect(user.signer)
      .borrow(
        mockToken.address,
        await convertToCurrencyDecimals(mockToken.address, '100'),
        RateMode.Stable,
        0,
        user.address
      );

    expect(await aMockToken.balanceOf(user.address)).to.be.eq(0);
    expect(await mockToken.balanceOf(user.address)).to.be.eq(
      await convertToCurrencyDecimals(mockToken.address, '100')
    );
    expect(await mockVariableDebt.balanceOf(user.address)).to.be.eq(0);
    expect(await mockStableDebt.balanceOf(user.address)).to.be.eq(
      await convertToCurrencyDecimals(mockStableDebt.address, '100')
    );
  });

  it('Repay mock tokens', async () => {
    const {
      pool,
      users: [, , user],
    } = testEnv;

    const mintAmount = await convertToCurrencyDecimals(mockToken.address, '100');
    await mockToken.connect(user.signer)['mint(uint256)'](mintAmount);

    const expectedMockTokenBalance = mintAmount.add(
      await convertToCurrencyDecimals(mockToken.address, '100')
    );

    expect(await aMockToken.balanceOf(user.address)).to.be.eq(0);
    expect(await mockToken.balanceOf(user.address)).to.be.eq(expectedMockTokenBalance);
    expect(await mockVariableDebt.balanceOf(user.address)).to.be.eq(0);

    await mockToken.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const time = await timeLatest();

    await setBlocktime(time.add(1).toNumber());

    const stableDebtBefore = await mockStableDebt.balanceOf(user.address, { blockTag: 'pending' });

    await pool
      .connect(user.signer)
      .repay(mockToken.address, stableDebtBefore, RateMode.Stable, user.address);

    expect(await aMockToken.balanceOf(user.address)).to.be.eq(0);
    expect(await mockToken.balanceOf(user.address)).to.be.eq(
      expectedMockTokenBalance.sub(stableDebtBefore)
    );
    expect(await mockVariableDebt.balanceOf(user.address)).to.be.eq(0);
    expect(await mockStableDebt.balanceOf(user.address)).to.be.eq(0);
  });

  it('Withdraw aMock tokens', async () => {
    const {
      pool,
      users: [, user],
    } = testEnv;

    expect(await mockToken.balanceOf(user.address)).to.be.eq(0);

    const aMockTokenBalanceBefore = await aMockToken.balanceOf(user.address, {
      blockTag: 'pending',
    });

    await aMockToken.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .withdraw(mockToken.address, aMockTokenBalanceBefore, user.address);

    expect(await aMockToken.balanceOf(user.address)).to.be.eq(0);
    expect(await mockToken.balanceOf(user.address)).to.be.eq(aMockTokenBalanceBefore);
  });
});



================================================
FILE: test-suites/pausable-pool.spec.ts
================================================
import { expect } from 'chai';
import { utils } from 'ethers';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { MockFlashLoanReceiver } from '../types/MockFlashLoanReceiver';
import {
  getMockFlashLoanReceiver,
  getMockPool,
  getPoolConfiguratorProxy,
} from '@aave/deploy-v3/dist/helpers/contract-getters';
import { getFirstSigner } from '@aave/deploy-v3/dist/helpers/utilities/signer';
import { deployMockPool } from '@aave/deploy-v3/dist/helpers/contract-deployments';
import {
  ACLManager__factory,
  ConfiguratorLogic__factory,
  PoolAddressesProvider__factory,
  PoolConfigurator__factory,
} from '../types';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { evmSnapshot, evmRevert } from '@aave/deploy-v3';

makeSuite('PausablePool', (testEnv: TestEnv) => {
  let _mockFlashLoanReceiver = {} as MockFlashLoanReceiver;

  const { RESERVE_PAUSED, INVALID_FROM_BALANCE_AFTER_TRANSFER, INVALID_TO_BALANCE_AFTER_TRANSFER } =
    ProtocolErrors;

  before(async () => {
    _mockFlashLoanReceiver = await getMockFlashLoanReceiver();
  });

  it('User 0 deposits 1000 DAI. Configurator pauses pool. Transfers to user 1 reverts. Configurator unpauses the network and next transfer succeeds', async () => {
    const { users, pool, dai, aDai, configurator } = testEnv;

    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit);

    // user 0 deposits 1000 DAI
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[0].signer)
      .deposit(dai.address, amountDAItoDeposit, users[0].address, '0');

    const user0Balance = await aDai.balanceOf(users[0].address);
    const user1Balance = await aDai.balanceOf(users[1].address);

    // Configurator pauses the pool
    await configurator.connect(users[1].signer).setPoolPause(true);

    // User 0 tries the transfer to User 1
    await expect(
      aDai.connect(users[0].signer).transfer(users[1].address, amountDAItoDeposit)
    ).to.revertedWith(RESERVE_PAUSED);

    const pausedFromBalance = await aDai.balanceOf(users[0].address);
    const pausedToBalance = await aDai.balanceOf(users[1].address);

    expect(pausedFromBalance).to.be.equal(
      user0Balance.toString(),
      INVALID_TO_BALANCE_AFTER_TRANSFER
    );
    expect(pausedToBalance.toString()).to.be.equal(
      user1Balance.toString(),
      INVALID_FROM_BALANCE_AFTER_TRANSFER
    );

    // Configurator unpauses the pool
    await configurator.connect(users[1].signer).setPoolPause(false);

    // User 0 succeeds transfer to User 1
    await aDai.connect(users[0].signer).transfer(users[1].address, amountDAItoDeposit);

    const fromBalance = await aDai.balanceOf(users[0].address);
    const toBalance = await aDai.balanceOf(users[1].address);

    expect(fromBalance.toString()).to.be.equal(
      user0Balance.sub(amountDAItoDeposit),
      INVALID_FROM_BALANCE_AFTER_TRANSFER
    );
    expect(toBalance.toString()).to.be.equal(
      user1Balance.add(amountDAItoDeposit),
      INVALID_TO_BALANCE_AFTER_TRANSFER
    );
  });

  it('Deposit', async () => {
    const { users, pool, dai, aDai, configurator } = testEnv;

    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit);

    // user 0 deposits 1000 DAI
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);

    // Configurator pauses the pool
    await configurator.connect(users[1].signer).setPoolPause(true);
    await expect(
      pool.connect(users[0].signer).deposit(dai.address, amountDAItoDeposit, users[0].address, '0')
    ).to.revertedWith(RESERVE_PAUSED);

    // Configurator unpauses the pool
    await configurator.connect(users[1].signer).setPoolPause(false);
  });

  it('Withdraw', async () => {
    const { users, pool, dai, aDai, configurator } = testEnv;

    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit);

    // user 0 deposits 1000 DAI
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[0].signer)
      .deposit(dai.address, amountDAItoDeposit, users[0].address, '0');

    // Configurator pauses the pool
    await configurator.connect(users[1].signer).setPoolPause(true);

    // user tries to burn
    await expect(
      pool.connect(users[0].signer).withdraw(dai.address, amountDAItoDeposit, users[0].address)
    ).to.revertedWith(RESERVE_PAUSED);

    // Configurator unpauses the pool
    await configurator.connect(users[1].signer).setPoolPause(false);
  });

  it('Borrow', async () => {
    const { pool, dai, users, configurator } = testEnv;

    const user = users[1];
    // Pause the pool
    await configurator.connect(users[1].signer).setPoolPause(true);

    // Try to execute liquidation
    await expect(
      pool.connect(user.signer).borrow(dai.address, '1', '1', '0', user.address)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause the pool
    await configurator.connect(users[1].signer).setPoolPause(false);
  });

  it('Repay', async () => {
    const { pool, dai, users, configurator } = testEnv;

    const user = users[1];
    // Pause the pool
    await configurator.connect(users[1].signer).setPoolPause(true);

    // Try to execute liquidation
    await expect(
      pool.connect(user.signer).repay(dai.address, '1', '1', user.address)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause the pool
    await configurator.connect(users[1].signer).setPoolPause(false);
  });

  it('Flash loan', async () => {
    const { dai, pool, weth, users, configurator } = testEnv;

    const caller = users[3];

    const flashAmount = utils.parseEther('0.8');

    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    // Pause pool
    await configurator.connect(users[1].signer).setPoolPause(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [flashAmount],
          [1],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause pool
    await configurator.connect(users[1].signer).setPoolPause(false);
  });

  it('Liquidation call', async () => {
    const { users, pool, usdc, oracle, weth, configurator, helpersContract } = testEnv;
    const depositor = users[3];
    const borrower = users[4];

    //mints USDC to depositor
    await usdc
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    //approve protocol to access depositor wallet
    await usdc.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //user 3 deposits 1000 USDC
    const amountUSDCtoDeposit = await convertToCurrencyDecimals(usdc.address, '1000');

    await pool
      .connect(depositor.signer)
      .deposit(usdc.address, amountUSDCtoDeposit, depositor.address, '0');

    //user 4 deposits ETH
    const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '0.06775');

    //mints WETH to borrower
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](borrower.address, amountETHtoDeposit);

    //approve protocol to access borrower wallet
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(borrower.signer)
      .deposit(weth.address, amountETHtoDeposit, borrower.address, '0');

    //user 4 borrows
    const userGlobalData = await pool.getUserAccountData(borrower.address);

    const usdcPrice = await oracle.getAssetPrice(usdc.address);

    const amountUSDCToBorrow = await convertToCurrencyDecimals(
      usdc.address,
      userGlobalData.availableBorrowsBase.div(usdcPrice).percentMul(9502).toString()
    );

    await pool
      .connect(borrower.signer)
      .borrow(usdc.address, amountUSDCToBorrow, RateMode.Stable, '0', borrower.address);

    // Drops HF below 1
    await oracle.setAssetPrice(usdc.address, usdcPrice.percentMul(12000));

    //mints dai to the liquidator
    await usdc['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));
    await usdc.approve(pool.address, MAX_UINT_AMOUNT);

    const userReserveDataBefore = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2).toString();

    // Pause pool
    await configurator.connect(users[1].signer).setPoolPause(true);

    // Do liquidation
    await expect(
      pool.liquidationCall(weth.address, usdc.address, borrower.address, amountToLiquidate, true)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause pool
    await configurator.connect(users[1].signer).setPoolPause(false);
  });

  it('SwapBorrowRateMode', async () => {
    const { pool, weth, dai, usdc, users, configurator } = testEnv;
    const user = users[1];
    const amountWETHToDeposit = utils.parseEther('10');
    const amountDAIToDeposit = utils.parseEther('120');
    const amountToBorrow = utils.parseUnits('65', 6);

    await weth.connect(user.signer)['mint(address,uint256)'](user.address, amountWETHToDeposit);
    await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).deposit(weth.address, amountWETHToDeposit, user.address, '0');

    await dai.connect(user.signer)['mint(uint256)'](amountDAIToDeposit);
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).deposit(dai.address, amountDAIToDeposit, user.address, '0');

    await pool.connect(user.signer).borrow(usdc.address, amountToBorrow, 2, 0, user.address);

    // Pause pool
    await configurator.connect(users[1].signer).setPoolPause(true);

    // Try to repay
    await expect(
      pool.connect(user.signer).swapBorrowRateMode(usdc.address, RateMode.Stable)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause pool
    await configurator.connect(users[1].signer).setPoolPause(false);
  });

  it('RebalanceStableBorrowRate', async () => {
    const { pool, dai, users, configurator } = testEnv;
    const user = users[1];
    // Pause pool
    await configurator.connect(users[1].signer).setPoolPause(true);

    await expect(
      pool.connect(user.signer).rebalanceStableBorrowRate(dai.address, user.address)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause pool
    await configurator.connect(users[1].signer).setPoolPause(false);
  });

  it('setUserUseReserveAsCollateral', async () => {
    const { pool, weth, users, configurator } = testEnv;
    const user = users[1];

    const amountWETHToDeposit = utils.parseEther('1');
    await weth.connect(user.signer)['mint(address,uint256)'](user.address, amountWETHToDeposit);
    await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).deposit(weth.address, amountWETHToDeposit, user.address, '0');

    // Pause pool
    await configurator.connect(users[1].signer).setPoolPause(true);

    await expect(
      pool.connect(user.signer).setUserUseReserveAsCollateral(weth.address, false)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause pool
    await configurator.connect(users[1].signer).setPoolPause(false);
  });

  it('Configurator pauses Pool with a ZERO_ADDRESS reserve', async () => {
    const { poolAdmin, emergencyAdmin, deployer } = testEnv;

    const snapId = await evmSnapshot();

    // Deploy a mock Pool
    const mockPool = await deployMockPool();

    // Deploy a new PoolConfigurator
    const configuratorLogic = await (
      await new ConfiguratorLogic__factory(await getFirstSigner()).deploy()
    ).deployed();
    const poolConfigurator = await (
      await new PoolConfigurator__factory(
        {
          ['contracts/protocol/libraries/logic/ConfiguratorLogic.sol:ConfiguratorLogic']:
            configuratorLogic.address,
        },
        await getFirstSigner()
      ).deploy()
    ).deployed();

    // Deploy a new PoolAddressesProvider
    const MARKET_ID = '1';
    const poolAddressesProvider = await (
      await new PoolAddressesProvider__factory(await getFirstSigner()).deploy(
        MARKET_ID,
        deployer.address
      )
    ).deployed();

    // Set the ACL admin
    expect(await poolAddressesProvider.setACLAdmin(poolAdmin.address));

    // Update the ACLManager
    const aclManager = await (
      await new ACLManager__factory(await getFirstSigner()).deploy(poolAddressesProvider.address)
    ).deployed();
    await expect(poolAddressesProvider.setACLManager(aclManager.address))
      .to.emit(poolAddressesProvider, 'ACLManagerUpdated')
      .withArgs(ZERO_ADDRESS, aclManager.address);

    // Set role of EmergencyAdmin
    const emergencyAdminRole = await aclManager.EMERGENCY_ADMIN_ROLE();
    await expect(aclManager.addEmergencyAdmin(emergencyAdmin.address))
      .to.emit(aclManager, 'RoleGranted')
      .withArgs(emergencyAdminRole, emergencyAdmin.address, poolAdmin.address);

    // Update the Pool impl with a MockPool
    await expect(poolAddressesProvider.setPoolImpl(mockPool.address))
      .to.emit(poolAddressesProvider, 'PoolUpdated')
      .withArgs(ZERO_ADDRESS, mockPool.address);

    // Add ZERO_ADDRESS as a reserve
    const proxiedMockPoolAddress = await poolAddressesProvider.getPool();
    const proxiedMockPool = await getMockPool(proxiedMockPoolAddress);
    expect(await proxiedMockPool.addReserveToReservesList(ZERO_ADDRESS));

    // Update the PoolConfigurator impl with the PoolConfigurator
    await expect(poolAddressesProvider.setPoolConfiguratorImpl(poolConfigurator.address))
      .to.emit(poolAddressesProvider, 'PoolConfiguratorUpdated')
      .withArgs(ZERO_ADDRESS, poolConfigurator.address);

    const proxiedPoolConfiguratorAddress = await poolAddressesProvider.getPoolConfigurator();
    const proxiedPoolConfigurator = await getPoolConfiguratorProxy(proxiedPoolConfiguratorAddress);

    // Pause reserve
    expect(await proxiedPoolConfigurator.connect(emergencyAdmin.signer).setPoolPause(true));

    await evmRevert(snapId);
  });
});



================================================
FILE: test-suites/pausable-reserve.spec.ts
================================================
import { expect } from 'chai';
import { utils } from 'ethers';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { MockFlashLoanReceiver } from '../types/MockFlashLoanReceiver';
import { getMockFlashLoanReceiver } from '@aave/deploy-v3/dist/helpers/contract-getters';
import { makeSuite, TestEnv } from './helpers/make-suite';
import './helpers/utils/wadraymath';

makeSuite('PausableReserve', (testEnv: TestEnv) => {
  let _mockFlashLoanReceiver = {} as MockFlashLoanReceiver;

  const { RESERVE_PAUSED, INVALID_FROM_BALANCE_AFTER_TRANSFER, INVALID_TO_BALANCE_AFTER_TRANSFER } =
    ProtocolErrors;

  before(async () => {
    _mockFlashLoanReceiver = await getMockFlashLoanReceiver();
  });

  it('User 0 deposits 1000 DAI. Configurator pauses pool. Transfers to user 1 reverts. Configurator unpauses the network and next transfer succeeds', async () => {
    const { users, pool, dai, aDai, configurator } = testEnv;

    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit);

    // user 0 deposits 1000 DAI
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[0].signer)
      .deposit(dai.address, amountDAItoDeposit, users[0].address, '0');

    const user0Balance = await aDai.balanceOf(users[0].address);
    const user1Balance = await aDai.balanceOf(users[1].address);

    // Configurator pauses the pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, true);

    // User 0 tries the transfer to User 1
    await expect(
      aDai.connect(users[0].signer).transfer(users[1].address, amountDAItoDeposit)
    ).to.revertedWith(RESERVE_PAUSED);

    const pausedFromBalance = await aDai.balanceOf(users[0].address);
    const pausedToBalance = await aDai.balanceOf(users[1].address);

    expect(pausedFromBalance).to.be.equal(
      user0Balance.toString(),
      INVALID_TO_BALANCE_AFTER_TRANSFER
    );
    expect(pausedToBalance.toString()).to.be.equal(
      user1Balance.toString(),
      INVALID_FROM_BALANCE_AFTER_TRANSFER
    );

    // Configurator unpauses the pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, false);

    // User 0 succeeds transfer to User 1
    await aDai.connect(users[0].signer).transfer(users[1].address, amountDAItoDeposit);

    const fromBalance = await aDai.balanceOf(users[0].address);
    const toBalance = await aDai.balanceOf(users[1].address);

    expect(fromBalance.toString()).to.be.equal(
      user0Balance.sub(amountDAItoDeposit),
      INVALID_FROM_BALANCE_AFTER_TRANSFER
    );
    expect(toBalance.toString()).to.be.equal(
      user1Balance.add(amountDAItoDeposit),
      INVALID_TO_BALANCE_AFTER_TRANSFER
    );
  });

  it('Deposit', async () => {
    const { users, pool, dai, aDai, configurator } = testEnv;

    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit);

    // user 0 deposits 1000 DAI
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);

    // Configurator pauses the pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, true);
    await expect(
      pool.connect(users[0].signer).deposit(dai.address, amountDAItoDeposit, users[0].address, '0')
    ).to.revertedWith(RESERVE_PAUSED);

    // Configurator unpauses the pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, false);
  });

  it('Withdraw', async () => {
    const { users, pool, dai, aDai, configurator } = testEnv;

    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await dai.connect(users[0].signer)['mint(uint256)'](amountDAItoDeposit);

    // user 0 deposits 1000 DAI
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[0].signer)
      .deposit(dai.address, amountDAItoDeposit, users[0].address, '0');

    // Configurator pauses the pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, true);

    // user tries to burn
    await expect(
      pool.connect(users[0].signer).withdraw(dai.address, amountDAItoDeposit, users[0].address)
    ).to.revertedWith(RESERVE_PAUSED);

    // Configurator unpauses the pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, false);
  });

  it('Borrow', async () => {
    const { pool, dai, users, configurator } = testEnv;

    const user = users[1];
    // Pause the pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, true);

    // Try to execute liquidation
    await expect(
      pool.connect(user.signer).borrow(dai.address, '1', '1', '0', user.address)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause the pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, false);
  });

  it('Repay', async () => {
    const { pool, dai, users, configurator } = testEnv;

    const user = users[1];
    // Pause the pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, true);

    // Try to execute liquidation
    await expect(
      pool.connect(user.signer).repay(dai.address, '1', '1', user.address)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause the pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, false);
  });

  it('Flash loan', async () => {
    const { dai, pool, weth, users, configurator } = testEnv;

    const caller = users[3];

    const flashAmount = utils.parseEther('0.8');

    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    // Pause pool
    await configurator.connect(users[1].signer).setReservePause(weth.address, true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [flashAmount],
          [1],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause pool
    await configurator.connect(users[1].signer).setReservePause(weth.address, false);
  });

  it('Liquidation call', async () => {
    const { users, pool, usdc, oracle, weth, configurator, helpersContract } = testEnv;
    const depositor = users[3];
    const borrower = users[4];

    //mints USDC to depositor
    await usdc
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    //approve protocol to access depositor wallet
    await usdc.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //user 3 deposits 1000 USDC
    const amountUSDCtoDeposit = await convertToCurrencyDecimals(usdc.address, '1000');

    await pool
      .connect(depositor.signer)
      .deposit(usdc.address, amountUSDCtoDeposit, depositor.address, '0');

    //user 4 deposits ETH
    const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '0.06775');

    //mints WETH to borrower
    await weth
      .connect(borrower.signer)
      ['mint(address,uint256)'](borrower.address, amountETHtoDeposit);

    //approve protocol to access borrower wallet
    await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

    await pool
      .connect(borrower.signer)
      .deposit(weth.address, amountETHtoDeposit, borrower.address, '0');

    //user 4 borrows
    const userGlobalData = await pool.getUserAccountData(borrower.address);

    const usdcPrice = await oracle.getAssetPrice(usdc.address);

    const amountUSDCToBorrow = await convertToCurrencyDecimals(
      usdc.address,
      userGlobalData.availableBorrowsBase.div(usdcPrice).percentMul(9502).toString()
    );

    await pool
      .connect(borrower.signer)
      .borrow(usdc.address, amountUSDCToBorrow, RateMode.Stable, '0', borrower.address);

    // Drops HF below 1
    await oracle.setAssetPrice(usdc.address, usdcPrice.percentMul(12000));

    //mints dai to the liquidator
    await usdc['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));
    await usdc.approve(pool.address, MAX_UINT_AMOUNT);

    const userReserveDataBefore = await helpersContract.getUserReserveData(
      usdc.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2);

    // Pause pool
    await configurator.connect(users[1].signer).setReservePause(usdc.address, true);

    // Do liquidation
    await expect(
      pool.liquidationCall(weth.address, usdc.address, borrower.address, amountToLiquidate, true)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause pool
    await configurator.connect(users[1].signer).setReservePause(usdc.address, false);
  });

  it('SwapBorrowRateMode', async () => {
    const { pool, weth, dai, usdc, users, configurator } = testEnv;
    const user = users[1];
    const amountWETHToDeposit = utils.parseEther('10');
    const amountDAIToDeposit = utils.parseEther('120');
    const amountToBorrow = await convertToCurrencyDecimals(usdc.address, '65');

    await weth.connect(user.signer)['mint(address,uint256)'](user.address, amountWETHToDeposit);
    await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).deposit(weth.address, amountWETHToDeposit, user.address, '0');

    await dai.connect(user.signer)['mint(uint256)'](amountDAIToDeposit);
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).deposit(dai.address, amountDAIToDeposit, user.address, '0');

    await pool.connect(user.signer).borrow(usdc.address, amountToBorrow, 2, 0, user.address);

    // Pause pool
    await configurator.connect(users[1].signer).setReservePause(usdc.address, true);

    // Try to repay
    await expect(
      pool.connect(user.signer).swapBorrowRateMode(usdc.address, RateMode.Stable)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause pool
    await configurator.connect(users[1].signer).setReservePause(usdc.address, false);
  });

  it('RebalanceStableBorrowRate', async () => {
    const { pool, dai, users, configurator } = testEnv;
    const user = users[1];
    // Pause pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, true);

    await expect(
      pool.connect(user.signer).rebalanceStableBorrowRate(dai.address, user.address)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause pool
    await configurator.connect(users[1].signer).setReservePause(dai.address, false);
  });

  it('setUserUseReserveAsCollateral', async () => {
    const { pool, weth, users, configurator } = testEnv;
    const user = users[1];

    const amountWETHToDeposit = utils.parseEther('1');
    await weth.connect(user.signer)['mint(address,uint256)'](user.address, amountWETHToDeposit);
    await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).deposit(weth.address, amountWETHToDeposit, user.address, '0');

    // Pause pool
    await configurator.connect(users[1].signer).setReservePause(weth.address, true);

    await expect(
      pool.connect(user.signer).setUserUseReserveAsCollateral(weth.address, false)
    ).to.be.revertedWith(RESERVE_PAUSED);

    // Unpause pool
    await configurator.connect(users[1].signer).setReservePause(weth.address, false);
  });
});



================================================
FILE: test-suites/pool-addresses-provider.spec.ts
================================================
import hre from 'hardhat';
import { expect } from 'chai';
import { utils } from 'ethers';
import { createRandomAddress } from '../helpers/misc-utils';
import { ProtocolErrors } from '../helpers/types';
import { ZERO_ADDRESS } from '../helpers/constants';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { deployPool, deployMockPool } from '@aave/deploy-v3/dist/helpers/contract-deployments';
import {
  evmSnapshot,
  evmRevert,
  getFirstSigner,
  InitializableAdminUpgradeabilityProxy__factory,
} from '@aave/deploy-v3';
import { MockPeripheryContractV1__factory, MockPeripheryContractV2__factory } from '../types';
import { getProxyAdmin, getProxyImplementation } from '../helpers/contracts-helpers';

makeSuite('PoolAddressesProvider', (testEnv: TestEnv) => {
  const { OWNABLE_ONLY_OWNER } = ProtocolErrors;

  it('Test the onlyOwner accessibility of the PoolAddressesProvider', async () => {
    const { addressesProvider, users } = testEnv;
    const mockAddress = createRandomAddress();

    // Transfer ownership to user 1
    await addressesProvider.transferOwnership(users[1].address);

    // Test accessibility with user 0
    for (const contractFunction of [
      addressesProvider.setMarketId,
      addressesProvider.setPoolImpl,
      addressesProvider.setPoolConfiguratorImpl,
      addressesProvider.setPriceOracle,
      addressesProvider.setACLAdmin,
      addressesProvider.setPriceOracleSentinel,
      addressesProvider.setPoolDataProvider,
    ]) {
      await expect(contractFunction(mockAddress)).to.be.revertedWith(OWNABLE_ONLY_OWNER);
    }

    await expect(
      addressesProvider.setAddress(utils.keccak256(utils.toUtf8Bytes('RANDOM_ID')), mockAddress)
    ).to.be.revertedWith(OWNABLE_ONLY_OWNER);

    await expect(
      addressesProvider.setAddressAsProxy(
        utils.keccak256(utils.toUtf8Bytes('RANDOM_ID')),
        mockAddress
      )
    ).to.be.revertedWith(OWNABLE_ONLY_OWNER);
  });

  it('Owner adds a new address as proxy', async () => {
    const { addressesProvider, users } = testEnv;

    const currentAddressesProviderOwner = users[1];

    const mockPool = await deployPool();
    const proxiedAddressId = utils.formatBytes32String('RANDOM_PROXIED');

    await expect(
      addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddressAsProxy(proxiedAddressId, mockPool.address)
    )
      .to.emit(addressesProvider, 'AddressSetAsProxy')
      .to.emit(addressesProvider, 'ProxyCreated');

    const proxyAddress = await addressesProvider.getAddress(proxiedAddressId);
    const implAddress = await getProxyImplementation(addressesProvider.address, proxyAddress);
    expect(implAddress).to.be.eq(mockPool.address);
  });

  it('Owner adds a new address with no proxy', async () => {
    const { addressesProvider, users } = testEnv;

    const currentAddressesProviderOwner = users[1];
    const mockNonProxiedAddress = createRandomAddress();
    const nonProxiedAddressId = utils.formatBytes32String('RANDOM_NON_PROXIED');

    const oldAddress = await addressesProvider.getAddress(nonProxiedAddressId);
    await expect(
      addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddress(nonProxiedAddressId, mockNonProxiedAddress)
    )
      .to.emit(addressesProvider, 'AddressSet')
      .withArgs(nonProxiedAddressId, oldAddress, mockNonProxiedAddress);

    expect((await addressesProvider.getAddress(nonProxiedAddressId)).toLowerCase()).to.be.eq(
      mockNonProxiedAddress.toLowerCase()
    );

    const proxyAddress = await addressesProvider.getAddress(nonProxiedAddressId);
    await expect(getProxyImplementation(addressesProvider.address, proxyAddress)).to.be.reverted;
  });

  it('Owner adds a new address with no proxy and turns it into a proxy', async () => {
    const { addressesProvider, users } = testEnv;

    const currentAddressesProviderOwner = users[1];
    const mockPool = await deployPool();
    const mockConvertibleAddress = mockPool.address;
    const convertibleAddressId = utils.formatBytes32String('CONVERTIBLE_ADDRESS');

    expect(await addressesProvider.getAddress(convertibleAddressId)).to.be.eq(ZERO_ADDRESS);

    const oldNonProxiedAddress = await addressesProvider.getAddress(convertibleAddressId);

    // Add address as non proxy
    await expect(
      addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddress(convertibleAddressId, mockConvertibleAddress)
    )
      .to.emit(addressesProvider, 'AddressSet')
      .withArgs(convertibleAddressId, oldNonProxiedAddress, mockConvertibleAddress);

    let registeredAddress = await addressesProvider.getAddress(convertibleAddressId);
    expect(registeredAddress).to.be.eq(mockConvertibleAddress);
    await expect(getProxyImplementation(addressesProvider.address, registeredAddress)).to.be
      .reverted;

    // Unregister address as non proxy
    await expect(
      addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddress(convertibleAddressId, ZERO_ADDRESS)
    )
      .to.emit(addressesProvider, 'AddressSet')
      .withArgs(convertibleAddressId, mockConvertibleAddress, ZERO_ADDRESS);

    // Add address as proxy
    await expect(
      addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddressAsProxy(convertibleAddressId, mockConvertibleAddress)
    )
      .to.emit(addressesProvider, 'AddressSetAsProxy')
      .to.emit(addressesProvider, 'ProxyCreated');

    const proxyAddress = await addressesProvider.getAddress(convertibleAddressId);
    const implAddress = await getProxyImplementation(addressesProvider.address, proxyAddress);
    expect(implAddress).to.be.eq(mockConvertibleAddress);
  });

  it('Unregister a proxy address', async () => {
    const { addressesProvider, users } = testEnv;

    const currentAddressesProviderOwner = users[1];

    const convertibleAddressId = utils.formatBytes32String('CONVERTIBLE_ADDRESS');

    const proxyAddress = await addressesProvider.getAddress(convertibleAddressId);

    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddress(convertibleAddressId, ZERO_ADDRESS)
    )
      .to.emit(addressesProvider, 'AddressSet')
      .withArgs(convertibleAddressId, proxyAddress, ZERO_ADDRESS);

    const proxyAddressAfter = await addressesProvider.getAddress(convertibleAddressId);
    expect(proxyAddressAfter).to.be.eq(ZERO_ADDRESS);
    expect(proxyAddressAfter).to.be.not.eq(proxyAddress);
    await expect(getProxyImplementation(addressesProvider.address, proxyAddressAfter)).to.be
      .reverted;
  });

  it('Owner adds a new address with proxy and turns it into a no proxy', async () => {
    const { addressesProvider, users } = testEnv;

    const currentAddressesProviderOwner = users[1];
    const mockPool = await deployPool();
    const mockConvertibleAddress = mockPool.address;
    const convertibleAddressId = utils.formatBytes32String('CONVERTIBLE_ADDRESS2');

    expect(await addressesProvider.getAddress(convertibleAddressId)).to.be.eq(ZERO_ADDRESS);

    // Add address as proxy
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddressAsProxy(convertibleAddressId, mockConvertibleAddress)
    )
      .to.emit(addressesProvider, 'AddressSetAsProxy')
      .to.emit(addressesProvider, 'ProxyCreated');

    const proxyAddress = await addressesProvider.getAddress(convertibleAddressId);
    const implAddress = await getProxyImplementation(addressesProvider.address, proxyAddress);
    expect(implAddress).to.be.eq(mockConvertibleAddress);

    // Unregister address as proxy
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddress(convertibleAddressId, ZERO_ADDRESS)
    )
      .to.emit(addressesProvider, 'AddressSet')
      .withArgs(convertibleAddressId, proxyAddress, ZERO_ADDRESS);

    // Add address as non proxy
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddress(convertibleAddressId, mockConvertibleAddress)
    )
      .to.emit(addressesProvider, 'AddressSet')
      .withArgs(convertibleAddressId, ZERO_ADDRESS, mockConvertibleAddress);

    const registeredAddressAfter = await addressesProvider.getAddress(convertibleAddressId);
    expect(registeredAddressAfter).to.be.not.eq(proxyAddress);
    expect(registeredAddressAfter).to.be.eq(mockConvertibleAddress);
    await expect(getProxyImplementation(addressesProvider.address, registeredAddressAfter)).to.be
      .reverted;
  });

  it('Unregister a no proxy address', async () => {
    const { addressesProvider, users } = testEnv;

    const currentAddressesProviderOwner = users[1];

    const convertibleAddressId = utils.formatBytes32String('CONVERTIBLE_ADDRESS2');

    const registeredAddress = await addressesProvider.getAddress(convertibleAddressId);
    await expect(getProxyImplementation(addressesProvider.address, registeredAddress)).to.be
      .reverted;

    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddress(convertibleAddressId, ZERO_ADDRESS)
    )
      .to.emit(addressesProvider, 'AddressSet')
      .withArgs(convertibleAddressId, registeredAddress, ZERO_ADDRESS);

    const registeredAddressAfter = await addressesProvider.getAddress(convertibleAddressId);
    expect(registeredAddressAfter).to.be.eq(ZERO_ADDRESS);
    expect(registeredAddressAfter).to.be.not.eq(registeredAddress);
    await expect(getProxyImplementation(addressesProvider.address, registeredAddress)).to.be
      .reverted;
  });

  it('Owner registers an existing contract (with proxy) and upgrade it', async () => {
    const { addressesProvider, users, poolAdmin } = testEnv;
    const proxyAdminOwner = users[0];

    const currentAddressesProviderOwner = users[1];
    const initialManager = users[1];
    const initialProxyAdmin = users[2];

    const newRegisteredContractId = hre.ethers.utils.keccak256(
      hre.ethers.utils.toUtf8Bytes('NEW_REGISTERED_CONTRACT')
    );

    // Deploy the periphery contract that will be registered in the PoolAddressesProvider
    const proxy = await (
      await new InitializableAdminUpgradeabilityProxy__factory(await getFirstSigner()).deploy()
    ).deployed();

    // Implementation
    const impleV1 = await (
      await new MockPeripheryContractV1__factory(await getFirstSigner()).deploy()
    ).deployed();
    await impleV1.initialize(initialManager.address, 123);

    // Initialize proxy
    const incentivesInit = impleV1.interface.encodeFunctionData('initialize', [
      initialManager.address,
      123,
    ]);
    await (
      await proxy['initialize(address,address,bytes)'](
        impleV1.address, // logic
        initialProxyAdmin.address, // admin
        incentivesInit // data
      )
    ).wait();
    expect(await getProxyAdmin(proxy.address)).to.be.eq(initialProxyAdmin.address);

    const contractToRegister = MockPeripheryContractV1__factory.connect(
      proxy.address,
      proxyAdminOwner.signer
    );
    expect(await contractToRegister.getManager()).to.be.eq(initialManager.address);

    // Register the periphery contract into the PoolAddressesProvider
    expect(await proxy.connect(initialProxyAdmin.signer).changeAdmin(addressesProvider.address));
    expect(await getProxyAdmin(proxy.address)).to.be.eq(addressesProvider.address);
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddress(newRegisteredContractId, proxy.address)
    );
    expect(await addressesProvider.getAddress(newRegisteredContractId)).to.be.eq(proxy.address);

    // Upgrade periphery contract to V2 from PoolAddressesProvider
    // Note the new implementation contract should has a proper `initialize` function signature

    // New implementation
    const impleV2 = await (
      await new MockPeripheryContractV2__factory(await getFirstSigner()).deploy()
    ).deployed();
    await impleV2.initialize(addressesProvider.address);

    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setAddressAsProxy(newRegisteredContractId, impleV2.address)
    );

    const upgradedContract = MockPeripheryContractV2__factory.connect(
      proxy.address,
      proxyAdminOwner.signer
    );
    expect(await upgradedContract.getManager()).to.be.eq(initialManager.address);
    expect(await upgradedContract.getAddressesProvider()).to.be.eq(addressesProvider.address);
  });

  it('Owner updates the implementation of a proxy which is already initialized', async () => {
    const snapId = await evmSnapshot();

    const { addressesProvider, users } = testEnv;
    const currentAddressesProviderOwner = users[1];

    const mockPool = await deployMockPool();

    // Pool has already a proxy
    const poolAddress = await addressesProvider.getPool();
    expect(poolAddress).to.be.not.eq(ZERO_ADDRESS);

    const poolAddressId = utils.formatBytes32String('POOL');
    const proxyAddress = await addressesProvider.getAddress(poolAddressId);
    const implementationAddress = await getProxyImplementation(
      addressesProvider.address,
      proxyAddress
    );

    // Update the Pool proxy
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setPoolImpl(mockPool.address)
    )
      .to.emit(addressesProvider, 'PoolUpdated')
      .withArgs(implementationAddress, mockPool.address);

    // Pool address should not change
    expect(await addressesProvider.getPool()).to.be.eq(poolAddress);

    await evmRevert(snapId);
  });

  it('Owner updates the MarketId', async () => {
    const snapId = await evmSnapshot();

    const { addressesProvider, users } = testEnv;
    const currentAddressesProviderOwner = users[1];

    const NEW_MARKET_ID = 'NEW_MARKET';

    // Current MarketId
    const oldMarketId = await addressesProvider.getMarketId();

    // Update the MarketId
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setMarketId(NEW_MARKET_ID)
    )
      .to.emit(addressesProvider, 'MarketIdSet')
      .withArgs(oldMarketId, NEW_MARKET_ID);

    expect(await addressesProvider.getMarketId()).to.be.not.eq(oldMarketId);
    expect(await addressesProvider.getMarketId()).to.be.eq(NEW_MARKET_ID);

    await evmRevert(snapId);
  });

  it('Owner updates the PoolConfigurator', async () => {
    const snapId = await evmSnapshot();

    const { addressesProvider, configurator, users } = testEnv;
    const currentAddressesProviderOwner = users[1];

    const newPoolConfiguratorImpl = (await deployMockPool()).address;

    expect(await addressesProvider.getPoolConfigurator(), configurator.address);

    const poolConfiguratorAddressId = utils.formatBytes32String('POOL_CONFIGURATOR');
    const proxyAddress = await addressesProvider.getAddress(poolConfiguratorAddressId);
    const implementationAddress = await getProxyImplementation(
      addressesProvider.address,
      proxyAddress
    );

    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setPoolConfiguratorImpl(newPoolConfiguratorImpl)
    )
      .to.emit(addressesProvider, 'PoolConfiguratorUpdated')
      .withArgs(implementationAddress, newPoolConfiguratorImpl);

    expect(await addressesProvider.getPoolConfigurator()).to.be.eq(configurator.address);
    const implementationAddressAfter = await getProxyImplementation(
      addressesProvider.address,
      proxyAddress
    );
    expect(implementationAddressAfter).to.be.not.eq(implementationAddress);
    expect(implementationAddressAfter).to.be.eq(newPoolConfiguratorImpl);

    await evmRevert(snapId);
  });

  it('Owner updates the PriceOracle', async () => {
    const snapId = await evmSnapshot();

    const { addressesProvider, oracle, users } = testEnv;
    const currentAddressesProviderOwner = users[1];

    const newPriceOracleAddress = createRandomAddress();

    expect(await addressesProvider.getPriceOracle(), oracle.address);

    const priceOracleAddressId = utils.formatBytes32String('PRICE_ORACLE');
    const registeredAddress = await addressesProvider.getAddress(priceOracleAddressId);
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setPriceOracle(newPriceOracleAddress)
    )
      .to.emit(addressesProvider, 'PriceOracleUpdated')
      .withArgs(registeredAddress, newPriceOracleAddress);

    expect(await addressesProvider.getPriceOracle()).to.be.not.eq(oracle.address);
    expect(await addressesProvider.getPriceOracle()).to.be.eq(newPriceOracleAddress);

    await evmRevert(snapId);
  });

  it('Owner updates the ACLManager', async () => {
    const snapId = await evmSnapshot();

    const { addressesProvider, users, aclManager } = testEnv;
    const currentAddressesProviderOwner = users[1];

    const newACLManagerAddress = createRandomAddress();

    expect(await addressesProvider.getACLManager(), aclManager.address);

    const aclManagerAddressId = utils.formatBytes32String('ACL_MANAGER');
    const registeredAddress = await addressesProvider.getAddress(aclManagerAddressId);
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setACLManager(newACLManagerAddress)
    )
      .to.emit(addressesProvider, 'ACLManagerUpdated')
      .withArgs(registeredAddress, newACLManagerAddress);

    expect(await addressesProvider.getACLManager()).to.be.not.eq(aclManager.address);
    expect(await addressesProvider.getACLManager()).to.be.eq(newACLManagerAddress);

    await evmRevert(snapId);
  });

  it('Owner updates the ACLAdmin', async () => {
    const snapId = await evmSnapshot();

    const { addressesProvider, users } = testEnv;
    const { aclAdmin: aclAdminAddress } = await hre.getNamedAccounts();
    const currentAddressesProviderOwner = users[1];

    const newACLAdminAddress = createRandomAddress();

    expect(await addressesProvider.getACLAdmin(), aclAdminAddress);

    const aclAdminAddressId = utils.formatBytes32String('ACL_ADMIN');
    const registeredAddress = await addressesProvider.getAddress(aclAdminAddressId);
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setACLAdmin(newACLAdminAddress)
    )
      .to.emit(addressesProvider, 'ACLAdminUpdated')
      .withArgs(registeredAddress, newACLAdminAddress);

    expect(await addressesProvider.getACLAdmin()).to.be.not.eq(aclAdminAddress);
    expect(await addressesProvider.getACLAdmin()).to.be.eq(newACLAdminAddress);

    await evmRevert(snapId);
  });

  it('Owner updates the PriceOracleSentinel', async () => {
    const snapId = await evmSnapshot();

    const { addressesProvider, users } = testEnv;
    const currentAddressesProviderOwner = users[1];

    const newPriceOracleSentinelAddress = createRandomAddress();

    const priceOracleSentinelAddressId = utils.formatBytes32String('PRICE_ORACLE_SENTINEL');
    const registeredAddress = await addressesProvider.getAddress(priceOracleSentinelAddressId);
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setPriceOracleSentinel(newPriceOracleSentinelAddress)
    )
      .to.emit(addressesProvider, 'PriceOracleSentinelUpdated')
      .withArgs(registeredAddress, newPriceOracleSentinelAddress);

    expect(await addressesProvider.getPriceOracleSentinel()).to.be.not.eq(registeredAddress);
    expect(await addressesProvider.getPriceOracleSentinel()).to.be.eq(
      newPriceOracleSentinelAddress
    );

    await evmRevert(snapId);
  });

  it('Owner updates the DataProvider', async () => {
    const snapId = await evmSnapshot();

    const { addressesProvider, helpersContract, users } = testEnv;
    const currentAddressesProviderOwner = users[1];

    expect(await addressesProvider.getPoolDataProvider(), helpersContract.address);

    const newDataProviderAddress = createRandomAddress();

    const dataProviderAddressId = utils.formatBytes32String('DATA_PROVIDER');
    const registeredAddress = await addressesProvider.getAddress(dataProviderAddressId);
    expect(
      await addressesProvider
        .connect(currentAddressesProviderOwner.signer)
        .setPoolDataProvider(newDataProviderAddress)
    )
      .to.emit(addressesProvider, 'PoolDataProviderUpdated')
      .withArgs(registeredAddress, newDataProviderAddress);

    expect(await addressesProvider.getPoolDataProvider()).to.be.not.eq(helpersContract.address);
    expect(await addressesProvider.getPoolDataProvider()).to.be.eq(newDataProviderAddress);

    await evmRevert(snapId);
  });
});



================================================
FILE: test-suites/pool-authorized-flashloan.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, utils } from 'ethers';
import {
  getMockFlashLoanReceiver,
  getStableDebtToken,
  getVariableDebtToken,
} from '@aave/deploy-v3/dist/helpers/contract-getters';
import { ProtocolErrors } from '../helpers/types';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { MockFlashLoanReceiver } from '../types/MockFlashLoanReceiver';
import { TestEnv, makeSuite } from './helpers/make-suite';
import './helpers/utils/wadraymath';

makeSuite('Pool: Authorized FlashLoan', (testEnv: TestEnv) => {
  let _mockFlashLoanReceiver = {} as MockFlashLoanReceiver;

  const {
    COLLATERAL_BALANCE_IS_ZERO,
    ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE,
    INVALID_FLASHLOAN_EXECUTOR_RETURN,
  } = ProtocolErrors;

  before(async () => {
    _mockFlashLoanReceiver = await getMockFlashLoanReceiver();
  });

  it('Authorize a flash borrower', async () => {
    const { deployer, aclManager } = testEnv;
    const flashBorrowerRole = await aclManager.FLASH_BORROWER_ROLE();
    await expect(aclManager.addFlashBorrower(deployer.address))
      .to.emit(aclManager, 'RoleGranted')
      .withArgs(flashBorrowerRole, deployer.address, deployer.address);
  });

  it('Deposits WETH into the reserve', async () => {
    const { pool, weth, deployer } = testEnv;
    const userAddress = await pool.signer.getAddress();
    const amountToDeposit = utils.parseEther('1');

    expect(await weth['mint(address,uint256)'](deployer.address, amountToDeposit));

    expect(await weth.approve(pool.address, MAX_UINT_AMOUNT));

    expect(await pool.deposit(weth.address, amountToDeposit, userAddress, '0'));
  });

  it('Takes WETH flash loan with mode = 0, returns the funds correctly', async () => {
    const { pool, helpersContract, weth } = testEnv;

    expect(
      await pool.flashLoan(
        _mockFlashLoanReceiver.address,
        [weth.address],
        [utils.parseEther('0.8')],
        [0],
        _mockFlashLoanReceiver.address,
        '0x10',
        '0'
      )
    );

    const reserveData = await helpersContract.getReserveData(weth.address);

    const currentLiquidityRate = reserveData.liquidityRate;
    const currentLiquidityIndex = reserveData.liquidityIndex;

    const totalLiquidity = reserveData.totalAToken.add(
      reserveData.accruedToTreasuryScaled.rayMul(reserveData.liquidityIndex)
    );

    expect(totalLiquidity).to.be.equal('1000000000000000000');
    expect(currentLiquidityRate).to.be.equal('0');
    expect(currentLiquidityIndex).to.be.equal('1000000000000000000000000000');
  });

  it('Takes an ETH flash loan with mode = 0 as big as the available liquidity', async () => {
    const { pool, helpersContract, weth } = testEnv;

    expect(
      await pool.flashLoan(
        _mockFlashLoanReceiver.address,
        [weth.address],
        ['1000000000000000000'],
        [0],
        _mockFlashLoanReceiver.address,
        '0x10',
        '0'
      )
    );

    const reserveData = await helpersContract.getReserveData(weth.address);

    const currentLiquidityRate = reserveData.liquidityRate;
    const currentLiquidityIndex = reserveData.liquidityIndex;

    const totalLiquidity = reserveData.totalAToken.add(
      reserveData.accruedToTreasuryScaled.rayMul(reserveData.liquidityIndex)
    );

    expect(totalLiquidity).to.be.equal('1000000000000000000');
    expect(currentLiquidityRate).to.be.equal('0');
    expect(currentLiquidityIndex).to.be.equal('1000000000000000000000000000');
  });

  it('Takes WETH flashloan, does not return the funds with mode = 0 (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];
    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(true));

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [utils.parseEther('0.8')],
          [0],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Takes WETH flash loan, simulating a receiver as EOA (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];
    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(true));
    expect(await _mockFlashLoanReceiver.setSimulateEOA(true));

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [utils.parseEther('0.8')],
          [0],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.revertedWith(INVALID_FLASHLOAN_EXECUTOR_RETURN);
  });

  it('Takes a WETH flashloan with an invalid mode (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];
    expect(await _mockFlashLoanReceiver.setSimulateEOA(false));
    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(true));

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [utils.parseEther('0.8')],
          [4],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Caller deposits 1000 DAI as collateral, Takes WETH flashloan with mode = 2, does not return the funds. A variable loan for caller is created', async () => {
    const { dai, pool, weth, users, helpersContract } = testEnv;

    const caller = users[1];

    const amountToDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    // Top up user
    expect(await dai.connect(caller.signer)['mint(uint256)'](amountToDeposit));

    expect(await dai.connect(caller.signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(
      await pool.connect(caller.signer).deposit(dai.address, amountToDeposit, caller.address, '0')
    );

    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(true));

    expect(
      await pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [utils.parseEther('0.0571')],
          [2],
          caller.address,
          '0x10',
          '0'
        )
    );
    const { variableDebtTokenAddress } = await helpersContract.getReserveTokensAddresses(
      weth.address
    );

    const wethDebtToken = await getVariableDebtToken(variableDebtTokenAddress);

    const callerDebt = await wethDebtToken.balanceOf(caller.address);

    expect(callerDebt.toString()).to.be.equal('57100000000000000', 'Invalid user debt');
  });

  it('Tries to take a flashloan that is bigger than the available liquidity (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];

    await expect(
      pool.connect(caller.signer).flashLoan(
        _mockFlashLoanReceiver.address,
        [weth.address],
        ['1000000000000000001'], //slightly higher than the available liquidity
        [2],
        caller.address,
        '0x10',
        '0'
      ),
      ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE
    ).to.be.reverted;
  });

  it('Tries to take a flashloan using a non contract address as receiver (revert expected)', async () => {
    const { pool, deployer, weth, users } = testEnv;
    const caller = users[1];

    await expect(
      pool.flashLoan(
        deployer.address,
        [weth.address],
        ['1000000000000000000'],
        [2],
        caller.address,
        '0x10',
        '0'
      )
    ).to.be.reverted;
  });

  it('Deposits USDC into the reserve', async () => {
    const { usdc, pool } = testEnv;
    const userAddress = await pool.signer.getAddress();

    const amountToDeposit = await convertToCurrencyDecimals(usdc.address, '1000');

    // Top up user
    expect(await usdc['mint(uint256)'](amountToDeposit));

    expect(await usdc.approve(pool.address, MAX_UINT_AMOUNT));

    expect(await pool.deposit(usdc.address, amountToDeposit, userAddress, '0'));
  });

  it('Takes out a 500 USDC flashloan, returns the funds correctly', async () => {
    const { usdc, pool, helpersContract, deployer: depositor } = testEnv;

    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(false));

    const flashloanAmount = await convertToCurrencyDecimals(usdc.address, '500');

    expect(
      await pool.flashLoan(
        _mockFlashLoanReceiver.address,
        [usdc.address],
        [flashloanAmount],
        [0],
        _mockFlashLoanReceiver.address,
        '0x10',
        '0'
      )
    );

    const reserveData = await helpersContract.getReserveData(usdc.address);
    const userData = await helpersContract.getUserReserveData(usdc.address, depositor.address);

    const totalLiquidity = reserveData.totalAToken.add(
      reserveData.accruedToTreasuryScaled.rayMul(reserveData.liquidityIndex)
    );

    const expectedLiquidity = await convertToCurrencyDecimals(usdc.address, '1000');

    expect(totalLiquidity).to.be.equal(expectedLiquidity, 'Invalid total liquidity');
    expect(reserveData.liquidityRate).to.be.equal('0', 'Invalid liquidity rate');
    expect(reserveData.liquidityIndex).to.be.equal(
      utils.parseUnits('1', 27),
      'Invalid liquidity index'
    );
    expect(userData.currentATokenBalance).to.be.equal(expectedLiquidity, 'Invalid user balance');
  });

  it('Takes out a 500 USDC flashloan with mode = 0, does not return the funds (revert expected)', async () => {
    const { usdc, pool, users } = testEnv;
    const caller = users[2];

    const flashloanAmount = await convertToCurrencyDecimals(usdc.address, '500');

    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(true));

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [usdc.address],
          [flashloanAmount],
          [2],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.revertedWith(COLLATERAL_BALANCE_IS_ZERO);
  });

  it('Caller deposits 5 WETH as collateral, Takes a USDC flashloan with mode = 2, does not return the funds. A loan for caller is created', async () => {
    const { usdc, pool, weth, users, helpersContract } = testEnv;

    const caller = users[2];

    const amountToDeposit = await convertToCurrencyDecimals(weth.address, '5');

    // Top up user
    expect(
      await weth.connect(caller.signer)['mint(address,uint256)'](caller.address, amountToDeposit)
    );

    expect(await weth.connect(caller.signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(
      await pool.connect(caller.signer).deposit(weth.address, amountToDeposit, caller.address, '0')
    );

    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(true));

    const flashloanAmount = await convertToCurrencyDecimals(usdc.address, '500');

    expect(
      await pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [usdc.address],
          [flashloanAmount],
          [2],
          caller.address,
          '0x10',
          '0'
        )
    );
    const { variableDebtTokenAddress } = await helpersContract.getReserveTokensAddresses(
      usdc.address
    );

    const usdcDebtToken = await getVariableDebtToken(variableDebtTokenAddress);

    const callerDebt = await usdcDebtToken.balanceOf(caller.address);

    expect(callerDebt.toString()).to.be.equal('500000000', 'Invalid user debt');
  });

  it('Caller deposits 1000 DAI as collateral, Takes a WETH flashloan with mode = 0, does not approve the transfer of the funds (revert expected)', async () => {
    const { dai, pool, weth, users } = testEnv;
    const caller = users[3];

    const amountToDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    // Top up user
    expect(await dai.connect(caller.signer)['mint(uint256)'](amountToDeposit));

    expect(await dai.connect(caller.signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(
      await pool.connect(caller.signer).deposit(dai.address, amountToDeposit, caller.address, '0')
    );

    const flashAmount = utils.parseEther('0.8');

    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(false));
    expect(await _mockFlashLoanReceiver.setAmountToApprove(flashAmount.div(2)));

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [flashAmount],
          [0],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Caller takes a WETH flashloan with mode = 1', async () => {
    const { pool, weth, users, helpersContract } = testEnv;

    const caller = users[3];

    const flashAmount = utils.parseEther('0.0571');

    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(true));

    expect(
      await pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [flashAmount],
          [1],
          caller.address,
          '0x10',
          '0'
        )
    );

    const { stableDebtTokenAddress } = await helpersContract.getReserveTokensAddresses(
      weth.address
    );

    const wethDebtToken = await getStableDebtToken(stableDebtTokenAddress);

    const callerDebt = await wethDebtToken.balanceOf(caller.address);

    expect(callerDebt.toString()).to.be.equal(flashAmount, 'Invalid user debt');
  });

  it('Caller takes a WETH flashloan with mode = 1 onBehalfOf user without allowance (revert expected)', async () => {
    const { dai, pool, weth, users, helpersContract } = testEnv;

    const caller = users[5];
    const onBehalfOf = users[4];

    const amountToDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    // Top up user
    expect(await dai.connect(onBehalfOf.signer)['mint(uint256)'](amountToDeposit));

    // Deposit 1000 dai for onBehalfOf user
    expect(await dai.connect(onBehalfOf.signer).approve(pool.address, MAX_UINT_AMOUNT));

    expect(
      await pool
        .connect(onBehalfOf.signer)
        .deposit(dai.address, amountToDeposit, onBehalfOf.address, '0')
    );

    const flashAmount = utils.parseEther('0.0571');

    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(true));

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [flashAmount],
          [1],
          onBehalfOf.address,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Caller takes a WETH flashloan with mode = 1 onBehalfOf user with allowance. A loan for onBehalfOf is creatd.', async () => {
    const { pool, weth, users, helpersContract } = testEnv;

    const caller = users[5];
    const onBehalfOf = users[4];

    const flashAmount = utils.parseEther('0.0571');

    const reserveData = await pool.getReserveData(weth.address);

    const stableDebtToken = await getStableDebtToken(reserveData.stableDebtTokenAddress);

    // Deposited for onBehalfOf user already, delegate borrow allowance
    expect(
      await stableDebtToken
        .connect(onBehalfOf.signer)
        .approveDelegation(caller.address, flashAmount)
    );

    expect(await _mockFlashLoanReceiver.setFailExecutionTransfer(true));

    expect(
      await pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [flashAmount],
          [1],
          onBehalfOf.address,
          '0x10',
          '0'
        )
    );

    const { stableDebtTokenAddress } = await helpersContract.getReserveTokensAddresses(
      weth.address
    );

    const wethDebtToken = await getStableDebtToken(stableDebtTokenAddress);

    const onBehalfOfDebt = await wethDebtToken.balanceOf(onBehalfOf.address);

    expect(onBehalfOfDebt.toString()).to.be.equal(
      '57100000000000000',
      'Invalid onBehalfOf user debt'
    );
  });
});



================================================
FILE: test-suites/pool-drop-reserve.spec.ts
================================================
import { expect } from 'chai';
import { utils } from 'ethers';
import { ProtocolErrors } from '../helpers/types';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { MockFlashLoanReceiver } from '../types/MockFlashLoanReceiver';
import { getMockFlashLoanReceiver } from '@aave/deploy-v3/dist/helpers/contract-getters';
import { makeSuite, TestEnv } from './helpers/make-suite';

makeSuite('Pool: Drop Reserve', (testEnv: TestEnv) => {
  let _mockFlashLoanReceiver = {} as MockFlashLoanReceiver;

  const {
    UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO,
    STABLE_DEBT_NOT_ZERO,
    VARIABLE_DEBT_SUPPLY_NOT_ZERO,
    ASSET_NOT_LISTED,
    ZERO_ADDRESS_NOT_VALID,
  } = ProtocolErrors;

  before(async () => {
    _mockFlashLoanReceiver = await getMockFlashLoanReceiver();
  });

  it('User 1 deposits DAI, User 2 borrow DAI stable and variable, should fail to drop DAI reserve', async () => {
    const {
      deployer,
      users: [user1],
      pool,
      dai,
      weth,
      configurator,
    } = testEnv;

    const depositedAmount = utils.parseEther('1000');
    const borrowedAmount = utils.parseEther('100');
    // setting reserve factor to 0 to ease tests, no aToken accrued in reserve
    await configurator.setReserveFactor(dai.address, 0);

    await dai['mint(uint256)'](depositedAmount);
    await dai.approve(pool.address, depositedAmount);
    await dai.connect(user1.signer)['mint(uint256)'](depositedAmount);
    await dai.connect(user1.signer).approve(pool.address, depositedAmount);

    await weth.connect(user1.signer)['mint(address,uint256)'](user1.address, depositedAmount);
    await weth.connect(user1.signer).approve(pool.address, depositedAmount);

    await pool.deposit(dai.address, depositedAmount, deployer.address, 0);

    await expect(configurator.dropReserve(dai.address)).to.be.revertedWith(
      UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO
    );

    await pool.connect(user1.signer).deposit(weth.address, depositedAmount, user1.address, 0);

    await pool.connect(user1.signer).borrow(dai.address, borrowedAmount, 2, 0, user1.address);
    await expect(configurator.dropReserve(dai.address)).to.be.revertedWith(
      VARIABLE_DEBT_SUPPLY_NOT_ZERO
    );
    await pool.connect(user1.signer).borrow(dai.address, borrowedAmount, 1, 0, user1.address);
    await expect(configurator.dropReserve(dai.address)).to.be.revertedWith(STABLE_DEBT_NOT_ZERO);
  });

  it('User 2 repays debts, drop DAI reserve should fail', async () => {
    const {
      users: [user1],
      pool,
      dai,
      configurator,
    } = testEnv;
    expect(await pool.connect(user1.signer).repay(dai.address, MAX_UINT_AMOUNT, 1, user1.address));
    await expect(configurator.dropReserve(dai.address)).to.be.revertedWith(
      VARIABLE_DEBT_SUPPLY_NOT_ZERO
    );

    expect(await pool.connect(user1.signer).repay(dai.address, MAX_UINT_AMOUNT, 2, user1.address));
    await expect(configurator.dropReserve(dai.address)).to.be.revertedWith(
      UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO
    );
  });

  it('User 1 withdraw DAI, drop DAI reserve should succeed', async () => {
    const { deployer, pool, dai, configurator, helpersContract } = testEnv;

    await pool.withdraw(dai.address, MAX_UINT_AMOUNT, deployer.address);
    const reserveCount = (await pool.getReservesList()).length;
    expect(await configurator.dropReserve(dai.address));

    const tokens = await pool.getReservesList();

    expect(tokens.length).to.be.eq(reserveCount - 1);
    expect(tokens.includes(dai.address)).to.be.false;

    const { isActive } = await helpersContract.getReserveConfigurationData(dai.address);
    expect(isActive).to.be.false;
  });

  it('Drop an asset that is not a listed reserve should fail', async () => {
    const { users, configurator } = testEnv;
    await expect(configurator.dropReserve(users[5].address)).to.be.revertedWith(ASSET_NOT_LISTED);
  });

  it('Drop an asset that is not a listed reserve should fail', async () => {
    const { users, configurator } = testEnv;
    await expect(configurator.dropReserve(ZERO_ADDRESS)).to.be.revertedWith(ZERO_ADDRESS_NOT_VALID);
  });
});



================================================
FILE: test-suites/pool-edge.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, BigNumberish, utils } from 'ethers';
import { impersonateAccountsHardhat, setAutomine } from '../helpers/misc-utils';
import { MAX_UINT_AMOUNT, MAX_UNBACKED_MINT_CAP, ZERO_ADDRESS } from '../helpers/constants';
import { deployMintableERC20 } from '@aave/deploy-v3/dist/helpers/contract-deployments';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { getFirstSigner } from '@aave/deploy-v3/dist/helpers/utilities/signer';
import { topUpNonPayableWithEther } from './helpers/utils/funds';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import {
  evmSnapshot,
  evmRevert,
  getPoolLibraries,
  MockFlashLoanReceiver,
  getMockFlashLoanReceiver,
  advanceTimeAndBlock,
  getACLManager,
} from '@aave/deploy-v3';
import {
  MockPoolInherited__factory,
  MockReserveInterestRateStrategy__factory,
  StableDebtToken__factory,
  VariableDebtToken__factory,
  AToken__factory,
  Pool__factory,
  ERC20__factory,
} from '../types';
import { convertToCurrencyDecimals, getProxyImplementation } from '../helpers/contracts-helpers';
import { ethers } from 'hardhat';
import { deposit, getTxCostAndTimestamp } from './helpers/actions';
import AaveConfig from '@aave/deploy-v3/dist/markets/test';
import {
  calcExpectedReserveDataAfterDeposit,
  configuration as calculationsConfiguration,
} from './helpers/utils/calculations';
import { getReserveData } from './helpers/utils/helpers';

declare var hre: HardhatRuntimeEnvironment;

// Setup function to have 1 user with DAI deposits, and another user with WETH collateral
// and DAI borrowings at an indicated borrowing mode
const setupPositions = async (testEnv: TestEnv, borrowingMode: RateMode) => {
  const {
    pool,
    dai,
    weth,
    oracle,
    users: [depositor, borrower],
  } = testEnv;

  // mints DAI to depositor
  await dai
    .connect(depositor.signer)
    ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '20000'));

  // approve protocol to access depositor wallet
  await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

  // user 1 deposits 1000 DAI
  const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '10000');

  await pool
    .connect(depositor.signer)
    .deposit(dai.address, amountDAItoDeposit, depositor.address, '0');
  // user 2 deposits 1 ETH
  const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '1');

  // mints WETH to borrower
  await weth
    .connect(borrower.signer)
    ['mint(address,uint256)'](
      borrower.address,
      await convertToCurrencyDecimals(weth.address, '1000')
    );

  // approve protocol to access the borrower wallet
  await weth.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

  await pool
    .connect(borrower.signer)
    .deposit(weth.address, amountETHtoDeposit, borrower.address, '0');

  //user 2 borrows

  const userGlobalData = await pool.getUserAccountData(borrower.address);
  const daiPrice = await oracle.getAssetPrice(dai.address);

  const amountDAIToBorrow = await convertToCurrencyDecimals(
    dai.address,
    userGlobalData.availableBorrowsBase.div(daiPrice).mul(5000).div(10000).toString()
  );
  await pool
    .connect(borrower.signer)
    .borrow(dai.address, amountDAIToBorrow, borrowingMode, '0', borrower.address);
};

makeSuite('Pool: Edge cases', (testEnv: TestEnv) => {
  const {
    NO_MORE_RESERVES_ALLOWED,
    CALLER_NOT_ATOKEN,
    NOT_CONTRACT,
    CALLER_NOT_POOL_CONFIGURATOR,
    RESERVE_ALREADY_INITIALIZED,
    INVALID_ADDRESSES_PROVIDER,
    RESERVE_ALREADY_ADDED,
    DEBT_CEILING_NOT_ZERO,
    ASSET_NOT_LISTED,
    ZERO_ADDRESS_NOT_VALID,
    UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO,
    SUPPLY_CAP_EXCEEDED,
    RESERVE_LIQUIDITY_NOT_ZERO,
  } = ProtocolErrors;

  const MAX_STABLE_RATE_BORROW_SIZE_PERCENT = 2500;
  const MAX_NUMBER_RESERVES = 128;
  const TOTAL_PREMIUM = 9;
  const PREMIUM_TO_PROTOCOL = 3000;

  const POOL_ID = utils.formatBytes32String('POOL');

  let snap: string;

  let _mockFlashLoanReceiver = {} as MockFlashLoanReceiver;

  beforeEach(async () => {
    snap = await evmSnapshot();
  });

  afterEach(async () => {
    await evmRevert(snap);
  });

  it('Drop asset while user uses it as collateral, ensure that borrowing power is lowered', async () => {
    const {
      addressesProvider,
      poolAdmin,
      dai,
      users: [user0],
    } = testEnv;
    const { deployer: deployerName } = await hre.getNamedAccounts();

    // Deploy the mock Pool with a `dropReserve` skipping the checks
    const NEW_POOL_IMPL_ARTIFACT = await hre.deployments.deploy('MockPoolInheritedDropper', {
      contract: 'MockPoolInherited',
      from: deployerName,
      args: [addressesProvider.address],
      libraries: {
        SupplyLogic: (await hre.deployments.get('SupplyLogic')).address,
        BorrowLogic: (await hre.deployments.get('BorrowLogic')).address,
        LiquidationLogic: (await hre.deployments.get('LiquidationLogic')).address,
        EModeLogic: (await hre.deployments.get('EModeLogic')).address,
        BridgeLogic: (await hre.deployments.get('BridgeLogic')).address,
        FlashLoanLogic: (await hre.deployments.get('FlashLoanLogic')).address,
        PoolLogic: (await hre.deployments.get('PoolLogic')).address,
      },
      log: false,
    });

    const poolProxyAddress = await addressesProvider.getPool();
    const oldPoolImpl = await getProxyImplementation(addressesProvider.address, poolProxyAddress);

    // Upgrade the Pool
    await expect(
      addressesProvider.connect(poolAdmin.signer).setPoolImpl(NEW_POOL_IMPL_ARTIFACT.address)
    )
      .to.emit(addressesProvider, 'PoolUpdated')
      .withArgs(oldPoolImpl, NEW_POOL_IMPL_ARTIFACT.address);

    // Get the Pool instance
    const mockPoolAddress = await addressesProvider.getPool();
    const mockPool = await MockPoolInherited__factory.connect(
      mockPoolAddress,
      await getFirstSigner()
    );

    const amount = utils.parseUnits('10', 18);
    const amountUSD = amount.div(BigNumber.from(10).pow(10));

    await dai.connect(user0.signer)['mint(uint256)'](amount);
    await dai.connect(user0.signer).approve(mockPool.address, MAX_UINT_AMOUNT);

    expect(await mockPool.connect(user0.signer).supply(dai.address, amount, user0.address, 0));

    const userReserveDataBefore = await mockPool.getUserAccountData(user0.address);

    expect(userReserveDataBefore.totalCollateralBase).to.be.eq(amountUSD);
    expect(userReserveDataBefore.totalDebtBase).to.be.eq(0);
    expect(userReserveDataBefore.availableBorrowsBase).to.be.eq(amountUSD.mul(7500).div(10000));
    expect(userReserveDataBefore.currentLiquidationThreshold).to.be.eq(8000);
    expect(userReserveDataBefore.ltv).to.be.eq(7500);
    expect(userReserveDataBefore.healthFactor).to.be.eq(MAX_UINT_AMOUNT);

    expect(await mockPool.dropReserve(dai.address));

    const userReserveDataAfter = await mockPool.getUserAccountData(user0.address);

    expect(userReserveDataAfter.totalCollateralBase).to.be.eq(0);
    expect(userReserveDataAfter.totalDebtBase).to.be.eq(0);
    expect(userReserveDataAfter.availableBorrowsBase).to.be.eq(0);
    expect(userReserveDataAfter.currentLiquidationThreshold).to.be.eq(0);
    expect(userReserveDataAfter.ltv).to.be.eq(0);
    expect(userReserveDataAfter.healthFactor).to.be.eq(MAX_UINT_AMOUNT);
  });

  it('Initialize fresh deployment with incorrect addresses provider (revert expected)', async () => {
    const {
      addressesProvider,
      users: [deployer],
    } = testEnv;
    const { deployer: deployerName } = await hre.getNamedAccounts();

    const NEW_POOL_IMPL_ARTIFACT = await hre.deployments.deploy('Pool', {
      contract: 'Pool',
      from: deployerName,
      args: [addressesProvider.address],
      libraries: {
        SupplyLogic: (await hre.deployments.get('SupplyLogic')).address,
        BorrowLogic: (await hre.deployments.get('BorrowLogic')).address,
        LiquidationLogic: (await hre.deployments.get('LiquidationLogic')).address,
        EModeLogic: (await hre.deployments.get('EModeLogic')).address,
        BridgeLogic: (await hre.deployments.get('BridgeLogic')).address,
        FlashLoanLogic: (await hre.deployments.get('FlashLoanLogic')).address,
        PoolLogic: (await hre.deployments.get('PoolLogic')).address,
      },
      log: false,
    });

    const freshPool = Pool__factory.connect(NEW_POOL_IMPL_ARTIFACT.address, deployer.signer);

    await expect(freshPool.initialize(deployer.address)).to.be.revertedWith(
      INVALID_ADDRESSES_PROVIDER
    );
  });

  it('Check initialization', async () => {
    const { pool } = testEnv;

    expect(await pool.MAX_STABLE_RATE_BORROW_SIZE_PERCENT()).to.be.eq(
      MAX_STABLE_RATE_BORROW_SIZE_PERCENT
    );
    expect(await pool.MAX_NUMBER_RESERVES()).to.be.eq(MAX_NUMBER_RESERVES);
  });

  it('Tries to initialize a reserve as non PoolConfigurator (revert expected)', async () => {
    const { pool, users, dai, helpersContract } = testEnv;

    const config = await helpersContract.getReserveTokensAddresses(dai.address);

    await expect(
      pool
        .connect(users[0].signer)
        .initReserve(
          dai.address,
          config.aTokenAddress,
          config.stableDebtTokenAddress,
          config.variableDebtTokenAddress,
          ZERO_ADDRESS
        )
    ).to.be.revertedWith(CALLER_NOT_POOL_CONFIGURATOR);
  });

  it('Call `setUserUseReserveAsCollateral()` to use an asset as collateral when the asset is already set as collateral', async () => {
    const {
      pool,
      helpersContract,
      dai,
      users: [user0],
    } = testEnv;

    const amount = utils.parseUnits('10', 18);
    await dai.connect(user0.signer)['mint(uint256)'](amount);
    await dai.connect(user0.signer).approve(pool.address, MAX_UINT_AMOUNT);

    expect(await pool.connect(user0.signer).supply(dai.address, amount, user0.address, 0));

    const userReserveDataBefore = await helpersContract.getUserReserveData(
      dai.address,
      user0.address
    );
    expect(userReserveDataBefore.usageAsCollateralEnabled).to.be.true;

    expect(
      await pool.connect(user0.signer).setUserUseReserveAsCollateral(dai.address, true)
    ).to.not.emit(pool, 'ReserveUsedAsCollateralEnabled');

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      dai.address,
      user0.address
    );
    expect(userReserveDataAfter.usageAsCollateralEnabled).to.be.true;
  });

  it('Call `setUserUseReserveAsCollateral()` to disable an asset as collateral when the asset is already disabled as collateral', async () => {
    const {
      pool,
      helpersContract,
      dai,
      users: [user0],
    } = testEnv;

    const amount = utils.parseUnits('10', 18);
    await dai.connect(user0.signer)['mint(uint256)'](amount);
    await dai.connect(user0.signer).approve(pool.address, MAX_UINT_AMOUNT);

    expect(await pool.connect(user0.signer).supply(dai.address, amount, user0.address, 0));

    // Disable asset as collateral
    await expect(pool.connect(user0.signer).setUserUseReserveAsCollateral(dai.address, false))
      .to.emit(pool, 'ReserveUsedAsCollateralDisabled')
      .withArgs(dai.address, user0.address);

    const userReserveDataBefore = await helpersContract.getUserReserveData(
      dai.address,
      user0.address
    );
    expect(userReserveDataBefore.usageAsCollateralEnabled).to.be.false;

    expect(
      await pool.connect(user0.signer).setUserUseReserveAsCollateral(dai.address, false)
    ).to.not.emit(pool, 'ReserveUsedAsCollateralDisabled');

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      dai.address,
      user0.address
    );
    expect(userReserveDataAfter.usageAsCollateralEnabled).to.be.false;
  });

  it('Call `mintToTreasury()` on a pool with an inactive reserve', async () => {
    const { pool, poolAdmin, dai, users, configurator } = testEnv;

    // Deactivate reserve
    expect(await configurator.connect(poolAdmin.signer).setReserveActive(dai.address, false));

    // MintToTreasury
    expect(await pool.connect(users[0].signer).mintToTreasury([dai.address]));
  });

  it('Tries to call `finalizeTransfer()` by a non-aToken address (revert expected)', async () => {
    const { pool, dai, users } = testEnv;

    await expect(
      pool
        .connect(users[0].signer)
        .finalizeTransfer(dai.address, users[0].address, users[1].address, 0, 0, 0)
    ).to.be.revertedWith(CALLER_NOT_ATOKEN);
  });

  it('Tries to call `initReserve()` with an EOA as reserve (revert expected)', async () => {
    const { pool, deployer, users, configurator } = testEnv;

    // Impersonate PoolConfigurator
    await topUpNonPayableWithEther(deployer.signer, [configurator.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([configurator.address]);
    const configSigner = await hre.ethers.getSigner(configurator.address);

    await expect(
      pool
        .connect(configSigner)
        .initReserve(users[0].address, ZERO_ADDRESS, ZERO_ADDRESS, ZERO_ADDRESS, ZERO_ADDRESS)
    ).to.be.revertedWith(NOT_CONTRACT);
  });

  it('PoolConfigurator updates the ReserveInterestRateStrategy address', async () => {
    const { pool, deployer, dai, configurator } = testEnv;

    // Impersonate PoolConfigurator
    await topUpNonPayableWithEther(deployer.signer, [configurator.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([configurator.address]);
    const configSigner = await hre.ethers.getSigner(configurator.address);

    expect(
      await pool
        .connect(configSigner)
        .setReserveInterestRateStrategyAddress(dai.address, ZERO_ADDRESS)
    );

    const config = await pool.getReserveData(dai.address);
    expect(config.interestRateStrategyAddress).to.be.eq(ZERO_ADDRESS);
  });

  it('PoolConfigurator updates the ReserveInterestRateStrategy address for asset 0', async () => {
    const { pool, deployer, dai, configurator } = testEnv;

    // Impersonate PoolConfigurator
    await topUpNonPayableWithEther(deployer.signer, [configurator.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([configurator.address]);
    const configSigner = await hre.ethers.getSigner(configurator.address);

    await expect(
      pool.connect(configSigner).setReserveInterestRateStrategyAddress(ZERO_ADDRESS, ZERO_ADDRESS)
    ).to.be.revertedWith(ZERO_ADDRESS_NOT_VALID);
  });

  it('PoolConfigurator updates the ReserveInterestRateStrategy address for an unlisted asset (revert expected)', async () => {
    const { pool, deployer, dai, configurator, users } = testEnv;

    // Impersonate PoolConfigurator
    await topUpNonPayableWithEther(deployer.signer, [configurator.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([configurator.address]);
    const configSigner = await hre.ethers.getSigner(configurator.address);

    await expect(
      pool
        .connect(configSigner)
        .setReserveInterestRateStrategyAddress(users[5].address, ZERO_ADDRESS)
    ).to.be.revertedWith(ASSET_NOT_LISTED);
  });

  it('Activates the zero address reserve for borrowing via pool admin (expect revert)', async () => {
    const { configurator } = testEnv;
    await expect(configurator.setReserveBorrowing(ZERO_ADDRESS, true)).to.be.revertedWith(
      ZERO_ADDRESS_NOT_VALID
    );
  });

  it('Initialize an already initialized reserve. ReserveLogic `init` where aTokenAddress != ZERO_ADDRESS (revert expected)', async () => {
    const { pool, dai, deployer, configurator } = testEnv;

    // Impersonate PoolConfigurator
    await topUpNonPayableWithEther(deployer.signer, [configurator.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([configurator.address]);
    const configSigner = await hre.ethers.getSigner(configurator.address);

    const config = await pool.getReserveData(dai.address);

    await expect(
      pool.connect(configSigner).initReserve(
        dai.address,
        config.aTokenAddress, // just need a non-used reserve token
        config.stableDebtTokenAddress,
        config.variableDebtTokenAddress,
        ZERO_ADDRESS
      )
    ).to.be.revertedWith(RESERVE_ALREADY_INITIALIZED);
  });

  it('Init reserve with ZERO_ADDRESS as aToken twice, to enter `_addReserveToList()` already added (revert expected)', async () => {
    /**
     * To get into this case, we need to init a reserve with `aTokenAddress = address(0)` twice.
     * `_addReserveToList()` is called from `initReserve`. However, in `initReserve` we run `init` before the `_addReserveToList()`,
     * and in `init` we are checking if `aTokenAddress == address(0)`, so to bypass that we need this odd init.
     */
    const { pool, dai, deployer, configurator } = testEnv;

    // Impersonate PoolConfigurator
    await topUpNonPayableWithEther(deployer.signer, [configurator.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([configurator.address]);
    const configSigner = await hre.ethers.getSigner(configurator.address);

    const config = await pool.getReserveData(dai.address);

    const poolListBefore = await pool.getReservesList();

    expect(
      await pool
        .connect(configSigner)
        .initReserve(
          config.aTokenAddress,
          ZERO_ADDRESS,
          config.stableDebtTokenAddress,
          config.variableDebtTokenAddress,
          ZERO_ADDRESS
        )
    );
    const poolListMid = await pool.getReservesList();
    expect(poolListBefore.length + 1).to.be.eq(poolListMid.length);

    // Add it again.
    await expect(
      pool
        .connect(configSigner)
        .initReserve(
          config.aTokenAddress,
          ZERO_ADDRESS,
          config.stableDebtTokenAddress,
          config.variableDebtTokenAddress,
          ZERO_ADDRESS
        )
    ).to.be.revertedWith(RESERVE_ALREADY_ADDED);
    const poolListAfter = await pool.getReservesList();
    expect(poolListAfter.length).to.be.eq(poolListMid.length);
  });

  it('Initialize reserves until max, then add one more (revert expected)', async () => {
    // Upgrade the Pool to update the maximum number of reserves
    const { addressesProvider, poolAdmin, pool, dai, deployer, configurator } = testEnv;
    const { deployer: deployerName } = await hre.getNamedAccounts();

    // Impersonate the PoolConfigurator
    await topUpNonPayableWithEther(deployer.signer, [configurator.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([configurator.address]);
    const configSigner = await hre.ethers.getSigner(configurator.address);

    // Deploy the mock Pool with a setter of `maxNumberOfReserves`
    const NEW_POOL_IMPL_ARTIFACT = await hre.deployments.deploy('MockPoolInherited', {
      contract: 'MockPoolInherited',
      from: deployerName,
      args: [addressesProvider.address],
      libraries: {
        SupplyLogic: (await hre.deployments.get('SupplyLogic')).address,
        BorrowLogic: (await hre.deployments.get('BorrowLogic')).address,
        LiquidationLogic: (await hre.deployments.get('LiquidationLogic')).address,
        EModeLogic: (await hre.deployments.get('EModeLogic')).address,
        BridgeLogic: (await hre.deployments.get('BridgeLogic')).address,
        FlashLoanLogic: (await hre.deployments.get('FlashLoanLogic')).address,
        PoolLogic: (await hre.deployments.get('PoolLogic')).address,
      },
      log: false,
    });

    const poolProxyAddress = await addressesProvider.getPool();
    const oldPoolImpl = await getProxyImplementation(addressesProvider.address, poolProxyAddress);

    // Upgrade the Pool
    expect(
      await addressesProvider.connect(poolAdmin.signer).setPoolImpl(NEW_POOL_IMPL_ARTIFACT.address)
    )
      .to.emit(addressesProvider, 'PoolUpdated')
      .withArgs(oldPoolImpl, NEW_POOL_IMPL_ARTIFACT.address);

    // Get the Pool instance
    const mockPoolAddress = await addressesProvider.getPool();
    const mockPool = await MockPoolInherited__factory.connect(
      mockPoolAddress,
      await getFirstSigner()
    );

    // Get the current number of reserves
    const numberOfReserves = (await mockPool.getReservesList()).length;

    // Set the limit
    expect(await mockPool.setMaxNumberOfReserves(numberOfReserves));
    expect(await mockPool.MAX_NUMBER_RESERVES()).to.be.eq(numberOfReserves);

    const freshContract = await deployMintableERC20(['MOCK', 'MOCK', '18']);
    const config = await pool.getReserveData(dai.address);
    await expect(
      pool.connect(configSigner).initReserve(
        freshContract.address, // just need a non-used reserve token
        ZERO_ADDRESS,
        config.stableDebtTokenAddress,
        config.variableDebtTokenAddress,
        ZERO_ADDRESS
      )
    ).to.be.revertedWith(NO_MORE_RESERVES_ALLOWED);
  });

  it('Add asset after multiple drops', async () => {
    /**
     * 1. Init assets (done through setup so get this for free)
     * 2. Drop some reserves
     * 3. Init a new asset.
     * Intended behaviour new asset is inserted into one of the available spots in
     */
    const { configurator, pool, poolAdmin, addressesProvider } = testEnv;

    const reservesListBefore = await pool.connect(configurator.signer).getReservesList();

    // Remove first 2 assets that has no borrows
    let dropped = 0;
    for (let i = 0; i < reservesListBefore.length; i++) {
      if (dropped == 2) {
        break;
      }
      const reserveAsset = reservesListBefore[i];
      const assetData = await pool.getReserveData(reserveAsset);

      if (
        assetData.currentLiquidityRate.eq(0) &&
        assetData.currentStableBorrowRate.eq(0) &&
        assetData.currentVariableBorrowRate.eq(0)
      ) {
        await configurator.connect(poolAdmin.signer).dropReserve(reserveAsset);
        dropped++;
      }
    }

    const reservesListAfterDrop = await pool.connect(configurator.signer).getReservesList();
    expect(reservesListAfterDrop.length).to.be.eq(reservesListBefore.length - 2);

    // Deploy new token and implementations
    const mockToken = await deployMintableERC20(['MOCK', 'MOCK', '18']);
    const stableDebtTokenImplementation = await new StableDebtToken__factory(
      await getFirstSigner()
    ).deploy(pool.address);
    const variableDebtTokenImplementation = await new VariableDebtToken__factory(
      await getFirstSigner()
    ).deploy(pool.address);
    const aTokenImplementation = await new AToken__factory(await getFirstSigner()).deploy(
      pool.address
    );
    const mockRateStrategy = await new MockReserveInterestRateStrategy__factory(
      await getFirstSigner()
    ).deploy(addressesProvider.address, 0, 0, 0, 0, 0, 0);

    // Init the reserve
    const initInputParams: {
      aTokenImpl: string;
      stableDebtTokenImpl: string;
      variableDebtTokenImpl: string;
      underlyingAssetDecimals: BigNumberish;
      interestRateStrategyAddress: string;
      underlyingAsset: string;
      treasury: string;
      incentivesController: string;
      aTokenName: string;
      aTokenSymbol: string;
      variableDebtTokenName: string;
      variableDebtTokenSymbol: string;
      stableDebtTokenName: string;
      stableDebtTokenSymbol: string;
      params: string;
    }[] = [
      {
        aTokenImpl: aTokenImplementation.address,
        stableDebtTokenImpl: stableDebtTokenImplementation.address,
        variableDebtTokenImpl: variableDebtTokenImplementation.address,
        underlyingAssetDecimals: 18,
        interestRateStrategyAddress: mockRateStrategy.address,
        underlyingAsset: mockToken.address,
        treasury: ZERO_ADDRESS,
        incentivesController: ZERO_ADDRESS,
        aTokenName: 'AMOCK',
        aTokenSymbol: 'AMOCK',
        variableDebtTokenName: 'VMOCK',
        variableDebtTokenSymbol: 'VMOCK',
        stableDebtTokenName: 'SMOCK',
        stableDebtTokenSymbol: 'SMOCK',
        params: '0x10',
      },
    ];

    expect(await configurator.connect(poolAdmin.signer).initReserves(initInputParams));
    const reservesListAfterInit = await pool.connect(configurator.signer).getReservesList();

    let occurrences = reservesListAfterInit.filter((v) => v == mockToken.address).length;
    expect(occurrences).to.be.eq(1, 'Asset has multiple occurrences in the reserves list');

    expect(reservesListAfterInit.length).to.be.eq(
      reservesListAfterDrop.length + 1,
      'Reserves list was increased by more than 1'
    );
  });

  it('Initialize reserves until max-1, then (drop one and add a new) x 2, finally add to hit max', async () => {
    /**
     * 1. Update max number of assets to current number og assets
     * 2. Drop some reserves
     * 3. Init a new asset.
     * Intended behaviour: new asset is inserted into one of the available spots in `_reservesList` and `_reservesCount` kept the same
     */

    // Upgrade the Pool to update the maximum number of reserves
    const { addressesProvider, poolAdmin, pool, dai, deployer, configurator } = testEnv;
    const { deployer: deployerName } = await hre.getNamedAccounts();

    // Impersonate the PoolConfigurator
    await topUpNonPayableWithEther(deployer.signer, [configurator.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([configurator.address]);
    const configSigner = await hre.ethers.getSigner(configurator.address);

    // Deploy the mock Pool with a setter of `maxNumberOfReserves`
    const NEW_POOL_IMPL_ARTIFACT = await hre.deployments.deploy('MockPoolInherited2', {
      contract: 'MockPoolInherited',
      from: deployerName,
      args: [addressesProvider.address],
      libraries: {
        SupplyLogic: (await hre.deployments.get('SupplyLogic')).address,
        BorrowLogic: (await hre.deployments.get('BorrowLogic')).address,
        LiquidationLogic: (await hre.deployments.get('LiquidationLogic')).address,
        EModeLogic: (await hre.deployments.get('EModeLogic')).address,
        BridgeLogic: (await hre.deployments.get('BridgeLogic')).address,
        FlashLoanLogic: (await hre.deployments.get('FlashLoanLogic')).address,
        PoolLogic: (await hre.deployments.get('PoolLogic')).address,
      },
      log: false,
    });

    const proxyAddress = await addressesProvider.getAddress(POOL_ID);
    const implementationAddress = await getProxyImplementation(
      addressesProvider.address,
      proxyAddress
    );

    // Upgrade the Pool
    expect(
      await addressesProvider.connect(poolAdmin.signer).setPoolImpl(NEW_POOL_IMPL_ARTIFACT.address)
    )
      .to.emit(addressesProvider, 'PoolUpdated')
      .withArgs(implementationAddress, NEW_POOL_IMPL_ARTIFACT.address);

    // Get the Pool instance
    const mockPoolAddress = await addressesProvider.getPool();
    const mockPool = await MockPoolInherited__factory.connect(
      mockPoolAddress,
      await getFirstSigner()
    );

    // Get the current number of reserves
    let numberOfReserves = (await mockPool.getReservesList()).length;

    // Set the limit
    expect(await mockPool.setMaxNumberOfReserves(numberOfReserves + 1));
    expect(await mockPool.MAX_NUMBER_RESERVES()).to.be.eq(numberOfReserves + 1);

    for (let dropped = 0; dropped < 2; dropped++) {
      const reservesListBefore = await pool.connect(configurator.signer).getReservesList();
      for (let i = 0; i < reservesListBefore.length; i++) {
        const reserveAsset = reservesListBefore[i];
        const assetData = await pool.getReserveData(reserveAsset);

        if (assetData.aTokenAddress == ZERO_ADDRESS) {
          continue;
        }

        if (
          assetData.currentLiquidityRate.eq(0) &&
          assetData.currentStableBorrowRate.eq(0) &&
          assetData.currentVariableBorrowRate.eq(0)
        ) {
          await configurator.connect(poolAdmin.signer).dropReserve(reserveAsset);
          break;
        }
      }

      const reservesListLengthAfterDrop = (await pool.getReservesList()).length;
      expect(reservesListLengthAfterDrop).to.be.eq(reservesListBefore.length - 1);
      expect(reservesListLengthAfterDrop).to.be.lt(await mockPool.MAX_NUMBER_RESERVES());

      const freshContract = await deployMintableERC20(['MOCK', 'MOCK', '18']);
      const config = await pool.getReserveData(dai.address);
      expect(
        await pool.connect(configSigner).initReserve(
          freshContract.address, // just need a non-used reserve token
          ZERO_ADDRESS,
          config.stableDebtTokenAddress,
          config.variableDebtTokenAddress,
          ZERO_ADDRESS
        )
      );
    }

    const freshContract = await deployMintableERC20(['MOCK', 'MOCK', '18']);
    const config = await pool.getReserveData(dai.address);
    expect(
      await pool.connect(configSigner).initReserve(
        freshContract.address, // just need a non-used reserve token
        ZERO_ADDRESS,
        config.stableDebtTokenAddress,
        config.variableDebtTokenAddress,
        ZERO_ADDRESS
      )
    );
    expect((await pool.getReservesList()).length).to.be.eq(await pool.MAX_NUMBER_RESERVES());
  });

  it('Call `resetIsolationModeTotalDebt()` to reset isolationModeTotalDebt of an asset with non-zero debt ceiling', async () => {
    const {
      configurator,
      pool,
      helpersContract,
      dai,
      poolAdmin,
      deployer,
      users: [user0],
    } = testEnv;

    const debtCeiling = utils.parseUnits('10', 2);

    expect(await helpersContract.getDebtCeiling(dai.address)).to.be.eq(0);

    await configurator.connect(poolAdmin.signer).setDebtCeiling(dai.address, debtCeiling);

    expect(await helpersContract.getDebtCeiling(dai.address)).to.be.eq(debtCeiling);

    // Impersonate PoolConfigurator
    await topUpNonPayableWithEther(deployer.signer, [configurator.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([configurator.address]);
    const configSigner = await hre.ethers.getSigner(configurator.address);

    await expect(
      pool.connect(configSigner).resetIsolationModeTotalDebt(dai.address)
    ).to.be.revertedWith(DEBT_CEILING_NOT_ZERO);
  });

  it('Tries to initialize a reserve with an AToken, StableDebtToken, and VariableDebt each deployed with the wrong pool address (revert expected)', async () => {
    const { pool, deployer, configurator, addressesProvider } = testEnv;

    const NEW_POOL_IMPL_ARTIFACT = await hre.deployments.deploy('DummyPool', {
      contract: 'Pool',
      from: deployer.address,
      args: [addressesProvider.address],
      libraries: await getPoolLibraries(),
      log: false,
    });

    const aTokenImp = await new AToken__factory(await getFirstSigner()).deploy(pool.address);
    const stableDebtTokenImp = await new StableDebtToken__factory(deployer.signer).deploy(
      pool.address
    );
    const variableDebtTokenImp = await new VariableDebtToken__factory(deployer.signer).deploy(
      pool.address
    );

    const aTokenWrongPool = await new AToken__factory(await getFirstSigner()).deploy(
      NEW_POOL_IMPL_ARTIFACT.address
    );
    const stableDebtTokenWrongPool = await new StableDebtToken__factory(deployer.signer).deploy(
      NEW_POOL_IMPL_ARTIFACT.address
    );
    const variableDebtTokenWrongPool = await new VariableDebtToken__factory(deployer.signer).deploy(
      NEW_POOL_IMPL_ARTIFACT.address
    );

    const mockErc20 = await new ERC20__factory(deployer.signer).deploy('mock', 'MOCK');
    const mockRateStrategy = await new MockReserveInterestRateStrategy__factory(
      await getFirstSigner()
    ).deploy(addressesProvider.address, 0, 0, 0, 0, 0, 0);

    // Init the reserve
    const initInputParams: {
      aTokenImpl: string;
      stableDebtTokenImpl: string;
      variableDebtTokenImpl: string;
      underlyingAssetDecimals: BigNumberish;
      interestRateStrategyAddress: string;
      underlyingAsset: string;
      treasury: string;
      incentivesController: string;
      underlyingAssetName: string;
      aTokenName: string;
      aTokenSymbol: string;
      variableDebtTokenName: string;
      variableDebtTokenSymbol: string;
      stableDebtTokenName: string;
      stableDebtTokenSymbol: string;
      params: string;
    }[] = [
      {
        aTokenImpl: aTokenImp.address,
        stableDebtTokenImpl: stableDebtTokenImp.address,
        variableDebtTokenImpl: variableDebtTokenImp.address,
        underlyingAssetDecimals: 18,
        interestRateStrategyAddress: mockRateStrategy.address,
        underlyingAsset: mockErc20.address,
        treasury: ZERO_ADDRESS,
        incentivesController: ZERO_ADDRESS,
        underlyingAssetName: 'MOCK',
        aTokenName: 'AMOCK',
        aTokenSymbol: 'AMOCK',
        variableDebtTokenName: 'VMOCK',
        variableDebtTokenSymbol: 'VMOCK',
        stableDebtTokenName: 'SMOCK',
        stableDebtTokenSymbol: 'SMOCK',
        params: '0x10',
      },
    ];

    initInputParams[0].aTokenImpl = aTokenWrongPool.address;
    await expect(configurator.initReserves(initInputParams)).to.be.reverted;

    initInputParams[0].aTokenImpl = aTokenImp.address;
    initInputParams[0].stableDebtTokenImpl = stableDebtTokenWrongPool.address;
    await expect(configurator.initReserves(initInputParams)).to.be.reverted;

    initInputParams[0].stableDebtTokenImpl = stableDebtTokenImp.address;
    initInputParams[0].variableDebtTokenImpl = variableDebtTokenWrongPool.address;
    await expect(configurator.initReserves(initInputParams)).to.be.reverted;

    initInputParams[0].variableDebtTokenImpl = variableDebtTokenImp.address;
    expect(await configurator.initReserves(initInputParams));
  });

  it('dropReserve(). Only allows to drop a reserve if both the aToken supply and accruedToTreasury are 0', async () => {
    const {
      configurator,
      pool,
      weth,
      aWETH,
      deployer,
      users: [user0],
    } = testEnv;

    _mockFlashLoanReceiver = await getMockFlashLoanReceiver();

    await configurator.updateFlashloanPremiumTotal(TOTAL_PREMIUM);
    await configurator.updateFlashloanPremiumToProtocol(PREMIUM_TO_PROTOCOL);

    const userAddress = user0.address;
    const amountToDeposit = ethers.utils.parseEther('1');

    await weth['mint(address,uint256)'](deployer.address, amountToDeposit);

    await weth.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(weth.address, amountToDeposit, userAddress, '0');

    const wethFlashBorrowedAmount = ethers.utils.parseEther('0.8');

    await pool.flashLoan(
      _mockFlashLoanReceiver.address,
      [weth.address],
      [wethFlashBorrowedAmount],
      [0],
      _mockFlashLoanReceiver.address,
      '0x10',
      '0'
    );

    await pool.connect(user0.signer).withdraw(weth.address, MAX_UINT_AMOUNT, userAddress);

    await expect(
      configurator.dropReserve(weth.address),
      'dropReserve() should not be possible as there are funds'
    ).to.be.revertedWith(UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO);

    await pool.mintToTreasury([weth.address]);

    // Impersonate Collector
    const collectorAddress = await aWETH.RESERVE_TREASURY_ADDRESS();
    await topUpNonPayableWithEther(user0.signer, [collectorAddress], utils.parseEther('1'));
    await impersonateAccountsHardhat([collectorAddress]);
    const collectorSigner = await hre.ethers.getSigner(collectorAddress);
    await pool.connect(collectorSigner).withdraw(weth.address, MAX_UINT_AMOUNT, collectorAddress);

    await configurator.dropReserve(weth.address);
  });

  it('validateSupply(). Only allows to supply if amount + (scaled aToken supply + accruedToTreasury) <= supplyCap', async () => {
    const {
      configurator,
      pool,
      weth,
      deployer,
      users: [user0],
    } = testEnv;

    _mockFlashLoanReceiver = await getMockFlashLoanReceiver();

    await configurator.updateFlashloanPremiumTotal(TOTAL_PREMIUM);
    await configurator.updateFlashloanPremiumToProtocol(PREMIUM_TO_PROTOCOL);

    const userAddress = user0.address;
    const amountToDeposit = ethers.utils.parseEther('100000');

    await weth['mint(address,uint256)'](
      deployer.address,
      amountToDeposit.add(ethers.utils.parseEther('30'))
    );

    await weth.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(weth.address, amountToDeposit, userAddress, '0');

    const wethFlashBorrowedAmount = ethers.utils.parseEther('100000');

    await pool.flashLoan(
      _mockFlashLoanReceiver.address,
      [weth.address],
      [wethFlashBorrowedAmount],
      [0],
      _mockFlashLoanReceiver.address,
      '0x10',
      '0'
    );

    // At this point the totalSupply + accruedToTreasury is ~100090 WETH, with 100063 from supply and ~27 from accruedToTreasury
    // so to properly test the supply cap condition:
    // - Set supply cap above that, at 110 WETH
    // - Try to supply 30 WETH more . Should work if not taken into account accruedToTreasury, but will not
    // - Try to supply 5 WETH more. Should work

    await configurator.setSupplyCap(weth.address, BigNumber.from('100000').add('110'));

    await expect(
      pool.deposit(weth.address, ethers.utils.parseEther('30'), userAddress, '0')
    ).to.be.revertedWith(SUPPLY_CAP_EXCEEDED);

    await pool.deposit(weth.address, ethers.utils.parseEther('5'), userAddress, '0');
  });

  it('_checkNoSuppliers() (PoolConfigurator). Properly disables actions if aToken supply == 0, but accruedToTreasury != 0', async () => {
    const {
      configurator,
      pool,
      weth,
      aWETH,
      users: [user0],
      deployer,
    } = testEnv;

    _mockFlashLoanReceiver = await getMockFlashLoanReceiver();

    await configurator.updateFlashloanPremiumTotal(TOTAL_PREMIUM);
    await configurator.updateFlashloanPremiumToProtocol(PREMIUM_TO_PROTOCOL);

    const userAddress = user0.address;
    const amountToDeposit = ethers.utils.parseEther('100000');

    await weth['mint(address,uint256)'](
      deployer.address,
      amountToDeposit.add(ethers.utils.parseEther('30'))
    );

    await weth.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(weth.address, amountToDeposit, userAddress, '0');

    const wethFlashBorrowedAmount = ethers.utils.parseEther('100000');

    await pool.flashLoan(
      _mockFlashLoanReceiver.address,
      [weth.address],
      [wethFlashBorrowedAmount],
      [0],
      _mockFlashLoanReceiver.address,
      '0x10',
      '0'
    );

    await pool.connect(user0.signer).withdraw(weth.address, MAX_UINT_AMOUNT, userAddress);

    await expect(configurator.setReserveActive(weth.address, false)).to.be.revertedWith(
      RESERVE_LIQUIDITY_NOT_ZERO
    );

    await pool.mintToTreasury([weth.address]);

    // Impersonate Collector
    const collectorAddress = await aWETH.RESERVE_TREASURY_ADDRESS();
    await topUpNonPayableWithEther(user0.signer, [collectorAddress], utils.parseEther('1'));
    await impersonateAccountsHardhat([collectorAddress]);
    const collectorSigner = await hre.ethers.getSigner(collectorAddress);
    await pool.connect(collectorSigner).withdraw(weth.address, MAX_UINT_AMOUNT, collectorAddress);

    await configurator.setReserveActive(weth.address, false);
  });

  it('LendingPool Reserve Factor 100%. Only variable borrowings. Validates that variable borrow index accrue, liquidity index not, and the Collector receives accruedToTreasury allocation after interest accrues', async () => {
    const {
      configurator,
      pool,
      aDai,
      dai,
      users: [depositor],
    } = testEnv;

    await setupPositions(testEnv, RateMode.Variable);

    // Set the RF to 100%
    await configurator.setReserveFactor(dai.address, '10000');

    const reserveDataBefore = await pool.getReserveData(dai.address);

    await advanceTimeAndBlock(10000);

    // Deposit to "settle" the liquidity index accrual from pre-RF increase to 100%
    await pool
      .connect(depositor.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '1'),
        depositor.address,
        '0'
      );

    const reserveDataAfter1 = await pool.getReserveData(dai.address);

    expect(reserveDataAfter1.variableBorrowIndex).to.be.gt(reserveDataBefore.variableBorrowIndex);
    expect(reserveDataAfter1.accruedToTreasury).to.be.gt(reserveDataBefore.accruedToTreasury);
    expect(reserveDataAfter1.liquidityIndex).to.be.gt(reserveDataBefore.liquidityIndex);

    await advanceTimeAndBlock(10000);

    // "Clean" update, that should not increase the liquidity index, only variable borrow
    await pool
      .connect(depositor.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '1'),
        depositor.address,
        '0'
      );

    const reserveDataAfter2 = await pool.getReserveData(dai.address);

    expect(reserveDataAfter2.variableBorrowIndex).to.be.gt(reserveDataAfter1.variableBorrowIndex);
    expect(reserveDataAfter2.accruedToTreasury).to.be.gt(reserveDataAfter1.accruedToTreasury);
    expect(reserveDataAfter2.liquidityIndex).to.be.eq(reserveDataAfter1.liquidityIndex);
  });

  it('LendingPool Reserve Factor 100%. Only stable borrowings. Validates that neither variable borrow index nor liquidity index increase, but the Collector receives accruedToTreasury allocation after interest accrues', async () => {
    const {
      configurator,
      pool,
      aDai,
      dai,
      users: [depositor],
    } = testEnv;

    await setupPositions(testEnv, RateMode.Stable);

    // Set the RF to 100%
    await configurator.setReserveFactor(dai.address, '10000');

    const reserveDataBefore = await pool.getReserveData(dai.address);

    await advanceTimeAndBlock(10000);

    // Deposit to "settle" the liquidity index accrual from pre-RF increase to 100%
    await pool
      .connect(depositor.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '1'),
        depositor.address,
        '0'
      );

    const reserveDataAfter1 = await pool.getReserveData(dai.address);

    expect(reserveDataAfter1.variableBorrowIndex).to.be.eq(reserveDataBefore.variableBorrowIndex);
    expect(reserveDataAfter1.accruedToTreasury).to.be.gt(reserveDataBefore.accruedToTreasury);
    expect(reserveDataAfter1.liquidityIndex).to.be.gt(reserveDataBefore.liquidityIndex);

    await advanceTimeAndBlock(10000);

    // "Clean" update, that should not increase the liquidity index, only stable borrow
    await pool
      .connect(depositor.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '1'),
        depositor.address,
        '0'
      );

    const reserveDataAfter2 = await pool.getReserveData(dai.address);

    expect(reserveDataAfter2.variableBorrowIndex).to.be.eq(reserveDataAfter1.variableBorrowIndex);
    expect(reserveDataAfter2.accruedToTreasury).to.be.gt(reserveDataAfter1.accruedToTreasury);
    expect(reserveDataAfter2.liquidityIndex).to.be.eq(reserveDataAfter1.liquidityIndex);
  });

  it('Pool with non-zero unbacked keeps the same liquidity and debt rate, even while setting zero unbackedMintCap', async () => {
    const {
      configurator,
      pool,
      dai,
      helpersContract,
      users: [user1, user2, user3, bridge],
    } = testEnv;

    // Set configuration of reserve params
    calculationsConfiguration.reservesParams = AaveConfig.ReservesConfig;

    // User 3 supplies 1M DAI and borrows 0.25M DAI
    const daiAmount = await convertToCurrencyDecimals(dai.address, '1000000');
    expect(await dai.connect(user3.signer)['mint(uint256)'](daiAmount));
    expect(await dai.connect(user3.signer).approve(pool.address, MAX_UINT_AMOUNT));
    expect(await pool.connect(user3.signer).deposit(dai.address, daiAmount, user3.address, '0'));
    expect(
      await pool
        .connect(user3.signer)
        .borrow(dai.address, daiAmount.div(4), RateMode.Variable, '0', user3.address)
    );

    // Time flies, indexes grow
    await advanceTimeAndBlock(60 * 60 * 24 * 6);

    // Add bridge
    const aclManager = await getACLManager();
    expect(await aclManager.addBridge(bridge.address));

    // Set non-zero unbackedMintCap for DAI
    expect(await configurator.setUnbackedMintCap(dai.address, MAX_UNBACKED_MINT_CAP));

    // Bridge mints 1M unbacked aDAI on behalf of User 1
    expect(
      await pool.connect(bridge.signer).mintUnbacked(dai.address, daiAmount, user1.address, 0)
    );

    const reserveDataBefore = await getReserveData(helpersContract, dai.address);

    expect(await dai.connect(user2.signer)['mint(uint256)'](daiAmount));
    expect(await dai.connect(user2.signer).approve(pool.address, MAX_UINT_AMOUNT));

    // Next two txs should be mined in the same block
    await setAutomine(false);

    // Set zero unbackedMintCap for DAI
    expect(await configurator.setUnbackedMintCap(dai.address, 0));

    // User 2 supplies 10 DAI
    const amountToDeposit = await convertToCurrencyDecimals(dai.address, '10');
    const tx = await pool
      .connect(user2.signer)
      .deposit(dai.address, amountToDeposit, user2.address, '0');

    // Start mining
    await setAutomine(true);

    const rcpt = await tx.wait();
    const { txTimestamp } = await getTxCostAndTimestamp(rcpt);

    const reserveDataAfter = await getReserveData(helpersContract, dai.address);
    const expectedReserveData = calcExpectedReserveDataAfterDeposit(
      amountToDeposit.toString(),
      reserveDataBefore,
      txTimestamp
    );

    // Unbacked amount should keep constant
    expect(reserveDataAfter.unbacked).to.be.eq(reserveDataBefore.unbacked);

    expect(reserveDataAfter.liquidityRate).to.be.eq(expectedReserveData.liquidityRate);
    expect(reserveDataAfter.variableBorrowRate).to.be.eq(expectedReserveData.variableBorrowRate);
    expect(reserveDataAfter.stableBorrowRate).to.be.eq(expectedReserveData.stableBorrowRate);
  });
});



================================================
FILE: test-suites/pool-flashloan.spec.ts
================================================
import { deployDefaultReserveInterestRateStrategy } from '@aave/deploy-v3/dist/helpers/contract-deployments';
import { expect } from 'chai';
import { BigNumber, ethers, Event, utils } from 'ethers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { MockFlashLoanReceiver } from '../types/MockFlashLoanReceiver';
import { ProtocolErrors } from '../helpers/types';

import {
  getMockFlashLoanReceiver,
  getStableDebtToken,
  getVariableDebtToken,
} from '@aave/deploy-v3/dist/helpers/contract-getters';
import { TestEnv, makeSuite } from './helpers/make-suite';
import './helpers/utils/wadraymath';
import { waitForTx } from '@aave/deploy-v3';
import { MockATokenRepayment__factory } from '../types';

makeSuite('Pool: FlashLoan', (testEnv: TestEnv) => {
  let _mockFlashLoanReceiver = {} as MockFlashLoanReceiver;

  const {
    COLLATERAL_BALANCE_IS_ZERO,
    ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE,
    INVALID_FLASHLOAN_EXECUTOR_RETURN,
    FLASHLOAN_DISABLED,
    BORROWING_NOT_ENABLED,
  } = ProtocolErrors;

  const TOTAL_PREMIUM = 9;
  const PREMIUM_TO_PROTOCOL = 3000;

  before(async () => {
    const { usdc, aUsdc, pool, configurator, deployer } = testEnv;
    _mockFlashLoanReceiver = await getMockFlashLoanReceiver();

    const aTokenRepayImpl = await new MockATokenRepayment__factory(deployer.signer).deploy(
      pool.address
    );

    await configurator.updateAToken({
      asset: usdc.address,
      treasury: await aUsdc.RESERVE_TREASURY_ADDRESS(),
      incentivesController: await aUsdc.getIncentivesController(),
      name: await aUsdc.name(),
      symbol: await aUsdc.symbol(),
      implementation: aTokenRepayImpl.address,
      params: '0x',
    });
  });

  it('Configurator sets total premium = 9 bps, premium to protocol = 30%', async () => {
    const { configurator, pool } = testEnv;
    await configurator.updateFlashloanPremiumTotal(TOTAL_PREMIUM);
    await configurator.updateFlashloanPremiumToProtocol(PREMIUM_TO_PROTOCOL);

    expect(await pool.FLASHLOAN_PREMIUM_TOTAL()).to.be.equal(TOTAL_PREMIUM);
    expect(await pool.FLASHLOAN_PREMIUM_TO_PROTOCOL()).to.be.equal(PREMIUM_TO_PROTOCOL);
  });
  it('Deposits WETH into the reserve', async () => {
    const { pool, weth, aave, dai, deployer } = testEnv;
    const userAddress = await pool.signer.getAddress();
    const amountToDeposit = ethers.utils.parseEther('1');

    await weth['mint(address,uint256)'](deployer.address, amountToDeposit);

    await weth.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(weth.address, amountToDeposit, userAddress, '0');

    await aave['mint(uint256)'](amountToDeposit);

    await aave.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(aave.address, amountToDeposit, userAddress, '0');
    await dai['mint(uint256)'](amountToDeposit);

    await dai.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(dai.address, amountToDeposit, userAddress, '0');
  });

  it('Takes WETH + Dai flash loan with mode = 0, returns the funds correctly', async () => {
    const { pool, helpersContract, weth, aWETH, dai, aDai } = testEnv;

    const wethFlashBorrowedAmount = ethers.utils.parseEther('0.8');
    const daiFlashBorrowedAmount = ethers.utils.parseEther('0.3');
    const wethTotalFees = wethFlashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
    const wethFeesToProtocol = wethTotalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
    const wethFeesToLp = wethTotalFees.sub(wethFeesToProtocol);
    const daiTotalFees = daiFlashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
    const daiFeesToProtocol = daiTotalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
    const daiFeesToLp = daiTotalFees.sub(daiFeesToProtocol);

    const wethLiquidityIndexAdded = wethFeesToLp
      .mul(BigNumber.from(10).pow(27))
      .div(await aWETH.totalSupply());

    const daiLiquidityIndexAdded = daiFeesToLp
      .mul(ethers.BigNumber.from(10).pow(27))
      .div(await aDai.totalSupply());

    let wethReserveData = await helpersContract.getReserveData(weth.address);
    let daiReserveData = await helpersContract.getReserveData(dai.address);

    const wethLiquidityIndexBefore = wethReserveData.liquidityIndex;
    const daiLiquidityIndexBefore = daiReserveData.liquidityIndex;

    const wethTotalLiquidityBefore = wethReserveData.totalAToken;

    const daiTotalLiquidityBefore = daiReserveData.totalAToken;

    const wethReservesBefore = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());
    const daiReservesBefore = await aDai.balanceOf(await aDai.RESERVE_TREASURY_ADDRESS());

    const tx = await waitForTx(
      await pool.flashLoan(
        _mockFlashLoanReceiver.address,
        [weth.address, dai.address],
        [wethFlashBorrowedAmount, daiFlashBorrowedAmount],
        [0, 0],
        _mockFlashLoanReceiver.address,
        '0x10',
        '0'
      )
    );

    await pool.mintToTreasury([weth.address, dai.address]);

    wethReserveData = await helpersContract.getReserveData(weth.address);
    daiReserveData = await helpersContract.getReserveData(dai.address);

    const wethCurrentLiquidityRate = wethReserveData.liquidityRate;
    const wethCurrentLiquidityIndex = wethReserveData.liquidityIndex;
    const daiCurrentLiquidityRate = daiReserveData.liquidityRate;
    const daiCurrentLiquidityIndex = daiReserveData.liquidityIndex;

    const wethTotalLiquidityAfter = wethReserveData.totalAToken;

    const daiTotalLiquidityAfter = daiReserveData.totalAToken;

    const wethReservesAfter = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());
    const daiReservesAfter = await aDai.balanceOf(await aDai.RESERVE_TREASURY_ADDRESS());

    expect(wethTotalLiquidityBefore.add(wethTotalFees)).to.be.closeTo(wethTotalLiquidityAfter, 2);
    expect(wethCurrentLiquidityRate).to.be.equal(0);
    expect(wethCurrentLiquidityIndex).to.be.equal(
      wethLiquidityIndexBefore.add(wethLiquidityIndexAdded)
    );
    expect(wethReservesAfter).to.be.equal(wethReservesBefore.add(wethFeesToProtocol));

    expect(daiTotalLiquidityBefore.add(daiTotalFees)).to.be.closeTo(daiTotalLiquidityAfter, 2);
    expect(daiCurrentLiquidityRate).to.be.equal(0);
    expect(daiCurrentLiquidityIndex).to.be.equal(
      daiLiquidityIndexBefore.add(daiLiquidityIndexAdded)
    );
    expect(daiReservesAfter).to.be.equal(daiReservesBefore.add(daiFeesToProtocol));

    // Check event values for `ReserveDataUpdated`
    const reserveDataUpdatedEvents = tx.events?.filter(
      ({ event }) => event === 'ReserveDataUpdated'
    ) as Event[];
    for (const reserveDataUpdatedEvent of reserveDataUpdatedEvents) {
      const reserveData = await helpersContract.getReserveData(
        reserveDataUpdatedEvent.args?.reserve
      );
      expect(reserveData.liquidityRate).to.be.eq(reserveDataUpdatedEvent.args?.liquidityRate);
      expect(reserveData.stableBorrowRate).to.be.eq(reserveDataUpdatedEvent.args?.stableBorrowRate);
      expect(reserveData.variableBorrowRate).to.be.eq(
        reserveDataUpdatedEvent.args?.variableBorrowRate
      );
      expect(reserveData.liquidityIndex).to.be.eq(reserveDataUpdatedEvent.args?.liquidityIndex);
      expect(reserveData.variableBorrowIndex).to.be.eq(
        reserveDataUpdatedEvent.args?.variableBorrowIndex
      );
    }
  });

  it('Takes an authorized AAVE flash loan with mode = 0, returns the funds correctly, premium should be 0', async () => {
    const {
      pool,
      helpersContract,
      aave,
      aclManager,
      users: [, , , authorizedUser],
    } = testEnv;

    expect(await aclManager.addFlashBorrower(authorizedUser.address));

    const flashBorrowedAmount = ethers.utils.parseEther('0.8');
    const totalFees = BigNumber.from(0);

    let reserveData = await helpersContract.getReserveData(aave.address);

    const totalLiquidityBefore = reserveData.totalAToken;

    await expect(
      pool
        .connect(authorizedUser.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [aave.address],
          [flashBorrowedAmount],
          [0],
          _mockFlashLoanReceiver.address,
          '0x10',
          '0'
        )
    )
      .to.emit(_mockFlashLoanReceiver, 'ExecutedWithSuccess')
      .withArgs([aave.address], [flashBorrowedAmount], [0]);

    await pool.mintToTreasury([aave.address]);

    reserveData = await helpersContract.getReserveData(aave.address);

    const totalLiquidityAfter = reserveData.totalAToken;

    expect(totalLiquidityBefore.add(totalFees)).to.be.closeTo(totalLiquidityAfter, 2);
  });

  it('Takes an ETH flashloan with mode = 0 as big as the available liquidity', async () => {
    const { pool, helpersContract, weth, aWETH, deployer } = testEnv;

    let reserveData = await helpersContract.getReserveData(weth.address);

    const totalLiquidityBefore = reserveData.totalAToken;

    const flashBorrowedAmount = totalLiquidityBefore;

    const totalFees = flashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
    const feesToProtocol = totalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
    const feesToLp = totalFees.sub(feesToProtocol);
    const liquidityIndexBefore = reserveData.liquidityIndex;
    const liquidityIndexAdded = feesToLp
      .mul(BigNumber.from(10).pow(27))
      .div((await aWETH.totalSupply()).toString())
      .mul(liquidityIndexBefore)
      .div(BigNumber.from(10).pow(27));

    const reservesBefore = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());

    await expect(
      pool.flashLoan(
        _mockFlashLoanReceiver.address,
        [weth.address],
        [flashBorrowedAmount],
        [0],
        _mockFlashLoanReceiver.address,
        '0x10',
        '0'
      )
    )
      .to.emit(pool, 'FlashLoan')
      .withArgs(
        _mockFlashLoanReceiver.address,
        deployer.address,
        weth.address,
        flashBorrowedAmount,
        0,
        flashBorrowedAmount.mul(9).div(10000),
        0
      );
    await pool.mintToTreasury([weth.address]);

    reserveData = await helpersContract.getReserveData(weth.address);

    const currentLiquidityRate = reserveData.liquidityRate;
    const currentLiquidityIndex = reserveData.liquidityIndex;

    const totalLiquidityAfter = reserveData.totalAToken;

    const reservesAfter = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());
    expect(totalLiquidityBefore.add(totalFees)).to.be.closeTo(totalLiquidityAfter, 2);
    expect(currentLiquidityRate).to.be.equal(0);
    expect(currentLiquidityIndex).to.be.equal(liquidityIndexBefore.add(liquidityIndexAdded));
    expect(
      reservesAfter.sub(feesToProtocol).mul(liquidityIndexBefore).div(currentLiquidityIndex)
    ).to.be.closeTo(reservesBefore, 2);
  });

  it('Disable ETH flashloan and takes an ETH flashloan (revert expected)', async () => {
    const { pool, configurator, helpersContract, weth, deployer } = testEnv;

    expect(await configurator.setReserveFlashLoaning(weth.address, false));

    let wethFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(weth.address);
    expect(wethFlashLoanEnabled).to.be.equal(false);

    let reserveData = await helpersContract.getReserveData(weth.address);

    const totalLiquidityBefore = reserveData.totalAToken;

    const flashBorrowedAmount = totalLiquidityBefore;

    await expect(
      pool.flashLoan(
        _mockFlashLoanReceiver.address,
        [weth.address],
        [flashBorrowedAmount],
        [0],
        _mockFlashLoanReceiver.address,
        '0x10',
        '0'
      )
    ).to.be.revertedWith(FLASHLOAN_DISABLED);

    await expect(configurator.setReserveFlashLoaning(weth.address, true))
      .to.emit(configurator, 'ReserveFlashLoaning')
      .withArgs(weth.address, true);

    wethFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(weth.address);
    expect(wethFlashLoanEnabled).to.be.equal(true);
  });

  it('Takes WETH flashloan, does not return the funds with mode = 0 (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];
    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [ethers.utils.parseEther('0.8')],
          [0],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Takes WETH flashloan, simulating a receiver as EOA (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];
    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);
    await _mockFlashLoanReceiver.setSimulateEOA(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [ethers.utils.parseEther('0.8')],
          [0],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.revertedWith(INVALID_FLASHLOAN_EXECUTOR_RETURN);
  });

  it('Takes a WETH flashloan with an invalid mode (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];
    await _mockFlashLoanReceiver.setSimulateEOA(false);
    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [ethers.utils.parseEther('0.8')],
          [4],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Caller deposits 1000 DAI as collateral, Takes WETH flashloan with mode = 2, does not return the funds. A variable loan for caller is created', async () => {
    const { dai, pool, weth, users, helpersContract } = testEnv;

    const caller = users[1];

    await dai
      .connect(caller.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    await dai.connect(caller.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const amountToDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await pool.connect(caller.signer).deposit(dai.address, amountToDeposit, caller.address, '0');

    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    let reserveData = await helpersContract.getReserveData(weth.address);

    let totalLiquidityBefore = reserveData.totalAToken;

    const borrowAmount = ethers.utils.parseEther('0.0571');

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [borrowAmount],
          [2],
          caller.address,
          '0x10',
          '0'
        )
    )
      .to.emit(pool, 'FlashLoan')
      .withArgs(
        _mockFlashLoanReceiver.address,
        caller.address,
        weth.address,
        borrowAmount,
        2,
        0,
        0
      );

    const { variableDebtTokenAddress } = await helpersContract.getReserveTokensAddresses(
      weth.address
    );
    reserveData = await helpersContract.getReserveData(weth.address);

    const totalLiquidityAfter = reserveData.totalAToken;

    expect(totalLiquidityAfter).to.be.closeTo(totalLiquidityBefore, 2);

    const wethDebtToken = await getVariableDebtToken(variableDebtTokenAddress);
    const callerDebt = await wethDebtToken.balanceOf(caller.address);

    expect(callerDebt.toString()).to.be.equal('57100000000000000', 'Invalid user debt');
    // repays debt for later, so no interest accrue
    await weth
      .connect(caller.signer)
      ['mint(address,uint256)'](
        caller.address,
        await convertToCurrencyDecimals(weth.address, '1000')
      );
    await weth.connect(caller.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(caller.signer).repay(weth.address, MAX_UINT_AMOUNT, 2, caller.address);
  });
  it('Tries to take a flashloan that is bigger than the available liquidity (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];

    await expect(
      pool.connect(caller.signer).flashLoan(
        _mockFlashLoanReceiver.address,
        [weth.address],
        ['1004415000000000000'], //slightly higher than the available liquidity
        [2],
        caller.address,
        '0x10',
        '0'
      ),
      ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE
    ).to.be.reverted;
  });

  it('Tries to take a flashloan using a non contract address as receiver (revert expected)', async () => {
    const { pool, deployer, weth, users } = testEnv;
    const caller = users[1];

    await expect(
      pool.flashLoan(
        deployer.address,
        [weth.address],
        ['1000000000000000000'],
        [2],
        caller.address,
        '0x10',
        '0'
      )
    ).to.be.reverted;
  });

  it('Deposits USDC into the reserve', async () => {
    const { usdc, pool } = testEnv;
    const userAddress = await pool.signer.getAddress();

    await usdc['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    await usdc.approve(pool.address, MAX_UINT_AMOUNT);

    const amountToDeposit = await convertToCurrencyDecimals(usdc.address, '1000');

    await pool.deposit(usdc.address, amountToDeposit, userAddress, '0');
  });

  it('Takes out a 500 USDC flashloan, returns the funds correctly', async () => {
    const { usdc, aUsdc, pool, helpersContract, deployer: depositor } = testEnv;

    await _mockFlashLoanReceiver.setFailExecutionTransfer(false);

    const flashBorrowedAmount = await convertToCurrencyDecimals(usdc.address, '500');
    const totalFees = flashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
    const feesToProtocol = totalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
    const feesToLp = totalFees.sub(feesToProtocol);
    const liquidityIndexAdded = feesToLp
      .mul(ethers.BigNumber.from(10).pow(27))
      .div(await aUsdc.totalSupply());

    let reserveData = await helpersContract.getReserveData(usdc.address);

    const liquidityIndexBefore = reserveData.liquidityIndex;

    const totalLiquidityBefore = reserveData.totalAToken;

    const reservesBefore = await aUsdc.balanceOf(await aUsdc.RESERVE_TREASURY_ADDRESS());

    const tx = await pool.flashLoan(
      _mockFlashLoanReceiver.address,
      [usdc.address],
      [flashBorrowedAmount],
      [0],
      _mockFlashLoanReceiver.address,
      '0x10',
      '0'
    );
    await waitForTx(tx);

    await pool.mintToTreasury([usdc.address]);

    reserveData = await helpersContract.getReserveData(usdc.address);

    const currentLiquidityRate = reserveData.liquidityRate;
    const currentLiquidityIndex = reserveData.liquidityIndex;

    const totalLiquidityAfter = reserveData.totalAToken;

    const reservesAfter = await aUsdc.balanceOf(await aUsdc.RESERVE_TREASURY_ADDRESS());

    expect(totalLiquidityBefore.add(totalFees)).to.be.closeTo(totalLiquidityAfter, 2);
    expect(currentLiquidityRate).to.be.equal(0);
    expect(currentLiquidityIndex).to.be.equal(liquidityIndexBefore.add(liquidityIndexAdded));
    expect(reservesAfter).to.be.equal(reservesBefore.add(feesToProtocol));

    // Check handleRepayment is correctly called at flash loans
    await expect(tx)
      .to.emit(
        MockATokenRepayment__factory.connect(aUsdc.address, depositor.signer),
        'MockRepayment'
      )
      .withArgs(
        _mockFlashLoanReceiver.address,
        _mockFlashLoanReceiver.address,
        flashBorrowedAmount.add(totalFees)
      );
  });

  it('Takes out a 500 USDC flashloan with mode = 0, does not return the funds (revert expected)', async () => {
    const { usdc, pool, users } = testEnv;
    const caller = users[2];

    const flashloanAmount = await convertToCurrencyDecimals(usdc.address, '500');

    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [usdc.address],
          [flashloanAmount],
          [2],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.revertedWith(COLLATERAL_BALANCE_IS_ZERO);
  });

  it('Caller deposits 5 WETH as collateral, Takes a USDC flashloan with mode = 2, does not return the funds. A loan for caller is created, premium should be 0', async () => {
    const { usdc, pool, weth, users, helpersContract } = testEnv;

    const caller = users[2];

    await weth
      .connect(caller.signer)
      ['mint(address,uint256)'](caller.address, await convertToCurrencyDecimals(weth.address, '5'));

    await weth.connect(caller.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const amountToDeposit = await convertToCurrencyDecimals(weth.address, '5');

    await pool.connect(caller.signer).deposit(weth.address, amountToDeposit, caller.address, '0');

    const flashloanAmount = await convertToCurrencyDecimals(usdc.address, '500');

    await _mockFlashLoanReceiver.setFailExecutionTransfer(false);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [usdc.address],
          [flashloanAmount],
          [2],
          caller.address,
          '0x10',
          '0'
        )
    )
      .to.emit(_mockFlashLoanReceiver, 'ExecutedWithSuccess')
      .withArgs([usdc.address], [flashloanAmount], [0]);

    const { variableDebtTokenAddress } = await helpersContract.getReserveTokensAddresses(
      usdc.address
    );

    const usdcDebtToken = await getVariableDebtToken(variableDebtTokenAddress);

    const callerDebt = await usdcDebtToken.balanceOf(caller.address);

    expect(callerDebt.toString()).to.be.equal('500000000', 'Invalid user debt');
  });

  it('Disable USDC borrowing. Caller deposits 5 WETH as collateral, Takes a USDC flashloan with mode = 2, does not return the funds. Revert creating borrow position (revert expected)', async () => {
    const { usdc, pool, weth, configurator, users, helpersContract } = testEnv;

    const caller = users[2];

    expect(await configurator.setReserveStableRateBorrowing(usdc.address, false));
    expect(await configurator.setReserveBorrowing(usdc.address, false));

    let usdcConfiguration = await helpersContract.getReserveConfigurationData(usdc.address);
    expect(usdcConfiguration.borrowingEnabled).to.be.equal(false);

    await weth
      .connect(caller.signer)
      ['mint(address,uint256)'](caller.address, await convertToCurrencyDecimals(weth.address, '5'));

    await weth.connect(caller.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const amountToDeposit = await convertToCurrencyDecimals(weth.address, '5');

    await pool.connect(caller.signer).deposit(weth.address, amountToDeposit, caller.address, '0');

    const flashloanAmount = await convertToCurrencyDecimals(usdc.address, '500');

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [usdc.address],
          [flashloanAmount],
          [2],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.revertedWith(BORROWING_NOT_ENABLED);
  });

  it('Caller deposits 1000 DAI as collateral, Takes a WETH flashloan with mode = 0, does not approve the transfer of the funds', async () => {
    const { dai, pool, weth, users } = testEnv;
    const caller = users[3];

    await dai
      .connect(caller.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    await dai.connect(caller.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const amountToDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await pool.connect(caller.signer).deposit(dai.address, amountToDeposit, caller.address, '0');

    const flashAmount = ethers.utils.parseEther('0.8');

    await _mockFlashLoanReceiver.setFailExecutionTransfer(false);
    await _mockFlashLoanReceiver.setAmountToApprove(flashAmount.div(2));

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [flashAmount],
          [0],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Caller takes a WETH flashloan with mode = 1', async () => {
    const { pool, weth, users, helpersContract } = testEnv;

    const caller = users[3];

    const flashAmount = ethers.utils.parseEther('0.0571');

    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [flashAmount],
          [1],
          caller.address,
          '0x10',
          '0'
        )
    )
      .to.emit(pool, 'FlashLoan')
      .withArgs(_mockFlashLoanReceiver.address, caller.address, weth.address, flashAmount, 1, 0, 0);

    const { stableDebtTokenAddress } = await helpersContract.getReserveTokensAddresses(
      weth.address
    );

    const wethDebtToken = await getStableDebtToken(stableDebtTokenAddress);

    const callerDebt = await wethDebtToken.balanceOf(caller.address);

    expect(callerDebt.toString()).to.be.equal('57100000000000000', 'Invalid user debt');
  });

  it('Caller takes a WETH flashloan with mode = 1 onBehalfOf user without allowance', async () => {
    const { dai, pool, weth, users, helpersContract } = testEnv;

    const caller = users[5];
    const onBehalfOf = users[4];

    // Deposit 1000 dai for onBehalfOf user
    await dai
      .connect(onBehalfOf.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    await dai.connect(onBehalfOf.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const amountToDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await pool
      .connect(onBehalfOf.signer)
      .deposit(dai.address, amountToDeposit, onBehalfOf.address, '0');

    const flashAmount = ethers.utils.parseEther('0.0571');

    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [flashAmount],
          [1],
          onBehalfOf.address,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Caller takes a WETH flashloan with mode = 1 onBehalfOf user with allowance. A loan for onBehalfOf is creatd.', async () => {
    const { pool, weth, users, helpersContract } = testEnv;

    const caller = users[5];
    const onBehalfOf = users[4];

    const flashAmount = ethers.utils.parseEther('0.0571');

    const reserveData = await pool.getReserveData(weth.address);

    const stableDebtToken = await getStableDebtToken(reserveData.stableDebtTokenAddress);

    // Deposited for onBehalfOf user already, delegate borrow allowance
    await stableDebtToken.connect(onBehalfOf.signer).approveDelegation(caller.address, flashAmount);

    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    await pool
      .connect(caller.signer)
      .flashLoan(
        _mockFlashLoanReceiver.address,
        [weth.address],
        [flashAmount],
        [1],
        onBehalfOf.address,
        '0x10',
        '0'
      );

    const { stableDebtTokenAddress } = await helpersContract.getReserveTokensAddresses(
      weth.address
    );

    const wethDebtToken = await getStableDebtToken(stableDebtTokenAddress);

    const onBehalfOfDebt = await wethDebtToken.balanceOf(onBehalfOf.address);

    expect(onBehalfOfDebt.toString()).to.be.equal(
      '57100000000000000',
      'Invalid onBehalfOf user debt'
    );
  });
});



================================================
FILE: test-suites/pool-get-reserve-address-by-id.spec.ts
================================================
import { expect } from 'chai';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { evmSnapshot, evmRevert, ZERO_ADDRESS } from '@aave/deploy-v3';

makeSuite('Pool: getReservesList', (testEnv: TestEnv) => {
  let snap: string;

  beforeEach(async () => {
    snap = await evmSnapshot();
  });

  afterEach(async () => {
    await evmRevert(snap);
  });

  it('User gets address of reserve by id', async () => {
    const { pool, usdc } = testEnv;

    const reserveData = await pool.getReserveData(usdc.address);

    const reserveAddress = await pool.getReserveAddressById(reserveData.id);

    await expect(reserveAddress).to.be.eq(usdc.address);
  });

  it('User calls `getReservesList` with a wrong id (id > reservesCount)', async () => {
    const { pool } = testEnv;

    // MAX_NUMBER_RESERVES is always greater than reservesCount
    const maxNumberOfReserves = await pool.MAX_NUMBER_RESERVES();
    const reserveAddress = await pool.getReserveAddressById(maxNumberOfReserves + 1);

    await expect(reserveAddress).to.be.eq(ZERO_ADDRESS);
  });
});



================================================
FILE: test-suites/pool-l2.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, Signer, utils } from 'ethers';
import { impersonateAccountsHardhat } from '../helpers/misc-utils';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { getFirstSigner } from '@aave/deploy-v3/dist/helpers/utilities/signer';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import {
  evmSnapshot,
  evmRevert,
  DefaultReserveInterestRateStrategy__factory,
  VariableDebtToken__factory,
  increaseTime,
  AaveDistributionManager,
} from '@aave/deploy-v3';
import {
  InitializableImmutableAdminUpgradeabilityProxy,
  MockL2Pool__factory,
  MockL2Pool,
  L2Encoder,
  L2Encoder__factory,
} from '../types';
import { ethers, getChainId } from 'hardhat';
import {
  buildPermitParams,
  getProxyImplementation,
  getSignatureFromTypedData,
} from '../helpers/contracts-helpers';
import { getTestWallets } from './helpers/utils/wallets';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { parseUnits } from 'ethers/lib/utils';
import { getReserveData, getUserData } from './helpers/utils/helpers';
import { calcExpectedStableDebtTokenBalance } from './helpers/utils/calculations';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('Pool: L2 functions', (testEnv: TestEnv) => {
  const {
    INVALID_HF,
    NO_MORE_RESERVES_ALLOWED,
    CALLER_NOT_ATOKEN,
    NOT_CONTRACT,
    CALLER_NOT_POOL_CONFIGURATOR,
    RESERVE_ALREADY_INITIALIZED,
    INVALID_ADDRESSES_PROVIDER,
    RESERVE_ALREADY_ADDED,
    DEBT_CEILING_NOT_ZERO,
    ASSET_NOT_LISTED,
    ZERO_ADDRESS_NOT_VALID,
  } = ProtocolErrors;

  let l2Pool: MockL2Pool;

  const POOL_ID = utils.formatBytes32String('POOL');

  let encoder: L2Encoder;

  before('Deploying L2Pool', async () => {
    const { addressesProvider, poolAdmin, pool, deployer, oracle } = testEnv;
    const { deployer: deployerName } = await hre.getNamedAccounts();

    encoder = await (await new L2Encoder__factory(deployer.signer).deploy(pool.address)).deployed();

    // Deploy the mock Pool with a `dropReserve` skipping the checks
    const L2POOL_IMPL_ARTIFACT = await hre.deployments.deploy('MockL2Pool', {
      contract: 'MockL2Pool',
      from: deployerName,
      args: [addressesProvider.address],
      libraries: {
        SupplyLogic: (await hre.deployments.get('SupplyLogic')).address,
        BorrowLogic: (await hre.deployments.get('BorrowLogic')).address,
        LiquidationLogic: (await hre.deployments.get('LiquidationLogic')).address,
        EModeLogic: (await hre.deployments.get('EModeLogic')).address,
        BridgeLogic: (await hre.deployments.get('BridgeLogic')).address,
        FlashLoanLogic: (await hre.deployments.get('FlashLoanLogic')).address,
        PoolLogic: (await hre.deployments.get('PoolLogic')).address,
      },
      log: false,
    });

    const poolProxyAddress = await addressesProvider.getPool();
    const oldPoolImpl = await getProxyImplementation(addressesProvider.address, poolProxyAddress);

    // Upgrade the Pool
    await expect(
      addressesProvider.connect(poolAdmin.signer).setPoolImpl(L2POOL_IMPL_ARTIFACT.address)
    )
      .to.emit(addressesProvider, 'PoolUpdated')
      .withArgs(oldPoolImpl, L2POOL_IMPL_ARTIFACT.address);

    // Get the Pool instance
    const poolAddress = await addressesProvider.getPool();
    l2Pool = await MockL2Pool__factory.connect(poolAddress, await getFirstSigner());
    expect(await addressesProvider.setPriceOracle(oracle.address));
  });

  after(async () => {
    const { aaveOracle, addressesProvider } = testEnv;
    expect(await addressesProvider.setPriceOracle(aaveOracle.address));
  });

  it('Supply', async () => {
    const {
      dai,
      aDai,
      users: [user0],
    } = testEnv;

    const amount = utils.parseEther('100000');
    const referralCode = BigNumber.from(2);

    await dai.connect(user0.signer)['mint(uint256)'](amount);
    await dai.connect(user0.signer).approve(l2Pool.address, amount);

    const encoded = await encoder.encodeSupplyParams(dai.address, amount, referralCode);

    await expect(l2Pool.connect(user0.signer)['supply(bytes32)'](encoded))
      .to.emit(l2Pool, 'Supply')
      .withArgs(dai.address, user0.address, user0.address, amount, referralCode);

    const userBalance = await aDai.balanceOf(user0.address);
    expect(userBalance).to.be.eq(amount, 'invalid amount deposited');
  });

  it('Supply with permit test', async () => {
    const { deployer, dai, aDai } = testEnv;

    const chainId = Number(await getChainId());
    const nonce = await dai.nonces(deployer.address);
    const amount = utils.parseEther('10000');
    const highDeadline = '3000000000';
    const userPrivateKey = getTestWallets()[0].secretKey;

    const msgParams = buildPermitParams(
      chainId,
      dai.address,
      '1',
      await dai.symbol(),
      deployer.address,
      l2Pool.address,
      nonce.toNumber(),
      highDeadline,
      amount.toString()
    );
    const { v, r, s } = getSignatureFromTypedData(userPrivateKey, msgParams);

    await dai.connect(deployer.signer)['mint(uint256)'](amount);
    const referralCode = BigNumber.from(2);

    const encoded = await encoder.encodeSupplyWithPermitParams(
      dai.address,
      amount,
      referralCode,
      highDeadline,
      v,
      r,
      s
    );

    await expect(
      l2Pool.connect(deployer.signer)['supplyWithPermit(bytes32,bytes32,bytes32)'](encoded[0], r, s)
    )
      .to.emit(l2Pool, 'Supply')
      .withArgs(dai.address, deployer.address, deployer.address, amount, referralCode);

    const userBalance = await aDai.balanceOf(deployer.address);
    expect(userBalance).to.be.eq(amount, 'invalid amount deposited');
  });

  it('setUserUseReserveAsCollateral to false', async () => {
    const {
      dai,
      aDai,
      users: [user0],
      helpersContract,
    } = testEnv;

    const encoded = await encoder.encodeSetUserUseReserveAsCollateral(dai.address, false);
    await expect(l2Pool.connect(user0.signer)['setUserUseReserveAsCollateral(bytes32)'](encoded))
      .to.emit(l2Pool, 'ReserveUsedAsCollateralDisabled')
      .withArgs(dai.address, user0.address);

    const userData = await helpersContract.getUserReserveData(dai.address, user0.address);
    expect(userData.usageAsCollateralEnabled).to.be.false;
  });

  it('setUserUseReserveAsCollateral to true', async () => {
    const {
      dai,
      users: [user0],
      helpersContract,
    } = testEnv;

    const encoded = await encoder.encodeSetUserUseReserveAsCollateral(dai.address, true);
    expect(await l2Pool.connect(user0.signer)['setUserUseReserveAsCollateral(bytes32)'](encoded))
      .to.emit(l2Pool, 'ReserveUsedAsCollateralEnabled')
      .withArgs(dai.address, user0.address);

    const userData = await helpersContract.getUserReserveData(dai.address, user0.address);
    expect(userData.usageAsCollateralEnabled).to.be.true;
  });

  it('Borrow', async () => {
    const {
      deployer,
      usdc,
      aUsdc,
      users: [, user1],
      helpersContract,
    } = testEnv;

    const borrowAmount = parseUnits('100', 6);
    const referralCode = BigNumber.from(16);

    expect(await usdc.balanceOf(deployer.address)).to.be.eq(0);

    await usdc.connect(user1.signer)['mint(uint256)'](borrowAmount.mul(10));
    await usdc.connect(user1.signer).approve(l2Pool.address, MAX_UINT_AMOUNT);
    await l2Pool
      .connect(user1.signer)
      ['supply(address,uint256,address,uint16)'](
        usdc.address,
        borrowAmount.mul(10),
        user1.address,
        referralCode
      );

    const encoded = await encoder.encodeBorrowParams(
      usdc.address,
      borrowAmount,
      RateMode.Variable,
      referralCode
    );

    const data = await l2Pool.getReserveData(usdc.address);
    const strat = await DefaultReserveInterestRateStrategy__factory.connect(
      data.interestRateStrategyAddress,
      deployer.signer
    );

    const { reserveFactor } = await helpersContract.getReserveConfigurationData(usdc.address);

    const [liqRate, sRate, varRate] = await strat.calculateInterestRates({
      unbacked: BigNumber.from(0),
      liquidityAdded: BigNumber.from(0),
      liquidityTaken: borrowAmount,
      totalStableDebt: BigNumber.from(0),
      totalVariableDebt: borrowAmount,
      averageStableBorrowRate: BigNumber.from(0),
      reserve: usdc.address,
      aToken: aUsdc.address,
      reserveFactor: reserveFactor,
    });

    expect(await l2Pool.connect(deployer.signer)['borrow(bytes32)'](encoded))
      .to.emit(l2Pool, 'Borrow')
      .withArgs(
        usdc.address,
        deployer.address,
        deployer.address,
        borrowAmount,
        Number(RateMode.Variable),
        varRate,
        referralCode
      );

    expect(await usdc.balanceOf(deployer.address)).to.be.eq(borrowAmount);
  });

  it('swapBorrowRateMode to stable', async () => {
    const { deployer, dai, usdc, helpersContract } = testEnv;
    const currentInterestRateMode = RateMode.Variable;
    const encoded = await encoder.encodeSwapBorrowRateMode(usdc.address, currentInterestRateMode);
    const userDataBefore = await helpersContract.getUserReserveData(usdc.address, deployer.address);
    expect(userDataBefore.currentStableDebt).to.be.eq(0);
    expect(userDataBefore.currentVariableDebt).to.be.gt(0);

    expect(await l2Pool.connect(deployer.signer)['swapBorrowRateMode(bytes32)'](encoded))
      .to.emit(l2Pool, 'SwapBorrowRateMode')
      .withArgs(usdc.address, deployer.address, Number(currentInterestRateMode));

    const userDataAfter = await helpersContract.getUserReserveData(usdc.address, deployer.address);

    expect(userDataAfter.currentStableDebt).to.be.gt(0);
    expect(userDataAfter.currentVariableDebt).to.be.eq(0);
  });

  it('rebalanceStableBorrowRate (revert expected)', async () => {
    // The test only checks that the value is translated properly, not that the underlying function is run correctly.
    // see other rebalance tests for that
    const { deployer, usdc } = testEnv;
    const encoded = await encoder.encodeRebalanceStableBorrowRate(usdc.address, deployer.address);
    await expect(
      l2Pool.connect(deployer.signer)['rebalanceStableBorrowRate(bytes32)'](encoded)
    ).to.be.revertedWith(ProtocolErrors.INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET);
  });

  it('swapBorrowRateMode to variable', async () => {
    const { deployer, dai, usdc, helpersContract } = testEnv;
    const currentInterestRateMode = RateMode.Stable;
    const encoded = await encoder.encodeSwapBorrowRateMode(usdc.address, currentInterestRateMode);
    const userDataBefore = await helpersContract.getUserReserveData(usdc.address, deployer.address);
    expect(userDataBefore.currentStableDebt).to.be.gt(0);
    expect(userDataBefore.currentVariableDebt).to.be.eq(0);

    expect(await l2Pool.connect(deployer.signer)['swapBorrowRateMode(bytes32)'](encoded))
      .to.emit(l2Pool, 'SwapBorrowRateMode')
      .withArgs(usdc.address, deployer.address, Number(currentInterestRateMode));

    const userDataAfter = await helpersContract.getUserReserveData(usdc.address, deployer.address);
    expect(userDataAfter.currentStableDebt).to.be.eq(0);
    expect(userDataAfter.currentVariableDebt).to.be.gt(0);
  });

  it('Repay some', async () => {
    const { deployer, usdc } = testEnv;

    await usdc.connect(deployer.signer).approve(l2Pool.address, MAX_UINT_AMOUNT);

    const data = await l2Pool.getReserveData(usdc.address);
    const vDebtToken = VariableDebtToken__factory.connect(
      data.variableDebtTokenAddress,
      deployer.signer
    );

    const debtBefore = await vDebtToken.balanceOf(deployer.address);
    const balanceBefore = await usdc.balanceOf(deployer.address);
    const repayAmount = parseUnits('50', 6);

    const encoded = await encoder.encodeRepayParams(usdc.address, repayAmount, RateMode.Variable);

    expect(await l2Pool.connect(deployer.signer)['repay(bytes32)'](encoded))
      .to.emit(l2Pool, 'Repay')
      .withArgs(usdc.address, deployer.address, deployer.address, repayAmount, false);

    const userDebt = await vDebtToken.balanceOf(deployer.address);
    expect(userDebt).to.be.eq(debtBefore.sub(repayAmount), 'invalid amount repaid');
    const userBalance = await usdc.balanceOf(deployer.address);
    expect(userBalance).to.be.eq(balanceBefore.sub(repayAmount), 'invalid amount repaid');
  });

  it('Repay some with aTokens', async () => {
    const {
      deployer,
      usdc,
      aUsdc,
      users: [, user1],
    } = testEnv;

    await usdc.connect(deployer.signer).approve(l2Pool.address, MAX_UINT_AMOUNT);

    const data = await l2Pool.getReserveData(usdc.address);
    const vDebtToken = VariableDebtToken__factory.connect(
      data.variableDebtTokenAddress,
      deployer.signer
    );

    const repayAmount = parseUnits('10', 6);
    expect(await aUsdc.connect(user1.signer).transfer(deployer.address, repayAmount));

    const balanceBefore = await usdc.balanceOf(deployer.address);
    const debtBefore = await vDebtToken.balanceOf(deployer.address);

    const encoded = await encoder.encodeRepayWithATokensParams(
      usdc.address,
      repayAmount,
      RateMode.Variable
    );

    expect(await l2Pool.connect(deployer.signer)['repayWithATokens(bytes32)'](encoded))
      .to.emit(l2Pool, 'Repay')
      .withArgs(usdc.address, deployer.address, deployer.address, repayAmount, true);

    const userDebt = await vDebtToken.balanceOf(deployer.address);
    const userBalance = await usdc.balanceOf(deployer.address);
    const userABalance = await aUsdc.balanceOf(deployer.address);
    expect(userDebt).to.be.eq(debtBefore.sub(repayAmount), 'invalid amount repaid');
    expect(userBalance).to.be.eq(balanceBefore, 'user balance changed');
    expect(userABalance).to.be.eq(0, 'invalid amount repaid');
  });

  it('Repay remainder with permit', async () => {
    const { deployer, usdc } = testEnv;

    const data = await l2Pool.getReserveData(usdc.address);
    const vDebtToken = VariableDebtToken__factory.connect(
      data.variableDebtTokenAddress,
      deployer.signer
    );

    const debtBefore = await vDebtToken.balanceOf(deployer.address);

    const chainId = Number(await getChainId());
    const nonce = await usdc.nonces(deployer.address);
    const amount = MAX_UINT_AMOUNT;
    const highDeadline = '3000000000';
    const userPrivateKey = getTestWallets()[0].secretKey;

    const msgParams = buildPermitParams(
      chainId,
      usdc.address,
      '1',
      await usdc.symbol(),
      deployer.address,
      l2Pool.address,
      nonce.toNumber(),
      highDeadline,
      amount.toString()
    );
    const { v, r, s } = getSignatureFromTypedData(userPrivateKey, msgParams);

    await usdc.connect(deployer.signer)['mint(uint256)'](debtBefore.mul(10));
    await usdc.connect(deployer.signer).approve(l2Pool.address, MAX_UINT_AMOUNT);

    const encoded = await encoder.encodeRepayWithPermitParams(
      usdc.address,
      amount,
      RateMode.Variable,
      highDeadline,
      v,
      r,
      s
    );

    expect(
      await l2Pool
        .connect(deployer.signer)
        ['repayWithPermit(bytes32,bytes32,bytes32)'](encoded[0], r, s)
    )
      .to.emit(l2Pool, 'Repay')
      .withArgs(usdc.address, deployer.address, deployer.address, debtBefore, false);

    const userBalance = await vDebtToken.balanceOf(deployer.address);
    expect(userBalance).to.be.eq(0, 'invalid amount repaid');
  });

  it('Withdraw some', async () => {
    const {
      dai,
      aDai,
      users: [user0],
    } = testEnv;

    const amount = utils.parseEther('0.5');
    const encoded = await encoder.encodeWithdrawParams(dai.address, amount);
    const balanceBefore = await aDai.balanceOf(user0.address);

    expect(await l2Pool.connect(user0.signer)['withdraw(bytes32)'](encoded))
      .to.emit(l2Pool, 'Withdraw')
      .withArgs(dai.address, user0.address, user0.address, amount);

    const userBalance = await aDai.balanceOf(user0.address);
    expect(userBalance).to.be.eq(balanceBefore.sub(amount), 'invalid amount withdrawn');
  });

  it('Withdraw remainder', async () => {
    const {
      dai,
      aDai,
      users: [user0],
    } = testEnv;

    const amount = MAX_UINT_AMOUNT;
    const encoded = await encoder.encodeWithdrawParams(dai.address, amount);
    const balanceBefore = await aDai.balanceOf(user0.address);

    expect(await l2Pool.connect(user0.signer)['withdraw(bytes32)'](encoded))
      .to.emit(l2Pool, 'Withdraw')
      .withArgs(dai.address, user0.address, user0.address, balanceBefore);

    const userBalance = await aDai.balanceOf(user0.address);
    expect(userBalance).to.be.eq(0, 'invalid amount withdrawn');
  });

  it('liquidationCall', async () => {
    const {
      dai,
      usdc,
      users: [depositor, borrower, liquidator],
      oracle,
      pool,
      helpersContract,
    } = testEnv;

    //mints DAI to depositor
    const amountDAItoDeposit = parseUnits('5000', 18);
    await dai.connect(depositor.signer)['mint(uint256)'](amountDAItoDeposit);
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .deposit(dai.address, amountDAItoDeposit, depositor.address, '0');

    //user 2 deposits  usdc
    const amountUSDCtoDeposit = parseUnits('1000', 6);
    await usdc.connect(borrower.signer)['mint(uint256)'](parseUnits('1000', 6));
    await usdc.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(borrower.signer)
      .deposit(usdc.address, amountUSDCtoDeposit, borrower.address, '0');

    const userGlobalData = await pool.getUserAccountData(borrower.address);
    const daiPrice = await oracle.getAssetPrice(dai.address);

    const amountDAIToBorrow = userGlobalData.availableBorrowsBase
      .mul(9500)
      .div(10000)
      .div(daiPrice)
      .mul(BigNumber.from(10).pow(18));

    await pool
      .connect(borrower.signer)
      .borrow(dai.address, amountDAIToBorrow, RateMode.Stable, '0', borrower.address);

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);
    expect(userGlobalDataAfter.currentLiquidationThreshold).to.be.equal(8500, INVALID_HF);

    // Increases price
    await oracle.setAssetPrice(dai.address, daiPrice.mul(2));
    const userGlobalDataPriceChange = await pool.getUserAccountData(borrower.address);
    expect(userGlobalDataPriceChange.healthFactor).to.be.lt(parseUnits('1', 18), INVALID_HF);

    //mints dai to the liquidator
    await dai.connect(liquidator.signer)['mint(uint256)'](parseUnits('1000', 18));

    //approve protocol to access the liquidator wallet
    await dai.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const daiReserveDataBefore = await getReserveData(helpersContract, dai.address);
    const usdcReserveDataBefore = await getReserveData(helpersContract, usdc.address);

    const userReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentStableDebt.div(2);

    await increaseTime(100);

    const encoded = await encoder.encodeLiquidationCall(
      usdc.address,
      dai.address,
      borrower.address,
      amountToLiquidate,
      false
    );

    const tx = await l2Pool
      .connect(liquidator.signer)
      ['liquidationCall(bytes32,bytes32)'](encoded[0], encoded[1]);

    const userReserveDataAfter = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const daiReserveDataAfter = await getReserveData(helpersContract, dai.address);
    const usdcReserveDataAfter = await getReserveData(helpersContract, usdc.address);

    const collateralPrice = await oracle.getAssetPrice(usdc.address);
    const principalPrice = await oracle.getAssetPrice(dai.address);

    const collateralDecimals = (await helpersContract.getReserveConfigurationData(usdc.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(dai.address))
      .decimals;

    const expectedCollateralLiquidated = principalPrice
      .mul(amountToLiquidate)
      .percentMul(10500)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    if (!tx.blockNumber) {
      expect(false, 'Invalid block number');
      return;
    }
    const txTimestamp = BigNumber.from(
      (await hre.ethers.provider.getBlock(tx.blockNumber)).timestamp
    );

    const stableDebtBeforeTx = calcExpectedStableDebtTokenBalance(
      userReserveDataBefore.principalStableDebt,
      userReserveDataBefore.stableBorrowRate,
      userReserveDataBefore.stableRateLastUpdated,
      txTimestamp
    );

    expect(userReserveDataAfter.currentStableDebt).to.be.closeTo(
      stableDebtBeforeTx.sub(amountToLiquidate),
      2,
      'Invalid user debt after liquidation'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(daiReserveDataAfter.liquidityIndex).to.be.gte(
      daiReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(daiReserveDataAfter.liquidityRate).to.be.lt(
      daiReserveDataBefore.liquidityRate,
      'Invalid liquidity APY'
    );

    expect(daiReserveDataAfter.totalLiquidity).to.be.closeTo(
      daiReserveDataBefore.totalLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal total liquidity'
    );

    expect(usdcReserveDataAfter.totalLiquidity).to.be.closeTo(
      usdcReserveDataBefore.totalLiquidity.sub(expectedCollateralLiquidated),
      2,
      'Invalid collateral total liquidity'
    );

    expect(daiReserveDataAfter.availableLiquidity).to.be.closeTo(
      daiReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    expect(usdcReserveDataAfter.availableLiquidity).to.be.closeTo(
      usdcReserveDataBefore.availableLiquidity.sub(expectedCollateralLiquidated),
      2,
      'Invalid collateral available liquidity'
    );
    await oracle.setAssetPrice(dai.address, daiPrice);
  });

  it('liquidationCall max value', async () => {
    const {
      dai,
      aUsdc,
      usdc,
      users: [depositor, borrower, liquidator],
      oracle,
      pool,
      helpersContract,
    } = testEnv;

    //mints DAI to depositor
    const amountDAItoDeposit = parseUnits('5000', 18);
    await dai.connect(depositor.signer)['mint(uint256)'](amountDAItoDeposit);
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .deposit(dai.address, amountDAItoDeposit, depositor.address, '0');

    //user 2 deposits  usdc
    const amountUSDCtoDeposit = parseUnits('1000', 6);
    await usdc.connect(borrower.signer)['mint(uint256)'](parseUnits('1000', 6));
    await usdc.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(borrower.signer)
      .deposit(usdc.address, amountUSDCtoDeposit, borrower.address, '0');

    const userGlobalData = await pool.getUserAccountData(borrower.address);
    const daiPrice = await oracle.getAssetPrice(dai.address);

    const amountDAIToBorrow = userGlobalData.availableBorrowsBase
      .mul(9500)
      .div(10000)
      .div(daiPrice)
      .mul(BigNumber.from(10).pow(18));

    await pool
      .connect(borrower.signer)
      .borrow(dai.address, amountDAIToBorrow, RateMode.Stable, '0', borrower.address);

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);
    expect(userGlobalDataAfter.currentLiquidationThreshold).to.be.equal(8500, INVALID_HF);

    // Increase price
    await oracle.setAssetPrice(dai.address, daiPrice.mul(2));
    const userGlobalDataPriceChange = await pool.getUserAccountData(borrower.address);
    expect(userGlobalDataPriceChange.healthFactor).to.be.lt(parseUnits('1', 18), INVALID_HF);

    //mints dai to the liquidator
    await dai.connect(liquidator.signer)['mint(uint256)'](parseUnits('1000', 18));

    //approve protocol to access the liquidator wallet
    await dai.connect(liquidator.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const userReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const encoded = await encoder.encodeLiquidationCall(
      usdc.address,
      dai.address,
      borrower.address,
      MAX_UINT_AMOUNT,
      true
    );

    const liquidatorAUSDCBefore = await aUsdc.balanceOf(liquidator.address);

    const tx = await l2Pool
      .connect(liquidator.signer)
      ['liquidationCall(bytes32,bytes32)'](encoded[0], encoded[1]);

    const userReserveDataAfter = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    expect(await aUsdc.balanceOf(liquidator.address)).to.be.gt(liquidatorAUSDCBefore);
    expect(
      userReserveDataAfter.currentStableDebt.add(userReserveDataAfter.currentVariableDebt)
    ).to.be.lt(
      userReserveDataBefore.currentStableDebt.add(userReserveDataBefore.currentVariableDebt)
    );
  });
});



================================================
FILE: test-suites/pool-normal-flashloan.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, ethers } from 'ethers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { MockFlashLoanReceiver } from '../types/MockFlashLoanReceiver';
import { ProtocolErrors } from '../helpers/types';
import {
  getMockFlashLoanReceiver,
  getStableDebtToken,
  getVariableDebtToken,
} from '@aave/deploy-v3/dist/helpers/contract-getters';
import { TestEnv, makeSuite } from './helpers/make-suite';
import './helpers/utils/wadraymath';

makeSuite('Pool: FlashLoan for gas comparison', (testEnv: TestEnv) => {
  let _mockFlashLoanReceiver = {} as MockFlashLoanReceiver;

  const { ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE, INVALID_FLASHLOAN_EXECUTOR_RETURN } =
    ProtocolErrors;

  const TOTAL_PREMIUM = 9;
  const PREMIUM_TO_PROTOCOL = 3000;

  before(async () => {
    _mockFlashLoanReceiver = await getMockFlashLoanReceiver();
  });

  it('Configurator sets total premium = 9 bps, premium to protocol = 30%', async () => {
    const { configurator, pool } = testEnv;
    await configurator.updateFlashloanPremiumTotal(TOTAL_PREMIUM);
    await configurator.updateFlashloanPremiumToProtocol(PREMIUM_TO_PROTOCOL);

    expect(await pool.FLASHLOAN_PREMIUM_TOTAL()).to.be.equal(TOTAL_PREMIUM);
    expect(await pool.FLASHLOAN_PREMIUM_TO_PROTOCOL()).to.be.equal(PREMIUM_TO_PROTOCOL);
  });
  it('Deposits WETH into the reserve', async () => {
    const { pool, weth, aave, dai, deployer } = testEnv;
    const userAddress = await pool.signer.getAddress();
    const amountToDeposit = ethers.utils.parseEther('1');

    await weth['mint(address,uint256)'](deployer.address, amountToDeposit);

    await weth.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(weth.address, amountToDeposit, userAddress, '0');

    await aave['mint(uint256)'](amountToDeposit);

    await aave.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(aave.address, amountToDeposit, userAddress, '0');
    await dai['mint(uint256)'](amountToDeposit);

    await dai.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(dai.address, amountToDeposit, userAddress, '0');
  });

  it('Takes WETH flash loan with mode = 0, returns the funds correctly', async () => {
    const { pool, helpersContract, weth, aWETH, dai, aDai } = testEnv;

    const wethFlashBorrowedAmount = ethers.utils.parseEther('0.8');
    const wethTotalFees = wethFlashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
    const wethFeesToProtocol = wethTotalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
    const wethFeesToLp = wethTotalFees.sub(wethFeesToProtocol);

    const wethLiquidityIndexAdded = wethFeesToLp
      .mul(BigNumber.from(10).pow(27))
      .div(await aWETH.totalSupply());

    let wethReserveData = await helpersContract.getReserveData(weth.address);

    const wethLiquidityIndexBefore = wethReserveData.liquidityIndex;

    const wethTotalLiquidityBefore = wethReserveData.totalAToken;

    const wethReservesBefore = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());

    await pool.flashLoan(
      _mockFlashLoanReceiver.address,
      [weth.address],
      [wethFlashBorrowedAmount],
      [0],
      _mockFlashLoanReceiver.address,
      '0x10',
      '0'
    );

    await pool.mintToTreasury([weth.address, dai.address]);

    wethReserveData = await helpersContract.getReserveData(weth.address);

    const wethCurrentLiquidityRate = wethReserveData.liquidityRate;
    const wethCurrentLiquidityIndex = wethReserveData.liquidityIndex;

    const wethTotalLiquidityAfter = wethReserveData.totalAToken;

    const wethReservesAfter = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());

    expect(wethTotalLiquidityBefore.add(wethTotalFees)).to.be.closeTo(wethTotalLiquidityAfter, 2);
    expect(wethCurrentLiquidityRate).to.be.equal(0);
    expect(wethCurrentLiquidityIndex).to.be.equal(
      wethLiquidityIndexBefore.add(wethLiquidityIndexAdded)
    );
    expect(wethReservesAfter).to.be.equal(wethReservesBefore.add(wethFeesToProtocol));
  });

  it('Takes an ETH flashloan with mode = 0 as big as the available liquidity', async () => {
    const { pool, helpersContract, weth, aWETH } = testEnv;

    let reserveData = await helpersContract.getReserveData(weth.address);

    const totalLiquidityBefore = reserveData.totalAToken;

    const flashBorrowedAmount = totalLiquidityBefore;

    const totalFees = flashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
    const feesToProtocol = totalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
    const feesToLp = totalFees.sub(feesToProtocol);
    const liquidityIndexBefore = reserveData.liquidityIndex;
    const liquidityIndexAdded = feesToLp
      .mul(BigNumber.from(10).pow(27))
      .div((await aWETH.totalSupply()).toString())
      .mul(liquidityIndexBefore)
      .div(BigNumber.from(10).pow(27));

    const reservesBefore = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());

    const txResult = await pool.flashLoan(
      _mockFlashLoanReceiver.address,
      [weth.address],
      [flashBorrowedAmount],
      [0],
      _mockFlashLoanReceiver.address,
      '0x10',
      '0'
    );

    await pool.mintToTreasury([weth.address]);

    reserveData = await helpersContract.getReserveData(weth.address);

    const currentLiquidityRate = reserveData.liquidityRate;
    const currentLiquidityIndex = reserveData.liquidityIndex;

    const totalLiquidityAfter = reserveData.totalAToken;

    const reservesAfter = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());
    expect(totalLiquidityBefore.add(totalFees)).to.be.closeTo(totalLiquidityAfter, 2);
    expect(currentLiquidityRate).to.be.equal(0);
    expect(currentLiquidityIndex).to.be.equal(liquidityIndexBefore.add(liquidityIndexAdded));
    expect(
      reservesAfter.sub(feesToProtocol).mul(liquidityIndexBefore).div(currentLiquidityIndex)
    ).to.be.closeTo(reservesBefore, 2);
  });
  it('Takes WETH flashloan, does not return the funds with mode = 0 (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];
    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [ethers.utils.parseEther('0.8')],
          [0],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Takes WETH flashloan, simulating a receiver as EOA (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];
    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);
    await _mockFlashLoanReceiver.setSimulateEOA(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [ethers.utils.parseEther('0.8')],
          [0],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.revertedWith(INVALID_FLASHLOAN_EXECUTOR_RETURN);
  });

  it('Tries to take a flashloan that is bigger than the available liquidity (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];

    await expect(
      pool.connect(caller.signer).flashLoan(
        _mockFlashLoanReceiver.address,
        [weth.address],
        ['1004415000000000000'], //slightly higher than the available liquidity
        [2],
        caller.address,
        '0x10',
        '0'
      ),
      ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE
    ).to.be.reverted;
  });

  it('Tries to take a flashloan using a non contract address as receiver (revert expected)', async () => {
    const { pool, deployer, weth, users } = testEnv;
    const caller = users[1];

    await expect(
      pool.flashLoan(
        deployer.address,
        [weth.address],
        ['1000000000000000000'],
        [2],
        caller.address,
        '0x10',
        '0'
      )
    ).to.be.reverted;
  });

  it('Deposits USDC into the reserve', async () => {
    const { usdc, pool } = testEnv;
    const userAddress = await pool.signer.getAddress();

    await usdc['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    await usdc.approve(pool.address, MAX_UINT_AMOUNT);

    const amountToDeposit = await convertToCurrencyDecimals(usdc.address, '1000');

    await pool.deposit(usdc.address, amountToDeposit, userAddress, '0');
  });

  it('Takes out a 500 USDC flashloan, returns the funds correctly', async () => {
    const { usdc, aUsdc, pool, helpersContract, deployer: depositor } = testEnv;

    await _mockFlashLoanReceiver.setFailExecutionTransfer(false);

    const flashBorrowedAmount = await convertToCurrencyDecimals(usdc.address, '500');
    const totalFees = flashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
    const feesToProtocol = totalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
    const feesToLp = totalFees.sub(feesToProtocol);
    const liquidityIndexAdded = feesToLp
      .mul(ethers.BigNumber.from(10).pow(27))
      .div(await aUsdc.totalSupply());

    let reserveData = await helpersContract.getReserveData(usdc.address);

    const liquidityIndexBefore = reserveData.liquidityIndex;

    const totalLiquidityBefore = reserveData.totalAToken;

    const reservesBefore = await aUsdc.balanceOf(await aUsdc.RESERVE_TREASURY_ADDRESS());

    await pool.flashLoan(
      _mockFlashLoanReceiver.address,
      [usdc.address],
      [flashBorrowedAmount],
      [0],
      _mockFlashLoanReceiver.address,
      '0x10',
      '0'
    );

    await pool.mintToTreasury([usdc.address]);

    reserveData = await helpersContract.getReserveData(usdc.address);

    const currentLiquidityRate = reserveData.liquidityRate;
    const currentLiquidityIndex = reserveData.liquidityIndex;

    const totalLiquidityAfter = reserveData.totalAToken;

    const reservesAfter = await aUsdc.balanceOf(await aUsdc.RESERVE_TREASURY_ADDRESS());

    expect(totalLiquidityBefore.add(totalFees)).to.be.closeTo(totalLiquidityAfter, 2);
    expect(currentLiquidityRate).to.be.equal(0);
    expect(currentLiquidityIndex).to.be.equal(liquidityIndexBefore.add(liquidityIndexAdded));
    expect(reservesAfter).to.be.equal(reservesBefore.add(feesToProtocol));
  });

  it('Takes out a 500 USDC flashloan with mode = 0, does not return the funds (revert expected)', async () => {
    const { usdc, pool, users } = testEnv;
    const caller = users[2];

    const flashloanAmount = await convertToCurrencyDecimals(usdc.address, '500');

    await _mockFlashLoanReceiver.setFailExecutionTransfer(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [usdc.address],
          [flashloanAmount],
          [2],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.revertedWith(INVALID_FLASHLOAN_EXECUTOR_RETURN);
  });

  it('Caller deposits 1000 DAI as collateral, Takes a WETH flashloan with mode = 0, does not approve the transfer of the funds', async () => {
    const { dai, pool, weth, users } = testEnv;
    const caller = users[3];

    await dai
      .connect(caller.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    await dai.connect(caller.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const amountToDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await pool.connect(caller.signer).deposit(dai.address, amountToDeposit, caller.address, '0');

    const flashAmount = ethers.utils.parseEther('0.8');

    await _mockFlashLoanReceiver.setFailExecutionTransfer(false);
    await _mockFlashLoanReceiver.setAmountToApprove(flashAmount.div(2));

    await expect(
      pool
        .connect(caller.signer)
        .flashLoan(
          _mockFlashLoanReceiver.address,
          [weth.address],
          [flashAmount],
          [0],
          caller.address,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });
});



================================================
FILE: test-suites/pool-simple-flashloan.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, ethers, Event } from 'ethers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { ProtocolErrors } from '../helpers/types';
import { TestEnv, makeSuite } from './helpers/make-suite';

import './helpers/utils/wadraymath';
import {
  MockFlashLoanSimpleReceiver,
  MockFlashLoanSimpleReceiver__factory,
  FlashloanAttacker__factory,
  IERC20Detailed__factory,
} from '../types';
import { parseEther, parseUnits } from '@ethersproject/units';
import { waitForTx } from '@aave/deploy-v3';

makeSuite('Pool: Simple FlashLoan', (testEnv: TestEnv) => {
  let _mockFlashLoanSimpleReceiver = {} as MockFlashLoanSimpleReceiver;

  const {
    ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE,
    INVALID_FLASHLOAN_EXECUTOR_RETURN,
    FLASHLOAN_DISABLED,
  } = ProtocolErrors;
  const TOTAL_PREMIUM = 9;
  const PREMIUM_TO_PROTOCOL = 3000;

  before(async () => {
    const { addressesProvider, deployer } = testEnv;

    _mockFlashLoanSimpleReceiver = await new MockFlashLoanSimpleReceiver__factory(
      deployer.signer
    ).deploy(addressesProvider.address);
  });

  it('Configurator sets total premium = 9 bps, premium to protocol = 30%', async () => {
    const { configurator, pool } = testEnv;
    await configurator.updateFlashloanPremiumTotal(TOTAL_PREMIUM);
    await configurator.updateFlashloanPremiumToProtocol(PREMIUM_TO_PROTOCOL);

    expect(await pool.FLASHLOAN_PREMIUM_TOTAL()).to.be.equal(TOTAL_PREMIUM);
    expect(await pool.FLASHLOAN_PREMIUM_TO_PROTOCOL()).to.be.equal(PREMIUM_TO_PROTOCOL);
  });

  it('Deposits WETH into the reserve', async () => {
    const { pool, weth, aave, dai, deployer } = testEnv;
    const userAddress = await pool.signer.getAddress();
    const amountToDeposit = ethers.utils.parseEther('1');

    await weth['mint(address,uint256)'](deployer.address, amountToDeposit);

    await weth.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(weth.address, amountToDeposit, userAddress, '0');

    await aave['mint(uint256)'](amountToDeposit);

    await aave.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(aave.address, amountToDeposit, userAddress, '0');
    await dai['mint(uint256)'](amountToDeposit);

    await dai.approve(pool.address, MAX_UINT_AMOUNT);

    await pool.deposit(dai.address, amountToDeposit, userAddress, '0');
  });

  it('Takes simple WETH flash loan and returns the funds correctly', async () => {
    const { pool, helpersContract, weth, aWETH } = testEnv;

    const wethFlashBorrowedAmount = ethers.utils.parseEther('0.8');
    const wethTotalFees = wethFlashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
    const wethFeesToProtocol = wethTotalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
    const wethFeesToLp = wethTotalFees.sub(wethFeesToProtocol);

    const wethLiquidityIndexAdded = wethFeesToLp
      .mul(BigNumber.from(10).pow(27))
      .div(await aWETH.totalSupply());

    let wethReserveData = await helpersContract.getReserveData(weth.address);

    const wethLiquidityIndexBefore = wethReserveData.liquidityIndex;

    const wethTotalLiquidityBefore = wethReserveData.totalAToken;

    const wethReservesBefore = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());

    const tx = await waitForTx(
      await pool.flashLoanSimple(
        _mockFlashLoanSimpleReceiver.address,
        weth.address,
        wethFlashBorrowedAmount,
        '0x10',
        '0'
      )
    );

    await pool.mintToTreasury([weth.address]);

    wethReserveData = await helpersContract.getReserveData(weth.address);

    const wethCurrentLiquidityRate = wethReserveData.liquidityRate;
    const wethCurrentLiquidityIndex = wethReserveData.liquidityIndex;

    const wethTotalLiquidityAfter = wethReserveData.totalAToken;

    const wethReservesAfter = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());

    expect(wethTotalLiquidityBefore.add(wethTotalFees)).to.be.closeTo(wethTotalLiquidityAfter, 2);
    expect(wethCurrentLiquidityRate).to.be.equal(0);
    expect(wethCurrentLiquidityIndex).to.be.equal(
      wethLiquidityIndexBefore.add(wethLiquidityIndexAdded)
    );
    expect(wethReservesAfter).to.be.equal(wethReservesBefore.add(wethFeesToProtocol));

    // Check event values for `ReserveDataUpdated`
    const reserveDataUpdatedEvents = tx.events?.filter(
      ({ event }) => event === 'ReserveDataUpdated'
    ) as Event[];
    for (const reserveDataUpdatedEvent of reserveDataUpdatedEvents) {
      const reserveData = await helpersContract.getReserveData(
        reserveDataUpdatedEvent.args?.reserve
      );
      expect(reserveData.liquidityRate).to.be.eq(reserveDataUpdatedEvent.args?.liquidityRate);
      expect(reserveData.stableBorrowRate).to.be.eq(reserveDataUpdatedEvent.args?.stableBorrowRate);
      expect(reserveData.variableBorrowRate).to.be.eq(
        reserveDataUpdatedEvent.args?.variableBorrowRate
      );
      expect(reserveData.liquidityIndex).to.be.eq(reserveDataUpdatedEvent.args?.liquidityIndex);
      expect(reserveData.variableBorrowIndex).to.be.eq(
        reserveDataUpdatedEvent.args?.variableBorrowIndex
      );
    }
  });

  it('Takes a simple ETH flashloan as big as the available liquidity', async () => {
    const { pool, helpersContract, weth, aWETH } = testEnv;

    let reserveData = await helpersContract.getReserveData(weth.address);

    const totalLiquidityBefore = reserveData.totalAToken;

    const flashBorrowedAmount = totalLiquidityBefore;

    const totalFees = flashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
    const feesToProtocol = totalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
    const feesToLp = totalFees.sub(feesToProtocol);
    const liquidityIndexBefore = reserveData.liquidityIndex;
    const liquidityIndexAdded = feesToLp
      .mul(BigNumber.from(10).pow(27))
      .div((await aWETH.totalSupply()).toString())
      .mul(liquidityIndexBefore)
      .div(BigNumber.from(10).pow(27));

    const reservesBefore = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());

    const txResult = await pool.flashLoanSimple(
      _mockFlashLoanSimpleReceiver.address,
      weth.address,
      flashBorrowedAmount,
      '0x10',
      '0'
    );

    await pool.mintToTreasury([weth.address]);

    reserveData = await helpersContract.getReserveData(weth.address);

    const currentLiquidityRate = reserveData.liquidityRate;
    const currentLiquidityIndex = reserveData.liquidityIndex;

    const totalLiquidityAfter = reserveData.totalAToken;

    const reservesAfter = await aWETH.balanceOf(await aWETH.RESERVE_TREASURY_ADDRESS());
    expect(totalLiquidityBefore.add(totalFees)).to.be.closeTo(totalLiquidityAfter, 2);
    expect(currentLiquidityRate).to.be.equal(0);
    expect(currentLiquidityIndex).to.be.equal(liquidityIndexBefore.add(liquidityIndexAdded));
    expect(
      reservesAfter.sub(feesToProtocol).mul(liquidityIndexBefore).div(currentLiquidityIndex)
    ).to.be.equal(reservesBefore);
  });

  it('Takes a simple ETH flashloan after flashloaning disabled', async () => {
    const { pool, configurator, helpersContract, weth } = testEnv;

    expect(await configurator.setReserveFlashLoaning(weth.address, false));
    let wethFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(weth.address);
    expect(wethFlashLoanEnabled).to.be.equal(false);

    const wethFlashBorrowedAmount = ethers.utils.parseEther('0.8');

    await expect(
      pool.flashLoanSimple(
        _mockFlashLoanSimpleReceiver.address,
        weth.address,
        wethFlashBorrowedAmount,
        '0x10',
        '0'
      )
    ).to.be.revertedWith(FLASHLOAN_DISABLED);

    expect(await configurator.setReserveFlashLoaning(weth.address, true));
    wethFlashLoanEnabled = await helpersContract.getFlashLoanEnabled(weth.address);
    expect(wethFlashLoanEnabled).to.be.equal(true);
  });

  it('Takes WETH flashloan, does not return the funds (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];
    await _mockFlashLoanSimpleReceiver.setFailExecutionTransfer(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoanSimple(
          _mockFlashLoanSimpleReceiver.address,
          weth.address,
          ethers.utils.parseEther('0.8'),
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Takes WETH flashloan, simulating a receiver as EOA (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];
    await _mockFlashLoanSimpleReceiver.setFailExecutionTransfer(true);
    await _mockFlashLoanSimpleReceiver.setSimulateEOA(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoanSimple(
          _mockFlashLoanSimpleReceiver.address,
          weth.address,
          ethers.utils.parseEther('0.8'),
          '0x10',
          '0'
        )
    ).to.be.revertedWith(INVALID_FLASHLOAN_EXECUTOR_RETURN);
  });

  it('Tries to take a flashloan that is bigger than the available liquidity (revert expected)', async () => {
    const { pool, weth, users } = testEnv;
    const caller = users[1];

    await expect(
      pool.connect(caller.signer).flashLoanSimple(
        _mockFlashLoanSimpleReceiver.address,
        weth.address,
        '1004415000000000000', //slightly higher than the available liquidity
        '0x10',
        '0'
      ),
      ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE
    ).to.be.reverted;
  });

  it('Tries to take a flashloan using a non contract address as receiver (revert expected)', async () => {
    const { pool, deployer, weth, users } = testEnv;
    const caller = users[1];

    await expect(
      pool.flashLoanSimple(deployer.address, weth.address, '1000000000000000000', '0x10', '0')
    ).to.be.reverted;
  });

  it('Deposits USDC into the reserve', async () => {
    const { usdc, pool } = testEnv;
    const userAddress = await pool.signer.getAddress();

    await usdc['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '1000'));

    await usdc.approve(pool.address, MAX_UINT_AMOUNT);

    const amountToDeposit = await convertToCurrencyDecimals(usdc.address, '1000');

    await pool.deposit(usdc.address, amountToDeposit, userAddress, '0');
  });

  it('Takes out a 500 USDC flashloan, returns the funds correctly', async () => {
    const { usdc, aUsdc, pool, helpersContract, deployer: depositor } = testEnv;

    await _mockFlashLoanSimpleReceiver.setFailExecutionTransfer(false);

    const flashBorrowedAmount = await convertToCurrencyDecimals(usdc.address, '500');
    const totalFees = flashBorrowedAmount.mul(TOTAL_PREMIUM).div(10000);
    const feesToProtocol = totalFees.mul(PREMIUM_TO_PROTOCOL).div(10000);
    const feesToLp = totalFees.sub(feesToProtocol);
    const liquidityIndexAdded = feesToLp
      .mul(ethers.BigNumber.from(10).pow(27))
      .div(await aUsdc.totalSupply());

    let reserveData = await helpersContract.getReserveData(usdc.address);

    const liquidityIndexBefore = reserveData.liquidityIndex;

    const totalLiquidityBefore = reserveData.totalAToken;

    const reservesBefore = await aUsdc.balanceOf(await aUsdc.RESERVE_TREASURY_ADDRESS());

    await pool.flashLoanSimple(
      _mockFlashLoanSimpleReceiver.address,
      usdc.address,
      flashBorrowedAmount,
      '0x10',
      '0'
    );

    await pool.mintToTreasury([usdc.address]);

    reserveData = await helpersContract.getReserveData(usdc.address);

    const currentLiquidityRate = reserveData.liquidityRate;
    const currentLiquidityIndex = reserveData.liquidityIndex;

    const totalLiquidityAfter = reserveData.totalAToken;

    const reservesAfter = await aUsdc.balanceOf(await aUsdc.RESERVE_TREASURY_ADDRESS());

    expect(totalLiquidityBefore.add(totalFees)).to.be.closeTo(totalLiquidityAfter, 2);
    expect(currentLiquidityRate).to.be.equal(0);
    expect(currentLiquidityIndex).to.be.equal(liquidityIndexBefore.add(liquidityIndexAdded));
    expect(reservesAfter).to.be.equal(reservesBefore.add(feesToProtocol));
  });

  it('Takes out a 500 USDC flashloan with mode = 0, does not return the funds (revert expected)', async () => {
    const { usdc, pool, users } = testEnv;
    const caller = users[2];

    const flashloanAmount = await convertToCurrencyDecimals(usdc.address, '500');

    await _mockFlashLoanSimpleReceiver.setFailExecutionTransfer(true);

    await expect(
      pool
        .connect(caller.signer)
        .flashLoanSimple(
          _mockFlashLoanSimpleReceiver.address,
          usdc.address,
          flashloanAmount,
          '0x10',
          '0'
        )
    ).to.be.revertedWith(INVALID_FLASHLOAN_EXECUTOR_RETURN);
  });

  it('Caller deposits 1000 DAI as collateral, Takes a WETH flashloan with mode = 0, does not approve the transfer of the funds', async () => {
    const { dai, pool, weth, users } = testEnv;
    const caller = users[3];

    await dai
      .connect(caller.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));

    await dai.connect(caller.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const amountToDeposit = await convertToCurrencyDecimals(dai.address, '1000');

    await pool.connect(caller.signer).deposit(dai.address, amountToDeposit, caller.address, '0');

    const flashAmount = ethers.utils.parseEther('0.8');

    await _mockFlashLoanSimpleReceiver.setFailExecutionTransfer(false);
    await _mockFlashLoanSimpleReceiver.setAmountToApprove(flashAmount.div(2));

    await expect(
      pool
        .connect(caller.signer)
        .flashLoanSimple(
          _mockFlashLoanSimpleReceiver.address,
          weth.address,
          flashAmount,
          '0x10',
          '0'
        )
    ).to.be.reverted;
  });

  it('Check that reentrance borrow within flashloanSimple impacts rates', async () => {
    /**
     * 1. FlashBorrow a tiny bit of DAI
     * 2. As the action in the middle. Borrow ALL the DAI using eth collateral
     * 3. Repay the tiny bit
     * The result should be that the interest rate increase due to higher utilisation.
     */

    const {
      deployer,
      pool,
      dai,
      aDai,
      weth,
      addressesProvider,
      users: [user],
    } = testEnv;

    const flashAttacker = await new FlashloanAttacker__factory(deployer.signer).deploy(
      addressesProvider.address
    );

    await flashAttacker.connect(user.signer).supplyAsset(weth.address, parseEther('100'));

    const dataBefore = await pool.getReserveData(dai.address);
    const debtToken = IERC20Detailed__factory.connect(
      dataBefore.variableDebtTokenAddress,
      deployer.signer
    );
    const debtBefore = await debtToken.totalSupply();
    const availableBefore = await dai.balanceOf(aDai.address);

    await pool
      .connect(user.signer)
      .flashLoanSimple(flashAttacker.address, dai.address, parseUnits('1', 18), '0x10', 0);

    const dataAfter = await pool.getReserveData(dai.address);
    const debtAfter = await debtToken.totalSupply();
    const availableAfter = await dai.balanceOf(aDai.address);

    // More debt and less available -> higher usage-> rates will increase
    expect(debtAfter).to.be.gt(debtBefore);
    expect(availableAfter).to.be.lt(availableBefore);

    // Premium is added
    expect(dataAfter.liquidityIndex).to.be.gt(dataBefore.liquidityIndex);

    // Rates should have increased
    expect(dataAfter.currentLiquidityRate).to.be.gt(dataBefore.currentLiquidityRate);
    expect(dataAfter.currentVariableBorrowRate).to.be.gt(dataBefore.currentVariableBorrowRate);
  });
});



================================================
FILE: test-suites/price-oracle-sentinel.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, utils } from 'ethers';
import { timeLatest } from '../helpers/misc-utils';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { ProtocolErrors, RateMode } from '../helpers/types';
import {
  PriceOracleSentinel,
  PriceOracleSentinel__factory,
  SequencerOracle,
  SequencerOracle__factory,
} from '../types';
import { getFirstSigner } from '@aave/deploy-v3/dist/helpers/utilities/signer';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { calcExpectedVariableDebtTokenBalance } from './helpers/utils/calculations';
import { getReserveData, getUserData } from './helpers/utils/helpers';
import './helpers/utils/wadraymath';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { waitForTx, increaseTime } from '@aave/deploy-v3';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('PriceOracleSentinel', (testEnv: TestEnv) => {
  const {
    PRICE_ORACLE_SENTINEL_CHECK_FAILED,
    INVALID_HF,
    CALLER_NOT_POOL_ADMIN,
    CALLER_NOT_RISK_OR_POOL_ADMIN,
  } = ProtocolErrors;

  let sequencerOracle: SequencerOracle;
  let priceOracleSentinel: PriceOracleSentinel;

  const GRACE_PERIOD = BigNumber.from(60 * 60);

  before(async () => {
    const { addressesProvider, deployer, oracle } = testEnv;

    // Deploy SequencerOracle
    sequencerOracle = await (
      await new SequencerOracle__factory(deployer.signer).deploy(deployer.address)
    ).deployed();

    priceOracleSentinel = await (
      await new PriceOracleSentinel__factory(await getFirstSigner()).deploy(
        addressesProvider.address,
        sequencerOracle.address,
        GRACE_PERIOD
      )
    ).deployed();

    await waitForTx(await addressesProvider.setPriceOracle(oracle.address));
  });

  after(async () => {
    const { aaveOracle, addressesProvider } = testEnv;
    await waitForTx(await addressesProvider.setPriceOracle(aaveOracle.address));
  });

  it('Admin sets a PriceOracleSentinel and activate it for DAI and WETH', async () => {
    const { addressesProvider, poolAdmin } = testEnv;

    await expect(
      addressesProvider
        .connect(poolAdmin.signer)
        .setPriceOracleSentinel(priceOracleSentinel.address)
    )
      .to.emit(addressesProvider, 'PriceOracleSentinelUpdated')
      .withArgs(ZERO_ADDRESS, priceOracleSentinel.address);

    expect(await addressesProvider.getPriceOracleSentinel()).to.be.eq(priceOracleSentinel.address);

    const answer = await sequencerOracle.latestRoundData();
    expect(answer[1]).to.be.eq(0);
    expect(answer[3]).to.be.eq(0);
  });

  it('Pooladmin updates grace period for sentinel', async () => {
    const { poolAdmin } = testEnv;

    const newGracePeriod = 0;

    expect(await priceOracleSentinel.getGracePeriod()).to.be.eq(GRACE_PERIOD);
    await expect(priceOracleSentinel.connect(poolAdmin.signer).setGracePeriod(0))
      .to.emit(priceOracleSentinel, 'GracePeriodUpdated')
      .withArgs(0);
    expect(await priceOracleSentinel.getGracePeriod()).to.be.eq(newGracePeriod);
  });

  it('Risk admin updates grace period for sentinel', async () => {
    const { riskAdmin } = testEnv;

    expect(await priceOracleSentinel.getGracePeriod()).to.be.eq(0);
    await expect(priceOracleSentinel.connect(riskAdmin.signer).setGracePeriod(GRACE_PERIOD))
      .to.emit(priceOracleSentinel, 'GracePeriodUpdated')
      .withArgs(GRACE_PERIOD);
    expect(await priceOracleSentinel.getGracePeriod()).to.be.eq(GRACE_PERIOD);
  });

  it('User tries to set grace period for sentinel', async () => {
    const {
      users: [user],
    } = testEnv;

    expect(await priceOracleSentinel.getGracePeriod()).to.be.eq(GRACE_PERIOD);
    await expect(priceOracleSentinel.connect(user.signer).setGracePeriod(0)).to.be.revertedWith(
      CALLER_NOT_RISK_OR_POOL_ADMIN
    );
    expect(await priceOracleSentinel.getGracePeriod()).to.not.be.eq(0);
  });

  it('Pooladmin update the sequencer oracle', async () => {
    const { poolAdmin } = testEnv;

    const newSequencerOracle = ZERO_ADDRESS;

    expect(await priceOracleSentinel.getSequencerOracle()).to.be.eq(sequencerOracle.address);
    await expect(
      priceOracleSentinel.connect(poolAdmin.signer).setSequencerOracle(newSequencerOracle)
    )
      .to.emit(priceOracleSentinel, 'SequencerOracleUpdated')
      .withArgs(newSequencerOracle);
    expect(await priceOracleSentinel.getSequencerOracle()).to.be.eq(newSequencerOracle);

    await expect(
      priceOracleSentinel.connect(poolAdmin.signer).setSequencerOracle(sequencerOracle.address)
    )
      .to.emit(priceOracleSentinel, 'SequencerOracleUpdated')
      .withArgs(sequencerOracle.address);
    expect(await priceOracleSentinel.getSequencerOracle()).to.be.eq(sequencerOracle.address);
  });

  it('User tries to update sequencer oracle', async () => {
    const {
      users: [user],
    } = testEnv;
    const newSequencerOracle = ZERO_ADDRESS;

    expect(await priceOracleSentinel.getSequencerOracle()).to.be.eq(sequencerOracle.address);
    await expect(
      priceOracleSentinel.connect(user.signer).setSequencerOracle(newSequencerOracle)
    ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
    expect(await priceOracleSentinel.getSequencerOracle()).to.be.eq(sequencerOracle.address);
  });

  it('Borrow DAI', async () => {
    const {
      dai,
      weth,
      users: [depositor, borrower, borrower2],
      pool,
      oracle,
    } = testEnv;

    //mints DAI to depositor
    await dai
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '2000'));

    //approve protocol to access depositor wallet
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);

    //user 1 deposits 1000 DAI
    const amountDAItoDeposit = await convertToCurrencyDecimals(dai.address, '2000');
    await pool
      .connect(depositor.signer)
      .deposit(dai.address, amountDAItoDeposit, depositor.address, '0');

    const amountETHtoDeposit = await convertToCurrencyDecimals(weth.address, '0.06775');

    for (let i = 0; i < 2; i++) {
      const borrowers = [borrower, borrower2];
      const currBorrower = borrowers[i];
      //mints WETH to borrower
      await weth
        .connect(currBorrower.signer)
        ['mint(address,uint256)'](currBorrower.address, amountETHtoDeposit);

      //approve protocol to access borrower wallet
      await weth.connect(currBorrower.signer).approve(pool.address, MAX_UINT_AMOUNT);

      //user 2 deposits 1 WETH
      await pool
        .connect(currBorrower.signer)
        .deposit(weth.address, amountETHtoDeposit, currBorrower.address, '0');

      //user 2 borrows
      const userGlobalData = await pool.getUserAccountData(currBorrower.address);
      const daiPrice = await oracle.getAssetPrice(dai.address);

      const amountDAIToBorrow = await convertToCurrencyDecimals(
        dai.address,
        userGlobalData.availableBorrowsBase.div(daiPrice.toString()).percentMul(9500).toString()
      );

      await pool
        .connect(currBorrower.signer)
        .borrow(dai.address, amountDAIToBorrow, RateMode.Variable, '0', currBorrower.address);
    }
  });

  it('Kill sequencer and drop health factor below 1', async () => {
    const {
      dai,
      users: [, borrower],
      pool,
      oracle,
    } = testEnv;

    const daiPrice = await oracle.getAssetPrice(dai.address);
    await oracle.setAssetPrice(dai.address, daiPrice.percentMul(11000));
    const userGlobalData = await pool.getUserAccountData(borrower.address);

    expect(userGlobalData.healthFactor).to.be.lt(utils.parseUnits('1', 18), INVALID_HF);
    const currAnswer = await sequencerOracle.latestRoundData();
    waitForTx(await sequencerOracle.setAnswer(true, currAnswer[3]));
  });

  it('Tries to liquidate borrower when sequencer is down (HF > 0.95) (revert expected)', async () => {
    const {
      pool,
      dai,
      weth,
      users: [, borrower],
      helpersContract,
    } = testEnv;

    await dai['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));
    await dai.approve(pool.address, MAX_UINT_AMOUNT);

    const userReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentVariableDebt.div(2);
    await expect(
      pool.liquidationCall(weth.address, dai.address, borrower.address, amountToLiquidate, true)
    ).to.be.revertedWith(PRICE_ORACLE_SENTINEL_CHECK_FAILED);
  });

  it('Drop health factor lower', async () => {
    const {
      dai,
      users: [, borrower],
      pool,
      oracle,
    } = testEnv;

    const daiPrice = await oracle.getAssetPrice(dai.address);
    await oracle.setAssetPrice(dai.address, daiPrice.percentMul(11000));
    const userGlobalData = await pool.getUserAccountData(borrower.address);

    expect(userGlobalData.healthFactor).to.be.lt(utils.parseUnits('1', 18), INVALID_HF);
  });

  it('Liquidates borrower when sequencer is down (HF < 0.95)', async () => {
    const {
      pool,
      dai,
      weth,
      users: [, borrower],
      oracle,
      helpersContract,
      deployer,
    } = testEnv;

    await dai['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));
    await dai.approve(pool.address, MAX_UINT_AMOUNT);

    const daiReserveDataBefore = await getReserveData(helpersContract, dai.address);
    const ethReserveDataBefore = await getReserveData(helpersContract, weth.address);

    const userReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const userWethReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      weth.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentVariableDebt.div(2);

    const tx = await pool.liquidationCall(
      weth.address,
      dai.address,
      borrower.address,
      amountToLiquidate,
      true
    );

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      dai.address,
      borrower.address
    );

    const userWethReserveDataAfter = await helpersContract.getUserReserveData(
      weth.address,
      borrower.address
    );

    const daiReserveDataAfter = await getReserveData(helpersContract, dai.address);
    const ethReserveDataAfter = await getReserveData(helpersContract, weth.address);

    const collateralPrice = await oracle.getAssetPrice(weth.address);
    const principalPrice = await oracle.getAssetPrice(dai.address);

    const collateralDecimals = (await helpersContract.getReserveConfigurationData(weth.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(dai.address))
      .decimals;

    const expectedCollateralLiquidated = principalPrice
      .mul(amountToLiquidate)
      .percentMul(10500)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    expect(expectedCollateralLiquidated).to.be.closeTo(
      userWethReserveDataBefore.currentATokenBalance.sub(
        userWethReserveDataAfter.currentATokenBalance
      ),
      2,
      'Invalid collateral amount liquidated'
    );

    if (!tx.blockNumber) {
      expect(false, 'Invalid block number');
      return;
    }

    const txTimestamp = BigNumber.from(
      (await hre.ethers.provider.getBlock(tx.blockNumber)).timestamp
    );

    const variableDebtBeforeTx = calcExpectedVariableDebtTokenBalance(
      daiReserveDataBefore,
      userReserveDataBefore,
      txTimestamp
    );

    expect(userReserveDataAfter.currentVariableDebt).to.be.closeTo(
      variableDebtBeforeTx.sub(amountToLiquidate),
      2,
      'Invalid user borrow balance after liquidation'
    );

    expect(daiReserveDataAfter.availableLiquidity).to.be.closeTo(
      daiReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(daiReserveDataAfter.liquidityIndex).to.be.gte(
      daiReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(daiReserveDataAfter.liquidityRate).to.be.lt(
      daiReserveDataBefore.liquidityRate,
      'Invalid liquidity APY'
    );

    expect(ethReserveDataAfter.availableLiquidity).to.be.closeTo(
      ethReserveDataBefore.availableLiquidity,
      2,
      'Invalid collateral available liquidity'
    );

    expect(
      (await helpersContract.getUserReserveData(weth.address, deployer.address))
        .usageAsCollateralEnabled
    ).to.be.true;
  });

  it('User tries to borrow (revert expected)', async () => {
    const {
      dai,
      weth,
      users: [, , , user],
      pool,
      oracle,
    } = testEnv;

    await weth
      .connect(user.signer)
      ['mint(address,uint256)'](user.address, utils.parseUnits('0.06775', 18));
    await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .supply(weth.address, utils.parseUnits('0.06775', 18), user.address, 0);

    await expect(
      pool
        .connect(user.signer)
        .borrow(dai.address, utils.parseUnits('100', 18), RateMode.Variable, 0, user.address)
    ).to.be.revertedWith(PRICE_ORACLE_SENTINEL_CHECK_FAILED);
  });

  it('Turn on sequencer', async () => {
    await waitForTx(await sequencerOracle.setAnswer(false, await timeLatest()));
  });

  it('User tries to borrow (revert expected)', async () => {
    const {
      dai,
      weth,
      users: [, , , user],
      pool,
    } = testEnv;

    await weth
      .connect(user.signer)
      ['mint(address,uint256)'](user.address, utils.parseUnits('0.06775', 18));
    await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .supply(weth.address, utils.parseUnits('0.06775', 18), user.address, 0);

    await expect(
      pool
        .connect(user.signer)
        .borrow(dai.address, utils.parseUnits('100', 18), RateMode.Variable, 0, user.address)
    ).to.be.revertedWith(PRICE_ORACLE_SENTINEL_CHECK_FAILED);
  });

  it('Turn off sequencer + increase time more than grace period', async () => {
    const currAnswer = await sequencerOracle.latestRoundData();
    await waitForTx(await sequencerOracle.setAnswer(true, currAnswer[3]));
    await increaseTime(GRACE_PERIOD.mul(2).toNumber());
  });

  it('User tries to borrow (revert expected)', async () => {
    const {
      dai,
      weth,
      users: [, , , user],
      pool,
    } = testEnv;

    await weth
      .connect(user.signer)
      ['mint(address,uint256)'](user.address, utils.parseUnits('0.06775', 18));
    await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .supply(weth.address, utils.parseUnits('0.06775', 18), user.address, 0);

    await expect(
      pool
        .connect(user.signer)
        .borrow(dai.address, utils.parseUnits('100', 18), RateMode.Variable, 0, user.address)
    ).to.be.revertedWith(PRICE_ORACLE_SENTINEL_CHECK_FAILED);
  });

  it('Turn on sequencer + increase time past grace period', async () => {
    await waitForTx(await sequencerOracle.setAnswer(false, await timeLatest()));
    await increaseTime(GRACE_PERIOD.mul(2).toNumber());
  });

  it('User tries to borrow', async () => {
    const {
      dai,
      weth,
      users: [, , , user],
      pool,
    } = testEnv;

    await weth
      .connect(user.signer)
      ['mint(address,uint256)'](user.address, utils.parseUnits('0.06775', 18));
    await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .supply(weth.address, utils.parseUnits('0.06775', 18), user.address, 0);

    await waitForTx(
      await pool
        .connect(user.signer)
        .borrow(dai.address, utils.parseUnits('100', 18), RateMode.Variable, 0, user.address)
    );
  });

  it('Increase health factor', async () => {
    const {
      dai,
      users: [, borrower],
      pool,
      oracle,
    } = testEnv;
    const daiPrice = await oracle.getAssetPrice(dai.address);
    await oracle.setAssetPrice(dai.address, daiPrice.percentMul(9500));
    const userGlobalData = await pool.getUserAccountData(borrower.address);

    expect(userGlobalData.healthFactor).to.be.lt(utils.parseUnits('1', 18), INVALID_HF);
    expect(userGlobalData.healthFactor).to.be.gt(utils.parseUnits('0.95', 18), INVALID_HF);
  });

  it('Liquidates borrower when sequencer is up again', async () => {
    const {
      pool,
      dai,
      weth,
      users: [, , borrower],
      oracle,
      helpersContract,
      deployer,
    } = testEnv;

    await dai['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));
    await dai.approve(pool.address, MAX_UINT_AMOUNT);

    const daiReserveDataBefore = await getReserveData(helpersContract, dai.address);
    const ethReserveDataBefore = await getReserveData(helpersContract, weth.address);

    const userReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      dai.address,
      borrower.address
    );

    const userWethReserveDataBefore = await getUserData(
      pool,
      helpersContract,
      weth.address,
      borrower.address
    );

    const amountToLiquidate = userReserveDataBefore.currentVariableDebt.div(2);

    // The supply is the same, but there should be a change in who has what. The liquidator should have received what the borrower lost.
    const tx = await pool.liquidationCall(
      weth.address,
      dai.address,
      borrower.address,
      amountToLiquidate,
      true
    );

    const userReserveDataAfter = await helpersContract.getUserReserveData(
      dai.address,
      borrower.address
    );

    const userWethReserveDataAfter = await helpersContract.getUserReserveData(
      weth.address,
      borrower.address
    );

    const userGlobalDataAfter = await pool.getUserAccountData(borrower.address);

    const daiReserveDataAfter = await getReserveData(helpersContract, dai.address);
    const ethReserveDataAfter = await getReserveData(helpersContract, weth.address);

    const collateralPrice = await oracle.getAssetPrice(weth.address);
    const principalPrice = await oracle.getAssetPrice(dai.address);

    const collateralDecimals = (await helpersContract.getReserveConfigurationData(weth.address))
      .decimals;
    const principalDecimals = (await helpersContract.getReserveConfigurationData(dai.address))
      .decimals;

    const expectedCollateralLiquidated = principalPrice
      .mul(amountToLiquidate)
      .percentMul(10500)
      .mul(BigNumber.from(10).pow(collateralDecimals))
      .div(collateralPrice.mul(BigNumber.from(10).pow(principalDecimals)));

    expect(expectedCollateralLiquidated).to.be.closeTo(
      userWethReserveDataBefore.currentATokenBalance.sub(
        userWethReserveDataAfter.currentATokenBalance
      ),
      2,
      'Invalid collateral amount liquidated'
    );

    if (!tx.blockNumber) {
      expect(false, 'Invalid block number');
      return;
    }

    const txTimestamp = BigNumber.from(
      (await hre.ethers.provider.getBlock(tx.blockNumber)).timestamp
    );

    const variableDebtBeforeTx = calcExpectedVariableDebtTokenBalance(
      daiReserveDataBefore,
      userReserveDataBefore,
      txTimestamp
    );

    expect(userReserveDataAfter.currentVariableDebt).to.be.closeTo(
      variableDebtBeforeTx.sub(amountToLiquidate),
      2,
      'Invalid user borrow balance after liquidation'
    );

    expect(daiReserveDataAfter.availableLiquidity).to.be.closeTo(
      daiReserveDataBefore.availableLiquidity.add(amountToLiquidate),
      2,
      'Invalid principal available liquidity'
    );

    //the liquidity index of the principal reserve needs to be bigger than the index before
    expect(daiReserveDataAfter.liquidityIndex).to.be.gte(
      daiReserveDataBefore.liquidityIndex,
      'Invalid liquidity index'
    );

    //the principal APY after a liquidation needs to be lower than the APY before
    expect(daiReserveDataAfter.liquidityRate).to.be.lt(
      daiReserveDataBefore.liquidityRate,
      'Invalid liquidity APY'
    );

    expect(ethReserveDataAfter.availableLiquidity).to.be.closeTo(
      ethReserveDataBefore.availableLiquidity,
      2,
      'Invalid collateral available liquidity'
    );

    expect(
      (await helpersContract.getUserReserveData(weth.address, deployer.address))
        .usageAsCollateralEnabled
    ).to.be.true;
  });
});



================================================
FILE: test-suites/rate-strategy.spec.ts
================================================
import { expect } from 'chai';
import { BigNumberish, utils } from 'ethers';
import { BigNumber } from '@ethersproject/bignumber';
import { deployDefaultReserveInterestRateStrategy } from '@aave/deploy-v3/dist/helpers/contract-deployments';
import { PERCENTAGE_FACTOR } from '../helpers/constants';
import { AToken, DefaultReserveInterestRateStrategy, MintableERC20 } from '../types';
import { strategyDAI } from '@aave/deploy-v3/dist/markets/test/reservesConfigs';
import { rateStrategyStableTwo } from '@aave/deploy-v3/dist/markets/test/rateStrategies';
import { TestEnv, makeSuite } from './helpers/make-suite';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { formatUnits } from '@ethersproject/units';
import './helpers/utils/wadraymath';

const DEBUG = false;

type CalculateInterestRatesParams = {
  unbacked: BigNumberish;
  liquidityAdded: BigNumberish;
  liquidityTaken: BigNumberish;
  totalStableDebt: BigNumberish;
  totalVariableDebt: BigNumberish;
  averageStableBorrowRate: BigNumberish;
  reserveFactor: BigNumberish;
  reserve: string;
  aToken: string;
};

makeSuite('InterestRateStrategy', (testEnv: TestEnv) => {
  let strategyInstance: DefaultReserveInterestRateStrategy;
  let dai: MintableERC20;
  let aDai: AToken;
  const baseStableRate = BigNumber.from(rateStrategyStableTwo.variableRateSlope1).add(
    rateStrategyStableTwo.baseStableRateOffset
  );

  const { INVALID_OPTIMAL_USAGE_RATIO, INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO } =
    ProtocolErrors;

  before(async () => {
    dai = testEnv.dai;
    aDai = testEnv.aDai;

    const { addressesProvider } = testEnv;

    strategyInstance = await deployDefaultReserveInterestRateStrategy([
      addressesProvider.address,
      rateStrategyStableTwo.optimalUsageRatio,
      rateStrategyStableTwo.baseVariableBorrowRate,
      rateStrategyStableTwo.variableRateSlope1,
      rateStrategyStableTwo.variableRateSlope2,
      rateStrategyStableTwo.stableRateSlope1,
      rateStrategyStableTwo.stableRateSlope2,
      rateStrategyStableTwo.baseStableRateOffset,
      rateStrategyStableTwo.stableRateExcessOffset,
      rateStrategyStableTwo.optimalStableToTotalDebtRatio,
    ]);
  });

  it('Checks rates at 0% usage ratio, empty reserve', async () => {
    let params: CalculateInterestRatesParams = {
      unbacked: 0,
      liquidityAdded: 0,
      liquidityTaken: 0,
      totalStableDebt: 0,
      totalVariableDebt: 0,
      averageStableBorrowRate: 0,
      reserveFactor: strategyDAI.reserveFactor,
      reserve: dai.address,
      aToken: aDai.address,
    };

    const {
      0: currentLiquidityRate,
      1: currentStableBorrowRate,
      2: currentVariableBorrowRate,
    } = await strategyInstance.calculateInterestRates(params);

    expect(currentLiquidityRate).to.be.equal(0, 'Invalid liquidity rate');
    expect(currentStableBorrowRate).to.be.equal(baseStableRate, 'Invalid stable rate');
    expect(currentVariableBorrowRate).to.be.equal(
      rateStrategyStableTwo.baseVariableBorrowRate,
      'Invalid variable rate'
    );
  });

  it('Checks rates at 80% usage ratio', async () => {
    let params: CalculateInterestRatesParams = {
      unbacked: 0,
      liquidityAdded: '200000000000000000',
      liquidityTaken: 0,
      totalStableDebt: 0,
      totalVariableDebt: '800000000000000000',
      averageStableBorrowRate: 0,
      reserveFactor: strategyDAI.reserveFactor,
      reserve: dai.address,
      aToken: aDai.address,
    };

    const {
      0: currentLiquidityRate,
      1: currentStableBorrowRate,
      2: currentVariableBorrowRate,
    } = await strategyInstance.calculateInterestRates(params);

    const expectedVariableRate = BigNumber.from(rateStrategyStableTwo.baseVariableBorrowRate).add(
      rateStrategyStableTwo.variableRateSlope1
    );

    expect(currentLiquidityRate).to.be.equal(
      expectedVariableRate
        .percentMul(8000)
        .percentMul(BigNumber.from(PERCENTAGE_FACTOR).sub(strategyDAI.reserveFactor)),
      'Invalid liquidity rate'
    );

    expect(currentVariableBorrowRate).to.be.equal(expectedVariableRate, 'Invalid variable rate');

    expect(currentStableBorrowRate).to.be.equal(
      baseStableRate.add(rateStrategyStableTwo.stableRateSlope1),
      'Invalid stable rate'
    );

    if (DEBUG) {
      console.log(`Current Liquidity Rate: ${formatUnits(currentLiquidityRate, 27)}`);
      console.log(`Current Borrow Rate V : ${formatUnits(currentVariableBorrowRate, 27)}`);
      console.log(`Current Borrow Rate S : ${formatUnits(currentStableBorrowRate, 27)}`);
    }
  });

  it('Checks rates at 100% usage ratio', async () => {
    let params: CalculateInterestRatesParams = {
      unbacked: 0,
      liquidityAdded: '0',
      liquidityTaken: 0,
      totalStableDebt: 0,
      totalVariableDebt: '1000000000000000000',
      averageStableBorrowRate: 0,
      reserveFactor: strategyDAI.reserveFactor,
      reserve: dai.address,
      aToken: aDai.address,
    };

    const {
      0: currentLiquidityRate,
      1: currentStableBorrowRate,
      2: currentVariableBorrowRate,
    } = await strategyInstance.calculateInterestRates(params);

    const expectedVariableRate = BigNumber.from(rateStrategyStableTwo.baseVariableBorrowRate)
      .add(rateStrategyStableTwo.variableRateSlope1)
      .add(rateStrategyStableTwo.variableRateSlope2);

    expect(currentLiquidityRate).to.be.equal(
      expectedVariableRate.percentMul(
        BigNumber.from(PERCENTAGE_FACTOR).sub(strategyDAI.reserveFactor)
      ),
      'Invalid liquidity rate'
    );

    expect(currentVariableBorrowRate).to.be.equal(expectedVariableRate, 'Invalid variable rate');

    expect(currentStableBorrowRate).to.be.equal(
      baseStableRate
        .add(rateStrategyStableTwo.stableRateSlope1)
        .add(rateStrategyStableTwo.stableRateSlope2),
      'Invalid stable rate'
    );

    if (DEBUG) {
      console.log(`Current Liquidity Rate: ${formatUnits(currentLiquidityRate, 27)}`);
      console.log(`Current Borrow Rate V : ${formatUnits(currentVariableBorrowRate, 27)}`);
      console.log(`Current Borrow Rate S : ${formatUnits(currentStableBorrowRate, 27)}`);
    }
  });

  it('Checks rates at 100% usage ratio, 50% stable debt and 50% variable debt, with a 10% avg stable rate', async () => {
    let params: CalculateInterestRatesParams = {
      unbacked: 0,
      liquidityAdded: '0',
      liquidityTaken: 0,
      totalStableDebt: '400000000000000000',
      totalVariableDebt: '400000000000000000',
      averageStableBorrowRate: '100000000000000000000000000',
      reserveFactor: strategyDAI.reserveFactor,
      reserve: dai.address,
      aToken: aDai.address,
    };

    const {
      0: currentLiquidityRate,
      1: currentStableBorrowRate,
      2: currentVariableBorrowRate,
    } = await strategyInstance.calculateInterestRates(params);

    const expectedVariableRate = BigNumber.from(rateStrategyStableTwo.baseVariableBorrowRate)
      .add(rateStrategyStableTwo.variableRateSlope1)
      .add(rateStrategyStableTwo.variableRateSlope2);

    const expectedLiquidityRate = BigNumber.from(currentVariableBorrowRate)
      .add(utils.parseUnits('0.1', 27))
      .div('2')
      .percentMul(BigNumber.from(PERCENTAGE_FACTOR).sub(strategyDAI.reserveFactor));

    expect(currentVariableBorrowRate).to.be.equal(expectedVariableRate, 'Invalid variable rate');
    expect(currentLiquidityRate).to.be.equal(expectedLiquidityRate, 'Invalid liquidity rate');
    expect(currentStableBorrowRate).to.be.equal(
      baseStableRate
        .add(rateStrategyStableTwo.stableRateSlope1)
        .add(rateStrategyStableTwo.stableRateSlope2)
        .add(
          BigNumber.from(rateStrategyStableTwo.stableRateExcessOffset).rayMul(
            BigNumber.from(utils.parseUnits('0.375', 27))
          )
        ),
      'Invalid stable rate'
    );
  });

  it('Checks rates at 80% borrow usage ratio and 50% supply usage due to minted tokens', async () => {
    let params: CalculateInterestRatesParams = {
      unbacked: '600000000000000000',
      liquidityAdded: '200000000000000000',
      liquidityTaken: 0,
      totalStableDebt: '0',
      totalVariableDebt: '800000000000000000',
      averageStableBorrowRate: '0',
      reserveFactor: strategyDAI.reserveFactor,
      reserve: dai.address,
      aToken: aDai.address,
    };

    const {
      0: currentLiquidityRate,
      1: currentStableBorrowRate,
      2: currentVariableBorrowRate,
    } = await strategyInstance.calculateInterestRates(params);

    const expectedVariableRate = BigNumber.from(rateStrategyStableTwo.baseVariableBorrowRate).add(
      rateStrategyStableTwo.variableRateSlope1
    );

    expect(currentLiquidityRate).to.be.equal(
      expectedVariableRate
        .percentMul(5000)
        .percentMul(BigNumber.from(PERCENTAGE_FACTOR).sub(strategyDAI.reserveFactor)),
      'Invalid liquidity rate'
    );

    expect(currentVariableBorrowRate).to.be.equal(expectedVariableRate, 'Invalid variable rate');

    expect(currentStableBorrowRate).to.be.equal(
      baseStableRate.add(rateStrategyStableTwo.stableRateSlope1),
      'Invalid stable rate'
    );
  });

  it('Checks rates at 80% borrow usage ratio and 0.8% supply usage due to minted tokens', async () => {
    const availableLiquidity = BigNumber.from('200000000000000000');
    const totalVariableDebt = BigNumber.from('800000000000000000');

    let params: CalculateInterestRatesParams = {
      unbacked: totalVariableDebt.mul('124').sub(availableLiquidity),
      liquidityAdded: availableLiquidity,
      liquidityTaken: 0,
      totalStableDebt: '0',
      totalVariableDebt: totalVariableDebt,
      averageStableBorrowRate: '0',
      reserveFactor: strategyDAI.reserveFactor,
      reserve: dai.address,
      aToken: aDai.address,
    };

    const {
      0: currentLiquidityRate,
      1: currentStableBorrowRate,
      2: currentVariableBorrowRate,
    } = await strategyInstance.calculateInterestRates(params);

    const expectedVariableRate = BigNumber.from(rateStrategyStableTwo.baseVariableBorrowRate).add(
      rateStrategyStableTwo.variableRateSlope1
    );

    expect(currentLiquidityRate).to.be.equal(
      expectedVariableRate
        .percentMul(80)
        .percentMul(BigNumber.from(PERCENTAGE_FACTOR).sub(strategyDAI.reserveFactor)),
      'Invalid liquidity rate'
    );
    expect(currentVariableBorrowRate).to.be.equal(expectedVariableRate, 'Invalid variable rate');

    expect(currentStableBorrowRate).to.be.equal(
      baseStableRate.add(rateStrategyStableTwo.stableRateSlope1),
      'Invalid stable rate'
    );

    if (DEBUG) {
      console.log(`Current Liquidity Rate: ${formatUnits(currentLiquidityRate, 27)}`);
      console.log(`Current Borrow Rate V : ${formatUnits(currentVariableBorrowRate, 27)}`);
      console.log(`Current Borrow Rate S : ${formatUnits(currentStableBorrowRate, 27)}`);
    }
  });

  it('Checks rates at 0.8% usage', async () => {
    let params: CalculateInterestRatesParams = {
      unbacked: 0,
      liquidityAdded: '9920000000000000000000',
      liquidityTaken: 0,
      totalStableDebt: '0',
      totalVariableDebt: '80000000000000000000',
      averageStableBorrowRate: '0',
      reserveFactor: strategyDAI.reserveFactor,
      reserve: dai.address,
      aToken: aDai.address,
    };

    const {
      0: currentLiquidityRate,
      1: currentStableBorrowRate,
      2: currentVariableBorrowRate,
    } = await strategyInstance.calculateInterestRates(params);

    const usageRatio = BigNumber.from(1).ray().percentMul(80);
    const OPTIMAL_USAGE_RATIO = BigNumber.from(rateStrategyStableTwo.optimalUsageRatio);

    const expectedVariableRate = BigNumber.from(rateStrategyStableTwo.baseVariableBorrowRate).add(
      BigNumber.from(rateStrategyStableTwo.variableRateSlope1).rayMul(
        usageRatio.rayDiv(OPTIMAL_USAGE_RATIO)
      )
    );

    expect(currentLiquidityRate).to.be.equal(
      expectedVariableRate
        .percentMul(80)
        .percentMul(BigNumber.from(PERCENTAGE_FACTOR).sub(strategyDAI.reserveFactor)),
      'Invalid liquidity rate'
    );

    expect(currentVariableBorrowRate).to.be.equal(expectedVariableRate, 'Invalid variable rate');

    expect(currentStableBorrowRate).to.be.equal(
      baseStableRate.add(
        BigNumber.from(rateStrategyStableTwo.stableRateSlope1).rayMul(
          usageRatio.rayDiv(OPTIMAL_USAGE_RATIO)
        )
      ),
      'Invalid stable rate'
    );

    if (DEBUG) {
      console.log(`Current Liquidity Rate: ${formatUnits(currentLiquidityRate, 27)}`);
      console.log(`Current Borrow Rate V : ${formatUnits(currentVariableBorrowRate, 27)}`);
      console.log(`Current Borrow Rate S : ${formatUnits(currentStableBorrowRate, 27)}`);
    }
  });

  it('Checks getters', async () => {
    expect(await strategyInstance.OPTIMAL_USAGE_RATIO()).to.be.eq(
      rateStrategyStableTwo.optimalUsageRatio
    );
    expect(await strategyInstance.getBaseVariableBorrowRate()).to.be.eq(
      rateStrategyStableTwo.baseVariableBorrowRate
    );
    expect(await strategyInstance.getVariableRateSlope1()).to.be.eq(
      rateStrategyStableTwo.variableRateSlope1
    );
    expect(await strategyInstance.getVariableRateSlope2()).to.be.eq(
      rateStrategyStableTwo.variableRateSlope2
    );
    expect(await strategyInstance.getStableRateSlope1()).to.be.eq(
      rateStrategyStableTwo.stableRateSlope1
    );
    expect(await strategyInstance.getStableRateSlope2()).to.be.eq(
      rateStrategyStableTwo.stableRateSlope2
    );
    expect(await strategyInstance.getMaxVariableBorrowRate()).to.be.eq(
      BigNumber.from(rateStrategyStableTwo.baseVariableBorrowRate)
        .add(BigNumber.from(rateStrategyStableTwo.variableRateSlope1))
        .add(BigNumber.from(rateStrategyStableTwo.variableRateSlope2))
    );
    expect(await strategyInstance.MAX_EXCESS_USAGE_RATIO()).to.be.eq(
      BigNumber.from(1).ray().sub(rateStrategyStableTwo.optimalUsageRatio)
    );
    expect(await strategyInstance.MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO()).to.be.eq(
      BigNumber.from(1).ray().sub(rateStrategyStableTwo.optimalStableToTotalDebtRatio)
    );
    expect(await strategyInstance.getStableRateExcessOffset()).to.be.eq(
      rateStrategyStableTwo.stableRateExcessOffset
    );
  });

  it('Deploy an interest rate strategy with optimalUsageRatio out of range (expect revert)', async () => {
    const { addressesProvider } = testEnv;

    await expect(
      deployDefaultReserveInterestRateStrategy([
        addressesProvider.address,
        utils.parseUnits('1.0', 28),
        rateStrategyStableTwo.baseVariableBorrowRate,
        rateStrategyStableTwo.variableRateSlope1,
        rateStrategyStableTwo.variableRateSlope2,
        rateStrategyStableTwo.stableRateSlope1,
        rateStrategyStableTwo.stableRateSlope2,
        rateStrategyStableTwo.baseStableRateOffset,
        rateStrategyStableTwo.stableRateExcessOffset,
        rateStrategyStableTwo.optimalStableToTotalDebtRatio,
      ])
    ).to.be.revertedWith(INVALID_OPTIMAL_USAGE_RATIO);
  });

  it('Deploy an interest rate strategy with optimalStableToTotalDebtRatio out of range (expect revert)', async () => {
    const { addressesProvider } = testEnv;
    await expect(
      deployDefaultReserveInterestRateStrategy([
        addressesProvider.address,
        rateStrategyStableTwo.optimalUsageRatio,
        rateStrategyStableTwo.baseVariableBorrowRate,
        rateStrategyStableTwo.variableRateSlope1,
        rateStrategyStableTwo.variableRateSlope2,
        rateStrategyStableTwo.stableRateSlope1,
        rateStrategyStableTwo.stableRateSlope2,
        rateStrategyStableTwo.baseStableRateOffset,
        rateStrategyStableTwo.stableRateExcessOffset,
        utils.parseUnits('1.0', 28),
      ])
    ).to.be.revertedWith(INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO);
  });
});



================================================
FILE: test-suites/rescue-tokens.spec.ts
================================================
import { expect } from 'chai';
import { utils } from 'ethers';
import { ProtocolErrors } from '../helpers/types';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { evmSnapshot, evmRevert, ONE_ADDRESS } from '@aave/deploy-v3';
import { deployMintableERC20 } from '@aave/deploy-v3/dist/helpers/contract-deployments';
import { MintableERC20 } from '../types';

makeSuite('Rescue tokens', (testEnv: TestEnv) => {
  const { CALLER_NOT_POOL_ADMIN, CALLER_MUST_BE_POOL, UNDERLYING_CANNOT_BE_RESCUED } =
    ProtocolErrors;

  let snap: string;

  beforeEach(async () => {
    snap = await evmSnapshot();
  });

  afterEach(async () => {
    await evmRevert(snap);
  });

  it('User tries to rescue tokens from Pool (revert expected)', async () => {
    const {
      pool,
      usdc,
      users: [rescuer],
    } = testEnv;

    const amount = 1;
    await expect(
      pool.connect(rescuer.signer).rescueTokens(usdc.address, rescuer.address, amount)
    ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
  });

  it('PoolAdmin rescue tokens from Pool', async () => {
    const {
      poolAdmin,
      pool,
      usdc,
      users: [locker],
    } = testEnv;

    const amountToLock = utils.parseUnits('10', 18);

    // Lock
    await usdc['mint(address,uint256)'](locker.address, amountToLock);
    await usdc.connect(locker.signer).transfer(pool.address, amountToLock);

    const lockerBalanceBefore = await usdc.balanceOf(locker.address);
    const poolBalanceBefore = await usdc.balanceOf(pool.address);

    expect(
      await pool.connect(poolAdmin.signer).rescueTokens(usdc.address, locker.address, amountToLock)
    );

    const poolBalanceAfter = await usdc.balanceOf(pool.address);
    expect(poolBalanceBefore).to.be.eq(poolBalanceAfter.add(amountToLock));
    const lockerBalanceAfter = await usdc.balanceOf(locker.address);
    expect(lockerBalanceBefore).to.be.eq(lockerBalanceAfter.sub(amountToLock));
  });

  it('User tries to rescue tokens from AToken (revert expected)', async () => {
    const {
      usdc,
      aDai,
      users: [rescuer],
    } = testEnv;

    const amount = 1;
    await expect(
      aDai.connect(rescuer.signer).rescueTokens(usdc.address, rescuer.address, amount)
    ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
  });

  it('User tries to rescue tokens of underlying from AToken (revert expected)', async () => {
    const {
      aDai,
      dai,
      users: [rescuer],
    } = testEnv;

    const amount = 1;
    await expect(
      aDai.connect(rescuer.signer).rescueTokens(dai.address, rescuer.address, amount)
    ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
  });

  it('PoolAdmin tries to rescue tokens of underlying from AToken (revert expected)', async () => {
    const {
      poolAdmin,
      aDai,
      dai,
      users: [rescuer],
    } = testEnv;

    const amount = 1;
    await expect(
      aDai.connect(poolAdmin.signer).rescueTokens(dai.address, rescuer.address, amount)
    ).to.be.revertedWith(UNDERLYING_CANNOT_BE_RESCUED);
  });

  it('PoolAdmin rescue tokens from AToken', async () => {
    const {
      poolAdmin,
      dai,
      usdc,
      aDai,
      users: [locker],
    } = testEnv;

    const amountToLock = utils.parseUnits('10', 18);

    // Lock
    await usdc['mint(address,uint256)'](locker.address, amountToLock);
    await usdc.connect(locker.signer).transfer(aDai.address, amountToLock);

    const lockerBalanceBefore = await usdc.balanceOf(locker.address);
    const aTokenBalanceBefore = await usdc.balanceOf(aDai.address);

    expect(
      await aDai.connect(poolAdmin.signer).rescueTokens(usdc.address, locker.address, amountToLock)
    );

    const aTokenBalanceAfter = await usdc.balanceOf(aDai.address);
    expect(aTokenBalanceBefore).to.be.eq(aTokenBalanceAfter.add(amountToLock));
    const lockerBalanceAfter = await usdc.balanceOf(locker.address);
    expect(lockerBalanceBefore).to.be.eq(lockerBalanceAfter.sub(amountToLock));
  });
});



================================================
FILE: test-suites/reserve-configuration.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber } from '@ethersproject/bignumber';
import { deployMockReserveConfiguration } from '@aave/deploy-v3/dist/helpers/contract-deployments';
import { ProtocolErrors } from '../helpers/types';
import { evmSnapshot, evmRevert } from '@aave/deploy-v3';
import { MockReserveConfiguration } from '../types';

describe('ReserveConfiguration', async () => {
  let snap: string;

  beforeEach(async () => {
    snap = await evmSnapshot();
  });
  afterEach(async () => {
    await evmRevert(snap);
  });

  let configMock: MockReserveConfiguration;

  const ZERO = BigNumber.from(0);
  const LTV = BigNumber.from(8000);
  const LB = BigNumber.from(500);
  const RESERVE_FACTOR = BigNumber.from(1000);
  const DECIMALS = BigNumber.from(18);
  const BORROW_CAP = BigNumber.from(100);
  const SUPPLY_CAP = BigNumber.from(200);
  const UNBACKED_MINT_CAP = BigNumber.from(300);
  const EMODE_CATEGORY = BigNumber.from(1);

  const MAX_VALID_LTV = BigNumber.from(65535);
  const MAX_VALID_LIQUIDATION_THRESHOLD = BigNumber.from(65535);
  const MAX_VALID_DECIMALS = BigNumber.from(255);
  const MAX_VALID_EMODE_CATEGORY = BigNumber.from(255);
  const MAX_VALID_RESERVE_FACTOR = BigNumber.from(65535);
  const MAX_VALID_LIQUIDATION_PROTOCOL_FEE = BigNumber.from(65535);

  before(async () => {
    configMock = await deployMockReserveConfiguration();
  });

  const bigNumbersToArrayString = (arr: BigNumber[]): string[] => arr.map((x) => x.toString());

  it('getLtv()', async () => {
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLtv()).to.be.eq(ZERO);
    expect(await configMock.setLtv(LTV));
    // LTV is the 1st param
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([LTV, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLtv()).to.be.eq(LTV);
    expect(await configMock.setLtv(0));
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLtv()).to.be.eq(ZERO);
  });

  it('getLiquidationBonus()', async () => {
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLiquidationBonus()).to.be.eq(ZERO);
    expect(await configMock.setLiquidationBonus(LB));
    // LB is the 3rd param
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, LB, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLiquidationBonus()).to.be.eq(LB);
    expect(await configMock.setLiquidationBonus(0));
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLiquidationBonus()).to.be.eq(ZERO);
  });

  it('getDecimals()', async () => {
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getDecimals()).to.be.eq(ZERO);
    expect(await configMock.setDecimals(DECIMALS));
    // decimals is the 4th param
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, DECIMALS, ZERO, ZERO])
    );
    expect(await configMock.getDecimals()).to.be.eq(DECIMALS);
    expect(await configMock.setDecimals(0));
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getDecimals()).to.be.eq(ZERO);
  });

  it('getEModeCategory()', async () => {
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getEModeCategory()).to.be.eq(ZERO);
    expect(await configMock.setEModeCategory(EMODE_CATEGORY));
    // eMode category is the 6th param
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, EMODE_CATEGORY])
    );
    expect(await configMock.getEModeCategory()).to.be.eq(EMODE_CATEGORY);
    expect(await configMock.setEModeCategory(0));
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getEModeCategory()).to.be.eq(ZERO);
  });

  it('getFrozen()', async () => {
    expect(await configMock.getFlags()).to.be.eql([false, false, false, false, false]);
    expect(await configMock.getFrozen()).to.be.false;
    expect(await configMock.setFrozen(true));
    // frozen is the 2nd flag
    expect(await configMock.getFlags()).to.be.eql([false, true, false, false, false]);
    expect(await configMock.getFrozen()).to.be.true;
    expect(await configMock.setFrozen(false));
    expect(await configMock.getFlags()).to.be.eql([false, false, false, false, false]);
    expect(await configMock.getFrozen()).to.be.false;
  });

  it('getBorrowingEnabled()', async () => {
    expect(await configMock.getFlags()).to.be.eql([false, false, false, false, false]);
    expect(await configMock.getBorrowingEnabled()).to.be.false;
    expect(await configMock.setBorrowingEnabled(true));
    // borrowing is the 3rd flag
    expect(await configMock.getFlags()).to.be.eql([false, false, true, false, false]);
    expect(await configMock.getBorrowingEnabled()).to.be.true;
    expect(await configMock.setBorrowingEnabled(false));
    expect(await configMock.getFlags()).to.be.eql([false, false, false, false, false]);
    expect(await configMock.getBorrowingEnabled()).to.be.false;
  });

  it('getStableRateBorrowingEnabled()', async () => {
    expect(await configMock.getFlags()).to.be.eql([false, false, false, false, false]);
    expect(await configMock.getStableRateBorrowingEnabled()).to.be.false;
    expect(await configMock.setStableRateBorrowingEnabled(true));
    // stable borrowing is the 4th flag
    expect(await configMock.getFlags()).to.be.eql([false, false, false, true, false]);
    expect(await configMock.getStableRateBorrowingEnabled()).to.be.true;
    expect(await configMock.setStableRateBorrowingEnabled(false));
    expect(await configMock.getFlags()).to.be.eql([false, false, false, false, false]);
    expect(await configMock.getStableRateBorrowingEnabled()).to.be.false;
  });

  it('getReserveFactor()', async () => {
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getReserveFactor()).to.be.eq(ZERO);
    expect(await configMock.setReserveFactor(RESERVE_FACTOR));
    // reserve factor is the 5th param
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, RESERVE_FACTOR, ZERO])
    );
    expect(await configMock.getReserveFactor()).to.be.eq(RESERVE_FACTOR);
    expect(await configMock.setReserveFactor(ZERO));
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getReserveFactor()).to.be.eq(ZERO);
  });

  it('setReserveFactor() with reserveFactor == MAX_VALID_RESERVE_FACTOR', async () => {
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.setReserveFactor(MAX_VALID_RESERVE_FACTOR));
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, MAX_VALID_RESERVE_FACTOR, ZERO])
    );
  });

  it('setReserveFactor() with reserveFactor > MAX_VALID_RESERVE_FACTOR', async () => {
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    await expect(configMock.setReserveFactor(MAX_VALID_RESERVE_FACTOR.add(1))).to.be.revertedWith(
      ProtocolErrors.INVALID_RESERVE_FACTOR
    );
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
  });

  it('getBorrowCap()', async () => {
    expect(bigNumbersToArrayString(await configMock.getCaps())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO])
    );
    expect(await configMock.getBorrowCap()).to.be.eq(ZERO);
    expect(await configMock.setBorrowCap(BORROW_CAP));
    // borrow cap is the 1st cap
    expect(bigNumbersToArrayString(await configMock.getCaps())).to.be.eql(
      bigNumbersToArrayString([BORROW_CAP, ZERO])
    );
    expect(await configMock.getBorrowCap()).to.be.eq(BORROW_CAP);
    expect(await configMock.setBorrowCap(ZERO));
    expect(bigNumbersToArrayString(await configMock.getCaps())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO])
    );
    expect(await configMock.getBorrowCap()).to.be.eq(ZERO);
  });

  it('getSupplyCap()', async () => {
    expect(bigNumbersToArrayString(await configMock.getCaps())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO])
    );
    expect(await configMock.getSupplyCap()).to.be.eq(ZERO);
    expect(await configMock.setSupplyCap(SUPPLY_CAP));
    // supply cap is the 2nd cap
    expect(bigNumbersToArrayString(await configMock.getCaps())).to.be.eql(
      bigNumbersToArrayString([ZERO, SUPPLY_CAP])
    );
    expect(await configMock.getSupplyCap()).to.be.eq(SUPPLY_CAP);
    expect(await configMock.setSupplyCap(ZERO));
    expect(bigNumbersToArrayString(await configMock.getCaps())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO])
    );
    expect(await configMock.getSupplyCap()).to.be.eq(ZERO);
  });

  it('getUnbackedMintCap()', async () => {
    expect(await configMock.getUnbackedMintCap()).to.be.eq(ZERO);
    expect(await configMock.setUnbackedMintCap(UNBACKED_MINT_CAP));
    expect(await configMock.getUnbackedMintCap()).to.be.eq(UNBACKED_MINT_CAP);
    expect(await configMock.setUnbackedMintCap(ZERO));
    expect(await configMock.getUnbackedMintCap()).to.be.eq(ZERO);
  });

  it('getFlashLoanEnabled()', async () => {
    expect(await configMock.getFlashLoanEnabled()).to.be.eq(false);
    expect(await configMock.setFlashLoanEnabled(true));
    expect(await configMock.getFlashLoanEnabled()).to.be.eq(true);
    expect(await configMock.setFlashLoanEnabled(false));
  });

  it('setLtv() with ltv = MAX_VALID_LTV', async () => {
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLtv()).to.be.eq(ZERO);
    expect(await configMock.setLtv(MAX_VALID_LTV));
    // LTV is the 1st param
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([MAX_VALID_LTV, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLtv()).to.be.eq(MAX_VALID_LTV);
    expect(await configMock.setLtv(0));
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLtv()).to.be.eq(ZERO);
  });

  it('setLtv() with ltv > MAX_VALID_LTV (revert expected)', async () => {
    expect(await configMock.getLtv()).to.be.eq(ZERO);

    const { INVALID_LTV } = ProtocolErrors;

    // setLTV to MAX_VALID_LTV + 1
    await expect(configMock.setLtv(MAX_VALID_LTV.add(1))).to.be.revertedWith(INVALID_LTV);
    expect(await configMock.getLtv()).to.be.eq(ZERO);
  });

  it('setLiquidationThreshold() with threshold = MAX_VALID_LIQUIDATION_THRESHOLD', async () => {
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLiquidationThreshold()).to.be.eq(ZERO);
    expect(await configMock.setLiquidationThreshold(MAX_VALID_LIQUIDATION_THRESHOLD));
    // LIQ_THRESHOLD is the 2nd param
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, MAX_VALID_LIQUIDATION_THRESHOLD, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLiquidationThreshold()).to.be.eq(MAX_VALID_LIQUIDATION_THRESHOLD);
    expect(await configMock.setLiquidationThreshold(0));
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getLiquidationThreshold()).to.be.eq(ZERO);
  });

  it('setLiquidationThreshold() with threshold > MAX_VALID_LIQUIDATION_THRESHOLD (revert expected)', async () => {
    expect(await configMock.getLiquidationThreshold()).to.be.eq(ZERO);

    const { INVALID_LIQ_THRESHOLD } = ProtocolErrors;

    // setLiquidationThreshold to MAX_VALID_LIQUIDATION_THRESHOLD + 1
    await expect(
      configMock.setLiquidationThreshold(MAX_VALID_LIQUIDATION_THRESHOLD.add(1))
    ).to.be.revertedWith(INVALID_LIQ_THRESHOLD);
    expect(await configMock.getLiquidationThreshold()).to.be.eq(ZERO);
  });

  it('setDecimals() with decimals = MAX_VALID_DECIMALS', async () => {
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getDecimals()).to.be.eq(ZERO);
    expect(await configMock.setDecimals(MAX_VALID_DECIMALS));
    // Decimals is the 4th param
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, MAX_VALID_DECIMALS, ZERO, ZERO])
    );
    expect(await configMock.getDecimals()).to.be.eq(MAX_VALID_DECIMALS);
    expect(await configMock.setDecimals(0));
    expect(bigNumbersToArrayString(await configMock.getParams())).to.be.eql(
      bigNumbersToArrayString([ZERO, ZERO, ZERO, ZERO, ZERO, ZERO])
    );
    expect(await configMock.getDecimals()).to.be.eq(ZERO);
  });

  it('setDecimals() with decimals > MAX_VALID_DECIMALS (revert expected)', async () => {
    expect(await configMock.getDecimals()).to.be.eq(ZERO);

    const { INVALID_DECIMALS } = ProtocolErrors;

    // setDecimals to MAX_VALID_DECIMALS + 1
    await expect(configMock.setDecimals(MAX_VALID_DECIMALS.add(1))).to.be.revertedWith(
      INVALID_DECIMALS
    );
    expect(await configMock.getDecimals()).to.be.eq(ZERO);
  });

  it('setEModeCategory() with categoryID = MAX_VALID_EMODE_CATEGORY', async () => {
    expect(await configMock.getEModeCategory()).to.be.eq(ZERO);
    expect(await configMock.setEModeCategory(MAX_VALID_EMODE_CATEGORY));
    expect(await configMock.getEModeCategory()).to.be.eq(MAX_VALID_EMODE_CATEGORY);
    expect(await configMock.setEModeCategory(0));
    expect(await configMock.getEModeCategory()).to.be.eq(ZERO);
  });

  it('setEModeCategory() with categoryID > MAX_VALID_EMODE_CATEGORY (revert expected)', async () => {
    expect(await configMock.getEModeCategory()).to.be.eq(ZERO);

    const { INVALID_EMODE_CATEGORY } = ProtocolErrors;

    await expect(configMock.setEModeCategory(MAX_VALID_EMODE_CATEGORY.add(1))).to.be.revertedWith(
      INVALID_EMODE_CATEGORY
    );
    expect(await configMock.getEModeCategory()).to.be.eq(ZERO);
  });

  it('setLiquidationProtocolFee() with liquidationProtocolFee == MAX_VALID_LIQUIDATION_PROTOCOL_FEE', async () => {
    expect(await configMock.getLiquidationProtocolFee()).to.be.eq(ZERO);
    expect(await configMock.setLiquidationProtocolFee(MAX_VALID_LIQUIDATION_PROTOCOL_FEE));
    expect(await configMock.getLiquidationProtocolFee()).to.be.eq(
      MAX_VALID_LIQUIDATION_PROTOCOL_FEE
    );
  });

  it('setLiquidationProtocolFee() with liquidationProtocolFee > MAX_VALID_LIQUIDATION_PROTOCOL_FEE', async () => {
    expect(await configMock.getLiquidationProtocolFee()).to.be.eq(ZERO);
    await expect(
      configMock.setLiquidationProtocolFee(MAX_VALID_LIQUIDATION_PROTOCOL_FEE.add(1))
    ).to.be.revertedWith(ProtocolErrors.INVALID_LIQUIDATION_PROTOCOL_FEE);
    expect(await configMock.getLiquidationProtocolFee()).to.be.eq(ZERO);
  });
});



================================================
FILE: test-suites/scenario.spec.ts
================================================
import fs from 'fs';
import AaveConfig from '@aave/deploy-v3/dist/markets/test';
import { configuration as actionsConfiguration } from './helpers/actions';
import { configuration as calculationsConfiguration } from './helpers/utils/calculations';
import { makeSuite } from './helpers/make-suite';
import { executeStory } from './helpers/scenario-engine';

const scenarioFolder = './test-suites/helpers/scenarios/';

const selectedScenarios: string[] = []; //"borrow-repay-stable-edge.json", "borrow-repay-stable.json"];

fs.readdirSync(scenarioFolder).forEach((file) => {
  if (selectedScenarios.length > 0 && !selectedScenarios.includes(file)) return;

  const scenario = require(`./helpers/scenarios/${file}`);

  makeSuite(scenario.title, async (testEnv) => {
    before('Initializing configuration', async () => {
      actionsConfiguration.skipIntegrityCheck = false; //set this to true to execute solidity-coverage

      calculationsConfiguration.reservesParams = AaveConfig.ReservesConfig;
    });

    for (const story of scenario.stories) {
      it(story.description, async function () {
        // Retry the test scenarios up to 4 times in case random HEVM network errors happen
        //this.retries(4);
        await executeStory(story, testEnv);
      });
    }
  });
});



================================================
FILE: test-suites/siloed-borrowing.spec.ts
================================================
const { expect } = require('chai');
import { utils, BigNumber } from 'ethers';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { AAVE_REFERRAL, MAX_UINT_AMOUNT, MAX_UNBACKED_MINT_CAP } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { TestEnv, makeSuite } from './helpers/make-suite';
import './helpers/utils/wadraymath';
import { evmSnapshot } from '@aave/deploy-v3';

makeSuite('Siloed borrowing', (testEnv: TestEnv) => {
  const { SILOED_BORROWING_VIOLATION } = ProtocolErrors;

  let snapshot;

  before(async () => {
    snapshot = await evmSnapshot();
  });

  it('Configure DAI as siloed borrowing asset', async () => {
    const { configurator, helpersContract, dai } = testEnv;

    await configurator.setSiloedBorrowing(dai.address, true);
    const siloed = await helpersContract.getSiloedBorrowing(dai.address);

    expect(siloed).to.be.equal(true, 'Invalid siloed state for DAI');
  });

  it('User 0 supplies DAI, User 1 supplies ETH and USDC, borrows DAI', async () => {
    const { users, pool, dai, weth, usdc, variableDebtDai } = testEnv;

    const wethSupplyAmount = utils.parseEther('1');
    const daiBorrowAmount = utils.parseEther('10');
    const daiSupplyAmount = utils.parseEther('1000');
    const usdcSupplyAmount = utils.parseUnits('1000', 6);

    await dai.connect(users[0].signer)['mint(address,uint256)'](users[0].address, daiSupplyAmount);
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(users[0].signer).supply(dai.address, daiSupplyAmount, users[0].address, '0');

    await usdc
      .connect(users[1].signer)
      ['mint(address,uint256)'](users[1].address, usdcSupplyAmount);
    await usdc.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[1].signer)
      .supply(usdc.address, usdcSupplyAmount, users[1].address, '0');

    await weth
      .connect(users[1].signer)
      ['mint(address,uint256)'](users[1].address, wethSupplyAmount);
    await weth.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[1].signer)
      .supply(weth.address, wethSupplyAmount, users[1].address, '0');
    await pool
      .connect(users[1].signer)
      .borrow(dai.address, daiBorrowAmount, RateMode.Variable, '0', users[1].address);

    const debtBalance = await variableDebtDai.balanceOf(users[1].address);

    expect(debtBalance).to.be.closeTo(daiBorrowAmount, 2);
  });

  it('User 0 supplies USDC, User 1 tries to borrow USDC (revert expected)', async () => {
    const { users, pool, usdc } = testEnv;

    const usdcBorrowAmount = utils.parseUnits('1', '6');
    const usdcSupplyAmount = utils.parseUnits('1000', '6');

    await usdc
      .connect(users[0].signer)
      ['mint(address,uint256)'](users[0].address, usdcSupplyAmount);
    await usdc.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[0].signer)
      .supply(usdc.address, usdcSupplyAmount, users[0].address, '0');

    await expect(
      pool
        .connect(users[1].signer)
        .borrow(usdc.address, usdcBorrowAmount, RateMode.Variable, '0', users[1].address)
    ).to.be.revertedWith(SILOED_BORROWING_VIOLATION);
  });

  it('User 1 repays DAI, borrows USDC', async () => {
    const { users, pool, usdc, dai } = testEnv;

    const usdcBorrowAmount = utils.parseUnits('100', '6');
    const daiMintAmount = utils.parseEther('1000');

    await dai.connect(users[1].signer)['mint(address,uint256)'](users[1].address, daiMintAmount);
    await dai.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[1].signer)
      .repay(dai.address, MAX_UINT_AMOUNT, RateMode.Variable, users[1].address);

    await pool
      .connect(users[1].signer)
      .borrow(usdc.address, usdcBorrowAmount, RateMode.Variable, '0', users[1].address);
  });

  it('User 1 tries to borrow DAI (revert expected)', async () => {
    const { users, pool, dai } = testEnv;

    const daiBorrowAmount = utils.parseEther('1');

    await expect(
      pool
        .connect(users[1].signer)
        .borrow(dai.address, daiBorrowAmount, RateMode.Variable, '0', users[1].address)
    ).to.be.revertedWith(SILOED_BORROWING_VIOLATION);
  });

  it('User 1 borrows ETH, tries to borrow DAI (revert expected)', async () => {
    const { users, pool, dai, weth } = testEnv;

    const wethBorrowAmount = utils.parseEther('0.01');
    const daiBorrowAmount = utils.parseEther('1');

    await pool
      .connect(users[1].signer)
      .borrow(weth.address, wethBorrowAmount, RateMode.Variable, '0', users[1].address);

    await expect(
      pool
        .connect(users[1].signer)
        .borrow(dai.address, daiBorrowAmount, RateMode.Variable, '0', users[1].address)
    ).to.be.revertedWith(SILOED_BORROWING_VIOLATION);
  });

  it('User 1 Repays USDC and WETH debt, set USDC as siloed', async () => {
    const { users, pool, usdc, weth, configurator, helpersContract } = testEnv;

    const wethMintAmount = utils.parseEther('1');

    const usdcMintAmount = utils.parseEther('1000');

    await usdc.connect(users[1].signer)['mint(address,uint256)'](users[1].address, usdcMintAmount);
    await usdc.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[1].signer)
      .repay(usdc.address, MAX_UINT_AMOUNT, RateMode.Variable, users[1].address);

    await weth.connect(users[1].signer)['mint(address,uint256)'](users[1].address, wethMintAmount);
    await pool
      .connect(users[1].signer)
      .repay(weth.address, MAX_UINT_AMOUNT, RateMode.Variable, users[1].address);

    await configurator.setSiloedBorrowing(usdc.address, true);
    const siloed = await helpersContract.getSiloedBorrowing(usdc.address);

    expect(siloed).to.be.equal(true, 'Invalid siloed state for USDC');
  });

  it('User 1 borrows DAI, tries to borrow USDC (revert expected)', async () => {
    const { users, pool, usdc, dai } = testEnv;

    const daiBorrowAmount = utils.parseEther('1');
    const usdcBorrowAmount = utils.parseUnits('1', '6');

    await pool
      .connect(users[1].signer)
      .borrow(dai.address, daiBorrowAmount, RateMode.Variable, '0', users[1].address);

    await expect(
      pool
        .connect(users[1].signer)
        .borrow(usdc.address, usdcBorrowAmount, RateMode.Variable, '0', users[1].address)
    ).to.be.revertedWith(SILOED_BORROWING_VIOLATION);
  });

  it('User 1 borrows more DAI', async () => {
    const { users, pool, dai, variableDebtDai } = testEnv;

    const daiBorrowAmount = utils.parseEther('1');

    const debtBefore = await variableDebtDai.balanceOf(users[1].address);

    await pool
      .connect(users[1].signer)
      .borrow(dai.address, daiBorrowAmount, RateMode.Variable, '0', users[1].address);

    const debtAfter = await variableDebtDai.balanceOf(users[1].address);

    //large interval to account for interest generated
    expect(debtAfter).to.be.closeTo(debtBefore.add(daiBorrowAmount), 10000000);
  });
});



================================================
FILE: test-suites/stable-debt-token-events.spec.ts
================================================
import {
  evmSnapshot,
  evmRevert,
  advanceTimeAndBlock,
  MintableERC20__factory,
} from '@aave/deploy-v3';
import { expect } from 'chai';
import { ethers } from 'hardhat';
import { BigNumber } from '@ethersproject/bignumber';
import { TransactionReceipt } from '@ethersproject/providers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { RateMode } from '../helpers/types';
import { Pool, StableDebtToken } from '../types';
import { makeSuite, SignerWithAddress, TestEnv } from './helpers/make-suite';
import {
  supply,
  stableBorrow,
  repayStableBorrow,
  getStableDebtTokenEvent,
} from './helpers/utils/tokenization-events';

const DEBUG = false;

let balances = {
  balance: {},
};

const log = (str: string) => {
  if (DEBUG) console.log(str);
};

const printBalance = async (name: string, debtToken: StableDebtToken, userAddress: string) => {
  console.log(
    name,
    'balanceOf',
    await ethers.utils.formatEther(await debtToken.balanceOf(userAddress))
  );
};

const increaseSupplyIndex = async (
  pool: Pool,
  depositor: SignerWithAddress,
  collateral: string,
  assetToIncrease: string
) => {
  const collateralToken = MintableERC20__factory.connect(collateral, depositor.signer);
  const borrowingToken = MintableERC20__factory.connect(assetToIncrease, depositor.signer);

  await collateralToken
    .connect(depositor.signer)
    ['mint(address,uint256)'](
      depositor.address,
      await convertToCurrencyDecimals(collateralToken.address, '10000000')
    );
  await collateralToken.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
  await pool
    .connect(depositor.signer)
    .deposit(
      collateral,
      await convertToCurrencyDecimals(collateral, '100000'),
      depositor.address,
      '0'
    );

  const { aTokenAddress } = await pool.getReserveData(assetToIncrease);
  const availableLiquidity = await borrowingToken.balanceOf(aTokenAddress);
  await pool
    .connect(depositor.signer)
    .borrow(
      assetToIncrease,
      availableLiquidity.percentMul('20'),
      RateMode.Variable,
      0,
      depositor.address
    );

  await advanceTimeAndBlock(10000000);
};

const updateBalances = (
  balances: any,
  stableDebtDai: StableDebtToken,
  receipt: TransactionReceipt
) => {
  let events = getStableDebtTokenEvent(stableDebtDai, receipt, 'Mint');
  for (const ev of events) {
    balances.balance[ev.onBehalfOf] = balances.balance[ev.onBehalfOf]?.add(ev.amount);
  }
  events = getStableDebtTokenEvent(stableDebtDai, receipt, 'Burn');
  for (const ev of events) {
    balances.balance[ev.from] = balances.balance[ev.from]?.sub(ev.amount.add(ev.balanceIncrease));
    balances.balance[ev.from] = balances.balance[ev.from]?.add(ev.balanceIncrease);
  }
};

makeSuite('StableDebtToken: Events', (testEnv: TestEnv) => {
  let alice, bob, depositor, depositor2;

  let snapId;

  before(async () => {
    const { users, pool, dai, weth } = testEnv;
    [alice, bob, depositor, depositor2] = users;

    const amountToMint = await convertToCurrencyDecimals(dai.address, '10000000');
    const usersToInit = [alice, bob, depositor, depositor2];
    for (const user of usersToInit) {
      await dai.connect(user.signer)['mint(uint256)'](amountToMint);
      await weth.connect(user.signer)['mint(address,uint256)'](user.address, amountToMint);
      await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
      await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    }

    // Depositors
    await pool.connect(depositor.signer).supply(weth.address, amountToMint, depositor.address, '0');
    await pool.connect(depositor.signer).supply(dai.address, amountToMint, depositor.address, '0');
    await pool
      .connect(depositor2.signer)
      .supply(weth.address, amountToMint, depositor2.address, '0');
    await pool
      .connect(depositor2.signer)
      .supply(dai.address, amountToMint, depositor2.address, '0');
  });

  beforeEach(async () => {
    snapId = await evmSnapshot();

    // Init balances
    balances = {
      balance: {
        [alice.address]: BigNumber.from(0),
        [bob.address]: BigNumber.from(0),
      },
    };
  });

  afterEach(async () => {
    await evmRevert(snapId);
  });

  it('Alice borrows 100 DAI, borrows 50 DAI, repays 20 DAI, repays 10 DAI, borrows 100 DAI, repays 220 DAI (without index change)', async () => {
    await testMultipleBorrowsAndRepays(false);
  });

  it('Alice borrows 100 DAI, borrows 50 DAI, repays 20 DAI, repays 10 DAI, borrows 100 DAI, repays 220 DAI (with index change)', async () => {
    await testMultipleBorrowsAndRepays(true);
  });

  const testMultipleBorrowsAndRepays = async (indexChange: boolean) => {
    const { pool, dai, stableDebtDai, weth } = testEnv;

    let rcpt;
    let aliceBalanceBefore = await stableDebtDai.balanceOf(alice.address);

    log('- Alice supplies 1000 WETH');
    await supply(pool, alice, weth.address, '100000', alice.address, false);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 100 DAI');
    rcpt = await stableBorrow(pool, alice, dai.address, '100', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 50 DAI more');
    rcpt = await stableBorrow(pool, alice, dai.address, '50', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (DEBUG) {
      await printBalance('alice', stableDebtDai, alice.address);
    }

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 20 DAI');
    rcpt = await repayStableBorrow(pool, alice, dai.address, '20', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 10 DAI');
    rcpt = await repayStableBorrow(pool, alice, dai.address, '10', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor2, weth.address, dai.address);
    }

    log('- Alice borrows 100 DAI more');
    rcpt = await stableBorrow(pool, alice, dai.address, '100', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor2, weth.address, dai.address);
    }

    log('- Alice repays 220 DAI');
    rcpt = await repayStableBorrow(pool, alice, dai.address, '220', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    // Check final balances
    rcpt = await stableBorrow(pool, alice, dai.address, '1', alice.address);
    updateBalances(balances, stableDebtDai, rcpt);
    const aliceBalanceAfter = await stableDebtDai.balanceOf(alice.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      2
    );
  };

  it('Alice borrows 100 DAI, Bob borrows 100 DAI, Alice borrows 50 DAI, repays 150 DAI and repays 100 DAI on behalf of Bob, borrows 10 DAI more (without index change)', async () => {
    await testMultipleBorrowsAndRepaysOnBehalf(false);
  });

  it('Alice borrows 100 DAI, Bob borrows 100 DAI, Alice borrows 50 DAI, repays 150 DAI and repays 100 DAI on behalf of Bob, borrows 10 DAI more (with index change)', async () => {
    await testMultipleBorrowsAndRepaysOnBehalf(true);
  });

  const testMultipleBorrowsAndRepaysOnBehalf = async (indexChange: boolean) => {
    const { pool, dai, stableDebtDai, weth } = testEnv;

    let rcpt;
    let aliceBalanceBefore = await stableDebtDai.balanceOf(alice.address);
    let bobBalanceBefore = await stableDebtDai.balanceOf(bob.address);

    log('- Alice supplies 1000 WETH');
    await supply(pool, alice, weth.address, '1000', alice.address, false);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 100 DAI');
    rcpt = await stableBorrow(pool, alice, dai.address, '100', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Bob supplies 1000 WETH');
    await supply(pool, bob, weth.address, '1000', bob.address, false);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Bob borrows 100 DAI');
    rcpt = await stableBorrow(pool, bob, dai.address, '100', bob.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 50 DAI more');
    rcpt = await stableBorrow(pool, alice, dai.address, '50', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 150 DAI');
    rcpt = await repayStableBorrow(pool, alice, dai.address, '150', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 50 DAI on behalf of Bob');
    rcpt = await repayStableBorrow(pool, alice, dai.address, '50', bob.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 50 DAI on behalf of Bob');
    rcpt = await repayStableBorrow(pool, alice, dai.address, '50', bob.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 10 DAI more');
    rcpt = await stableBorrow(pool, alice, dai.address, '10', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    if (DEBUG) {
      await printBalance('alice', stableDebtDai, alice.address);
      await printBalance('bob', stableDebtDai, bob.address);
    }

    // Check final balances
    rcpt = await stableBorrow(pool, alice, dai.address, '1', alice.address);
    updateBalances(balances, stableDebtDai, rcpt);
    const aliceBalanceAfter = await stableDebtDai.balanceOf(alice.address);

    rcpt = await stableBorrow(pool, bob, dai.address, '1', bob.address);
    updateBalances(balances, stableDebtDai, rcpt);
    const bobBalanceAfter = await stableDebtDai.balanceOf(bob.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      5
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 5);
  };

  it('Alice borrows 100 DAI, Bob borrows 100 DAI on behalf of Alice, Bob borrows 50 DAI, Alice borrows 50 DAI, repays 250 DAI and repays 50 DAI on behalf of Bob, borrows 10 DAI more (without index change)', async () => {
    await testMultipleBorrowsOnBehalfAndRepaysOnBehalf(false);
  });

  it('Alice borrows 100 DAI, Bob borrows 100 DAI on behalf of Alice, Bob borrows 50 DAI, Alice borrows 50 DAI, repays 250 DAI and repays 50 DAI on behalf of Bob, borrows 10 DAI more (with index change)', async () => {
    await testMultipleBorrowsOnBehalfAndRepaysOnBehalf(true);
  });

  const testMultipleBorrowsOnBehalfAndRepaysOnBehalf = async (indexChange: boolean) => {
    const { pool, dai, stableDebtDai, weth } = testEnv;

    let rcpt;
    let aliceBalanceBefore = await stableDebtDai.balanceOf(alice.address);
    let bobBalanceBefore = await stableDebtDai.balanceOf(bob.address);

    log('- Alice supplies 1000 WETH');
    await supply(pool, alice, weth.address, '1000', alice.address, false);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 100 DAI');
    rcpt = await stableBorrow(pool, alice, dai.address, '100', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Bob borrows 100 DAI on behalf of Alice');
    await stableDebtDai.connect(alice.signer).approveDelegation(bob.address, MAX_UINT_AMOUNT);
    rcpt = await stableBorrow(pool, bob, dai.address, '100', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Bob supplies 1000 WETH');
    await supply(pool, bob, weth.address, '1000', bob.address, false);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Bob borrows 50 DAI');
    rcpt = await stableBorrow(pool, bob, dai.address, '50', bob.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 50 DAI');
    rcpt = await stableBorrow(pool, alice, dai.address, '50', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 250 DAI');
    rcpt = await repayStableBorrow(pool, alice, dai.address, '250', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 50 DAI on behalf of Bob');
    rcpt = await repayStableBorrow(pool, alice, dai.address, '50', bob.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 10 DAI more');
    rcpt = await stableBorrow(pool, alice, dai.address, '10', alice.address, DEBUG);
    updateBalances(balances, stableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    if (DEBUG) {
      await printBalance('alice', stableDebtDai, alice.address);
      await printBalance('bob', stableDebtDai, bob.address);
    }

    // Check final balances
    rcpt = await stableBorrow(pool, alice, dai.address, '1', alice.address);
    updateBalances(balances, stableDebtDai, rcpt);
    const aliceBalanceAfter = await stableDebtDai.balanceOf(alice.address);

    rcpt = await stableBorrow(pool, bob, dai.address, '1', bob.address);
    updateBalances(balances, stableDebtDai, rcpt);
    const bobBalanceAfter = await stableDebtDai.balanceOf(bob.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      5
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 5);
  };
});



================================================
FILE: test-suites/stable-debt-token.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber, utils } from 'ethers';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { MAX_UINT_AMOUNT, RAY, ZERO_ADDRESS } from '../helpers/constants';
import { impersonateAccountsHardhat, setAutomine, setAutomineEvm } from '../helpers/misc-utils';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { topUpNonPayableWithEther } from './helpers/utils/funds';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import {
  evmRevert,
  evmSnapshot,
  getStableDebtToken,
  increaseTime,
  waitForTx,
} from '@aave/deploy-v3';
import { StableDebtToken__factory } from '../types';
import { getStableDebtTokenEvent } from './helpers/utils/tokenization-events';
declare var hre: HardhatRuntimeEnvironment;

makeSuite('StableDebtToken', (testEnv: TestEnv) => {
  const { CALLER_MUST_BE_POOL, CALLER_NOT_POOL_ADMIN } = ProtocolErrors;

  let snap: string;

  beforeEach(async () => {
    snap = await evmSnapshot();
  });
  afterEach(async () => {
    await evmRevert(snap);
  });

  it('Check initialization', async () => {
    const { pool, weth, dai, helpersContract, users } = testEnv;
    const daiStableDebtTokenAddress = (await helpersContract.getReserveTokensAddresses(dai.address))
      .stableDebtTokenAddress;
    const stableDebtContract = StableDebtToken__factory.connect(
      daiStableDebtTokenAddress,
      users[0].signer
    );

    expect(await stableDebtContract.UNDERLYING_ASSET_ADDRESS()).to.be.eq(dai.address);
    expect(await stableDebtContract.POOL()).to.be.eq(pool.address);
    expect(await stableDebtContract.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);

    const totSupplyAndRateBefore = await stableDebtContract.getTotalSupplyAndAvgRate();
    expect(totSupplyAndRateBefore[0].toString()).to.be.eq('0');
    expect(totSupplyAndRateBefore[1].toString()).to.be.eq('0');

    // Need to create some debt to do this good
    await dai
      .connect(users[0].signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[0].signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '1000'),
        users[0].address,
        0
      );
    await weth
      .connect(users[1].signer)
      ['mint(address,uint256)'](users[1].address, utils.parseEther('10'));
    await weth.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[1].signer)
      .deposit(weth.address, utils.parseEther('10'), users[1].address, 0);
    await pool
      .connect(users[1].signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '200'),
        RateMode.Stable,
        0,
        users[1].address
      );

    const totSupplyAndRateAfter = await stableDebtContract.getTotalSupplyAndAvgRate();
    expect(totSupplyAndRateAfter[0]).to.be.gt(0);
    expect(totSupplyAndRateAfter[1]).to.be.gt(0);
  });

  it('Tries to mint not being the Pool (revert expected)', async () => {
    const { deployer, dai, helpersContract } = testEnv;

    const daiStableDebtTokenAddress = (await helpersContract.getReserveTokensAddresses(dai.address))
      .stableDebtTokenAddress;

    const stableDebtContract = StableDebtToken__factory.connect(
      daiStableDebtTokenAddress,
      deployer.signer
    );

    await expect(
      stableDebtContract.mint(deployer.address, deployer.address, '1', '1')
    ).to.be.revertedWith(CALLER_MUST_BE_POOL);
  });

  it('Tries to burn not being the Pool (revert expected)', async () => {
    const { deployer, dai, helpersContract } = testEnv;

    const daiStableDebtTokenAddress = (await helpersContract.getReserveTokensAddresses(dai.address))
      .stableDebtTokenAddress;

    const stableDebtContract = StableDebtToken__factory.connect(
      daiStableDebtTokenAddress,
      deployer.signer
    );

    const name = await stableDebtContract.name();

    expect(name).to.be.equal('Aave Testnet Stable Debt DAI');
    await expect(stableDebtContract.burn(deployer.address, '1')).to.be.revertedWith(
      CALLER_MUST_BE_POOL
    );
  });

  it('Tries to transfer debt tokens (revert expected)', async () => {
    const { users, dai, helpersContract } = testEnv;
    const daiStableDebtTokenAddress = (await helpersContract.getReserveTokensAddresses(dai.address))
      .stableDebtTokenAddress;
    const stableDebtContract = StableDebtToken__factory.connect(
      daiStableDebtTokenAddress,
      users[0].signer
    );

    await expect(
      stableDebtContract.connect(users[0].signer).transfer(users[1].address, 500)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
  });

  it('Check Mint and Transfer events when borrowing on behalf', async () => {
    // const snapId = await evmSnapshot();
    const {
      pool,
      weth,
      dai,
      usdc,
      users: [user1, user2, user3],
    } = testEnv;

    // Add USDC liquidity
    await usdc.connect(user3.signer)['mint(uint256)'](utils.parseUnits('1000', 6));
    await usdc.connect(user3.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user3.signer)
      .supply(usdc.address, utils.parseUnits('1000', 6), user3.address, 0);

    // User1 supplies 10 WETH
    await weth
      .connect(user1.signer)
      ['mint(address,uint256)'](user1.address, utils.parseUnits('10', 18));
    await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user1.signer)
      .supply(weth.address, utils.parseUnits('10', 18), user1.address, 0);

    const usdcData = await pool.getReserveData(usdc.address);
    const stableDebtToken = StableDebtToken__factory.connect(
      usdcData.stableDebtTokenAddress,
      user1.signer
    );
    const beforeDebtBalanceUser2 = await stableDebtToken.balanceOf(user2.address);

    // User1 borrows 100 USDC
    const borrowAmount = utils.parseUnits('100', 6);
    expect(
      await pool
        .connect(user1.signer)
        .borrow(usdc.address, borrowAmount, RateMode.Stable, 0, user1.address)
    );

    // User1 approves user2 to borrow 1000 USDC
    expect(
      await stableDebtToken
        .connect(user1.signer)
        .approveDelegation(user2.address, utils.parseUnits('1000', 6))
    );

    // Increase time so interests accrue
    await increaseTime(24 * 3600);

    // User2 borrows 1000 USDC on behalf of user1
    const borrowOnBehalfAmount = utils.parseUnits('100', 6);
    const tx = await waitForTx(
      await pool
        .connect(user2.signer)
        .borrow(usdc.address, borrowOnBehalfAmount, RateMode.Stable, 0, user1.address)
    );

    const afterDebtBalanceUser1 = await stableDebtToken.balanceOf(user1.address);
    const afterDebtBalanceUser2 = await stableDebtToken.balanceOf(user2.address);

    // Calculate interests
    const expectedDebtIncreaseUser1 = afterDebtBalanceUser1.sub(
      borrowOnBehalfAmount.add(borrowAmount)
    );

    const parsedTransferEvents = getStableDebtTokenEvent(stableDebtToken, tx, 'Transfer');
    const transferAmount = parsedTransferEvents[0].value;

    const parsedMintEvents = getStableDebtTokenEvent(stableDebtToken, tx, 'Mint');
    const { amount: mintAmount, balanceIncrease } = parsedMintEvents[0];

    expect(expectedDebtIncreaseUser1.add(borrowOnBehalfAmount)).to.be.eq(transferAmount);
    expect(borrowOnBehalfAmount.add(balanceIncrease)).to.be.eq(mintAmount);
    expect(expectedDebtIncreaseUser1).to.be.eq(balanceIncrease);
    expect(afterDebtBalanceUser2).to.be.eq(beforeDebtBalanceUser2);

    // await evmRevert(snapId);
  });

  it('Tries to approve debt tokens (revert expected)', async () => {
    const { users, dai, helpersContract } = testEnv;
    const daiStableDebtTokenAddress = (await helpersContract.getReserveTokensAddresses(dai.address))
      .stableDebtTokenAddress;
    const stableDebtContract = StableDebtToken__factory.connect(
      daiStableDebtTokenAddress,
      users[0].signer
    );

    await expect(
      stableDebtContract.connect(users[0].signer).approve(users[1].address, 500)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
    await expect(
      stableDebtContract.allowance(users[0].address, users[1].address)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
  });

  it('Tries to increase allowance of debt tokens (revert expected)', async () => {
    const { users, dai, helpersContract } = testEnv;
    const daiStableDebtTokenAddress = (await helpersContract.getReserveTokensAddresses(dai.address))
      .stableDebtTokenAddress;
    const stableDebtContract = StableDebtToken__factory.connect(
      daiStableDebtTokenAddress,
      users[0].signer
    );

    await expect(
      stableDebtContract.connect(users[0].signer).increaseAllowance(users[1].address, 500)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
  });

  it('Tries to decrease allowance of debt tokens (revert expected)', async () => {
    const { users, dai, helpersContract } = testEnv;
    const daiStableDebtTokenAddress = (await helpersContract.getReserveTokensAddresses(dai.address))
      .stableDebtTokenAddress;
    const stableDebtContract = StableDebtToken__factory.connect(
      daiStableDebtTokenAddress,
      users[0].signer
    );

    await expect(
      stableDebtContract.connect(users[0].signer).decreaseAllowance(users[1].address, 500)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
  });

  it('Tries to transferFrom (revert expected)', async () => {
    const { users, dai, helpersContract } = testEnv;
    const daiStableDebtTokenAddress = (await helpersContract.getReserveTokensAddresses(dai.address))
      .stableDebtTokenAddress;
    const stableDebtContract = StableDebtToken__factory.connect(
      daiStableDebtTokenAddress,
      users[0].signer
    );

    await expect(
      stableDebtContract
        .connect(users[0].signer)
        .transferFrom(users[0].address, users[1].address, 500)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
  });

  it('Burn stable debt tokens such that `secondTerm >= firstTerm`', async () => {
    // To enter the case where secondTerm >= firstTerm, we also need previousSupply <= amount.
    // The easiest way is to use two users, such that for user 2 his stableRate > average stableRate.
    // In practice to enter the case we can perform the following actions
    // user 1 borrow 2 wei at rate = 10**27
    // user 2 borrow 1 wei rate = 10**30
    // progress time by a year, to accrue significant debt.
    // then let user 2 withdraw sufficient funds such that secondTerm (userStableRate * burnAmount) >= averageRate * supply
    // if we do not have user 1 deposit as well, we will have issues getting past previousSupply <= amount, as amount > supply for secondTerm to be > firstTerm.
    // await evmRevert(snap);
    const rateGuess1 = BigNumber.from(RAY);
    const rateGuess2 = BigNumber.from(10).pow(30);
    const amount1 = BigNumber.from(2);
    const amount2 = BigNumber.from(1);

    const { deployer, pool, dai, helpersContract, users } = testEnv;

    // Impersonate the Pool
    await topUpNonPayableWithEther(deployer.signer, [pool.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([pool.address]);
    const poolSigner = await hre.ethers.getSigner(pool.address);

    const config = await helpersContract.getReserveTokensAddresses(dai.address);
    const stableDebt = StableDebtToken__factory.connect(
      config.stableDebtTokenAddress,
      deployer.signer
    );

    // Next two txs should be mined in the same block
    await setAutomine(false);
    await stableDebt
      .connect(poolSigner)
      .mint(users[0].address, users[0].address, amount1, rateGuess1);

    await stableDebt
      .connect(poolSigner)
      .mint(users[1].address, users[1].address, amount2, rateGuess2);
    await setAutomine(true);

    await increaseTime(60 * 60 * 24 * 365);
    const totalSupplyAfterTime = BigNumber.from(18798191);
    await stableDebt.connect(poolSigner).burn(users[1].address, totalSupplyAfterTime.sub(1));
  });

  it('setIncentivesController() ', async () => {
    // const snapshot = await evmSnapshot();
    const { dai, helpersContract, poolAdmin, aclManager, deployer } = testEnv;
    const config = await helpersContract.getReserveTokensAddresses(dai.address);
    const stableDebt = StableDebtToken__factory.connect(
      config.stableDebtTokenAddress,
      deployer.signer
    );

    expect(await aclManager.connect(deployer.signer).addPoolAdmin(poolAdmin.address));

    expect(await stableDebt.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);
    expect(await stableDebt.connect(poolAdmin.signer).setIncentivesController(ZERO_ADDRESS));
    expect(await stableDebt.getIncentivesController()).to.be.eq(ZERO_ADDRESS);

    // await evmRevert(snapshot);
  });

  it('setIncentivesController() from not pool admin (revert expected)', async () => {
    const {
      dai,
      helpersContract,
      users: [user],
    } = testEnv;
    const config = await helpersContract.getReserveTokensAddresses(dai.address);
    const stableDebt = StableDebtToken__factory.connect(config.stableDebtTokenAddress, user.signer);

    expect(await stableDebt.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);

    await expect(
      stableDebt.connect(user.signer).setIncentivesController(ZERO_ADDRESS)
    ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
  });

  it('User borrows and repays in same block with zero fees', async () => {
    const { pool, users, dai, aDai, usdc, stableDebtDai } = testEnv;
    const user = users[0];

    // We need some debt.
    await usdc.connect(user.signer)['mint(uint256)'](utils.parseEther('2000'));
    await usdc.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .deposit(usdc.address, utils.parseEther('2000'), user.address, 0);
    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('2000'));
    await dai.connect(user.signer).transfer(aDai.address, utils.parseEther('2000'));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const userDataBefore = await pool.getUserAccountData(user.address);
    expect(await stableDebtDai.balanceOf(user.address)).to.be.eq(0);

    // Turn off automining - pretty sure that coverage is getting messed up here.
    await setAutomine(false);
    // Borrow 500 dai
    await pool
      .connect(user.signer)
      .borrow(dai.address, utils.parseEther('500'), RateMode.Stable, 0, user.address);

    // Turn on automining, but not mine a new block until next tx
    await setAutomineEvm(true);
    expect(
      await pool
        .connect(user.signer)
        .repay(dai.address, utils.parseEther('500'), RateMode.Stable, user.address)
    );

    expect(await stableDebtDai.balanceOf(user.address)).to.be.eq(0);
    expect(await dai.balanceOf(user.address)).to.be.eq(0);
    expect(await dai.balanceOf(aDai.address)).to.be.eq(utils.parseEther('2000'));

    const userDataAfter = await pool.getUserAccountData(user.address);
    expect(userDataBefore.totalCollateralBase).to.be.lte(userDataAfter.totalCollateralBase);
    expect(userDataBefore.healthFactor).to.be.lte(userDataAfter.healthFactor);
    expect(userDataBefore.totalDebtBase).to.be.eq(userDataAfter.totalDebtBase);
  });

  it('User borrows and repays in same block using credit delegation with zero fees', async () => {
    const {
      pool,
      dai,
      aDai,
      weth,
      users: [user1, user2, user3],
    } = testEnv;

    // Add liquidity
    await dai.connect(user3.signer)['mint(uint256)'](utils.parseUnits('1000', 18));
    await dai.connect(user3.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user3.signer)
      .supply(dai.address, utils.parseUnits('1000', 18), user3.address, 0);

    // User1 supplies 10 WETH
    await dai.connect(user1.signer)['mint(uint256)'](utils.parseUnits('100', 18));
    await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await weth
      .connect(user1.signer)
      ['mint(address,uint256)'](user1.address, utils.parseUnits('10', 18));
    await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user1.signer)
      .supply(weth.address, utils.parseUnits('10', 18), user1.address, 0);

    const daiData = await pool.getReserveData(dai.address);
    const stableDebtToken = await getStableDebtToken(daiData.stableDebtTokenAddress);

    // User1 approves User2 to borrow 1000 DAI
    expect(
      await stableDebtToken
        .connect(user1.signer)
        .approveDelegation(user2.address, utils.parseUnits('1000', 18))
    );
    const userDataBefore = await pool.getUserAccountData(user1.address);

    // Turn off automining to simulate actions in same block
    await setAutomine(false);

    // User2 borrows 2 DAI on behalf of User1
    expect(
      await pool
        .connect(user2.signer)
        .borrow(dai.address, utils.parseEther('2'), RateMode.Stable, 0, user1.address)
    );

    // Turn on automining, but not mine a new block until next tx
    await setAutomineEvm(true);

    expect(
      await pool
        .connect(user1.signer)
        .repay(dai.address, utils.parseEther('2'), RateMode.Stable, user1.address)
    );

    expect(await stableDebtToken.balanceOf(user1.address)).to.be.eq(0);
    expect(await dai.balanceOf(user2.address)).to.be.eq(utils.parseEther('2'));
    expect(await dai.balanceOf(aDai.address)).to.be.eq(utils.parseEther('1000'));

    const userDataAfter = await pool.getUserAccountData(user1.address);
    expect(userDataBefore.totalCollateralBase).to.be.lte(userDataAfter.totalCollateralBase);
    expect(userDataBefore.healthFactor).to.be.lte(userDataAfter.healthFactor);
    expect(userDataBefore.totalDebtBase).to.be.eq(userDataAfter.totalDebtBase);
  });
});



================================================
FILE: test-suites/subgraph-scenarios.spec.ts
================================================
import { configuration as actionsConfiguration } from './helpers/actions';
import { configuration as calculationsConfiguration } from './helpers/utils/calculations';
import { makeSuite } from './helpers/make-suite';
import { executeStory } from './helpers/scenario-engine';
import AaveConfig from '@aave/deploy-v3/dist/markets/test';

makeSuite('Subgraph scenario tests', async (testEnv) => {
  let story: any;

  before('Initializing configuration', async () => {
    const scenario = require(`./helpers/scenarios/borrow-repay-stable`);
    story = scenario.stories[0];

    actionsConfiguration.skipIntegrityCheck = false; //set this to true to execute solidity-coverage

    calculationsConfiguration.reservesParams = AaveConfig.ReservesConfig;
  });
  it('deposit-borrow', async () => {
    await executeStory(story, testEnv);
  });
});



================================================
FILE: test-suites/upgradeability.spec.ts
================================================
import { expect } from 'chai';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { ProtocolErrors } from '../helpers/types';
import { ONE_ADDRESS, ZERO_ADDRESS } from '../helpers/constants';
import {
  getAToken,
  getMockInitializableImple,
  getMockInitializableImpleV2,
  getMockStableDebtToken,
  getMockVariableDebtToken,
  getStableDebtToken,
  getVariableDebtToken,
} from '@aave/deploy-v3/dist/helpers/contract-getters';
import { getFirstSigner } from '@aave/deploy-v3/dist/helpers/utilities/signer';
import {
  deployInitializableImmutableAdminUpgradeabilityProxy,
  deployMockAToken,
  deployMockInitializableFromConstructorImple,
  deployMockInitializableImple,
  deployMockInitializableImpleV2,
  deployMockReentrantInitializableImple,
  deployMockStableDebtToken,
  deployMockVariableDebtToken,
} from '@aave/deploy-v3/dist/helpers/contract-deployments';
import {
  InitializableImmutableAdminUpgradeabilityProxy,
  InitializableImmutableAdminUpgradeabilityProxy__factory,
} from '../types';
import { evmSnapshot, evmRevert, getEthersSigners } from '@aave/deploy-v3';

makeSuite('Upgradeability', (testEnv: TestEnv) => {
  context('VersionedInitializable', async () => {
    it('Call initialize from the constructor function', async () => {
      const initValue = '1';
      const implementation = await deployMockInitializableFromConstructorImple([initValue]);
      expect(await implementation.value()).to.be.eq(initValue);
    });

    it('Call initialize from the initialize function (reentrant)', async () => {
      const initValue = 1;
      const finalValue = 2;
      const implementation = await deployMockReentrantInitializableImple();
      expect(await implementation.initialize(initValue));
      expect(await implementation.value()).to.be.eq(finalValue, `value is not ${finalValue}`);
    });

    it('Tries to initialize once it is already initialized (revert expected)', async () => {
      const implementation = await deployMockInitializableImple();
      expect(
        await implementation.initialize(
          10, // value
          'some text', // text
          [10, 20, 30]
        )
      );
      await expect(
        implementation.initialize(
          100, // value
          'some text', // text
          [100, 200, 300]
        )
      ).to.be.revertedWith('Contract instance has already been initialized');
    });
  });

  context('InitializableImmutableAdminUpgradeabilityProxy', async () => {
    let snap: string;

    let proxyAdminOwner, newAdmin, nonAdmin;
    let implementationV1, implementationV2, proxiedImpl;
    let proxy: InitializableImmutableAdminUpgradeabilityProxy;

    beforeEach(async () => {
      snap = await evmSnapshot();

      implementationV1 = await deployMockInitializableImple();
      implementationV2 = await deployMockInitializableImpleV2();
      const encodedInitialize = implementationV1.interface.encodeFunctionData('initialize', [
        0, // value
        'text', // text
        [1, 2, 3], // values
      ]);
      proxy = await deployInitializableImmutableAdminUpgradeabilityProxy([proxyAdminOwner.address]);
      expect(await proxy.initialize(implementationV1.address, encodedInitialize));
      proxiedImpl = await getMockInitializableImple(proxy.address);
    });
    afterEach(async () => {
      await evmRevert(snap);
    });

    before(async () => {
      const { users } = testEnv;
      [proxyAdminOwner, newAdmin, nonAdmin] = users;
      [proxyAdminOwner, newAdmin, nonAdmin] = await getEthersSigners();
    });

    it('initialize() implementation version is correct', async () => {
      expect(await proxiedImpl.connect(nonAdmin).REVISION()).to.be.eq(1, 'impl revision is not 1');
    });

    it('initialize() implementation initialization is correct', async () => {
      expect(await proxiedImpl.connect(nonAdmin).value()).to.be.eq(0, 'impl value is not 0');
      expect(await proxiedImpl.connect(nonAdmin).text()).to.be.eq(
        'text',
        'impl text is not correct'
      );
      expect(await proxiedImpl.connect(nonAdmin).values(0)).to.be.eq(1, 'impl values[0] is not 1');
      expect(await proxiedImpl.connect(nonAdmin).values(1)).to.be.eq(2, 'impl values[1] is not 2');
      expect(await proxiedImpl.connect(nonAdmin).values(2)).to.be.eq(3, 'impl values[2] is not 3');
    });

    it('initialize() when initializing the proxy once it is already initialized (revert expected)', async () => {
      const encodedInitialize = proxiedImpl.interface.encodeFunctionData('initialize', [
        10, // value
        'some text', // text
        [10, 20, 30],
      ]);
      await expect(proxy.initialize(implementationV1.address, encodedInitialize)).to.be.reverted;
    });

    it('initialize() when initializing the impl from non-admin address once it is already initialized (revert expected)', async () => {
      await expect(
        proxiedImpl.connect(nonAdmin).initialize(
          10, // value
          'some text', // text
          [10, 20, 30]
        )
      ).to.be.revertedWith('Contract instance has already been initialized');
    });

    it('initialize() when initializing the impl from admin address once it is already initialized (revert expected)', async () => {
      await expect(
        proxiedImpl.connect(proxyAdminOwner).initialize(
          10, // value
          'some text', // text
          [10, 20, 30]
        )
      ).to.be.revertedWith('Cannot call fallback function from the proxy admin');
    });

    it('initialize() deploy a proxy and call to initialize() with no initialization data', async () => {
      proxy = await (
        await new InitializableImmutableAdminUpgradeabilityProxy__factory(
          await getFirstSigner()
        ).deploy(proxyAdminOwner.address)
      ).deployed();
      expect(await proxy.initialize(implementationV1.address, Buffer.from('')));
    });

    it('initialize() while calling initialize() with wrong initialization data (revert expected)', async () => {
      proxy = await (
        await new InitializableImmutableAdminUpgradeabilityProxy__factory(
          await getFirstSigner()
        ).deploy(proxyAdminOwner.address)
      ).deployed();
      // Initialize with wrong initialization data
      await expect(proxy.initialize(implementationV1.address, Buffer.from('wrongInitialize'))).to.be
        .reverted;
    });

    it('admin() non-view function from admin address', async () => {
      expect(await proxy.connect(proxyAdminOwner).admin());
    });

    it('admin() non-view function from non-admin address', async () => {
      await expect(proxy.connect(nonAdmin).admin()).to.be.reverted;
    });

    it('admin() callStatic from admin address', async () => {
      expect(await proxy.connect(proxyAdminOwner).callStatic.admin()).to.be.eq(
        proxyAdminOwner.address,
        'proxy admin address not correct'
      );
    });

    it('implementation() non-view function from admin address', async () => {
      expect(await proxy.connect(proxyAdminOwner).implementation());
    });

    it('implementation() non-view function from non-admin address', async () => {
      await expect(proxy.connect(nonAdmin).implementation()).to.be.reverted;
    });

    it('implementation() callStatic from admin address', async () => {
      expect(await proxy.connect(proxyAdminOwner).callStatic.implementation()).to.be.eq(
        implementationV1.address,
        'proxy implementation address not correct'
      );
    });

    it('upgradeTo() to a new imple from non-admin address (revert expected)', async () => {
      await expect(proxy.connect(nonAdmin).upgradeTo(implementationV2.address)).to.be.reverted;
    });

    it('upgradeTo() to a non-contract imple from admin address (revert expected)', async () => {
      await expect(proxy.connect(proxyAdminOwner).upgradeTo(ONE_ADDRESS)).to.be.revertedWith(
        'Cannot set a proxy implementation to a non-contract address'
      );
    });

    it('upgradeTo() to a new imple from admin address', async () => {
      expect(await proxiedImpl.connect(nonAdmin).REVISION()).to.be.eq(1, 'impl revision is not 1');

      await expect(proxy.connect(proxyAdminOwner).upgradeTo(implementationV2.address))
        .to.emit(proxy, 'Upgraded')
        .withArgs(implementationV2.address);

      proxiedImpl = await getMockInitializableImpleV2(proxy.address);
      expect(await proxiedImpl.connect(nonAdmin).REVISION()).to.be.eq(2, 'impl revision is not 2');

      // Check proxy storage layout keeps the same
      expect(await proxiedImpl.connect(nonAdmin).value()).to.be.eq(0, 'impl value is not 0');
      expect(await proxiedImpl.connect(nonAdmin).text()).to.be.eq(
        'text',
        'impl text is not correct'
      );
      expect(await proxiedImpl.connect(nonAdmin).values(0)).to.be.eq(1, 'impl values[0] is not 1');
      expect(await proxiedImpl.connect(nonAdmin).values(1)).to.be.eq(2, 'impl values[1] is not 2');
      expect(await proxiedImpl.connect(nonAdmin).values(2)).to.be.eq(3, 'impl values[2] is not 3');

      // Initialize
      await proxiedImpl.connect(nonAdmin).initialize(
        10, // value
        'some text', // text
        [10, 20, 30]
      );
      expect(await proxiedImpl.connect(nonAdmin).value()).to.be.eq(10, 'impl value is not 0');
      expect(await proxiedImpl.connect(nonAdmin).text()).to.be.eq(
        'some text',
        'impl text not correct'
      );
      expect(await proxiedImpl.connect(nonAdmin).values(0)).to.be.eq(10, 'impl values[0] not 10');
      expect(await proxiedImpl.connect(nonAdmin).values(1)).to.be.eq(20, 'impl values[1] not 20');
      expect(await proxiedImpl.connect(nonAdmin).values(2)).to.be.eq(30, 'impl values[2] not 30');
    });

    it('upgradeTo() when initializing the new imple from admin address (revert expected)', async () => {
      await expect(proxy.connect(proxyAdminOwner).upgradeTo(implementationV2.address))
        .to.emit(proxy, 'Upgraded')
        .withArgs(implementationV2.address);
      // Initialize
      await proxiedImpl.connect(nonAdmin).initialize(
        10, // value
        'some text', // text
        [10, 20, 30]
      );
      await expect(
        proxiedImpl.connect(nonAdmin).initialize(
          10, // value
          'some text', // text
          [10, 20, 30]
        )
      ).to.be.revertedWith('Contract instance has already been initialized');
    });

    it('upgradeToAndCall() to a new impl from non-admin address (revert expected)', async () => {
      await expect(
        proxy.connect(nonAdmin).upgradeToAndCall(implementationV2.address, Buffer.from(''))
      ).to.be.reverted;
    });

    it('upgradeToAndCall() to a non-contract impl from admin address (revert expected)', async () => {
      await expect(
        proxy.connect(proxyAdminOwner).upgradeToAndCall(ONE_ADDRESS, Buffer.from(''))
      ).to.be.revertedWith('Cannot set a proxy implementation to a non-contract address');
    });

    it('upgradeToAndCall() to a new impl from admin address', async () => {
      expect(await proxiedImpl.connect(nonAdmin).REVISION()).to.be.eq(1, 'impl revision is not 1');

      const encodedInitialize = implementationV1.interface.encodeFunctionData('initialize', [
        10, // value
        'some text', // text
        [10, 20, 30],
      ]);
      await expect(
        proxy.connect(proxyAdminOwner).upgradeToAndCall(implementationV2.address, encodedInitialize)
      )
        .to.emit(proxy, 'Upgraded')
        .withArgs(implementationV2.address);

      proxiedImpl = await getMockInitializableImpleV2(proxy.address);

      // Check initialization
      expect(await proxiedImpl.connect(nonAdmin).REVISION()).to.be.eq(2, 'impl revision is not 2');
      expect(await proxiedImpl.connect(nonAdmin).value()).to.be.eq(10, 'impl value is not 0');
      expect(await proxiedImpl.connect(nonAdmin).text()).to.be.eq(
        'some text',
        'impl text not correct'
      );
      expect(await proxiedImpl.connect(nonAdmin).values(0)).to.be.eq(10, 'impl values[0] not 10');
      expect(await proxiedImpl.connect(nonAdmin).values(1)).to.be.eq(20, 'impl values[1] not 20');
      expect(await proxiedImpl.connect(nonAdmin).values(2)).to.be.eq(30, 'impl values[2] not 30');
    });

    it('upgradeToAndCall() for a new proxied contract with no initialize function (revert expected)', async () => {
      const impl = await deployMockInitializableImple();
      const encodedInitialize = Buffer.from('');
      await expect(proxy.connect(proxyAdminOwner).upgradeToAndCall(impl.address, encodedInitialize))
        .reverted;
    });

    it('upgradeToAndCall() when initializing the new impl from admin address once it is already initialized (revert expected)', async () => {
      const encodedInitialize = implementationV1.interface.encodeFunctionData('initialize', [
        10, // value
        'some text', // text
        [10, 20, 30],
      ]);
      await expect(
        proxy.connect(proxyAdminOwner).upgradeToAndCall(implementationV2.address, encodedInitialize)
      )
        .to.emit(proxy, 'Upgraded')
        .withArgs(implementationV2.address);
      await expect(
        proxiedImpl.connect(nonAdmin).initialize(
          10, // value
          'some text', // text
          [10, 20, 30]
        )
      ).to.be.revertedWith('Contract instance has already been initialized');
    });

    it('implementation.setValue() call through the proxy', async () => {
      const newValue = 123;
      expect(await proxiedImpl.connect(nonAdmin).value()).to.be.eq(0, 'value not correct');
      expect(await proxiedImpl.connect(nonAdmin).setValueViaProxy(newValue));
      expect(await proxiedImpl.connect(nonAdmin).value()).to.be.eq(123, 'value not correct');
    });

    it('implementation.setValue() direct call to the implementation', async () => {
      const newValue = 123;
      expect(await implementationV1.value()).to.be.eq(0, 'value not correct');
      expect(await implementationV1.setValue(newValue));
      expect(await implementationV1.value()).to.be.eq(123, 'value not correct');
    });
  });

  context('PoolConfigurator upgrade ability', () => {
    const { CALLER_NOT_POOL_ADMIN } = ProtocolErrors;
    let newATokenAddress: string;
    let newStableTokenAddress: string;
    let newVariableTokenAddress: string;

    before('deploying instances', async () => {
      const { dai, pool } = testEnv;
      const aTokenInstance = await deployMockAToken([
        pool.address,
        dai.address,
        ZERO_ADDRESS,
        ZERO_ADDRESS,
        'Aave Interest bearing DAI updated',
        'aDAI',
        '0x10',
      ]);

      const stableDebtTokenInstance = await deployMockStableDebtToken([
        pool.address,
        dai.address,
        ZERO_ADDRESS,
        'Aave stable debt bearing DAI updated',
        'stableDebtDAI',
        '0x10',
      ]);

      const variableDebtTokenInstance = await deployMockVariableDebtToken([
        pool.address,
        dai.address,
        ZERO_ADDRESS,
        'Aave variable debt bearing DAI updated',
        'variableDebtDAI',
        '0x10',
      ]);

      newATokenAddress = aTokenInstance.address;
      newVariableTokenAddress = variableDebtTokenInstance.address;
      newStableTokenAddress = stableDebtTokenInstance.address;
    });

    it('Tries to update the DAI Atoken implementation with a different address than the poolManager', async () => {
      const { dai, configurator, users } = testEnv;

      const name = await (await getAToken(newATokenAddress)).name();
      const symbol = await (await getAToken(newATokenAddress)).symbol();

      const updateATokenInputParams: {
        asset: string;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: string;
      } = {
        asset: dai.address,
        treasury: ZERO_ADDRESS,
        incentivesController: ZERO_ADDRESS,
        name: name,
        symbol: symbol,
        implementation: newATokenAddress,
        params: '0x10',
      };
      await expect(
        configurator.connect(users[1].signer).updateAToken(updateATokenInputParams)
      ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
    });

    it('Upgrades the DAI Atoken implementation ', async () => {
      const { dai, configurator, aDai } = testEnv;

      const name = await (await getAToken(newATokenAddress)).name();
      const symbol = await (await getAToken(newATokenAddress)).symbol();

      const updateATokenInputParams: {
        asset: string;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: string;
      } = {
        asset: dai.address,
        treasury: ZERO_ADDRESS,
        incentivesController: ZERO_ADDRESS,
        name: name,
        symbol: symbol,
        implementation: newATokenAddress,
        params: '0x10',
      };
      await configurator.updateAToken(updateATokenInputParams);

      const tokenName = await aDai.name();

      expect(tokenName).to.be.eq('Aave Interest bearing DAI updated', 'Invalid token name');
    });

    it('Tries to update the DAI Stable debt token implementation with a different address than the poolManager', async () => {
      const { dai, configurator, users } = testEnv;

      const name = await (await getStableDebtToken(newStableTokenAddress)).name();
      const symbol = await (await getStableDebtToken(newStableTokenAddress)).symbol();

      const updateDebtTokenInput: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: string;
      } = {
        asset: dai.address,
        incentivesController: ZERO_ADDRESS,
        name: name,
        symbol: symbol,
        implementation: newStableTokenAddress,
        params: '0x10',
      };

      await expect(
        configurator.connect(users[1].signer).updateStableDebtToken(updateDebtTokenInput)
      ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
    });

    it('Upgrades the DAI stable debt token implementation ', async () => {
      const { dai, configurator, helpersContract } = testEnv;

      const name = await (await getStableDebtToken(newStableTokenAddress)).name();
      const symbol = await (await getStableDebtToken(newStableTokenAddress)).symbol();

      const updateDebtTokenInput: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: string;
      } = {
        asset: dai.address,
        incentivesController: ZERO_ADDRESS,
        name: name,
        symbol: symbol,
        implementation: newStableTokenAddress,
        params: '0x10',
      };

      await configurator.updateStableDebtToken(updateDebtTokenInput);

      const { stableDebtTokenAddress } = await helpersContract.getReserveTokensAddresses(
        dai.address
      );

      const debtToken = await getMockStableDebtToken(stableDebtTokenAddress);

      const tokenName = await debtToken.name();

      expect(tokenName).to.be.eq('Aave stable debt bearing DAI updated', 'Invalid token name');
    });

    it('Tries to update the DAI variable debt token implementation with a different address than the poolManager', async () => {
      const { dai, configurator, users } = testEnv;

      const name = await (await getVariableDebtToken(newVariableTokenAddress)).name();
      const symbol = await (await getVariableDebtToken(newVariableTokenAddress)).symbol();

      const updateDebtTokenInput: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: string;
      } = {
        asset: dai.address,
        incentivesController: ZERO_ADDRESS,
        name: name,
        symbol: symbol,
        implementation: newVariableTokenAddress,
        params: '0x10',
      };

      await expect(
        configurator.connect(users[1].signer).updateVariableDebtToken(updateDebtTokenInput)
      ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
    });

    it('Upgrades the DAI variable debt token implementation ', async () => {
      const { dai, configurator, helpersContract } = testEnv;

      const name = await (await getVariableDebtToken(newVariableTokenAddress)).name();
      const symbol = await (await getVariableDebtToken(newVariableTokenAddress)).symbol();

      const updateDebtTokenInput: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: string;
      } = {
        asset: dai.address,
        incentivesController: ZERO_ADDRESS,
        name: name,
        symbol: symbol,
        implementation: newVariableTokenAddress,
        params: '0x10',
      };

      expect(await configurator.updateVariableDebtToken(updateDebtTokenInput));

      const { variableDebtTokenAddress } = await helpersContract.getReserveTokensAddresses(
        dai.address
      );

      const debtToken = await getMockVariableDebtToken(variableDebtTokenAddress);

      const tokenName = await debtToken.name();

      expect(tokenName).to.be.eq('Aave variable debt bearing DAI updated', 'Invalid token name');
    });
  });
});



================================================
FILE: test-suites/validation-logic.spec.ts
================================================
import { expect } from 'chai';
import { utils, constants } from 'ethers';
import { parseUnits } from '@ethersproject/units';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { RateMode, ProtocolErrors } from '../helpers/types';
import { impersonateAccountsHardhat } from '../helpers/misc-utils';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { waitForTx, evmSnapshot, evmRevert } from '@aave/deploy-v3';
import { topUpNonPayableWithEther } from './helpers/utils/funds';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('ValidationLogic: Edge cases', (testEnv: TestEnv) => {
  const {
    RESERVE_INACTIVE,
    RESERVE_FROZEN,
    RESERVE_PAUSED,
    INVALID_AMOUNT,
    BORROWING_NOT_ENABLED,
    STABLE_BORROWING_NOT_ENABLED,
    COLLATERAL_SAME_AS_BORROWING_CURRENCY,
    AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE,
    NO_DEBT_OF_SELECTED_TYPE,
    HEALTH_FACTOR_NOT_BELOW_THRESHOLD,
    INVALID_INTEREST_RATE_MODE_SELECTED,
    UNDERLYING_BALANCE_ZERO,
    INCONSISTENT_FLASHLOAN_PARAMS,
    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,
    INCONSISTENT_EMODE_CATEGORY,
  } = ProtocolErrors;

  let snap: string;

  before(async () => {
    const { addressesProvider, oracle } = testEnv;

    await waitForTx(await addressesProvider.setPriceOracle(oracle.address));
  });

  after(async () => {
    const { aaveOracle, addressesProvider } = testEnv;
    await waitForTx(await addressesProvider.setPriceOracle(aaveOracle.address));
  });

  beforeEach(async () => {
    snap = await evmSnapshot();
  });
  afterEach(async () => {
    await evmRevert(snap);
  });

  it('validateDeposit() when reserve is not active (revert expected)', async () => {
    const { pool, poolAdmin, configurator, helpersContract, users, dai } = testEnv;
    const user = users[0];

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.isActive).to.be.eq(true);
    expect(configBefore.isFrozen).to.be.eq(false);

    await configurator.connect(poolAdmin.signer).setReserveActive(dai.address, false);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.isActive).to.be.eq(false);
    expect(configAfter.isFrozen).to.be.eq(false);

    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('1000'));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await expect(
      pool.connect(user.signer).deposit(dai.address, utils.parseEther('1000'), user.address, 0)
    ).to.be.revertedWith(RESERVE_INACTIVE);
  });

  it('validateDeposit() when reserve is frozen (revert expected)', async () => {
    const { pool, poolAdmin, configurator, helpersContract, users, dai } = testEnv;
    const user = users[0];

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.isActive).to.be.eq(true);
    expect(configBefore.isFrozen).to.be.eq(false);

    await configurator.connect(poolAdmin.signer).setReserveFreeze(dai.address, true);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.isActive).to.be.eq(true);
    expect(configAfter.isFrozen).to.be.eq(true);

    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('1000'));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await expect(
      pool.connect(user.signer).deposit(dai.address, utils.parseEther('1000'), user.address, 0)
    ).to.be.revertedWith(RESERVE_FROZEN);
  });

  it('validateBorrow() when reserve is not active (revert expected)', async () => {
    /**
     * Unclear how we should enter this stage with normal usage.
     * Can be done by sending dai directly to aDai contract after it have been deactivated.
     * If deposited normally it is not possible for us deactivate.
     */

    const { pool, poolAdmin, configurator, helpersContract, users, dai, aDai, usdc } = testEnv;
    const user = users[0];

    await usdc.connect(user.signer)['mint(uint256)'](utils.parseEther('10000'));
    await usdc.connect(user.signer).approve(pool.address, utils.parseEther('10000'));
    await pool
      .connect(user.signer)
      .deposit(usdc.address, utils.parseEther('10000'), user.address, 0);

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.isActive).to.be.eq(true);
    expect(configBefore.isFrozen).to.be.eq(false);

    await configurator.connect(poolAdmin.signer).setReserveActive(dai.address, false);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.isActive).to.be.eq(false);
    expect(configAfter.isFrozen).to.be.eq(false);

    // Transferring directly into aDai such that we can borrow
    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('1000'));
    await dai.connect(user.signer).transfer(aDai.address, utils.parseEther('1000'));

    await expect(
      pool
        .connect(user.signer)
        .borrow(dai.address, utils.parseEther('1000'), RateMode.Variable, 0, user.address)
    ).to.be.revertedWith(RESERVE_INACTIVE);
  });

  it('validateBorrow() when reserve is frozen (revert expected)', async () => {
    const { pool, poolAdmin, configurator, helpersContract, users, dai, usdc } = testEnv;
    const user = users[0];

    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('1000'));
    await dai.connect(user.signer).approve(pool.address, utils.parseEther('1000'));
    await pool.connect(user.signer).deposit(dai.address, utils.parseEther('1000'), user.address, 0);

    await usdc.connect(user.signer)['mint(uint256)'](utils.parseEther('10000'));
    await usdc.connect(user.signer).approve(pool.address, utils.parseEther('10000'));
    await pool
      .connect(user.signer)
      .deposit(usdc.address, utils.parseEther('10000'), user.address, 0);

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.isActive).to.be.eq(true);
    expect(configBefore.isFrozen).to.be.eq(false);

    await configurator.connect(poolAdmin.signer).setReserveFreeze(dai.address, true);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.isActive).to.be.eq(true);
    expect(configAfter.isFrozen).to.be.eq(true);

    await expect(
      pool
        .connect(user.signer)
        .borrow(dai.address, utils.parseEther('1000'), RateMode.Variable, 0, user.address)
    ).to.be.revertedWith(RESERVE_FROZEN);
  });

  it('validateBorrow() when amount == 0 (revert expected)', async () => {
    const { pool, users, dai } = testEnv;
    const user = users[0];

    await expect(
      pool.connect(user.signer).borrow(dai.address, 0, RateMode.Variable, 0, user.address)
    ).to.be.revertedWith(INVALID_AMOUNT);
  });

  it('validateBorrow() when borrowing is not enabled (revert expected)', async () => {
    const { pool, poolAdmin, configurator, helpersContract, users, dai, usdc } = testEnv;
    const user = users[0];

    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('1000'));
    await dai.connect(user.signer).approve(pool.address, utils.parseEther('1000'));
    await pool.connect(user.signer).deposit(dai.address, utils.parseEther('1000'), user.address, 0);

    await usdc.connect(user.signer)['mint(uint256)'](utils.parseEther('10000'));
    await usdc.connect(user.signer).approve(pool.address, utils.parseEther('10000'));
    await pool
      .connect(user.signer)
      .deposit(usdc.address, utils.parseEther('10000'), user.address, 0);

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.borrowingEnabled).to.be.eq(true);

    // Disable borrowing
    await configurator.connect(poolAdmin.signer).setReserveStableRateBorrowing(dai.address, false);
    await configurator.connect(poolAdmin.signer).setReserveBorrowing(dai.address, false);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.borrowingEnabled).to.be.eq(false);

    await expect(
      pool
        .connect(user.signer)
        .borrow(dai.address, utils.parseEther('1000'), RateMode.Variable, 0, user.address)
    ).to.be.revertedWith(BORROWING_NOT_ENABLED);
  });

  it('validateBorrow() when stableRateBorrowing is not enabled', async () => {
    const { pool, poolAdmin, configurator, helpersContract, users, dai, aDai, usdc } = testEnv;
    const user = users[0];

    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('1000'));
    await dai.connect(user.signer).approve(pool.address, utils.parseEther('1000'));
    await pool.connect(user.signer).deposit(dai.address, utils.parseEther('1000'), user.address, 0);

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.stableBorrowRateEnabled).to.be.eq(true);

    // Disable stable rate borrowing
    await configurator.connect(poolAdmin.signer).setReserveStableRateBorrowing(dai.address, false);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.stableBorrowRateEnabled).to.be.eq(false);

    await expect(
      pool
        .connect(user.signer)
        .borrow(dai.address, utils.parseEther('500'), RateMode.Stable, 0, user.address)
    ).to.be.revertedWith(STABLE_BORROWING_NOT_ENABLED);
  });

  it('validateBorrow() borrowing when user has already a HF < threshold', async () => {
    const { pool, users, dai, usdc, oracle } = testEnv;
    const user = users[0];
    const depositor = users[1];

    await dai
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '2000'));
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '2000'),
        depositor.address,
        0
      );

    await usdc
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '2000'));
    await usdc.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .deposit(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, '2000'),
        user.address,
        0
      );

    await pool
      .connect(user.signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '1000'),
        RateMode.Variable,
        0,
        user.address
      );

    const daiPrice = await oracle.getAssetPrice(dai.address);

    await oracle.setAssetPrice(dai.address, daiPrice.mul(2));

    await expect(
      pool
        .connect(user.signer)
        .borrow(
          dai.address,
          await convertToCurrencyDecimals(dai.address, '200'),
          RateMode.Variable,
          0,
          user.address
        )
    ).to.be.revertedWith(HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD);
  });

  it('validateBorrow() stable borrowing where collateral is mostly the same currency is borrowing (revert expected)', async () => {
    // Stable borrowing
    // isUsingAsCollateral == true
    // ltv != 0
    // amount < aToken Balance

    const { pool, users, dai, aDai, usdc } = testEnv;
    const user = users[0];

    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('2000'));
    await dai.connect(user.signer).approve(pool.address, utils.parseEther('1000'));
    await pool.connect(user.signer).deposit(dai.address, utils.parseEther('1000'), user.address, 0);
    await dai.connect(user.signer).transfer(aDai.address, utils.parseEther('1000'));

    await usdc.connect(user.signer)['mint(uint256)'](utils.parseEther('10000'));
    await usdc.connect(user.signer).approve(pool.address, utils.parseEther('10000'));
    await pool
      .connect(user.signer)
      .deposit(usdc.address, utils.parseEther('10000'), user.address, 0);

    await expect(
      pool
        .connect(user.signer)
        .borrow(dai.address, utils.parseEther('500'), RateMode.Stable, 0, user.address)
    ).to.be.revertedWith(COLLATERAL_SAME_AS_BORROWING_CURRENCY);
  });

  it('validateBorrow() stable borrowing when amount > maxLoanSizeStable (revert expected)', async () => {
    const { pool, users, dai, aDai, usdc } = testEnv;
    const user = users[0];

    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('2000'));
    await dai.connect(user.signer).approve(pool.address, utils.parseEther('1000'));
    await pool.connect(user.signer).deposit(dai.address, utils.parseEther('1000'), user.address, 0);
    await dai.connect(user.signer).transfer(aDai.address, utils.parseEther('1000'));

    await usdc.connect(user.signer)['mint(uint256)'](utils.parseEther('10000'));
    await usdc.connect(user.signer).approve(pool.address, utils.parseEther('10000'));
    await pool
      .connect(user.signer)
      .deposit(usdc.address, utils.parseEther('10000'), user.address, 0);

    await expect(
      pool
        .connect(user.signer)
        .borrow(dai.address, utils.parseEther('1500'), RateMode.Stable, 0, user.address)
    ).to.be.revertedWith(AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE);
  });

  it('validateLiquidationCall() when healthFactor > threshold (revert expected)', async () => {
    // Liquidation something that is not liquidatable
    const { pool, users, dai, usdc } = testEnv;
    const depositor = users[0];
    const borrower = users[1];

    await dai
      .connect(depositor.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '500'));
    await dai.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(depositor.signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '500'),
        depositor.address,
        0
      );
    await usdc
      .connect(borrower.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(usdc.address, '500'));
    await usdc.connect(borrower.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(borrower.signer)
      .deposit(
        usdc.address,
        await convertToCurrencyDecimals(usdc.address, '500'),
        borrower.address,
        0
      );

    await pool
      .connect(borrower.signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '250'),
        RateMode.Variable,
        0,
        borrower.address
      );

    // Try to liquidate the borrower
    await expect(
      pool
        .connect(depositor.signer)
        .liquidationCall(usdc.address, dai.address, borrower.address, 0, false)
    ).to.be.revertedWith(HEALTH_FACTOR_NOT_BELOW_THRESHOLD);
  });

  it('validateRepay() when reserve is not active (revert expected)', async () => {
    // Unsure how we can end in this scenario. Would require that it could be deactivated after someone have borrowed
    const { pool, users, dai, helpersContract, configurator, poolAdmin } = testEnv;
    const user = users[0];

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.isActive).to.be.eq(true);
    expect(configBefore.isFrozen).to.be.eq(false);

    await configurator.connect(poolAdmin.signer).setReserveActive(dai.address, false);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.isActive).to.be.eq(false);
    expect(configAfter.isFrozen).to.be.eq(false);

    await expect(
      pool
        .connect(user.signer)
        .repay(dai.address, utils.parseEther('1'), RateMode.Variable, user.address)
    ).to.be.revertedWith(RESERVE_INACTIVE);
  });

  it('validateRepay() the variable debt when is 0 (stableDebt > 0) (revert expected)', async () => {
    // (stableDebt > 0 && DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE) ||
    // (variableDebt > 0 &&	DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.VARIABLE),

    const { pool, users, dai, aDai, usdc } = testEnv;
    const user = users[0];

    // We need some debt
    await usdc.connect(user.signer)['mint(uint256)'](utils.parseEther('2000'));
    await usdc.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .deposit(usdc.address, utils.parseEther('2000'), user.address, 0);
    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('2000'));
    await dai.connect(user.signer).transfer(aDai.address, utils.parseEther('2000'));

    await pool
      .connect(user.signer)
      .borrow(dai.address, utils.parseEther('250'), RateMode.Stable, 0, user.address);

    await expect(
      pool
        .connect(user.signer)
        .repay(dai.address, utils.parseEther('250'), RateMode.Variable, user.address)
    ).to.be.revertedWith(NO_DEBT_OF_SELECTED_TYPE);
  });

  it('validateRepay() the stable debt when is 0 (variableDebt > 0) (revert expected)', async () => {
    // (stableDebt > 0 && DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE) ||
    // (variableDebt > 0 &&	DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.VARIABLE),

    const { pool, users, dai } = testEnv;
    const user = users[0];

    // We need some debt
    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('2000'));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).deposit(dai.address, utils.parseEther('2000'), user.address, 0);

    await pool
      .connect(user.signer)
      .borrow(dai.address, utils.parseEther('250'), RateMode.Variable, 0, user.address);

    await expect(
      pool
        .connect(user.signer)
        .repay(dai.address, utils.parseEther('250'), RateMode.Stable, user.address)
    ).to.be.revertedWith(NO_DEBT_OF_SELECTED_TYPE);
  });

  it('validateSwapRateMode() when reserve is not active', async () => {
    // Not clear when this would be useful in practice, as you should not be able to have debt if it is deactivated
    const { pool, poolAdmin, configurator, helpersContract, users, dai, aDai } = testEnv;
    const user = users[0];

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.isActive).to.be.eq(true);
    expect(configBefore.isFrozen).to.be.eq(false);

    await configurator.connect(poolAdmin.signer).setReserveActive(dai.address, false);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.isActive).to.be.eq(false);
    expect(configAfter.isFrozen).to.be.eq(false);

    await expect(
      pool.connect(user.signer).swapBorrowRateMode(dai.address, RateMode.Stable)
    ).to.be.revertedWith(RESERVE_INACTIVE);
    await expect(
      pool.connect(user.signer).swapBorrowRateMode(dai.address, RateMode.Variable)
    ).to.be.revertedWith(RESERVE_INACTIVE);
    await expect(
      pool.connect(user.signer).swapBorrowRateMode(dai.address, RateMode.None)
    ).to.be.revertedWith(RESERVE_INACTIVE);
  });

  it('validateSwapRateMode() when reserve is frozen', async () => {
    // Not clear when this would be useful in practice, as you should not be able to have debt if it is deactivated
    const { pool, poolAdmin, configurator, helpersContract, users, dai } = testEnv;
    const user = users[0];

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.isActive).to.be.eq(true);
    expect(configBefore.isFrozen).to.be.eq(false);

    await configurator.connect(poolAdmin.signer).setReserveFreeze(dai.address, true);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.isActive).to.be.eq(true);
    expect(configAfter.isFrozen).to.be.eq(true);

    await expect(
      pool.connect(user.signer).swapBorrowRateMode(dai.address, RateMode.Stable)
    ).to.be.revertedWith(RESERVE_FROZEN);
    await expect(
      pool.connect(user.signer).swapBorrowRateMode(dai.address, RateMode.Variable)
    ).to.be.revertedWith(RESERVE_FROZEN);
    await expect(
      pool.connect(user.signer).swapBorrowRateMode(dai.address, RateMode.None)
    ).to.be.revertedWith(RESERVE_FROZEN);
  });

  it('validateSwapRateMode() with currentRateMode not equal to stable or variable, (revert expected)', async () => {
    const { pool, helpersContract, users, dai } = testEnv;
    const user = users[0];

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.isActive).to.be.eq(true);
    expect(configBefore.isFrozen).to.be.eq(false);

    await expect(
      pool.connect(user.signer).swapBorrowRateMode(dai.address, RateMode.None)
    ).to.be.revertedWith(INVALID_INTEREST_RATE_MODE_SELECTED);
  });

  it('validateSwapRateMode() from variable to stable with stableBorrowing disabled (revert expected)', async () => {
    const { pool, poolAdmin, configurator, helpersContract, users, dai } = testEnv;
    const user = users[0];

    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('1000'));
    await dai.connect(user.signer).approve(pool.address, utils.parseEther('1000'));
    await pool.connect(user.signer).deposit(dai.address, utils.parseEther('1000'), user.address, 0);

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.stableBorrowRateEnabled).to.be.eq(true);

    // Disable stable rate borrowing
    await configurator.connect(poolAdmin.signer).setReserveStableRateBorrowing(dai.address, false);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.stableBorrowRateEnabled).to.be.eq(false);

    // We need some variable debt, and then flip it

    await dai
      .connect(user.signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '5000'));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .deposit(dai.address, await convertToCurrencyDecimals(dai.address, '5000'), user.address, 0);

    await pool
      .connect(user.signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '500'),
        RateMode.Variable,
        0,
        user.address
      );

    await expect(
      pool.connect(user.signer).swapBorrowRateMode(dai.address, RateMode.Variable)
    ).to.be.revertedWith(STABLE_BORROWING_NOT_ENABLED);
  });

  it('validateSwapRateMode() where collateral is mostly the same currency is borrowing (revert expected)', async () => {
    // SwapRate from variable to stable
    // isUsingAsCollateral == true
    // ltv != 0
    // stableDebt + variableDebt < aToken

    const { pool, users, dai, aDai, usdc } = testEnv;
    const user = users[0];

    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('2000'));
    await dai.connect(user.signer).approve(pool.address, utils.parseEther('1000'));
    await pool.connect(user.signer).deposit(dai.address, utils.parseEther('1000'), user.address, 0);
    await dai.connect(user.signer).transfer(aDai.address, utils.parseEther('1000'));

    await usdc.connect(user.signer)['mint(uint256)'](utils.parseEther('10000'));
    await usdc.connect(user.signer).approve(pool.address, utils.parseEther('10000'));
    await pool
      .connect(user.signer)
      .deposit(usdc.address, utils.parseEther('10000'), user.address, 0);

    await pool
      .connect(user.signer)
      .borrow(dai.address, utils.parseEther('500'), RateMode.Variable, 0, user.address);

    await expect(
      pool.connect(user.signer).swapBorrowRateMode(dai.address, RateMode.Variable)
    ).to.be.revertedWith(COLLATERAL_SAME_AS_BORROWING_CURRENCY);
  });

  it('validateRebalanceStableBorrowRate() when reserve is not active (revert expected)', async () => {
    const { pool, configurator, helpersContract, poolAdmin, users, dai } = testEnv;
    const user = users[0];

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.isActive).to.be.eq(true);
    expect(configBefore.isFrozen).to.be.eq(false);

    await configurator.connect(poolAdmin.signer).setReserveActive(dai.address, false);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.isActive).to.be.eq(false);
    expect(configAfter.isFrozen).to.be.eq(false);

    await expect(
      pool.connect(user.signer).rebalanceStableBorrowRate(dai.address, user.address)
    ).to.be.revertedWith(RESERVE_INACTIVE);
  });

  it('validateSetUseReserveAsCollateral() when reserve is not active (revert expected)', async () => {
    /**
     * Since its not possible to deactivate a reserve with existing suppliers, making the user have
     * aToken balance (aDAI) its not technically possible to end up in this situation.
     * However, we impersonate the Pool to get some aDAI and make the test possible
     */
    const { pool, configurator, helpersContract, poolAdmin, users, dai, aDai } = testEnv;
    const user = users[0];

    const configBefore = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configBefore.isActive).to.be.eq(true);
    expect(configBefore.isFrozen).to.be.eq(false);

    await configurator.connect(poolAdmin.signer).setReserveActive(dai.address, false);

    const configAfter = await helpersContract.getReserveConfigurationData(dai.address);
    expect(configAfter.isActive).to.be.eq(false);
    expect(configAfter.isFrozen).to.be.eq(false);

    await impersonateAccountsHardhat([pool.address]);
    const poolSigner = await hre.ethers.getSigner(pool.address);
    await topUpNonPayableWithEther(user.signer, [pool.address], utils.parseEther('1'));
    expect(await aDai.connect(poolSigner).mint(user.address, user.address, 1, 1));

    await expect(
      pool.connect(user.signer).setUserUseReserveAsCollateral(dai.address, true)
    ).to.be.revertedWith(RESERVE_INACTIVE);

    await expect(
      pool.connect(user.signer).setUserUseReserveAsCollateral(dai.address, false)
    ).to.be.revertedWith(RESERVE_INACTIVE);
  });

  it('validateSetUseReserveAsCollateral() with userBalance == 0 (revert expected)', async () => {
    const { pool, users, dai } = testEnv;
    const user = users[0];

    await expect(
      pool.connect(user.signer).setUserUseReserveAsCollateral(dai.address, true)
    ).to.be.revertedWith(UNDERLYING_BALANCE_ZERO);

    await expect(
      pool.connect(user.signer).setUserUseReserveAsCollateral(dai.address, false)
    ).to.be.revertedWith(UNDERLYING_BALANCE_ZERO);
  });

  it('validateFlashloan() with inconsistent params (revert expected)', async () => {
    const { pool, users, dai, aDai, usdc } = testEnv;
    const user = users[0];

    await expect(
      pool
        .connect(user.signer)
        .flashLoan(
          aDai.address,
          [dai.address, usdc.address],
          [0],
          [RateMode.Variable, RateMode.Variable],
          user.address,
          '0x00',
          0
        )
    ).to.be.revertedWith(INCONSISTENT_FLASHLOAN_PARAMS);
  });

  it('validateFlashloan() with inactive reserve (revert expected)', async () => {
    const {
      configurator,
      poolAdmin,
      pool,
      dai,
      aDai,
      usdc,
      users: [user],
    } = testEnv;

    expect(await configurator.connect(poolAdmin.signer).setReserveActive(dai.address, false));

    await expect(
      pool
        .connect(user.signer)
        .flashLoan(
          aDai.address,
          [dai.address, usdc.address],
          [0, 0],
          [RateMode.Variable, RateMode.Variable],
          user.address,
          '0x00',
          0
        )
    ).to.be.revertedWith(RESERVE_INACTIVE);
  });

  it('validateFlashLoanSimple() with paused reserve (revert expected)', async () => {
    const {
      configurator,
      poolAdmin,
      pool,
      weth,
      users: [user],
    } = testEnv;

    expect(await configurator.connect(poolAdmin.signer).setReservePause(weth.address, true));

    await expect(
      pool.connect(user.signer).flashLoanSimple(user.address, weth.address, 0, '0x10', 0)
    ).to.be.revertedWith(RESERVE_PAUSED);
  });

  it('validateFlashLoanSimple() with inactive reserve (revert expected)', async () => {
    const {
      configurator,
      poolAdmin,
      pool,
      weth,
      users: [user],
    } = testEnv;

    expect(await configurator.connect(poolAdmin.signer).setReserveActive(weth.address, false));

    await expect(
      pool.connect(user.signer).flashLoanSimple(user.address, weth.address, 0, '0x10', 0)
    ).to.be.revertedWith(RESERVE_INACTIVE);
  });

  it('validateSetUserEMode() to undefined emode category (revert expected)', async () => {
    const {
      pool,
      users: [user],
    } = testEnv;

    await expect(pool.connect(user.signer).setUserEMode(101)).to.be.revertedWith(
      INCONSISTENT_EMODE_CATEGORY
    );
  });

  it('validateSetUserEMode() with empty config', async () => {
    const {
      configurator,
      poolAdmin,
      pool,
      users: [user],
    } = testEnv;

    expect(
      await configurator
        .connect(poolAdmin.signer)
        .setEModeCategory('101', '9800', '9900', '10100', constants.AddressZero, 'INCONSISTENT')
    );

    await pool.connect(user.signer).setUserEMode(101);
  });

  it('validateSetUserEMode() with categoryId == 0', async () => {
    const {
      dai,
      pool,
      users: [user],
    } = testEnv;

    // Deposit to make sure config is not empty
    await dai.connect(user.signer)['mint(uint256)'](parseUnits('1000', 18));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).supply(dai.address, parseUnits('1000', 18), user.address, 0);

    await pool.connect(user.signer).setUserEMode(0);

    expect(await pool.getUserEMode(user.address)).to.be.eq(0);
  });

  it('validateBorrow() with eMode > 0, borrowing asset not in category (revert expected)', async () => {
    const {
      configurator,
      poolAdmin,
      usdc,
      dai,
      pool,
      users: [user, usdcProvider],
    } = testEnv;

    await usdc.connect(usdcProvider.signer)['mint(uint256)'](parseUnits('1000', 6));
    await usdc.connect(usdcProvider.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(usdcProvider.signer)
      .supply(usdc.address, parseUnits('1000', 6), usdcProvider.address, 0);

    await dai.connect(user.signer)['mint(uint256)'](parseUnits('1000', 18));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).supply(dai.address, parseUnits('1000', 18), user.address, 0);

    await configurator
      .connect(poolAdmin.signer)
      .setEModeCategory('101', '9800', '9900', '10100', constants.AddressZero, 'NO-ASSETS');

    await pool.connect(user.signer).setUserEMode(101);

    await expect(
      pool
        .connect(user.signer)
        .borrow(usdc.address, parseUnits('100', 6), RateMode.Variable, 0, user.address)
    ).to.be.revertedWith(INCONSISTENT_EMODE_CATEGORY);
  });

  it('validateHFAndLtv() with HF < 1 (revert expected)', async () => {
    const {
      usdc,
      dai,
      pool,
      oracle,
      users: [user, usdcProvider],
    } = testEnv;

    await usdc.connect(usdcProvider.signer)['mint(uint256)'](parseUnits('1000', 6));
    await usdc.connect(usdcProvider.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(usdcProvider.signer)
      .supply(usdc.address, parseUnits('1000', 6), usdcProvider.address, 0);

    await dai.connect(user.signer)['mint(uint256)'](parseUnits('1000', 18));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).supply(dai.address, parseUnits('1000', 18), user.address, 0);

    const userGlobalData = await pool.getUserAccountData(user.address);
    const usdcPrice = await oracle.getAssetPrice(usdc.address);

    const amountUSDCToBorrow = await convertToCurrencyDecimals(
      usdc.address,
      userGlobalData.availableBorrowsBase.div(usdcPrice).toString()
    );

    await pool
      .connect(user.signer)
      .borrow(usdc.address, amountUSDCToBorrow, RateMode.Variable, 0, user.address);

    await expect(
      pool.connect(user.signer).withdraw(dai.address, parseUnits('500', 18), user.address)
    ).to.be.revertedWith(HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD);
  });

  it('validateHFAndLtv() with HF < 1 for 0 LTV asset (revert expected)', async () => {
    const {
      usdc,
      dai,
      pool,
      oracle,
      poolAdmin,
      configurator,
      helpersContract,
      users: [user, usdcProvider],
    } = testEnv;

    // Supply usdc
    await usdc.connect(usdcProvider.signer)['mint(uint256)'](parseUnits('1000', 6));
    await usdc.connect(usdcProvider.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(usdcProvider.signer)
      .supply(usdc.address, parseUnits('1000', 6), usdcProvider.address, 0);

    // Supply dai
    await dai.connect(user.signer)['mint(uint256)'](parseUnits('1000', 18));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool.connect(user.signer).supply(dai.address, parseUnits('1000', 18), user.address, 0);

    // Borrow usdc
    await pool
      .connect(user.signer)
      .borrow(usdc.address, parseUnits('500', 6), RateMode.Variable, 0, user.address);

    // Drop LTV
    const daiData = await helpersContract.getReserveConfigurationData(dai.address);

    await configurator
      .connect(poolAdmin.signer)
      .configureReserveAsCollateral(
        dai.address,
        0,
        daiData.liquidationThreshold,
        daiData.liquidationBonus
      );

    // Withdraw all my dai
    await expect(
      pool.connect(user.signer).withdraw(dai.address, parseUnits('500', 18), user.address)
    ).to.be.revertedWith(HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD);
  });
});



================================================
FILE: test-suites/variable-debt-token-events.spec.ts
================================================
import {
  evmSnapshot,
  evmRevert,
  advanceTimeAndBlock,
  MintableERC20__factory,
} from '@aave/deploy-v3';
import { expect } from 'chai';
import { ethers } from 'hardhat';
import { BigNumber } from 'ethers';
import { TransactionReceipt } from '@ethersproject/providers';
import { MAX_UINT_AMOUNT } from '../helpers/constants';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { RateMode } from '../helpers/types';
import { MockATokenRepayment__factory, Pool, VariableDebtToken } from '../types';
import { makeSuite, SignerWithAddress, TestEnv } from './helpers/make-suite';
import {
  supply,
  variableBorrow,
  getVariableDebtTokenEvent,
  repayVariableBorrow,
} from './helpers/utils/tokenization-events';

const DEBUG = false;

let balances = {
  balance: {},
};

const log = (str: string) => {
  if (DEBUG) console.log(str);
};

const printBalance = async (name: string, debtToken: VariableDebtToken, userAddress: string) => {
  console.log(
    name,
    'balanceOf',
    await ethers.utils.formatEther(await debtToken.balanceOf(userAddress)),
    'scaledBalance',
    await ethers.utils.formatEther(await debtToken.scaledBalanceOf(userAddress))
  );
};

const increaseSupplyIndex = async (
  pool: Pool,
  depositor: SignerWithAddress,
  collateral: string,
  assetToIncrease: string
) => {
  const collateralToken = MintableERC20__factory.connect(collateral, depositor.signer);
  const borrowingToken = MintableERC20__factory.connect(assetToIncrease, depositor.signer);

  await collateralToken
    .connect(depositor.signer)
    ['mint(address,uint256)'](
      depositor.address,
      await convertToCurrencyDecimals(collateralToken.address, '10000000')
    );
  await collateralToken.connect(depositor.signer).approve(pool.address, MAX_UINT_AMOUNT);
  await pool
    .connect(depositor.signer)
    .deposit(
      collateral,
      await convertToCurrencyDecimals(collateral, '100000'),
      depositor.address,
      '0'
    );

  const { aTokenAddress } = await pool.getReserveData(assetToIncrease);
  const availableLiquidity = await borrowingToken.balanceOf(aTokenAddress);
  await pool
    .connect(depositor.signer)
    .borrow(
      assetToIncrease,
      availableLiquidity.percentMul('20'),
      RateMode.Variable,
      0,
      depositor.address
    );

  await advanceTimeAndBlock(10000000000);
};

const updateBalances = (
  balances: any,
  variableDebtToken: VariableDebtToken,
  receipt: TransactionReceipt
) => {
  let events = getVariableDebtTokenEvent(variableDebtToken, receipt, 'Mint');
  for (const ev of events) {
    balances.balance[ev.onBehalfOf] = balances.balance[ev.onBehalfOf]?.add(ev.value);
  }
  events = getVariableDebtTokenEvent(variableDebtToken, receipt, 'Burn');
  for (const ev of events) {
    balances.balance[ev.from] = balances.balance[ev.from]?.sub(ev.value.add(ev.balanceIncrease));
    balances.balance[ev.from] = balances.balance[ev.from]?.add(ev.balanceIncrease);
  }
};

makeSuite('VariableDebtToken: Events', (testEnv: TestEnv) => {
  let alice, bob, depositor, depositor2;

  let snapId;

  before(async () => {
    const { users, pool, dai, weth, configurator, aDai, deployer } = testEnv;
    [alice, bob, depositor, depositor2] = users;

    const amountToMint = await convertToCurrencyDecimals(dai.address, '10000000');
    const usersToInit = [alice, bob, depositor, depositor2];
    for (const user of usersToInit) {
      await dai.connect(user.signer)['mint(uint256)'](amountToMint);
      await weth.connect(user.signer)['mint(address,uint256)'](user.address, amountToMint);
      await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
      await weth.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    }

    // Depositors
    await pool.connect(depositor.signer).supply(weth.address, amountToMint, depositor.address, '0');
    await pool.connect(depositor.signer).supply(dai.address, amountToMint, depositor.address, '0');
    await pool
      .connect(depositor2.signer)
      .supply(weth.address, amountToMint, depositor2.address, '0');
    await pool
      .connect(depositor2.signer)
      .supply(dai.address, amountToMint, depositor2.address, '0');

    const aTokenRepayImpl = await new MockATokenRepayment__factory(deployer.signer).deploy(
      pool.address
    );

    await configurator.updateAToken({
      asset: dai.address,
      treasury: await aDai.RESERVE_TREASURY_ADDRESS(),
      incentivesController: await aDai.getIncentivesController(),
      name: await aDai.name(),
      symbol: await aDai.symbol(),
      implementation: aTokenRepayImpl.address,
      params: '0x',
    });
  });

  beforeEach(async () => {
    snapId = await evmSnapshot();

    // Init balances
    balances = {
      balance: {
        [alice.address]: BigNumber.from(0),
        [bob.address]: BigNumber.from(0),
      },
    };
  });

  afterEach(async () => {
    await evmRevert(snapId);
  });

  it('Alice borrows 100 DAI, borrows 50 DAI, repays 20 DAI, repays 10 DAI, borrows 100 DAI, repays 220 DAI (without index change)', async () => {
    await testMultipleBorrowsAndRepays(false);
  });

  it('Alice borrows 100 DAI, borrows 50 DAI, repays 20 DAI, repays 10 DAI, borrows 100 DAI, repays 220 DAI (with index change)', async () => {
    await testMultipleBorrowsAndRepays(true);
  });

  const testMultipleBorrowsAndRepays = async (indexChange: boolean) => {
    const { pool, dai, variableDebtDai, weth } = testEnv;

    let rcpt;
    let aliceBalanceBefore = await variableDebtDai.balanceOf(alice.address);

    log('- Alice supplies 1000 WETH');
    await supply(pool, alice, weth.address, '1000', alice.address, false);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 100 DAI');
    rcpt = await variableBorrow(pool, alice, dai.address, '100', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 50 DAI more');
    rcpt = await variableBorrow(pool, alice, dai.address, '50', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 20 DAI');
    rcpt = await repayVariableBorrow(pool, alice, dai.address, '20', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 10 DAI');
    rcpt = await repayVariableBorrow(pool, alice, dai.address, '10', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 100 DAI more');
    rcpt = await variableBorrow(pool, alice, dai.address, '100', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 220 DAI');
    rcpt = await repayVariableBorrow(pool, alice, dai.address, '220', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (DEBUG) {
      await printBalance('alice', variableDebtDai, alice.address);
    }

    // Check final balances
    rcpt = await variableBorrow(pool, alice, dai.address, '1', alice.address);
    updateBalances(balances, variableDebtDai, rcpt);
    const aliceBalanceAfter = await variableDebtDai.balanceOf(alice.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      2
    );
  };

  it('Alice borrows 100 DAI, Bob borrows 100 DAI, Alice borrows 50 DAI, repays 150 DAI and repays 100 DAI on behalf of Bob, borrows 10 DAI more (without index change)', async () => {
    await testMultipleBorrowsAndRepaysOnBehalf(false);
  });

  it('Alice borrows 100 DAI, Bob borrows 100 DAI, Alice borrows 50 DAI, repays 150 DAI and repays 100 DAI on behalf of Bob, borrows 10 DAI more (with index change)', async () => {
    await testMultipleBorrowsAndRepaysOnBehalf(true);
  });

  const testMultipleBorrowsAndRepaysOnBehalf = async (indexChange: boolean) => {
    const { pool, dai, variableDebtDai, weth } = testEnv;

    let rcpt;
    let aliceBalanceBefore = await variableDebtDai.balanceOf(alice.address);
    let bobBalanceBefore = await variableDebtDai.balanceOf(bob.address);

    log('- Alice supplies 1000 WETH');
    await supply(pool, alice, weth.address, '1000', alice.address, false);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 100 DAI');
    rcpt = await variableBorrow(pool, alice, dai.address, '100', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Bob supplies 1000 WETH');
    await supply(pool, bob, weth.address, '1000', bob.address, false);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Bob borrows 100 DAI');
    rcpt = await variableBorrow(pool, bob, dai.address, '100', bob.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 50 DAI more');
    rcpt = await variableBorrow(pool, alice, dai.address, '50', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 150 DAI');
    rcpt = await repayVariableBorrow(pool, alice, dai.address, '150', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 50 DAI on behalf of Bob');
    rcpt = await repayVariableBorrow(pool, alice, dai.address, '50', bob.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 50 DAI on behalf of Bob');
    rcpt = await repayVariableBorrow(pool, alice, dai.address, '50', bob.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 10 DAI more');
    rcpt = await variableBorrow(pool, alice, dai.address, '10', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    if (DEBUG) {
      await printBalance('alice', variableDebtDai, alice.address);
      await printBalance('bob', variableDebtDai, bob.address);
    }

    // Check final balances
    rcpt = await variableBorrow(pool, alice, dai.address, '1', alice.address);
    updateBalances(balances, variableDebtDai, rcpt);
    const aliceBalanceAfter = await variableDebtDai.balanceOf(alice.address);

    rcpt = await variableBorrow(pool, bob, dai.address, '1', bob.address);
    updateBalances(balances, variableDebtDai, rcpt);
    const bobBalanceAfter = await variableDebtDai.balanceOf(bob.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      5
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 5);
  };

  it('Alice borrows 100 DAI, Bob borrows 100 DAI on behalf of Alice, Bob borrows 50 DAI, Alice borrows 50 DAI, repays 250 DAI and repays 50 DAI on behalf of Bob, borrows 10 DAI more (without index change)', async () => {
    await testMultipleBorrowsOnBehalfAndRepaysOnBehalf(false);
  });

  it('Alice borrows 100 DAI, Bob borrows 100 DAI on behalf of Alice, Bob borrows 50 DAI, Alice borrows 50 DAI, repays 250 DAI and repays 50 DAI on behalf of Bob, borrows 10 DAI more (with index change)', async () => {
    await testMultipleBorrowsOnBehalfAndRepaysOnBehalf(true);
  });

  const testMultipleBorrowsOnBehalfAndRepaysOnBehalf = async (indexChange: boolean) => {
    const { pool, dai, variableDebtDai, weth } = testEnv;

    let rcpt;
    let aliceBalanceBefore = await variableDebtDai.balanceOf(alice.address);
    let bobBalanceBefore = await variableDebtDai.balanceOf(bob.address);

    log('- Alice supplies 1000 WETH');
    await supply(pool, alice, weth.address, '1000', alice.address, false);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 100 DAI');
    rcpt = await variableBorrow(pool, alice, dai.address, '100', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Bob borrows 100 DAI on behalf of Alice');
    await variableDebtDai.connect(alice.signer).approveDelegation(bob.address, MAX_UINT_AMOUNT);
    rcpt = await variableBorrow(pool, bob, dai.address, '100', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Bob supplies 1000 WETH');
    await supply(pool, bob, weth.address, '1000', bob.address, false);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Bob borrows 50 DAI');
    rcpt = await variableBorrow(pool, bob, dai.address, '50', bob.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 50 DAI');
    rcpt = await variableBorrow(pool, alice, dai.address, '50', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 250 DAI');
    rcpt = await repayVariableBorrow(pool, alice, dai.address, '250', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice repays 50 DAI on behalf of Bob');
    rcpt = await repayVariableBorrow(pool, alice, dai.address, '50', bob.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    log('- Alice borrows 10 DAI more');
    rcpt = await variableBorrow(pool, alice, dai.address, '10', alice.address, DEBUG);
    updateBalances(balances, variableDebtDai, rcpt);

    if (indexChange) {
      log('- Increase index due to great borrow of DAI');
      await increaseSupplyIndex(pool, depositor, weth.address, dai.address);
    }

    if (DEBUG) {
      await printBalance('alice', variableDebtDai, alice.address);
      await printBalance('bob', variableDebtDai, bob.address);
    }

    // Check final balances
    rcpt = await variableBorrow(pool, alice, dai.address, '1', alice.address);
    updateBalances(balances, variableDebtDai, rcpt);
    const aliceBalanceAfter = await variableDebtDai.balanceOf(alice.address);

    rcpt = await variableBorrow(pool, bob, dai.address, '1', bob.address);
    updateBalances(balances, variableDebtDai, rcpt);
    const bobBalanceAfter = await variableDebtDai.balanceOf(bob.address);

    expect(aliceBalanceAfter).to.be.closeTo(
      aliceBalanceBefore.add(balances.balance[alice.address]),
      5
    );
    expect(bobBalanceAfter).to.be.closeTo(bobBalanceBefore.add(balances.balance[bob.address]), 5);
  };
});



================================================
FILE: test-suites/variable-debt-token.spec.ts
================================================
import { expect } from 'chai';
import { utils } from 'ethers';
import { impersonateAccountsHardhat, setAutomine, setAutomineEvm } from '../helpers/misc-utils';
import { MAX_UINT_AMOUNT, ZERO_ADDRESS } from '../helpers/constants';
import { ProtocolErrors, RateMode } from '../helpers/types';
import { makeSuite, TestEnv } from './helpers/make-suite';
import { topUpNonPayableWithEther } from './helpers/utils/funds';
import { convertToCurrencyDecimals } from '../helpers/contracts-helpers';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import {
  evmRevert,
  evmSnapshot,
  getVariableDebtToken,
  increaseTime,
  waitForTx,
} from '@aave/deploy-v3';
import { VariableDebtToken__factory } from '../types';
import './helpers/utils/wadraymath';
import { getVariableDebtTokenEvent } from './helpers/utils/tokenization-events';

declare var hre: HardhatRuntimeEnvironment;

makeSuite('VariableDebtToken', (testEnv: TestEnv) => {
  const { CALLER_MUST_BE_POOL, INVALID_MINT_AMOUNT, INVALID_BURN_AMOUNT, CALLER_NOT_POOL_ADMIN } =
    ProtocolErrors;

  let snap: string;

  beforeEach(async () => {
    snap = await evmSnapshot();
  });
  afterEach(async () => {
    await evmRevert(snap);
  });

  it('Check initialization', async () => {
    const { pool, weth, dai, helpersContract, users } = testEnv;
    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;

    const variableDebtContract = await VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      users[0].signer
    );

    expect(await variableDebtContract.UNDERLYING_ASSET_ADDRESS()).to.be.eq(dai.address);
    expect(await variableDebtContract.POOL()).to.be.eq(pool.address);
    expect(await variableDebtContract.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);

    const scaledUserBalanceAndSupplyUser0Before =
      await variableDebtContract.getScaledUserBalanceAndSupply(users[0].address);
    expect(scaledUserBalanceAndSupplyUser0Before[0]).to.be.eq(0);
    expect(scaledUserBalanceAndSupplyUser0Before[1]).to.be.eq(0);

    // Need to create some debt to do this good
    await dai
      .connect(users[0].signer)
      ['mint(uint256)'](await convertToCurrencyDecimals(dai.address, '1000'));
    await dai.connect(users[0].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[0].signer)
      .deposit(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '1000'),
        users[0].address,
        0
      );
    await weth
      .connect(users[1].signer)
      ['mint(address,uint256)'](users[1].address, utils.parseEther('10'));
    await weth.connect(users[1].signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(users[1].signer)
      .deposit(weth.address, utils.parseEther('10'), users[1].address, 0);
    await pool
      .connect(users[1].signer)
      .borrow(
        dai.address,
        await convertToCurrencyDecimals(dai.address, '200'),
        RateMode.Variable,
        0,
        users[1].address
      );

    const scaledUserBalanceAndSupplyUser0After =
      await variableDebtContract.getScaledUserBalanceAndSupply(users[0].address);
    expect(scaledUserBalanceAndSupplyUser0After[0]).to.be.eq(0);
    expect(scaledUserBalanceAndSupplyUser0After[1]).to.be.gt(0);

    const scaledUserBalanceAndSupplyUser1After =
      await variableDebtContract.getScaledUserBalanceAndSupply(users[1].address);
    expect(scaledUserBalanceAndSupplyUser1After[1]).to.be.gt(0);
    expect(scaledUserBalanceAndSupplyUser1After[1]).to.be.gt(0);

    expect(scaledUserBalanceAndSupplyUser0After[1]).to.be.eq(
      scaledUserBalanceAndSupplyUser1After[1]
    );
  });

  it('Tries to mint not being the Pool (revert expected)', async () => {
    const { deployer, dai, helpersContract } = testEnv;

    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;

    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      deployer.signer
    );

    await expect(
      variableDebtContract.mint(deployer.address, deployer.address, '1', '1')
    ).to.be.revertedWith(CALLER_MUST_BE_POOL);
  });

  it('Tries to burn not being the Pool (revert expected)', async () => {
    const { deployer, dai, helpersContract } = testEnv;

    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;

    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      deployer.signer
    );

    await expect(variableDebtContract.burn(deployer.address, '1', '1')).to.be.revertedWith(
      CALLER_MUST_BE_POOL
    );
  });

  it('Tries to mint with amountScaled == 0 (revert expected)', async () => {
    const { deployer, pool, dai, helpersContract, users } = testEnv;

    // Impersonate the Pool
    await topUpNonPayableWithEther(deployer.signer, [pool.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([pool.address]);
    const poolSigner = await hre.ethers.getSigner(pool.address);

    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;

    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      deployer.signer
    );

    await expect(
      variableDebtContract
        .connect(poolSigner)
        .mint(users[0].address, users[0].address, 0, utils.parseUnits('1', 27))
    ).to.be.revertedWith(INVALID_MINT_AMOUNT);
  });

  it('Tries to burn with amountScaled == 0 (revert expected)', async () => {
    const { deployer, pool, dai, helpersContract, users } = testEnv;

    // Impersonate the Pool
    await topUpNonPayableWithEther(deployer.signer, [pool.address], utils.parseEther('1'));
    await impersonateAccountsHardhat([pool.address]);
    const poolSigner = await hre.ethers.getSigner(pool.address);

    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;

    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      deployer.signer
    );

    await expect(
      variableDebtContract.connect(poolSigner).burn(users[0].address, 0, utils.parseUnits('1', 27))
    ).to.be.revertedWith(INVALID_BURN_AMOUNT);
  });

  it('Tries to transfer debt tokens (revert expected)', async () => {
    const { users, dai, helpersContract } = testEnv;
    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;
    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      users[0].signer
    );

    await expect(
      variableDebtContract.connect(users[0].signer).transfer(users[1].address, 500)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
  });

  it('Tries to approve debt tokens (revert expected)', async () => {
    const { users, dai, helpersContract } = testEnv;
    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;
    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      users[0].signer
    );

    await expect(
      variableDebtContract.connect(users[0].signer).approve(users[1].address, 500)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
    await expect(
      variableDebtContract.allowance(users[0].address, users[1].address)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
  });

  it('Tries to increaseAllowance (revert expected)', async () => {
    const { users, dai, helpersContract } = testEnv;
    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;
    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      users[0].signer
    );

    await expect(
      variableDebtContract.connect(users[0].signer).increaseAllowance(users[1].address, 500)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
  });

  it('Tries to decreaseAllowance (revert expected)', async () => {
    const { users, dai, helpersContract } = testEnv;
    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;
    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      users[0].signer
    );

    await expect(
      variableDebtContract.connect(users[0].signer).decreaseAllowance(users[1].address, 500)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
  });

  it('Tries to transferFrom debt tokens (revert expected)', async () => {
    const { users, dai, helpersContract } = testEnv;
    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;
    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      users[0].signer
    );

    await expect(
      variableDebtContract
        .connect(users[0].signer)
        .transferFrom(users[0].address, users[1].address, 500)
    ).to.be.revertedWith(ProtocolErrors.OPERATION_NOT_SUPPORTED);
  });

  it('setIncentivesController() ', async () => {
    const { dai, helpersContract, poolAdmin, aclManager, deployer } = testEnv;
    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;
    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      deployer.signer
    );

    expect(await aclManager.connect(deployer.signer).addPoolAdmin(poolAdmin.address));

    expect(await variableDebtContract.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);
    expect(
      await variableDebtContract.connect(poolAdmin.signer).setIncentivesController(ZERO_ADDRESS)
    );
    expect(await variableDebtContract.getIncentivesController()).to.be.eq(ZERO_ADDRESS);
  });

  it('setIncentivesController() from not pool admin (revert expected)', async () => {
    const {
      dai,
      helpersContract,
      users: [user],
    } = testEnv;
    const daiVariableDebtTokenAddress = (
      await helpersContract.getReserveTokensAddresses(dai.address)
    ).variableDebtTokenAddress;
    const variableDebtContract = VariableDebtToken__factory.connect(
      daiVariableDebtTokenAddress,
      user.signer
    );

    expect(await variableDebtContract.getIncentivesController()).to.not.be.eq(ZERO_ADDRESS);

    await expect(
      variableDebtContract.connect(user.signer).setIncentivesController(ZERO_ADDRESS)
    ).to.be.revertedWith(CALLER_NOT_POOL_ADMIN);
  });

  it('Check Mint and Transfer events when borrowing on behalf', async () => {
    const {
      pool,
      weth,
      dai,
      users: [user1, user2, user3],
    } = testEnv;

    // Add liquidity
    await dai.connect(user3.signer)['mint(uint256)'](utils.parseUnits('1000', 18));
    await dai.connect(user3.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user3.signer)
      .supply(dai.address, utils.parseUnits('1000', 18), user3.address, 0);

    // User1 supplies 10 WETH
    await weth
      .connect(user1.signer)
      ['mint(address,uint256)'](user1.address, utils.parseUnits('10', 18));
    await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user1.signer)
      .supply(weth.address, utils.parseUnits('10', 18), user1.address, 0);

    const daiData = await pool.getReserveData(dai.address);
    const variableDebtToken = VariableDebtToken__factory.connect(
      daiData.variableDebtTokenAddress,
      user1.signer
    );
    const beforeDebtBalanceUser2 = await variableDebtToken.balanceOf(user2.address);

    // User1 borrows 100 DAI
    const borrowAmount = utils.parseUnits('100', 18);
    expect(
      await pool
        .connect(user1.signer)
        .borrow(dai.address, borrowAmount, RateMode.Variable, 0, user1.address)
    );

    // User1 approves user2 to borrow 1000 DAI
    expect(
      await variableDebtToken
        .connect(user1.signer)
        .approveDelegation(user2.address, utils.parseUnits('1000', 18))
    );

    // Increase time so interests accrue
    await increaseTime(24 * 3600);

    const previousIndexUser1Before = await variableDebtToken.getPreviousIndex(user1.address);
    const previousIndexUser2Before = await variableDebtToken.getPreviousIndex(user2.address);

    // User2 borrows 100 DAI on behalf of user1
    const borrowOnBehalfAmount = utils.parseUnits('100', 18);
    const tx = await waitForTx(
      await pool
        .connect(user2.signer)
        .borrow(dai.address, borrowOnBehalfAmount, RateMode.Variable, 0, user1.address)
    );

    const previousIndexUser1After = await variableDebtToken.getPreviousIndex(user1.address);
    const previousIndexUser2After = await variableDebtToken.getPreviousIndex(user2.address);

    // User2 index should be the same
    expect(previousIndexUser1Before).to.be.not.eq(previousIndexUser1After);
    expect(previousIndexUser2Before).to.be.eq(previousIndexUser2After);

    const afterDebtBalanceUser1 = await variableDebtToken.balanceOf(user1.address);

    const interest = afterDebtBalanceUser1.sub(borrowAmount).sub(borrowOnBehalfAmount);

    const parsedTransferEvents = getVariableDebtTokenEvent(variableDebtToken, tx, 'Transfer');
    const transferAmount = parsedTransferEvents[0].value;
    expect(transferAmount).to.be.closeTo(borrowOnBehalfAmount.add(interest), 2);

    const parsedMintEvents = getVariableDebtTokenEvent(variableDebtToken, tx, 'Mint');
    expect(parsedMintEvents[0].value).to.be.closeTo(borrowOnBehalfAmount.add(interest), 2);
    expect(parsedMintEvents[0].balanceIncrease).to.be.closeTo(interest, 2);
  });

  it('User borrows and repays in same block with zero fees', async () => {
    const { pool, users, dai, aDai, usdc, variableDebtDai } = testEnv;
    const user = users[0];

    // We need some debt.
    await usdc.connect(user.signer)['mint(uint256)'](utils.parseEther('2000'));
    await usdc.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user.signer)
      .deposit(usdc.address, utils.parseEther('2000'), user.address, 0);
    await dai.connect(user.signer)['mint(uint256)'](utils.parseEther('2000'));
    await dai.connect(user.signer).transfer(aDai.address, utils.parseEther('2000'));
    await dai.connect(user.signer).approve(pool.address, MAX_UINT_AMOUNT);

    const userDataBefore = await pool.getUserAccountData(user.address);
    expect(await variableDebtDai.balanceOf(user.address)).to.be.eq(0);

    // Turn off automining - pretty sure that coverage is getting messed up here.
    await setAutomine(false);
    // Borrow 500 dai
    await pool
      .connect(user.signer)
      .borrow(dai.address, utils.parseEther('500'), RateMode.Variable, 0, user.address);

    // Turn on automining, but not mine a new block until next tx
    await setAutomineEvm(true);
    expect(
      await pool
        .connect(user.signer)
        .repay(dai.address, utils.parseEther('500'), RateMode.Variable, user.address)
    );

    expect(await variableDebtDai.balanceOf(user.address)).to.be.eq(0);
    expect(await dai.balanceOf(user.address)).to.be.eq(0);
    expect(await dai.balanceOf(aDai.address)).to.be.eq(utils.parseEther('2000'));

    const userDataAfter = await pool.getUserAccountData(user.address);
    expect(userDataBefore.totalCollateralBase).to.be.lte(userDataAfter.totalCollateralBase);
    expect(userDataBefore.healthFactor).to.be.lte(userDataAfter.healthFactor);
    expect(userDataBefore.totalDebtBase).to.be.eq(userDataAfter.totalDebtBase);
  });

  it('User borrows and repays in same block using credit delegation with zero fees', async () => {
    const {
      pool,
      dai,
      aDai,
      weth,
      users: [user1, user2, user3],
    } = testEnv;

    // Add liquidity
    await dai.connect(user3.signer)['mint(uint256)'](utils.parseUnits('1000', 18));
    await dai.connect(user3.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user3.signer)
      .supply(dai.address, utils.parseUnits('1000', 18), user3.address, 0);

    // User1 supplies 10 WETH
    await dai.connect(user1.signer)['mint(uint256)'](utils.parseUnits('100', 18));
    await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await weth
      .connect(user1.signer)
      ['mint(address,uint256)'](user1.address, utils.parseUnits('10', 18));
    await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user1.signer)
      .supply(weth.address, utils.parseUnits('10', 18), user1.address, 0);

    const daiData = await pool.getReserveData(dai.address);
    const variableDebtToken = await getVariableDebtToken(daiData.variableDebtTokenAddress);

    // User1 approves User2 to borrow 1000 DAI
    expect(
      await variableDebtToken
        .connect(user1.signer)
        .approveDelegation(user2.address, utils.parseUnits('1000', 18))
    );

    const userDataBefore = await pool.getUserAccountData(user1.address);

    // Turn off automining to simulate actions in same block
    await setAutomine(false);

    // User2 borrows 2 DAI on behalf of User1
    await pool
      .connect(user2.signer)
      .borrow(dai.address, utils.parseEther('2'), RateMode.Variable, 0, user1.address);

    // Turn on automining, but not mine a new block until next tx
    await setAutomineEvm(true);

    expect(
      await pool
        .connect(user1.signer)
        .repay(dai.address, utils.parseEther('2'), RateMode.Variable, user1.address)
    );

    expect(await variableDebtToken.balanceOf(user1.address)).to.be.eq(0);
    expect(await dai.balanceOf(user2.address)).to.be.eq(utils.parseEther('2'));
    expect(await dai.balanceOf(aDai.address)).to.be.eq(utils.parseEther('1000'));

    const userDataAfter = await pool.getUserAccountData(user1.address);
    expect(userDataBefore.totalCollateralBase).to.be.lte(userDataAfter.totalCollateralBase);
    expect(userDataBefore.healthFactor).to.be.lte(userDataAfter.healthFactor);
    expect(userDataBefore.totalDebtBase).to.be.eq(userDataAfter.totalDebtBase);
  });

  it('User borrows and repays in same block using credit delegation with zero fees', async () => {
    const {
      pool,
      dai,
      aDai,
      weth,
      users: [user1, user2, user3],
    } = testEnv;

    // Add liquidity
    await dai.connect(user3.signer)['mint(uint256)'](utils.parseUnits('1000', 18));
    await dai.connect(user3.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user3.signer)
      .supply(dai.address, utils.parseUnits('1000', 18), user3.address, 0);

    // User1 supplies 10 WETH
    await dai.connect(user1.signer)['mint(uint256)'](utils.parseUnits('100', 18));
    await dai.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await weth
      .connect(user1.signer)
      ['mint(address,uint256)'](user1.address, utils.parseUnits('10', 18));
    await weth.connect(user1.signer).approve(pool.address, MAX_UINT_AMOUNT);
    await pool
      .connect(user1.signer)
      .supply(weth.address, utils.parseUnits('10', 18), user1.address, 0);

    const daiData = await pool.getReserveData(dai.address);
    const variableDebtToken = await getVariableDebtToken(daiData.variableDebtTokenAddress);

    // User1 approves User2 to borrow 1000 DAI
    expect(
      await variableDebtToken
        .connect(user1.signer)
        .approveDelegation(user2.address, utils.parseUnits('1000', 18))
    );

    const userDataBefore = await pool.getUserAccountData(user1.address);

    // Turn off automining to simulate actions in same block
    await setAutomine(false);

    // User2 borrows 2 DAI on behalf of User1
    await pool
      .connect(user2.signer)
      .borrow(dai.address, utils.parseEther('2'), RateMode.Variable, 0, user1.address);

    // Turn on automining, but not mine a new block until next tx
    await setAutomineEvm(true);

    expect(
      await pool
        .connect(user1.signer)
        .repay(dai.address, utils.parseEther('2'), RateMode.Variable, user1.address)
    );

    expect(await variableDebtToken.balanceOf(user1.address)).to.be.eq(0);
    expect(await dai.balanceOf(user2.address)).to.be.eq(utils.parseEther('2'));
    expect(await dai.balanceOf(aDai.address)).to.be.eq(utils.parseEther('1000'));

    const userDataAfter = await pool.getUserAccountData(user1.address);
    expect(userDataBefore.totalCollateralBase).to.be.lte(userDataAfter.totalCollateralBase);
    expect(userDataBefore.healthFactor).to.be.lte(userDataAfter.healthFactor);
    expect(userDataBefore.totalDebtBase).to.be.eq(userDataAfter.totalDebtBase);
  });
});



================================================
FILE: test-suites/wadraymath.spec.ts
================================================
import { expect } from 'chai';
import { BigNumber } from '@ethersproject/bignumber';
import { MAX_UINT_AMOUNT, RAY, WAD, HALF_RAY, HALF_WAD } from '../helpers/constants';
import { WadRayMathWrapper, WadRayMathWrapper__factory } from '../types';
import { getFirstSigner } from '@aave/deploy-v3/dist/helpers/utilities/signer';
import { makeSuite } from './helpers/make-suite';
import './helpers/utils/wadraymath';

makeSuite('WadRayMath', () => {
  let wrapper: WadRayMathWrapper;

  before('setup', async () => {
    const factory = new WadRayMathWrapper__factory(await getFirstSigner());
    wrapper = await ((await factory.deploy()) as WadRayMathWrapper).deployed();
  });

  it('Plain getters', async () => {
    expect((await wrapper.wad()).toString()).to.be.eq(WAD);
    expect((await wrapper.halfWad()).toString()).to.be.eq(HALF_WAD);
    expect((await wrapper.ray()).toString()).to.be.eq(RAY);
    expect((await wrapper.halfRay()).toString()).to.be.eq(HALF_RAY);
  });

  it('wadMul()', async () => {
    const a = BigNumber.from('134534543232342353231234');
    const b = BigNumber.from('13265462389132757665657');

    expect(await wrapper.wadMul(a, b)).to.be.eq(a.wadMul(b));
    expect(await wrapper.wadMul(0, b)).to.be.eq('0');
    expect(await wrapper.wadMul(a, 0)).to.be.eq('0');

    const tooLargeA = BigNumber.from(MAX_UINT_AMOUNT).sub(HALF_WAD).div(b).add(1);
    await expect(wrapper.wadMul(tooLargeA, b)).to.be.reverted;
  });

  it('wadDiv()', async () => {
    const a = BigNumber.from('134534543232342353231234');
    const b = BigNumber.from('13265462389132757665657');

    expect(await wrapper.wadDiv(a, b)).to.be.eq(a.wadDiv(b));

    const halfB = b.div(2);
    const tooLargeA = BigNumber.from(MAX_UINT_AMOUNT).sub(halfB).div(WAD).add(1);

    await expect(wrapper.wadDiv(tooLargeA, b)).to.be.reverted;

    await expect(wrapper.wadDiv(a, 0)).to.be.reverted;
  });

  it('rayMul()', async () => {
    const a = BigNumber.from('134534543232342353231234');
    const b = BigNumber.from('13265462389132757665657');

    expect(await wrapper.rayMul(a, b)).to.be.eq(a.rayMul(b));
    expect(await wrapper.rayMul(0, b)).to.be.eq('0');
    expect(await wrapper.rayMul(a, 0)).to.be.eq('0');

    const tooLargeA = BigNumber.from(MAX_UINT_AMOUNT).sub(HALF_RAY).div(b).add(1);
    await expect(wrapper.rayMul(tooLargeA, b)).to.be.reverted;
  });

  it('rayDiv()', async () => {
    const a = BigNumber.from('134534543232342353231234');
    const b = BigNumber.from('13265462389132757665657');

    expect(await wrapper.rayDiv(a, b)).to.be.eq(a.rayDiv(b));

    const halfB = b.div(2);
    const tooLargeA = BigNumber.from(MAX_UINT_AMOUNT).sub(halfB).div(RAY).add(1);

    await expect(wrapper.rayDiv(tooLargeA, b)).to.be.reverted;
    await expect(wrapper.rayDiv(a, 0)).to.be.reverted;
  });

  it('rayToWad()', async () => {
    const half = BigNumber.from(10).pow(9).div(2);

    const a = BigNumber.from('10').pow(27);
    expect(await wrapper.rayToWad(a)).to.be.eq(a.rayToWad());

    const roundDown = BigNumber.from('10').pow(27).add(half.sub(1));
    expect(await wrapper.rayToWad(roundDown)).to.be.eq(roundDown.rayToWad());

    const roundUp = BigNumber.from('10').pow(27).add(half);
    expect(await wrapper.rayToWad(roundUp)).to.be.eq(roundUp.rayToWad());

    const tooLarge = BigNumber.from(MAX_UINT_AMOUNT).sub(half).add(1);
    expect(await wrapper.rayToWad(tooLarge)).to.be.eq(tooLarge.rayToWad());
  });

  it('wadToRay()', async () => {
    const a = BigNumber.from('10').pow(18);
    expect(await wrapper.wadToRay(a)).to.be.eq(a.wadToRay());

    const ratio = BigNumber.from(10).pow(9);
    const tooLarge = BigNumber.from(MAX_UINT_AMOUNT).div(ratio).add(1);
    await expect(wrapper.wadToRay(tooLarge)).to.be.reverted;
  });
});



================================================
FILE: test-suites/helpers/actions.ts
================================================
import {
  calcExpectedReserveDataAfterBorrow,
  calcExpectedReserveDataAfterDeposit,
  calcExpectedReserveDataAfterRepay,
  calcExpectedReserveDataAfterStableRateRebalance,
  calcExpectedReserveDataAfterSwapRateMode,
  calcExpectedReserveDataAfterWithdraw,
  calcExpectedUserDataAfterBorrow,
  calcExpectedUserDataAfterDeposit,
  calcExpectedUserDataAfterRepay,
  calcExpectedUserDataAfterSetUseAsCollateral,
  calcExpectedUserDataAfterStableRateRebalance,
  calcExpectedUserDataAfterSwapRateMode,
  calcExpectedUserDataAfterWithdraw,
} from './utils/calculations';
import { getReserveData, getUserData } from './utils/helpers';
import { buildPermitParams, getSignatureFromTypedData } from '../../helpers/contracts-helpers';

import { convertToCurrencyDecimals } from '../../helpers/contracts-helpers';
import {
  getAToken,
  getMintableERC20,
  getStableDebtToken,
  getVariableDebtToken,
  getTestnetReserveAddressFromSymbol,
} from '@aave/deploy-v3/dist/helpers/contract-getters';
import { MAX_UINT_AMOUNT, ONE_YEAR } from '../../helpers/constants';
import { SignerWithAddress, TestEnv } from './make-suite';
import chai from 'chai';
import { ReserveData, UserReserveData } from './utils/interfaces';
import { ContractReceipt, Wallet } from 'ethers';
import { AToken } from '../../types/AToken';
import { RateMode, tEthereumAddress } from '../../helpers/types';
import { MintableERC20__factory } from '../../types';
import { waitForTx, advanceTimeAndBlock } from '@aave/deploy-v3';
import { getChainId } from 'hardhat';
import { timeLatest } from '../../helpers/misc-utils';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { BigNumber } from '@ethersproject/bignumber';

declare var hre: HardhatRuntimeEnvironment;

const { expect } = chai;

const almostEqualOrEqual = function (
  this: any,
  expected: ReserveData | UserReserveData,
  actual: ReserveData | UserReserveData
) {
  const keys = Object.keys(actual);

  keys.forEach((key) => {
    if (
      key === 'lastUpdateTimestamp' ||
      key === 'marketStableRate' ||
      key === 'symbol' ||
      key === 'aTokenAddress' ||
      key === 'decimals' ||
      key === 'totalStableDebtLastUpdated'
    ) {
      // skipping consistency check on accessory data
      return;
    }

    this.assert(actual[key] != undefined, `Property ${key} is undefined in the actual data`);
    expect(expected[key] != undefined, `Property ${key} is undefined in the expected data`);

    if (expected[key] == null || actual[key] == null) {
      console.log('Found a undefined value for Key ', key, ' value ', expected[key], actual[key]);
    }

    if (actual[key] instanceof BigNumber) {
      const actualValue = <BigNumber>actual[key];
      const expectedValue = <BigNumber>expected[key];

      this.assert(
        actualValue.eq(expectedValue) ||
          actualValue.add(1).eq(expectedValue) ||
          actualValue.eq(expectedValue.add(1)) ||
          actualValue.add(2).eq(expectedValue) ||
          actualValue.eq(expectedValue.add(2)) ||
          actualValue.add(3).eq(expectedValue) ||
          actualValue.eq(expectedValue.add(3)),
        `expected #{act} to be almost equal or equal #{exp} for property ${key}`,
        `expected #{act} to be almost equal or equal #{exp} for property ${key}`,
        expectedValue.toString(),
        actualValue.toString()
      );
    } else {
      this.assert(
        actual[key] !== null &&
          expected[key] !== null &&
          actual[key].toString() === expected[key].toString(),
        `expected #{act} to be equal #{exp} for property ${key}`,
        `expected #{act} to be equal #{exp} for property ${key}`,
        expected[key],
        actual[key]
      );
    }
  });
};

chai.use(function (chai: any, utils: any) {
  chai.Assertion.overwriteMethod('almostEqualOrEqual', function (original: any) {
    return function (this: any, expected: ReserveData | UserReserveData) {
      const actual = (expected as ReserveData)
        ? <ReserveData>this._obj
        : <UserReserveData>this._obj;

      almostEqualOrEqual.apply(this, [expected, actual]);
    };
  });
});

interface ActionsConfig {
  skipIntegrityCheck: boolean;
}

export const configuration: ActionsConfig = <ActionsConfig>{};

export const mint = async (reserveSymbol: string, amount: string, user: SignerWithAddress) => {
  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);

  const token = await getMintableERC20(reserve);

  await waitForTx(
    await token
      .connect(user.signer)
      ['mint(address,uint256)'](user.address, await convertToCurrencyDecimals(reserve, amount))
  );
};

export const approve = async (reserveSymbol: string, user: SignerWithAddress, testEnv: TestEnv) => {
  const { pool } = testEnv;
  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);

  const token = await getMintableERC20(reserve);

  await waitForTx(
    await token.connect(user.signer).approve(pool.address, '100000000000000000000000000000')
  );
};

export const deposit = async (
  reserveSymbol: string,
  amount: string,
  sender: SignerWithAddress,
  onBehalfOf: tEthereumAddress,
  sendValue: string,
  expectedResult: string,
  testEnv: TestEnv,
  revertMessage?: string
) => {
  const { pool } = testEnv;

  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);

  const amountToDeposit = await convertToCurrencyDecimals(reserve, amount);

  const txOptions: any = {};

  const { reserveData: reserveDataBefore, userData: userDataBefore } = await getContractsData(
    reserve,
    onBehalfOf,
    testEnv,
    sender.address
  );

  if (sendValue) {
    txOptions.value = await convertToCurrencyDecimals(reserve, sendValue);
  }

  if (expectedResult === 'success') {
    const txResult = await waitForTx(
      await pool
        .connect(sender.signer)
        .deposit(reserve, amountToDeposit, onBehalfOf, '0', txOptions)
    );

    const {
      reserveData: reserveDataAfter,
      userData: userDataAfter,
      timestamp,
    } = await getContractsData(reserve, onBehalfOf, testEnv, sender.address);

    const { txCost, txTimestamp } = await getTxCostAndTimestamp(txResult);

    const expectedReserveData = calcExpectedReserveDataAfterDeposit(
      amountToDeposit.toString(),
      reserveDataBefore,
      txTimestamp
    );

    const expectedUserReserveData = calcExpectedUserDataAfterDeposit(
      amountToDeposit.toString(),
      reserveDataBefore,
      expectedReserveData,
      userDataBefore,
      txTimestamp,
      timestamp,
      txCost
    );

    expectEqual(reserveDataAfter, expectedReserveData);
    expectEqual(userDataAfter, expectedUserReserveData);

    // truffleAssert.eventEmitted(txResult, "Deposit", (ev: any) => {
    //   const {_reserve, _user, _amount} = ev;
    //   return (
    //     _reserve === reserve &&
    //     _user === user &&
    //     new BigNumber(_amount).isEqualTo(new BigNumber(amountToDeposit))
    //   );
    // });
  } else if (expectedResult === 'revert') {
    await expect(
      pool.connect(sender.signer).deposit(reserve, amountToDeposit, onBehalfOf, '0', txOptions),
      revertMessage
    ).to.be.reverted;
  }
};

export const withdraw = async (
  reserveSymbol: string,
  amount: string,
  user: SignerWithAddress,
  expectedResult: string,
  testEnv: TestEnv,
  revertMessage?: string
) => {
  const { pool } = testEnv;

  const {
    aTokenInstance,
    reserve,
    userData: userDataBefore,
    reserveData: reserveDataBefore,
  } = await getDataBeforeAction(reserveSymbol, user.address, testEnv);

  let amountToWithdraw = '0';

  if (amount !== '-1') {
    amountToWithdraw = (await convertToCurrencyDecimals(reserve, amount)).toString();
  } else {
    amountToWithdraw = MAX_UINT_AMOUNT;
  }

  if (expectedResult === 'success') {
    const txResult = await waitForTx(
      await pool.connect(user.signer).withdraw(reserve, amountToWithdraw, user.address)
    );

    const {
      reserveData: reserveDataAfter,
      userData: userDataAfter,
      timestamp,
    } = await getContractsData(reserve, user.address, testEnv);

    const { txCost, txTimestamp } = await getTxCostAndTimestamp(txResult);

    const expectedReserveData = calcExpectedReserveDataAfterWithdraw(
      amountToWithdraw,
      reserveDataBefore,
      userDataBefore,
      txTimestamp
    );

    const expectedUserData = calcExpectedUserDataAfterWithdraw(
      amountToWithdraw,
      reserveDataBefore,
      expectedReserveData,
      userDataBefore,
      txTimestamp,
      timestamp,
      txCost
    );

    expectEqual(reserveDataAfter, expectedReserveData);
    expectEqual(userDataAfter, expectedUserData);

    // truffleAssert.eventEmitted(txResult, "Redeem", (ev: any) => {
    //   const {_from, _value} = ev;
    //   return (
    //     _from === user && new BigNumber(_value).isEqualTo(actualAmountRedeemed)
    //   );
    // });
  } else if (expectedResult === 'revert') {
    await expect(
      pool.connect(user.signer).withdraw(reserve, amountToWithdraw, user.address),
      revertMessage
    ).to.be.reverted;
  }
};

export const delegateBorrowAllowance = async (
  reserve: string,
  amount: string,
  interestRateMode: string,
  user: SignerWithAddress,
  receiver: tEthereumAddress,
  expectedResult: string,
  testEnv: TestEnv,
  revertMessage?: string
) => {
  const { pool } = testEnv;

  const reserveAddress: tEthereumAddress = await getTestnetReserveAddressFromSymbol(reserve);

  const amountToDelegate: string = await (
    await convertToCurrencyDecimals(reserveAddress, amount)
  ).toString();

  const reserveData = await pool.getReserveData(reserveAddress);

  const debtToken =
    interestRateMode === '1'
      ? await getStableDebtToken(reserveData.stableDebtTokenAddress)
      : await getVariableDebtToken(reserveData.variableDebtTokenAddress);

  const delegateAllowancePromise = debtToken
    .connect(user.signer)
    .approveDelegation(receiver, amountToDelegate);

  if (expectedResult === 'revert' && revertMessage) {
    await expect(delegateAllowancePromise, revertMessage).to.be.revertedWith(revertMessage);
    return;
  } else {
    await waitForTx(await delegateAllowancePromise);
    const allowance = await debtToken.borrowAllowance(user.address, receiver);
    expect(allowance.toString()).to.be.equal(
      amountToDelegate,
      'borrowAllowance is set incorrectly'
    );
  }
};

export const borrow = async (
  reserveSymbol: string,
  amount: string,
  interestRateMode: string,
  user: SignerWithAddress,
  onBehalfOf: tEthereumAddress,
  timeTravel: string,
  expectedResult: string,
  testEnv: TestEnv,
  revertMessage?: string
) => {
  const { pool, helpersContract } = testEnv;

  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);

  const { reserveData: reserveDataBefore, userData: userDataBefore } = await getContractsData(
    reserve,
    onBehalfOf,
    testEnv,
    user.address
  );

  const reserveTokens = await helpersContract.getReserveTokensAddresses(reserve);
  const debtToken =
    interestRateMode === '1'
      ? await getStableDebtToken(reserveTokens.stableDebtTokenAddress)
      : await getVariableDebtToken(reserveTokens.variableDebtTokenAddress);

  const borrowAllowanceBefore = await debtToken.borrowAllowance(onBehalfOf, user.address);

  const amountToBorrow = await convertToCurrencyDecimals(reserve, amount);

  const tx = pool
    .connect(user.signer)
    .borrow(reserve, amountToBorrow, interestRateMode, '0', onBehalfOf);

  if (expectedResult === 'success') {
    const txResult = await waitForTx(await tx);

    const { txCost, txTimestamp } = await getTxCostAndTimestamp(txResult);

    if (timeTravel) {
      const secondsToTravel = BigNumber.from(timeTravel).mul(ONE_YEAR).div(365).toNumber();

      await advanceTimeAndBlock(secondsToTravel);
    }

    const {
      reserveData: reserveDataAfter,
      userData: userDataAfter,
      timestamp,
    } = await getContractsData(reserve, onBehalfOf, testEnv, user.address);

    const expectedReserveData = calcExpectedReserveDataAfterBorrow(
      amountToBorrow.toString(),
      interestRateMode,
      reserveDataBefore,
      userDataBefore,
      txTimestamp,
      timestamp
    );

    const expectedUserData = calcExpectedUserDataAfterBorrow(
      amountToBorrow.toString(),
      interestRateMode,
      reserveDataBefore,
      expectedReserveData,
      userDataBefore,
      txTimestamp,
      timestamp
    );

    expectEqual(reserveDataAfter, expectedReserveData);
    expectEqual(userDataAfter, expectedUserData);

    if (user.address !== onBehalfOf) {
      const borrowAllowanceAfter = await debtToken.borrowAllowance(onBehalfOf, user.address);
      expect(borrowAllowanceAfter).to.be.equal(
        borrowAllowanceBefore.sub(amountToBorrow),
        'borrowAllowance is updated incorrectly'
      );
    }

    // truffleAssert.eventEmitted(txResult, "Borrow", (ev: any) => {
    //   const {
    //     _reserve,
    //     _user,
    //     _amount,
    //     _borrowRateMode,
    //     _borrowRate,
    //     _originationFee,
    //   } = ev;
    //   return (
    //     _reserve.toLowerCase() === reserve.toLowerCase() &&
    //     _user.toLowerCase() === user.toLowerCase() &&
    //     new BigNumber(_amount).eq(amountToBorrow) &&
    //     new BigNumber(_borrowRateMode).eq(expectedUserData.borrowRateMode) &&
    //     new BigNumber(_borrowRate).eq(expectedUserData.borrowRate) &&
    //     new BigNumber(_originationFee).eq(
    //       expectedUserData.originationFee.minus(userDataBefore.originationFee)
    //     )
    //   );
    // });
  } else if (expectedResult === 'revert') {
    await expect(tx, revertMessage).to.be.reverted;
  }
};

export const repay = async (
  reserveSymbol: string,
  amount: string,
  rateMode: string,
  user: SignerWithAddress,
  onBehalfOf: SignerWithAddress,
  sendValue: string,
  expectedResult: string,
  testEnv: TestEnv,
  timeTravel: string,
  revertMessage?: string
) => {
  const { pool } = testEnv;
  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);

  const { reserveData: reserveDataBefore, userData: userDataBefore } = await getContractsData(
    reserve,
    onBehalfOf.address,
    testEnv
  );

  let amountToRepay = '0';

  if (amount !== '-1') {
    amountToRepay = (await convertToCurrencyDecimals(reserve, amount)).toString();
  } else {
    amountToRepay = MAX_UINT_AMOUNT;
  }
  amountToRepay = BigNumber.from(amountToRepay).toHexString();

  const txOptions: any = {};

  if (sendValue) {
    const valueToSend = await convertToCurrencyDecimals(reserve, sendValue);
    txOptions.value = valueToSend.toHexString(); // '0x' + BigNumber.from(valueToSend.toString()).toString(16);
  }

  if (timeTravel) {
    const secondsToTravel = BigNumber.from(timeTravel).mul(ONE_YEAR).div(365).toNumber();
    await advanceTimeAndBlock(secondsToTravel);
  }

  if (expectedResult === 'success') {
    const txResult = await waitForTx(
      await pool
        .connect(user.signer)
        .repay(reserve, amountToRepay, rateMode, onBehalfOf.address, txOptions)
    );

    const { txCost, txTimestamp } = await getTxCostAndTimestamp(txResult);

    const {
      reserveData: reserveDataAfter,
      userData: userDataAfter,
      timestamp,
    } = await getContractsData(reserve, onBehalfOf.address, testEnv);

    const expectedReserveData = calcExpectedReserveDataAfterRepay(
      amountToRepay,
      <RateMode>rateMode,
      reserveDataBefore,
      userDataBefore,
      txTimestamp,
      timestamp
    );

    const expectedUserData = calcExpectedUserDataAfterRepay(
      amountToRepay,
      <RateMode>rateMode,
      reserveDataBefore,
      expectedReserveData,
      userDataBefore,
      user.address,
      onBehalfOf.address,
      txTimestamp,
      timestamp
    );

    expectEqual(reserveDataAfter, expectedReserveData);
    expectEqual(userDataAfter, expectedUserData);

    // truffleAssert.eventEmitted(txResult, "Repay", (ev: any) => {
    //   const {_reserve, _user, _repayer} = ev;

    //   return (
    //     _reserve.toLowerCase() === reserve.toLowerCase() &&
    //     _user.toLowerCase() === onBehalfOf.toLowerCase() &&
    //     _repayer.toLowerCase() === user.toLowerCase()
    //   );
    // });
  } else if (expectedResult === 'revert') {
    await expect(
      pool
        .connect(user.signer)
        .repay(reserve, amountToRepay, rateMode, onBehalfOf.address, txOptions),
      revertMessage
    ).to.be.reverted;
  }
};

export const supplyWithPermit = async (
  reserveSymbol: string,
  amount: string,
  sender: SignerWithAddress,
  senderPk: string,
  onBehalfOf: tEthereumAddress,
  useAsCollateral: boolean,
  sendValue: string,
  expectedResult: string,
  testEnv: TestEnv,
  revertMessage?: string
) => {
  const { pool } = testEnv;

  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);
  const amountToDeposit = await convertToCurrencyDecimals(reserve, amount);

  const chainId = Number(await getChainId());
  const token = new MintableERC20__factory(sender.signer).attach(reserve);
  const highDeadline = '100000000000000000000000000';
  const nonce = await token.nonces(sender.address);

  const msgParams = buildPermitParams(
    chainId,
    reserve,
    '1',
    reserveSymbol,
    sender.address,
    pool.address,
    nonce.toNumber(),
    highDeadline,
    amountToDeposit.toString()
  );
  const { v, r, s } = getSignatureFromTypedData(senderPk, msgParams);

  const txOptions: any = {};

  const { reserveData: reserveDataBefore, userData: userDataBefore } = await getContractsData(
    reserve,
    onBehalfOf,
    testEnv,
    sender.address
  );

  if (sendValue) {
    txOptions.value = await convertToCurrencyDecimals(reserve, sendValue);
  }

  if (expectedResult === 'success') {
    const txResult = await waitForTx(
      await pool
        .connect(sender.signer)
        .supplyWithPermit(
          reserve,
          amountToDeposit,
          onBehalfOf,
          '0',
          highDeadline,
          v,
          r,
          s,
          txOptions
        )
    );

    const {
      reserveData: reserveDataAfter,
      userData: userDataAfter,
      timestamp,
    } = await getContractsData(reserve, onBehalfOf, testEnv, sender.address);

    const { txCost, txTimestamp } = await getTxCostAndTimestamp(txResult);

    const expectedReserveData = calcExpectedReserveDataAfterDeposit(
      amountToDeposit.toString(),
      reserveDataBefore,
      txTimestamp
    );

    const expectedUserReserveData = calcExpectedUserDataAfterDeposit(
      amountToDeposit.toString(),
      reserveDataBefore,
      expectedReserveData,
      userDataBefore,
      txTimestamp,
      timestamp,
      txCost
    );

    expectEqual(reserveDataAfter, expectedReserveData);
    expectEqual(userDataAfter, expectedUserReserveData);

    // truffleAssert.eventEmitted(txResult, "Deposit", (ev: any) => {
    //   const {_reserve, _user, _amount} = ev;
    //   return (
    //     _reserve === reserve &&
    //     _user === user &&
    //     new BigNumber(_amount).isEqualTo(new BigNumber(amountToDeposit))
    //   );
    // });
  } else if (expectedResult === 'revert') {
    await expect(
      pool
        .connect(sender.signer)
        .supplyWithPermit(
          reserve,
          amountToDeposit,
          onBehalfOf,
          '0',
          highDeadline,
          v,
          r,
          s,
          txOptions
        ),
      revertMessage
    ).to.be.reverted;
  }
};

export const repayWithPermit = async (
  reserveSymbol: string,
  amount: string,
  rateMode: string,
  user: SignerWithAddress,
  userPk: string,
  onBehalfOf: SignerWithAddress,
  sendValue: string,
  expectedResult: string,
  testEnv: TestEnv,
  revertMessage?: string
) => {
  const { pool } = testEnv;
  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);
  const highDeadline = '100000000000000000000000000';

  const { reserveData: reserveDataBefore, userData: userDataBefore } = await getContractsData(
    reserve,
    onBehalfOf.address,
    testEnv
  );

  let amountToRepay = '0';

  if (amount !== '-1') {
    amountToRepay = (await convertToCurrencyDecimals(reserve, amount)).toString();
  } else {
    amountToRepay = MAX_UINT_AMOUNT;
  }
  amountToRepay = BigNumber.from(amountToRepay).toHexString();

  const chainId = Number(await getChainId());
  const token = new MintableERC20__factory(user.signer).attach(reserve);
  const nonce = await token.nonces(user.address);

  const msgParams = buildPermitParams(
    chainId,
    reserve,
    '1',
    reserveSymbol,
    user.address,
    pool.address,
    nonce.toNumber(),
    highDeadline,
    amountToRepay
  );
  const { v, r, s } = getSignatureFromTypedData(userPk, msgParams);
  const txOptions: any = {};

  if (sendValue) {
    const valueToSend = await convertToCurrencyDecimals(reserve, sendValue);
    txOptions.value = valueToSend.toHexString();
  }

  if (expectedResult === 'success') {
    const txResult = await waitForTx(
      await pool
        .connect(user.signer)
        .repayWithPermit(
          reserve,
          amountToRepay,
          rateMode,
          onBehalfOf.address,
          highDeadline,
          v,
          r,
          s,
          txOptions
        )
    );

    const { txCost, txTimestamp } = await getTxCostAndTimestamp(txResult);

    const {
      reserveData: reserveDataAfter,
      userData: userDataAfter,
      timestamp,
    } = await getContractsData(reserve, onBehalfOf.address, testEnv);

    const expectedReserveData = calcExpectedReserveDataAfterRepay(
      amountToRepay,
      <RateMode>rateMode,
      reserveDataBefore,
      userDataBefore,
      txTimestamp,
      timestamp
    );

    const expectedUserData = calcExpectedUserDataAfterRepay(
      amountToRepay,
      <RateMode>rateMode,
      reserveDataBefore,
      expectedReserveData,
      userDataBefore,
      user.address,
      onBehalfOf.address,
      txTimestamp,
      timestamp
    );

    expectEqual(reserveDataAfter, expectedReserveData);
    expectEqual(userDataAfter, expectedUserData);

    // truffleAssert.eventEmitted(txResult, "Repay", (ev: any) => {
    //   const {_reserve, _user, _repayer} = ev;

    //   return (
    //     _reserve.toLowerCase() === reserve.toLowerCase() &&
    //     _user.toLowerCase() === onBehalfOf.toLowerCase() &&
    //     _repayer.toLowerCase() === user.toLowerCase()
    //   );
    // });
  } else if (expectedResult === 'revert') {
    await expect(
      pool
        .connect(user.signer)
        .repayWithPermit(
          reserve,
          amountToRepay,
          rateMode,
          onBehalfOf.address,
          highDeadline,
          v,
          r,
          s,
          txOptions
        ),
      revertMessage
    ).to.be.reverted;
  }
};

export const setUseAsCollateral = async (
  reserveSymbol: string,
  user: SignerWithAddress,
  useAsCollateral: string,
  expectedResult: string,
  testEnv: TestEnv,
  revertMessage?: string
) => {
  const { pool } = testEnv;

  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);

  const { reserveData: reserveDataBefore, userData: userDataBefore } = await getContractsData(
    reserve,
    user.address,
    testEnv
  );

  const useAsCollateralBool = useAsCollateral.toLowerCase() === 'true';

  if (expectedResult === 'success') {
    const txResult = await waitForTx(
      await pool.connect(user.signer).setUserUseReserveAsCollateral(reserve, useAsCollateralBool)
    );

    const { txCost } = await getTxCostAndTimestamp(txResult);

    const { userData: userDataAfter } = await getContractsData(reserve, user.address, testEnv);

    const expectedUserData = calcExpectedUserDataAfterSetUseAsCollateral(
      useAsCollateral.toLocaleLowerCase() === 'true',
      reserveDataBefore,
      userDataBefore,
      txCost
    );

    expectEqual(userDataAfter, expectedUserData);
    // if (useAsCollateralBool) {
    //   truffleAssert.eventEmitted(txResult, 'ReserveUsedAsCollateralEnabled', (ev: any) => {
    //     const {_reserve, _user} = ev;
    //     return _reserve === reserve && _user === user;
    //   });
    // } else {
    //   truffleAssert.eventEmitted(txResult, 'ReserveUsedAsCollateralDisabled', (ev: any) => {
    //     const {_reserve, _user} = ev;
    //     return _reserve === reserve && _user === user;
    //   });
    // }
  } else if (expectedResult === 'revert') {
    await expect(
      pool.connect(user.signer).setUserUseReserveAsCollateral(reserve, useAsCollateralBool),
      revertMessage
    ).to.be.reverted;
  }
};

export const swapBorrowRateMode = async (
  reserveSymbol: string,
  user: SignerWithAddress,
  rateMode: string,
  expectedResult: string,
  testEnv: TestEnv,
  revertMessage?: string
) => {
  const { pool } = testEnv;

  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);

  const { reserveData: reserveDataBefore, userData: userDataBefore } = await getContractsData(
    reserve,
    user.address,
    testEnv
  );

  if (expectedResult === 'success') {
    const txResult = await waitForTx(
      await pool.connect(user.signer).swapBorrowRateMode(reserve, rateMode)
    );

    const { txCost, txTimestamp } = await getTxCostAndTimestamp(txResult);

    const { reserveData: reserveDataAfter, userData: userDataAfter } = await getContractsData(
      reserve,
      user.address,
      testEnv
    );

    const expectedReserveData = calcExpectedReserveDataAfterSwapRateMode(
      reserveDataBefore,
      userDataBefore,
      rateMode,
      txTimestamp
    );

    const expectedUserData = calcExpectedUserDataAfterSwapRateMode(
      reserveDataBefore,
      expectedReserveData,
      userDataBefore,
      rateMode,
      txCost,
      txTimestamp
    );

    expectEqual(reserveDataAfter, expectedReserveData);
    expectEqual(userDataAfter, expectedUserData);

    // truffleAssert.eventEmitted(txResult, "Swap", (ev: any) => {
    //   const {_user, _reserve, _newRateMode, _newRate} = ev;
    //   return (
    //     _user === user &&
    //     _reserve == reserve &&
    //     new BigNumber(_newRateMode).eq(expectedUserData.borrowRateMode) &&
    //     new BigNumber(_newRate).eq(expectedUserData.borrowRate)
    //   );
    // });
  } else if (expectedResult === 'revert') {
    await expect(pool.connect(user.signer).swapBorrowRateMode(reserve, rateMode), revertMessage).to
      .be.reverted;
  }
};

export const rebalanceStableBorrowRate = async (
  reserveSymbol: string,
  user: SignerWithAddress,
  target: SignerWithAddress,
  expectedResult: string,
  testEnv: TestEnv,
  revertMessage?: string
) => {
  const { pool } = testEnv;

  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);

  const { reserveData: reserveDataBefore, userData: userDataBefore } = await getContractsData(
    reserve,
    target.address,
    testEnv
  );

  if (expectedResult === 'success') {
    const txResult = await waitForTx(
      await pool.connect(user.signer).rebalanceStableBorrowRate(reserve, target.address)
    );

    const { txCost, txTimestamp } = await getTxCostAndTimestamp(txResult);

    const { reserveData: reserveDataAfter, userData: userDataAfter } = await getContractsData(
      reserve,
      target.address,
      testEnv
    );

    const expectedReserveData = calcExpectedReserveDataAfterStableRateRebalance(
      reserveDataBefore,
      userDataBefore,
      txTimestamp
    );

    const expectedUserData = calcExpectedUserDataAfterStableRateRebalance(
      reserveDataBefore,
      expectedReserveData,
      userDataBefore,
      txCost,
      txTimestamp
    );

    expectEqual(reserveDataAfter, expectedReserveData);
    expectEqual(userDataAfter, expectedUserData);

    // truffleAssert.eventEmitted(txResult, 'RebalanceStableBorrowRate', (ev: any) => {
    //   const {_user, _reserve, _newStableRate} = ev;
    //   return (
    //     _user.toLowerCase() === target.toLowerCase() &&
    //     _reserve.toLowerCase() === reserve.toLowerCase() &&
    //     new BigNumber(_newStableRate).eq(expectedUserData.borrowRate)
    //   );
    // });
  } else if (expectedResult === 'revert') {
    await expect(
      pool.connect(user.signer).rebalanceStableBorrowRate(reserve, target.address),
      revertMessage
    ).to.be.reverted;
  }
};

const expectEqual = (
  actual: UserReserveData | ReserveData,
  expected: UserReserveData | ReserveData
) => {
  if (!configuration.skipIntegrityCheck) {
    // @ts-ignore
    expect(actual).to.be.almostEqualOrEqual(expected);
  }
};

interface ActionData {
  reserve: string;
  reserveData: ReserveData;
  userData: UserReserveData;
  aTokenInstance: AToken;
}

const getDataBeforeAction = async (
  reserveSymbol: string,
  user: tEthereumAddress,
  testEnv: TestEnv
): Promise<ActionData> => {
  const reserve = await getTestnetReserveAddressFromSymbol(reserveSymbol);

  const { reserveData, userData } = await getContractsData(reserve, user, testEnv);
  const aTokenInstance = await getAToken(reserveData.aTokenAddress);
  return {
    reserve,
    reserveData,
    userData,
    aTokenInstance,
  };
};

export const getTxCostAndTimestamp = async (tx: ContractReceipt) => {
  if (!tx.blockNumber || !tx.transactionHash || !tx.cumulativeGasUsed) {
    throw new Error('No tx blocknumber');
  }
  const txTimestamp = BigNumber.from(
    (await hre.ethers.provider.getBlock(tx.blockNumber)).timestamp
  );

  const txInfo = await hre.ethers.provider.getTransaction(tx.transactionHash);
  const gasPrice = txInfo.gasPrice ? txInfo.gasPrice : tx.effectiveGasPrice;
  const txCost = BigNumber.from(tx.cumulativeGasUsed).mul(gasPrice);

  return { txCost, txTimestamp };
};

export const getContractsData = async (
  reserve: string,
  user: string,
  testEnv: TestEnv,
  sender?: string
) => {
  const { pool, helpersContract } = testEnv;

  const [userData, reserveData, timestamp] = await Promise.all([
    getUserData(pool, helpersContract, reserve, user, sender || user),
    getReserveData(helpersContract, reserve),
    timeLatest(),
  ]);

  return {
    reserveData,
    userData,
    timestamp,
  };
};



================================================
FILE: test-suites/helpers/make-suite.ts
================================================
import { Signer } from 'ethers';
import { BigNumber } from '@ethersproject/bignumber';
import {
  getPool,
  getPoolAddressesProvider,
  getAaveProtocolDataProvider,
  getAToken,
  getMintableERC20,
  getPoolConfiguratorProxy,
  getPoolAddressesProviderRegistry,
  getWETHMocked,
  getVariableDebtToken,
  getStableDebtToken,
  getAaveOracle,
  getACLManager,
} from '@aave/deploy-v3/dist/helpers/contract-getters';
import {
  waitForTx,
  evmSnapshot,
  evmRevert,
  getEthersSigners,
  deployPriceOracle,
  Faucet,
  getFaucet,
} from '@aave/deploy-v3';
import { Pool } from '../../types/Pool';
import { AaveProtocolDataProvider } from '../../types/AaveProtocolDataProvider';
import { MintableERC20 } from '../../types/MintableERC20';
import { AToken } from '../../types/AToken';
import { PoolConfigurator } from '../../types/PoolConfigurator';
import { PriceOracle } from '../../types/PriceOracle';
import { PoolAddressesProvider } from '../../types/PoolAddressesProvider';
import { PoolAddressesProviderRegistry } from '../../types/PoolAddressesProviderRegistry';
import { WETH9Mocked } from '../../types/WETH9Mocked';
import { AaveOracle, ACLManager, StableDebtToken, VariableDebtToken } from '../../types';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { usingTenderly } from '../../helpers/tenderly-utils';
import { tEthereumAddress } from '../../helpers/types';

declare var hre: HardhatRuntimeEnvironment;

export interface SignerWithAddress {
  signer: Signer;
  address: tEthereumAddress;
}
export interface TestEnv {
  deployer: SignerWithAddress;
  poolAdmin: SignerWithAddress;
  emergencyAdmin: SignerWithAddress;
  riskAdmin: SignerWithAddress;
  users: SignerWithAddress[];
  pool: Pool;
  configurator: PoolConfigurator;
  oracle: PriceOracle;
  aaveOracle: AaveOracle;
  helpersContract: AaveProtocolDataProvider;
  weth: WETH9Mocked;
  aWETH: AToken;
  faucetMintable: Faucet;
  dai: MintableERC20;
  aDai: AToken;
  aAave: AToken;
  variableDebtDai: VariableDebtToken;
  stableDebtDai: StableDebtToken;
  aUsdc: AToken;
  usdc: MintableERC20;
  aave: MintableERC20;
  addressesProvider: PoolAddressesProvider;
  registry: PoolAddressesProviderRegistry;
  aclManager: ACLManager;
}

let HardhatSnapshotId: string = '0x1';
const setHardhatSnapshotId = (id: string) => {
  HardhatSnapshotId = id;
};

const testEnv: TestEnv = {
  deployer: {} as SignerWithAddress,
  poolAdmin: {} as SignerWithAddress,
  emergencyAdmin: {} as SignerWithAddress,
  riskAdmin: {} as SignerWithAddress,
  users: [] as SignerWithAddress[],
  pool: {} as Pool,
  configurator: {} as PoolConfigurator,
  helpersContract: {} as AaveProtocolDataProvider,
  oracle: {} as PriceOracle,
  aaveOracle: {} as AaveOracle,
  weth: {} as WETH9Mocked,
  aWETH: {} as AToken,
  faucetMintable: {} as Faucet,
  dai: {} as MintableERC20,
  aDai: {} as AToken,
  variableDebtDai: {} as VariableDebtToken,
  stableDebtDai: {} as StableDebtToken,
  aUsdc: {} as AToken,
  usdc: {} as MintableERC20,
  aave: {} as MintableERC20,
  addressesProvider: {} as PoolAddressesProvider,
  registry: {} as PoolAddressesProviderRegistry,
  aclManager: {} as ACLManager,
} as TestEnv;

export async function initializeMakeSuite() {
  const [_deployer, ...restSigners] = await getEthersSigners();
  const deployer: SignerWithAddress = {
    address: await _deployer.getAddress(),
    signer: _deployer,
  };

  for (const signer of restSigners) {
    testEnv.users.push({
      signer,
      address: await signer.getAddress(),
    });
  }
  testEnv.deployer = deployer;
  testEnv.poolAdmin = deployer;
  testEnv.emergencyAdmin = testEnv.users[1];
  testEnv.riskAdmin = testEnv.users[2];
  testEnv.pool = await getPool();
  testEnv.configurator = await getPoolConfiguratorProxy();

  testEnv.addressesProvider = await getPoolAddressesProvider();

  testEnv.registry = await getPoolAddressesProviderRegistry();
  testEnv.aclManager = await getACLManager();

  testEnv.oracle = await deployPriceOracle();
  testEnv.aaveOracle = await getAaveOracle();

  testEnv.helpersContract = await getAaveProtocolDataProvider();

  const allTokens = await testEnv.helpersContract.getAllATokens();
  const aDaiAddress = allTokens.find((aToken) => aToken.symbol.includes('DAI'))?.tokenAddress;
  const aUsdcAddress = allTokens.find((aToken) => aToken.symbol.includes('USDC'))?.tokenAddress;
  const aWEthAddress = allTokens.find((aToken) => aToken.symbol.includes('WETH'))?.tokenAddress;
  const aAaveAddress = allTokens.find((aToken) => aToken.symbol.includes('AAVE'))?.tokenAddress;

  const reservesTokens = await testEnv.helpersContract.getAllReservesTokens();

  const daiAddress = reservesTokens.find((token) => token.symbol === 'DAI')?.tokenAddress;
  const {
    variableDebtTokenAddress: variableDebtDaiAddress,
    stableDebtTokenAddress: stableDebtDaiAddress,
  } = await testEnv.helpersContract.getReserveTokensAddresses(daiAddress || '');
  const usdcAddress = reservesTokens.find((token) => token.symbol === 'USDC')?.tokenAddress;
  const aaveAddress = reservesTokens.find((token) => token.symbol === 'AAVE')?.tokenAddress;
  const wethAddress = reservesTokens.find((token) => token.symbol === 'WETH')?.tokenAddress;

  if (!aDaiAddress || !aWEthAddress) {
    throw 'Missing mandatory atokens';
  }
  if (!daiAddress || !usdcAddress || !aaveAddress || !wethAddress) {
    throw 'Missing mandatory tokens';
  }

  testEnv.faucetMintable = await getFaucet();
  testEnv.aDai = await getAToken(aDaiAddress);
  testEnv.variableDebtDai = await getVariableDebtToken(variableDebtDaiAddress);
  testEnv.stableDebtDai = await getStableDebtToken(stableDebtDaiAddress);
  testEnv.aUsdc = await getAToken(aUsdcAddress);
  testEnv.aWETH = await getAToken(aWEthAddress);
  testEnv.aAave = await getAToken(aAaveAddress);

  testEnv.dai = await getMintableERC20(daiAddress);
  testEnv.aave = await getMintableERC20(aaveAddress);
  testEnv.usdc = await getMintableERC20(usdcAddress);
  testEnv.weth = await getWETHMocked(wethAddress);

  // Support direct minting
  const testReserves = reservesTokens.map((x) => x.tokenAddress);
  await waitForTx(await testEnv.faucetMintable.setProtectedOfChild(testReserves, false));

  // Setup Fallback Oracle and feed up with current AaveOracle prices
  for (const testReserve of testReserves) {
    const price = await testEnv.aaveOracle.getAssetPrice(testReserve);
    await waitForTx(await testEnv.oracle.setAssetPrice(testReserve, price));
  }
  await waitForTx(await testEnv.aaveOracle.setFallbackOracle(testEnv.oracle.address));

  // Setup admins
  await waitForTx(await testEnv.aclManager.addRiskAdmin(testEnv.riskAdmin.address));
  await waitForTx(await testEnv.aclManager.addEmergencyAdmin(testEnv.emergencyAdmin.address));
}

const setSnapshot = async () => {
  if (usingTenderly()) {
    setHardhatSnapshotId((await hre.tenderlyNetwork.getHead()) || '0x1');
    return;
  }
  setHardhatSnapshotId(await evmSnapshot());
};

const revertHead = async () => {
  if (usingTenderly()) {
    await hre.tenderlyNetwork.setHead(HardhatSnapshotId);
    return;
  }
  await evmRevert(HardhatSnapshotId);
};

export function makeSuite(name: string, tests: (testEnv: TestEnv) => void) {
  describe(name, () => {
    before(async () => {
      await setSnapshot();
    });
    tests(testEnv);
    after(async () => {
      await revertHead();
    });
  });
}



================================================
FILE: test-suites/helpers/scenario-engine.ts
================================================
import { TestEnv, SignerWithAddress } from './make-suite';
import {
  mint,
  approve,
  deposit,
  borrow,
  withdraw,
  repay,
  setUseAsCollateral,
  swapBorrowRateMode,
  rebalanceStableBorrowRate,
  delegateBorrowAllowance,
  repayWithPermit,
  supplyWithPermit,
} from './actions';
import { RateMode } from '../../helpers/types';
import { getTestWallets } from './utils/wallets';

export interface Action {
  name: string;
  args?: any;
  expected: string;
  revertMessage?: string;
}

export interface Story {
  description: string;
  actions: Action[];
}

export interface Scenario {
  title: string;
  description: string;
  stories: Story[];
}

export const executeStory = async (story: Story, testEnv: TestEnv) => {
  for (const action of story.actions) {
    const { users } = testEnv;
    await executeAction(action, users, testEnv);
  }
};

const executeAction = async (action: Action, users: SignerWithAddress[], testEnv: TestEnv) => {
  const { reserve, user: userIndex, borrowRateMode } = action.args;
  const { name, expected, revertMessage } = action;

  if (!name || name === '') {
    throw 'Action name is missing';
  }
  if (!reserve || reserve === '') {
    throw 'Invalid reserve selected for deposit';
  }
  if (!userIndex || userIndex === '') {
    throw `Invalid user selected to deposit into the ${reserve} reserve`;
  }

  if (!expected || expected === '') {
    throw `An expected result for action ${name} is required`;
  }

  let rateMode: string = RateMode.None;

  if (borrowRateMode) {
    if (borrowRateMode === 'none') {
      rateMode = RateMode.None;
    } else if (borrowRateMode === 'stable') {
      rateMode = RateMode.Stable;
    } else if (borrowRateMode === 'variable') {
      rateMode = RateMode.Variable;
    } else {
      //random value, to test improper selection of the parameter
      rateMode = '4';
    }
  }

  const user = users[parseInt(userIndex)];

  const userPrivateKey = getTestWallets()[parseInt(userIndex) + 1].secretKey;

  switch (name) {
    case 'mint':
      const { amount } = action.args;

      if (!amount || amount === '') {
        throw `Invalid amount of ${reserve} to mint`;
      }

      await mint(reserve, amount, user);
      break;

    case 'approve':
      await approve(reserve, user, testEnv);
      break;

    case 'deposit':
      {
        const { amount, sendValue, onBehalfOf: onBehalfOfIndex } = action.args;
        const onBehalfOf = onBehalfOfIndex
          ? users[parseInt(onBehalfOfIndex)].address
          : user.address;

        if (!amount || amount === '') {
          throw `Invalid amount to deposit into the ${reserve} reserve`;
        }

        await deposit(
          reserve,
          amount,
          user,
          onBehalfOf,
          sendValue,
          expected,
          testEnv,
          revertMessage
        );
      }
      break;
    case 'supplyWithPermit':
      {
        const { amount, sendValue, onBehalfOf: onBehalfOfIndex, useAsCollateral } = action.args;
        const onBehalfOf = onBehalfOfIndex
          ? users[parseInt(onBehalfOfIndex)].address
          : user.address;

        if (!amount || amount === '') {
          throw `Invalid amount to deposit into the ${reserve} reserve`;
        }

        await supplyWithPermit(
          reserve,
          amount,
          user,
          userPrivateKey,
          onBehalfOf,
          useAsCollateral,
          sendValue,
          expected,
          testEnv,
          revertMessage
        );
      }
      break;

    case 'delegateBorrowAllowance':
      {
        const { amount, toUser: toUserIndex } = action.args;
        const toUser = users[parseInt(toUserIndex, 10)].address;
        if (!amount || amount === '') {
          throw `Invalid amount to deposit into the ${reserve} reserve`;
        }

        await delegateBorrowAllowance(
          reserve,
          amount,
          rateMode,
          user,
          toUser,
          expected,
          testEnv,
          revertMessage
        );
      }
      break;

    case 'withdraw':
      {
        const { amount } = action.args;

        if (!amount || amount === '') {
          throw `Invalid amount to withdraw from the ${reserve} reserve`;
        }

        await withdraw(reserve, amount, user, expected, testEnv, revertMessage);
      }
      break;
    case 'borrow':
      {
        const { amount, timeTravel, onBehalfOf: onBehalfOfIndex } = action.args;

        const onBehalfOf = onBehalfOfIndex
          ? users[parseInt(onBehalfOfIndex)].address
          : user.address;

        if (!amount || amount === '') {
          throw `Invalid amount to borrow from the ${reserve} reserve`;
        }

        await borrow(
          reserve,
          amount,
          rateMode,
          user,
          onBehalfOf,
          timeTravel,
          expected,
          testEnv,
          revertMessage
        );
      }
      break;

    case 'repay':
      {
        const { amount, timeTravel, sendValue } = action.args;
        let { onBehalfOf: onBehalfOfIndex } = action.args;

        if (!amount || amount === '') {
          throw `Invalid amount to repay into the ${reserve} reserve`;
        }

        let userToRepayOnBehalf: SignerWithAddress;
        if (!onBehalfOfIndex || onBehalfOfIndex === '') {
          console.log(
            'WARNING: No onBehalfOf specified for a repay action. Defaulting to the repayer address'
          );
          userToRepayOnBehalf = user;
        } else {
          userToRepayOnBehalf = users[parseInt(onBehalfOfIndex)];
        }

        await repay(
          reserve,
          amount,
          rateMode,
          user,
          userToRepayOnBehalf,
          sendValue,
          expected,
          testEnv,
          timeTravel,
          revertMessage
        );
      }
      break;

    case 'repayWithPermit':
      {
        const { amount, borrowRateMode, sendValue, deadline } = action.args;
        let { onBehalfOf: onBehalfOfIndex } = action.args;

        if (!amount || amount === '') {
          throw `Invalid amount to repay into the ${reserve} reserve`;
        }

        let userToRepayOnBehalf: SignerWithAddress;
        if (!onBehalfOfIndex || onBehalfOfIndex === '') {
          console.log(
            'WARNING: No onBehalfOf specified for a repay action. Defaulting to the repayer address'
          );
          userToRepayOnBehalf = user;
        } else {
          userToRepayOnBehalf = users[parseInt(onBehalfOfIndex)];
        }

        await repayWithPermit(
          reserve,
          amount,
          rateMode,
          user,
          userPrivateKey,
          userToRepayOnBehalf,
          sendValue,
          expected,
          testEnv,
          revertMessage
        );
      }
      break;

    case 'setUseAsCollateral':
      {
        const { useAsCollateral } = action.args;

        if (!useAsCollateral || useAsCollateral === '') {
          throw `A valid value for useAsCollateral needs to be set when calling setUseReserveAsCollateral on reserve ${reserve}`;
        }
        await setUseAsCollateral(reserve, user, useAsCollateral, expected, testEnv, revertMessage);
      }
      break;

    case 'swapBorrowRateMode':
      await swapBorrowRateMode(reserve, user, rateMode, expected, testEnv, revertMessage);
      break;

    case 'rebalanceStableBorrowRate':
      {
        const { target: targetIndex } = action.args;

        if (!targetIndex || targetIndex === '') {
          throw `A target must be selected when trying to rebalance a stable rate`;
        }
        const target = users[parseInt(targetIndex)];

        await rebalanceStableBorrowRate(reserve, user, target, expected, testEnv, revertMessage);
      }
      break;

    default:
      throw `Invalid action requested: ${name}`;
  }
};



================================================
FILE: test-suites/helpers/scenarios/borrow-negatives.json
================================================
{
  "title": "Pool: Borrow negatives (revert expected)",
  "description": "Test cases for the deposit function.",
  "stories": [
    {
      "description": "User 0 deposits 14760.147 DAI, user 1 deposits 1 WETH as collateral and tries to borrow 1476.01 DAI with rate mode NONE (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "none",
            "user": "1"
          },
          "expected": "revert",
          "revertMessage": "Invalid interest rate mode selected"
        }
      ]
    },
    {
      "description": "User 0 deposits 14760.147 DAI, user 1 deposits 1 WETH as collateral and tries to borrow 1476.01 DAI with an invalid rate mode (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "invalid",
            "user": "1"
          },
          "expected": "revert",
          "revertMessage": "Invalid interest rate mode selected"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/borrow-repay-stable-edge.json
================================================
{
  "title": "Pool: Borrow/repay (stable rate) edge cases",
  "description": "Edge test cases for the borrow function, stable mode.",
  "stories": [
    {
      "description": "repay, burn () balanceIncrease > amount",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",

            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "stable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "0.00000001",
            "user": "1",
            "borrowRateMode": "stable",
            "onBehalfOf": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/borrow-repay-stable.json
================================================
{
  "title": "Pool: Borrow/repay (stable rate)",
  "description": "Test cases for the borrow function, stable mode.",
  "stories": [
    {
      "description": "User 0 deposits 14760.147 DAI, user 1 deposits 1 WETH as collateral and borrows 1476.01 DAI at stable rate",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",

            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "stable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 tries to borrow the rest of the DAI liquidity (revert expected)",
      "actions": [
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "13284.132",
            "borrowRateMode": "stable",
            "user": "1"
          },
          "expected": "revert",
          "revertMessage": "There is not enough collateral to cover a new borrow"
        }
      ]
    },
    {
      "description": "User 1 repays half of the DAI borrow after one year",
      "actions": [
        {
          "name": "mint",
          "description": "Mint 10 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "147.60",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "738",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 repays the rest of the DAI borrow after one year",
      "actions": [
        {
          "name": "mint",
          "description": "Mint 221.40 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "221.40",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws the deposited DAI plus interest",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 deposits 14760.147 DAI, user 2 tries to borrow 14760.147 DAI at a stable rate without any collateral (revert expected) User 1 withdrawws",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "borrowRateMode": "stable",
            "user": "2"
          },
          "expected": "revert",
          "revertMessage": "The collateral balance is 0"
        },
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 deposits 14760.147 DAI, user 1,2,3,4 deposit 1 WETH each and borrow 1476.01 DAI at stable rate. Everything is repaid, user 0 withdraws",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "stable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "stable",
            "user": "2",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "stable",
            "user": "3",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "4"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "4"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "4"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "stable",
            "user": "4",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "description": "Mint 1476.01 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "description": "Mint 1476.01 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "2",
            "onBehalfOf": "2",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "description": "Mint 1476.01 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "3",
            "onBehalfOf": "3",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "description": "Mint 1476.01 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "user": "4"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "4"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "4",
            "onBehalfOf": "4",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        },
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 deposits 14760.147 DAI, user 1 deposits 2 WETH and borrow 1476.01 DAI at stable rate first, then 1476.01 DAI at variable rate, repays everything. User 0 withdraws",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "2",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "2",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "stable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "variable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "description": "Mint 738 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "738",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "variable"
          },
          "expected": "success"
        },
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/borrow-repay-variable.json
================================================
{
  "title": "Pool: Borrow/repay (variable rate)",
  "description": "Test cases for the borrow function, variable mode.",
  "stories": [
    {
      "description": "User 2 deposits 1 DAI to account for rounding errors",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "1",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "1",
            "user": "2"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 deposits 14760.147 DAI, user 1 deposits 1 WETH as collateral and borrows 1476.01 DAI at variable rate",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "variable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 tries to borrow the rest of the DAI liquidity (revert expected)",
      "actions": [
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "13284.132",
            "borrowRateMode": "variable",
            "user": "1"
          },
          "expected": "revert",
          "revertMessage": "There is not enough collateral to cover a new borrow"
        }
      ]
    },
    {
      "description": "User 1 tries to repay 0 DAI (revert expected)",
      "actions": [
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "0",
            "user": "1",
            "onBehalfOf": "1"
          },
          "expected": "revert",
          "revertMessage": "Amount must be greater than 0"
        }
      ]
    },
    {
      "description": "User 1 repays a small amount of DAI, enough to cover a small part of the interest",
      "actions": [
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "1.25",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "variable"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 repays the DAI borrow after one year",
      "actions": [
        {
          "name": "mint",
          "description": "Mint 10 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "147.60",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "variable",
            "timeTravel": "365"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws the deposited DAI plus interest",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 withdraws the collateral",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "WETH",
            "amount": "-1",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 2 deposits a small amount of WETH to account for rounding errors",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "0.001",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "0.001",
            "user": "2"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 deposits 1 WETH, user 1 deposits 1476.01 LINK as collateral and borrows 0.5 WETH at variable rate",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "LINK",
            "amount": "100",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "LINK",
            "user": "1"
          },
          "expected": "success"
        },

        {
          "name": "deposit",
          "args": {
            "reserve": "LINK",
            "amount": "100",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "WETH",
            "amount": "0.5",
            "borrowRateMode": "variable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 tries to repay 0 WETH",
      "actions": [
        {
          "name": "repay",
          "args": {
            "reserve": "WETH",
            "amount": "0",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "variable"
          },
          "expected": "revert",
          "revertMessage": "Amount must be greater than 0"
        }
      ]
    },
    {
      "description": "User 2 tries to repay everything on behalf of user 1 using uint(-1) (revert expected)",
      "actions": [
        {
          "name": "repay",
          "args": {
            "reserve": "WETH",
            "amount": "-1",
            "user": "2",
            "borrowRateMode": "variable",
            "onBehalfOf": "1"
          },
          "expected": "revert",
          "revertMessage": "To repay on behalf of an user an explicit amount to repay is needed"
        }
      ]
    },
    {
      "description": "User 3 repays a small amount of WETH on behalf of user 1",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "WETH",
            "amount": "0.2",
            "user": "3",
            "borrowRateMode": "variable",
            "onBehalfOf": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 repays the WETH borrow after one year",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "WETH",
            "amount": "-1",
            "borrowRateMode": "variable",
            "user": "1",
            "onBehalfOf": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws the deposited WETH plus interest",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "WETH",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 withdraws the collateral",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "LINK",
            "amount": "-1",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    },

    {
      "description": "User 2 deposits 1 USDC to account for rounding errors",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "USDC",
            "amount": "1",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "USDC",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "USDC",
            "amount": "1",
            "user": "2"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 deposits 14760.147 USDC, user 1 deposits 1 WETH as collateral and borrows 1476.01 USDC at variable rate",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "USDC",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "USDC",
            "amount": "1476.01",
            "borrowRateMode": "variable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 tries to borrow the rest of the USDC liquidity (revert expected)",
      "actions": [
        {
          "name": "borrow",
          "args": {
            "reserve": "USDC",
            "amount": "13284.132",
            "borrowRateMode": "variable",
            "user": "1"
          },
          "expected": "revert",
          "revertMessage": "There is not enough collateral to cover a new borrow"
        }
      ]
    },
    {
      "description": "User 1 repays the USDC borrow after one year",
      "actions": [
        {
          "name": "mint",
          "description": "Mint 10 USDC to cover the interest",
          "args": {
            "reserve": "USDC",
            "amount": "147.60",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "USDC",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "USDC",
            "amount": "-1",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "variable"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws the deposited USDC plus interest",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "USDC",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 withdraws the collateral",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "WETH",
            "amount": "-1",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 deposits 14760.147 DAI, user 3 tries to borrow 14760.147 DAI without any collateral (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "borrowRateMode": "variable",
            "user": "3"
          },
          "expected": "revert",
          "revertMessage": "The collateral balance is 0"
        }
      ]
    },
    {
      "description": "user 3 deposits 0.1 WETH collateral to borrow 1476.01 DAI; 0.1 WETH is not enough to borrow 1476.01 DAI (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "0.1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "0.1",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "variable",
            "user": "3"
          },
          "expected": "revert",
          "revertMessage": "There is not enough collateral to cover a new borrow"
        }
      ]
    },
    {
      "description": "user 3 withdraws the 0.1 WETH",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "WETH",
            "amount": "-1",
            "user": "3"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 deposits 14760.147 USDC, user 3 tries to borrow 14760.147 USDC without any collateral (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "USDC",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "borrowRateMode": "variable",
            "user": "3"
          },
          "expected": "revert",
          "revertMessage": "The collateral balance is 0"
        }
      ]
    },
    {
      "description": "user 3 deposits 0.1 WETH collateral to borrow 1476.01 USDC; 0.1 WETH is not enough to borrow 1476.01 USDC (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "0.1",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "USDC",
            "amount": "1476.01",
            "borrowRateMode": "variable",
            "user": "3"
          },
          "expected": "revert",
          "revertMessage": "There is not enough collateral to cover a new borrow"
        }
      ]
    },
    {
      "description": "user 3 withdraws the 0.1 WETH",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "WETH",
            "amount": "-1",
            "user": "3"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 deposits 14760.147 DAI, user 6 deposits 2 WETH and borrow 1476.01 DAI at variable rate first, then 1476.01 DAI at stable rate, repays everything. User 0 withdraws",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "2",
            "user": "6"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "6"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "2",
            "user": "6"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "variable",
            "user": "6",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "stable",
            "user": "6",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "description": "Mint 738 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "738",
            "user": "6"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "6"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "6",
            "onBehalfOf": "6",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "6",
            "onBehalfOf": "6",
            "borrowRateMode": "variable"
          },
          "expected": "success"
        },
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/borrow-repayWithPermit-variable.json
================================================
{
  "title": "Pool: Borrow/repay with permit with Permit (variable rate)",
  "description": "Test cases for the borrow function, variable mode.",
  "stories": [
    {
      "description": "User 2 deposits with permit 1 DAI to account for rounding errors",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "1",
            "user": "2"
          },
          "expected": "success"
        },
        {
          "name": "supplyWithPermit",
          "args": {
            "reserve": "DAI",
            "amount": "1",
            "user": "2",
            "useAsCollateral": true
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 deposits with permit 14760.147 DAI, user 1 deposits 1 WETH as collateral and borrows 1476.01 DAI at variable rate",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "supplyWithPermit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0",
            "useAsCollateral": true
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "borrowRateMode": "variable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 tries to borrow the rest of the DAI liquidity (revert expected)",
      "actions": [
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "13284.132",
            "borrowRateMode": "variable",
            "user": "1"
          },
          "expected": "revert",
          "revertMessage": "There is not enough collateral to cover a new borrow"
        }
      ]
    },
    {
      "description": "User 1 tries to repay with permit 0 DAI (revert expected)",
      "actions": [
        {
          "name": "repayWithPermit",
          "args": {
            "reserve": "DAI",
            "amount": "0",
            "user": "1",
            "onBehalfOf": "1"
          },
          "expected": "revert",
          "revertMessage": "Amount must be greater than 0"
        }
      ]
    },
    {
      "description": "User 1 repays with permit a small amount of DAI, enough to cover a small part of the interest",
      "actions": [
        {
          "name": "repayWithPermit",
          "args": {
            "reserve": "DAI",
            "amount": "1.25",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "variable"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 repays with permit the DAI borrow after one year",
      "actions": [
        {
          "name": "mint",
          "description": "Mint 10 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "147.60",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "repayWithPermit",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "variable",
            "timeTravel": "365"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws the deposited DAI plus interest",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 withdraws the collateral",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "WETH",
            "amount": "-1",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/credit-delegation.json
================================================
{
  "title": "Pool: Credit delegation",
  "description": "Test cases for the credit delegation related functions.",
  "stories": [
    {
      "description": "User 3 deposits 1476.010 WETH. User 0 deposits 14760.147 DAI, user 0 delegates borrowing of 2 WETH on variable to user 4, user 4 borrows 1 WETH variable on behalf of user 0",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1476.010",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1476.010",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "delegateBorrowAllowance",
          "args": {
            "reserve": "WETH",
            "amount": "2",
            "user": "0",
            "borrowRateMode": "variable",
            "toUser": "4"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "4",
            "onBehalfOf": "0",
            "borrowRateMode": "variable"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 4 trying to borrow 1 WETH stable on behalf of user 0, revert expected",
      "actions": [
        {
          "name": "borrow",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "4",
            "onBehalfOf": "0",
            "borrowRateMode": "stable"
          },
          "expected": "revert",
          "revertMessage": "59"
        }
      ]
    },
    {
      "description": "User 0 delegates borrowing of 1 WETH to user 4, user 4 borrows 3 WETH variable on behalf of user 0, revert expected",
      "actions": [
        {
          "name": "delegateBorrowAllowance",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "0",
            "borrowRateMode": "variable",
            "toUser": "4"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "WETH",
            "amount": "3",
            "user": "4",
            "onBehalfOf": "0",
            "borrowRateMode": "variable"
          },
          "expected": "revert",
          "revertMessage": "59"
        }
      ]
    },
    {
      "description": "User 0 delegates borrowing of 1 WETH on stable to user 2, user 2 borrows 1 WETH stable on behalf of user 0",
      "actions": [
        {
          "name": "delegateBorrowAllowance",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "0",
            "borrowRateMode": "stable",
            "toUser": "2"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "2",
            "onBehalfOf": "0",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/deposit.json
================================================
{
  "title": "Pool: Deposit",
  "description": "Test cases for the deposit function.",
  "stories": [
    {
      "description": "User 0 Deposits 14760.147 DAI in an empty reserve",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 deposits 14760.147 DAI after user 0",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 deposits 14760.147 USDC in an empty reserve",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "USDC",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 deposits 14760.147 USDC after user 0",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "USDC",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 deposits 1 WETH in an empty reserve",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 deposits 1 WETH after user 0",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },

        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 deposits 0 WETH (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "0",
            "user": "1"
          },
          "expected": "revert",
          "revertMessage": "Amount must be greater than 0"
        }
      ]
    },
    {
      "description": "User 1 deposits 0 DAI",
      "actions": [
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "0",
            "user": "1"
          },
          "expected": "revert",
          "revertMessage": "Amount must be greater than 0"
        }
      ]
    },
    {
      "description": "User 1 deposits 1476.01 DAI on behalf of user 2, user 2 tries to borrow 0.1 WETH",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "1476.01",
            "user": "1",
            "onBehalfOf": "2"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "WETH",
            "amount": "0.1",
            "borrowRateMode": "variable",
            "user": "2"
          },
          "expected": "success"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/rebalance-stable-rate.json
================================================
{
  "title": "Pool: Rebalance stable rate",
  "description": "Test cases for the rebalanceStableBorrowRate() function.",
  "stories": [
    {
      "description": "User 0 tries to rebalance user 1 who has no borrows in progress (revert expected)",
      "actions": [
        {
          "name": "rebalanceStableBorrowRate",
          "args": {
            "reserve": "USDC",
            "user": "0",
            "target": "1"
          },
          "expected": "revert",
          "revertMessage": "User does not have any stable rate loan for this reserve"
        }
      ]
    },
    {
      "description": "User 0 deposits 1000 USDC, user 1 deposits 7 WETH, borrows 250 USDC at a stable rate, user 0 rebalances user 1 (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "USDC",
            "amount": "1000",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "USDC",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "USDC",
            "amount": "1000",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "7",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "7",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "USDC",
            "amount": "250",
            "borrowRateMode": "stable",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "rebalanceStableBorrowRate",
          "args": {
            "reserve": "USDC",
            "user": "0",
            "target": "1"
          },
          "expected": "revert",
          "revertMessage": "The user borrow is variable and cannot be rebalanced"
        }
      ]
    },
    {
      "description": "User 1 borrows another 200 at variable, user 0 tries to rebalance but the conditions are not met (revert expected)",
      "actions": [
        {
          "name": "borrow",
          "args": {
            "reserve": "USDC",
            "amount": "200",
            "borrowRateMode": "variable",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "rebalanceStableBorrowRate",
          "args": {
            "reserve": "USDC",
            "user": "0",
            "target": "1"
          },
          "expected": "revert",
          "revertMessage": "Interest rate rebalance conditions were not met"
        }
      ]
    },
    {
      "description": "User 1 borrows another 200 at variable, user 0 tries to rebalance but the conditions are not met (revert expected)",
      "actions": [
        {
          "name": "borrow",
          "args": {
            "reserve": "USDC",
            "amount": "200",
            "borrowRateMode": "variable",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "rebalanceStableBorrowRate",
          "args": {
            "reserve": "USDC",
            "user": "0",
            "target": "1"
          },
          "expected": "revert",
          "revertMessage": "Interest rate rebalance conditions were not met"
        }
      ]
    },
    {
      "description": "User 1 borrows another 100 at variable, user 0 tries to rebalance but the conditions are not met (revert expected)",
      "actions": [
        {
          "name": "borrow",
          "args": {
            "reserve": "USDC",
            "amount": "180",
            "borrowRateMode": "variable",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "rebalanceStableBorrowRate",
          "args": {
            "reserve": "USDC",
            "user": "0",
            "target": "1"
          },
          "expected": "revert",
          "revertMessage": "Interest rate rebalance conditions were not met"
        }
      ]
    },
    {
      "description": "User 1 borrows the remaining USDC (usage ratio = 100%) at variable. User 0 rebalances user 1",
      "actions": [
        {
          "name": "borrow",
          "args": {
            "reserve": "USDC",
            "amount": "170",
            "borrowRateMode": "variable",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "rebalanceStableBorrowRate",
          "args": {
            "reserve": "USDC",
            "user": "0",
            "target": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 deposits 1000 USDC, user 1 deposits 7 WETH, borrows 950 USDC at a variable rate, user 0 rebalances user 1 (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "USDC",
            "amount": "1000",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "USDC",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "USDC",
            "amount": "1000",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "7",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "7",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "USDC",
            "amount": "950",
            "borrowRateMode": "variable",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "rebalanceStableBorrowRate",
          "args": {
            "reserve": "USDC",
            "user": "0",
            "target": "1"
          },
          "expected": "revert",
          "revertMessage": "The user borrow is variable and cannot be rebalanced"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/set-use-as-collateral.json
================================================
{
  "title": "Pool: Usage as collateral",
  "description": "Test cases for the setUserUseReserveAsCollateral() function.",
  "stories": [
    {
      "description": "User 0 Deposits 14760.147 DAI, disables DAI as collateral",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "setUseAsCollateral",
          "args": {
            "reserve": "DAI",
            "user": "0",
            "useAsCollateral": "false"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 Deposits 2 WETH, disables WETH as collateral, borrows 5904.05 DAI (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "2",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "2",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "setUseAsCollateral",
          "args": {
            "reserve": "WETH",
            "user": "1",
            "useAsCollateral": "false"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "5904.05",
            "borrowRateMode": "variable",
            "user": "1"
          },
          "expected": "revert",
          "revertMessage": "The collateral balance is 0"
        }
      ]
    },
    {
      "description": "User 1 enables WETH as collateral, borrows 5904.05 DAI",
      "actions": [
        {
          "name": "setUseAsCollateral",
          "args": {
            "reserve": "WETH",
            "user": "1",
            "useAsCollateral": "true"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "5904.05",
            "borrowRateMode": "variable",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 disables WETH as collateral (revert expected)",
      "actions": [
        {
          "name": "setUseAsCollateral",
          "args": {
            "reserve": "WETH",
            "user": "1",
            "useAsCollateral": "false"
          },
          "expected": "revert",
          "revertMessage": "User deposit is already being used as collateral"
        }
      ]
    },
    {
      "description": "User 1 Deposits 10 AAVE, disables WETH as collateral. Should revert as 10 AAVE are not enough to cover the debt (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "AAVE",
            "amount": "10",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "AAVE",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "AAVE",
            "amount": "10",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "setUseAsCollateral",
          "args": {
            "reserve": "WETH",
            "user": "1",
            "useAsCollateral": "false"
          },
          "expected": "revert"
        }
      ]
    },
    {
      "description": "User 1 Deposits 640 more AAVE (enough to cover the DAI debt), disables WETH as collateral",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "AAVE",
            "amount": "640",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "AAVE",
            "amount": "640",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "setUseAsCollateral",
          "args": {
            "reserve": "WETH",
            "user": "1",
            "useAsCollateral": "false"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 disables AAVE as collateral (revert expected)",
      "actions": [
        {
          "name": "setUseAsCollateral",
          "args": {
            "reserve": "AAVE",
            "user": "1",
            "useAsCollateral": "false"
          },
          "expected": "revert"
        }
      ]
    },
    {
      "description": "User 1 reenables WETH as collateral",
      "actions": [
        {
          "name": "setUseAsCollateral",
          "args": {
            "reserve": "WETH",
            "user": "1",
            "useAsCollateral": "true"
          },
          "expected": "success"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/swap-rate-mode.json
================================================
{
  "title": "Pool: Swap rate mode",
  "description": "Test cases for the swapBorrowRateMode() function.",
  "stories": [
    {
      "description": "User 0 tries to swap rate mode without any variable rate loan in progress (revert expected)",
      "actions": [
        {
          "name": "swapBorrowRateMode",
          "args": {
            "reserve": "DAI",
            "user": "1",
            "borrowRateMode": "variable"
          },
          "expected": "revert",
          "revertMessage": "User does not have a variable rate loan in progress on this reserve"
        }
      ]
    },
    {
      "description": "User 0 tries to swap rate mode without any stable rate loan in progress (revert expected)",
      "actions": [
        {
          "name": "swapBorrowRateMode",
          "args": {
            "reserve": "DAI",
            "user": "1",
            "borrowRateMode": "stable"
          },
          "expected": "revert",
          "revertMessage": "User does not have a stable rate loan in progress on this reserve"
        }
      ]
    },
    {
      "description": "User 0 deposits 1000 DAI, user 1 deposits 2 WETH as collateral, borrows 100 DAI at variable rate and swaps to stable after one year",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "1000",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "1000",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "2",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "2",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "100",
            "borrowRateMode": "variable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "swapBorrowRateMode",
          "args": {
            "reserve": "DAI",
            "user": "1",
            "borrowRateMode": "variable"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 1 borrows another 100 DAI, and swaps back to variable after one year, repays the loan",
      "actions": [
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "100",
            "borrowRateMode": "stable",
            "user": "1",
            "timeTravel": "365"
          },
          "expected": "success"
        },
        {
          "name": "swapBorrowRateMode",
          "args": {
            "reserve": "DAI",
            "user": "1",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "description": "Mint 50 DAI to cover the interest",
          "args": {
            "reserve": "DAI",
            "amount": "50",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "repay",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "1",
            "onBehalfOf": "1",
            "borrowRateMode": "variable"
          },
          "expected": "success"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/withdraw-negatives.json
================================================
{
  "title": "Pool: Redeem negative test cases",
  "description": "Redeem function.",
  "stories": [
    {
      "description": "Users 0 Deposits 14760.147 DAI and tries to redeem 0 DAI (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },

        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "0",
            "user": "0"
          },
          "expected": "revert",
          "revertMessage": "Amount to redeem needs to be > 0"
        }
      ]
    },
    {
      "description": "Users 0 tries to redeem 16236.16 DAI from the 14760.147 DAI deposited (revert expected)",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "16236.16",
            "user": "0"
          },
          "expected": "revert",
          "revertMessage": "User cannot redeem more than the available balance"
        }
      ]
    },
    {
      "description": "Users 1 deposits 1 WETH, borrows 100 DAI, tries to redeem the 1 WETH deposited (revert expected)",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "100",
            "user": "1",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        },
        {
          "name": "withdraw",
          "args": {
            "reserve": "WETH",
            "amount": "-1",
            "user": "1"
          },
          "expected": "revert",
          "revertMessage": "Transfer cannot be allowed."
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/scenarios/withdraw.json
================================================
{
  "title": "Pool: Withdraw",
  "description": "withdraw function.",
  "stories": [
    {
      "description": "Users 3 Deposit 14760.147 DAI, set using as collateral = false, then withdraw 14760.147 dai",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "3"
          },
          "expected": "success"
        },
        {
          "name": "setUseAsCollateral",
          "args": {
            "reserve": "DAI",
            "user": "3",
            "useAsCollateral": "false"
          },
          "expected": "success"
        },
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "3"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 Deposits 14760.147 DAI in an empty reserve",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws half of the deposited DAI",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "500",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws remaining half of the deposited DAI",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 Deposits 14760.147 USDC in an empty reserve",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "USDC",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws half of the deposited USDC",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "USDC",
            "amount": "500",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws remaining half of the deposited USDC",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "USDC",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 Deposits 1 WETH in an empty reserve",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws half of the deposited WETH",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "WETH",
            "amount": "0.5",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "User 0 withdraws remaining half of the deposited WETH",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "WETH",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "Users 0 and 1 Deposit 14760.147 DAI, both withdraw",
      "actions": [
        {
          "name": "mint",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "DAI",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "withdraw",
          "args": {
            "reserve": "DAI",
            "amount": "-1",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "Users 0 deposits 14760.147 DAI, user 1 Deposit 14760.147 USDC and 1 WETH, borrows 100 DAI. User 1 tries to withdraw all the USDC",
      "actions": [
        {
          "name": "deposit",
          "args": {
            "reserve": "DAI",
            "amount": "14760.147",
            "user": "0"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "USDC",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "USDC",
            "amount": "14760.147",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "mint",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "approve",
          "args": {
            "reserve": "WETH",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "deposit",
          "args": {
            "reserve": "WETH",
            "amount": "1",
            "user": "1"
          },
          "expected": "success"
        },
        {
          "name": "borrow",
          "args": {
            "reserve": "DAI",
            "amount": "100",
            "user": "1",
            "borrowRateMode": "stable"
          },
          "expected": "success"
        },
        {
          "name": "withdraw",
          "args": {
            "reserve": "USDC",
            "amount": "-1",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    },
    {
      "description": "Users 1 tries to withdraw 0.05 WETH, which does not bring the HF below 1",
      "actions": [
        {
          "name": "withdraw",
          "args": {
            "reserve": "WETH",
            "amount": "0.05",
            "user": "1"
          },
          "expected": "success"
        }
      ]
    }
  ]
}



================================================
FILE: test-suites/helpers/utils/calculations.ts
================================================
import { ONE_YEAR, RAY, MAX_UINT_AMOUNT, PERCENTAGE_FACTOR } from '../../../helpers/constants';
import { IReserveParams, iMultiPoolsAssets, RateMode } from '../../../helpers/types';
import { ReserveData, UserReserveData } from './interfaces';
import { BigNumber } from '@ethersproject/bignumber';
import './wadraymath';
import { expect } from 'chai';

interface Configuration {
  reservesParams: iMultiPoolsAssets<IReserveParams>;
}

export const configuration: Configuration = <Configuration>{};

export const calcExpectedUserDataAfterDeposit = (
  amountDeposited: string,
  reserveDataBeforeAction: ReserveData,
  reserveDataAfterAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  txTimestamp: BigNumber,
  currentTimestamp: BigNumber,
  txCost: BigNumber
): UserReserveData => {
  const expectedUserData = <UserReserveData>{};

  expectedUserData.currentStableDebt = calcExpectedStableDebtTokenBalance(
    userDataBeforeAction.principalStableDebt,
    userDataBeforeAction.stableBorrowRate,
    userDataBeforeAction.stableRateLastUpdated,
    txTimestamp
  );

  expectedUserData.currentVariableDebt = calcExpectedVariableDebtTokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );

  expectedUserData.principalStableDebt = userDataBeforeAction.principalStableDebt;
  expectedUserData.scaledVariableDebt = userDataBeforeAction.scaledVariableDebt;
  expectedUserData.variableBorrowIndex = userDataBeforeAction.variableBorrowIndex;
  expectedUserData.stableBorrowRate = userDataBeforeAction.stableBorrowRate;
  expectedUserData.stableRateLastUpdated = userDataBeforeAction.stableRateLastUpdated;
  expectedUserData.liquidityRate = reserveDataAfterAction.liquidityRate;

  expectedUserData.scaledATokenBalance = calcExpectedScaledATokenBalance(
    userDataBeforeAction,
    reserveDataAfterAction.liquidityIndex,
    BigNumber.from(amountDeposited),
    BigNumber.from(0)
  );
  expectedUserData.currentATokenBalance = calcExpectedATokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  ).add(amountDeposited);

  if (userDataBeforeAction.currentATokenBalance.eq(0)) {
    expectedUserData.usageAsCollateralEnabled = true;
  } else {
    expectedUserData.usageAsCollateralEnabled = userDataBeforeAction.usageAsCollateralEnabled;
  }

  expectedUserData.variableBorrowIndex = userDataBeforeAction.variableBorrowIndex;
  expectedUserData.walletBalance = userDataBeforeAction.walletBalance.sub(amountDeposited);

  expectedUserData.currentStableDebt = expectedUserData.principalStableDebt =
    calcExpectedStableDebtTokenBalance(
      userDataBeforeAction.principalStableDebt,
      userDataBeforeAction.stableBorrowRate,
      userDataBeforeAction.stableRateLastUpdated,
      txTimestamp
    );

  expectedUserData.currentVariableDebt = expectedUserData.principalStableDebt =
    calcExpectedVariableDebtTokenBalance(
      reserveDataBeforeAction,
      userDataBeforeAction,
      txTimestamp
    );

  return expectedUserData;
};

export const calcExpectedUserDataAfterWithdraw = (
  amountWithdrawn: string,
  reserveDataBeforeAction: ReserveData,
  reserveDataAfterAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  txTimestamp: BigNumber,
  currentTimestamp: BigNumber,
  txCost: BigNumber
): UserReserveData => {
  const expectedUserData = <UserReserveData>{};

  const aTokenBalance = calcExpectedATokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );

  if (amountWithdrawn == MAX_UINT_AMOUNT) {
    amountWithdrawn = aTokenBalance.toString();
  }

  expectedUserData.scaledATokenBalance = calcExpectedScaledATokenBalance(
    userDataBeforeAction,
    reserveDataAfterAction.liquidityIndex,
    BigNumber.from(0),
    BigNumber.from(amountWithdrawn)
  );

  expectedUserData.currentATokenBalance = aTokenBalance.sub(amountWithdrawn);
  expectedUserData.principalStableDebt = userDataBeforeAction.principalStableDebt;
  expectedUserData.scaledVariableDebt = userDataBeforeAction.scaledVariableDebt;
  expectedUserData.currentStableDebt = calcExpectedStableDebtTokenBalance(
    userDataBeforeAction.principalStableDebt,
    userDataBeforeAction.stableBorrowRate,
    userDataBeforeAction.stableRateLastUpdated,
    txTimestamp
  );

  expectedUserData.currentVariableDebt = calcExpectedVariableDebtTokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );

  expectedUserData.variableBorrowIndex = userDataBeforeAction.variableBorrowIndex;
  expectedUserData.stableBorrowRate = userDataBeforeAction.stableBorrowRate;
  expectedUserData.stableRateLastUpdated = userDataBeforeAction.stableRateLastUpdated;

  expectedUserData.liquidityRate = reserveDataAfterAction.liquidityRate;

  if (userDataBeforeAction.currentATokenBalance.eq(0)) {
    expectedUserData.usageAsCollateralEnabled = true;
  } else {
    //if the user is withdrawing everything, usageAsCollateralEnabled must be false
    if (expectedUserData.currentATokenBalance.eq(0)) {
      expectedUserData.usageAsCollateralEnabled = false;
    } else {
      expectedUserData.usageAsCollateralEnabled = userDataBeforeAction.usageAsCollateralEnabled;
    }
  }

  expectedUserData.walletBalance = userDataBeforeAction.walletBalance.add(amountWithdrawn);

  return expectedUserData;
};

export const calcExpectedReserveDataAfterDeposit = (
  amountDeposited: string,
  reserveDataBeforeAction: ReserveData,
  txTimestamp: BigNumber
): ReserveData => {
  const expectedReserveData: ReserveData = <ReserveData>{};
  expectedReserveData.unbacked = reserveDataBeforeAction.unbacked;
  expectedReserveData.address = reserveDataBeforeAction.address;
  expectedReserveData.reserveFactor = reserveDataBeforeAction.reserveFactor;

  updateState(reserveDataBeforeAction, expectedReserveData, txTimestamp);
  updateLiquidityAndUsageRatios(
    reserveDataBeforeAction,
    expectedReserveData,
    BigNumber.from(amountDeposited),
    BigNumber.from(0)
  );

  expectedReserveData.averageStableBorrowRate = reserveDataBeforeAction.averageStableBorrowRate;
  const rates = calcExpectedInterestRates(
    reserveDataBeforeAction.symbol,
    reserveDataBeforeAction.marketStableRate,
    expectedReserveData.totalStableDebt,
    expectedReserveData.totalVariableDebt,
    expectedReserveData.averageStableBorrowRate,
    expectedReserveData.availableLiquidity,
    expectedReserveData.totalLiquidity
  );
  expectedReserveData.liquidityRate = rates[0];
  expectedReserveData.stableBorrowRate = rates[1];
  expectedReserveData.variableBorrowRate = rates[2];

  updateTotalLiquidityAndUsageRatio(expectedReserveData);

  return expectedReserveData;
};

export const calcExpectedReserveDataAfterMintUnbacked = (
  amountMinted: string,
  reserveDataBeforeAction: ReserveData,
  txTimestamp: BigNumber
): ReserveData => {
  const expectedReserveData: ReserveData = <ReserveData>{};
  const amountMintedBN = BigNumber.from(amountMinted);

  expectedReserveData.address = reserveDataBeforeAction.address;
  expectedReserveData.reserveFactor = reserveDataBeforeAction.reserveFactor;

  updateState(reserveDataBeforeAction, expectedReserveData, txTimestamp);

  expectedReserveData.unbacked = reserveDataBeforeAction.unbacked.add(amountMintedBN);
  updateLiquidityAndUsageRatios(
    reserveDataBeforeAction,
    expectedReserveData,
    BigNumber.from(0),
    BigNumber.from(0)
  );

  expectedReserveData.averageStableBorrowRate = calcExpectedAverageStableBorrowRate(
    reserveDataBeforeAction.averageStableBorrowRate,
    reserveDataBeforeAction.totalStableDebt,
    BigNumber.from(0),
    reserveDataBeforeAction.stableBorrowRate
  );

  const rates = calcExpectedInterestRates(
    reserveDataBeforeAction.symbol,
    reserveDataBeforeAction.marketStableRate,
    expectedReserveData.totalStableDebt,
    expectedReserveData.totalVariableDebt,
    expectedReserveData.averageStableBorrowRate,
    expectedReserveData.availableLiquidity,
    expectedReserveData.totalLiquidity
  );
  expectedReserveData.liquidityRate = rates[0];
  expectedReserveData.stableBorrowRate = rates[1];
  expectedReserveData.variableBorrowRate = rates[2];

  updateTotalLiquidityAndUsageRatio(expectedReserveData);

  return expectedReserveData;
};

export const calcExpectedReserveDataAfterBackUnbacked = (
  scaledATokenSupply: BigNumber,
  amount: string,
  fee: string,
  bridgeProtocolFee: string,
  reserveDataBeforeAction: ReserveData,
  txTimestamp: BigNumber
): ReserveData => {
  const cumulateToLiquidityIndex = (
    liquidityIndex: BigNumber,
    totalLiquidity: BigNumber,
    amount: BigNumber
  ) => {
    const amountToLiquidityRatio = amount.wadToRay().rayDiv(totalLiquidity.wadToRay());
    return amountToLiquidityRatio.add(RAY).rayMul(liquidityIndex);
  };
  const expectedReserveData: ReserveData = <ReserveData>{};
  expectedReserveData.address = reserveDataBeforeAction.address;
  expectedReserveData.reserveFactor = reserveDataBeforeAction.reserveFactor;
  updateState(reserveDataBeforeAction, expectedReserveData, txTimestamp);

  const amountBN = BigNumber.from(amount);
  const backingAmount = amountBN.lt(reserveDataBeforeAction.unbacked)
    ? amountBN
    : reserveDataBeforeAction.unbacked;

  const feeBN = BigNumber.from(fee);

  const protocolFeePercentage = BigNumber.from(bridgeProtocolFee);

  const premiumToProtocol = feeBN.percentMul(protocolFeePercentage);
  const premiumToLP = feeBN.sub(premiumToProtocol);

  const totalSupply = scaledATokenSupply.rayMul(expectedReserveData.liquidityIndex);
  // The fee is added directly to total liquidity, the backing will not change this liquidity.
  // We only update the liquidity index at the end, because it will otherwise influence computations midway

  expectedReserveData.liquidityIndex = cumulateToLiquidityIndex(
    expectedReserveData.liquidityIndex,
    totalSupply.add(
      expectedReserveData.accruedToTreasuryScaled.rayMul(expectedReserveData.liquidityIndex)
    ),
    premiumToLP
  );

  expectedReserveData.accruedToTreasuryScaled = expectedReserveData.accruedToTreasuryScaled.add(
    premiumToProtocol.rayDiv(expectedReserveData.liquidityIndex)
  );

  expectedReserveData.unbacked = reserveDataBeforeAction.unbacked.sub(backingAmount);

  updateLiquidityAndUsageRatios(
    reserveDataBeforeAction,
    expectedReserveData,
    backingAmount.add(feeBN),
    BigNumber.from(0)
  );

  expectedReserveData.averageStableBorrowRate = calcExpectedAverageStableBorrowRate(
    reserveDataBeforeAction.averageStableBorrowRate,
    reserveDataBeforeAction.totalStableDebt,
    BigNumber.from(0),
    reserveDataBeforeAction.stableBorrowRate
  );

  const rates = calcExpectedInterestRates(
    reserveDataBeforeAction.symbol,
    reserveDataBeforeAction.marketStableRate,
    expectedReserveData.totalStableDebt,
    expectedReserveData.totalVariableDebt,
    expectedReserveData.averageStableBorrowRate,
    expectedReserveData.availableLiquidity,
    expectedReserveData.totalLiquidity
  );

  expectedReserveData.liquidityRate = rates[0];
  expectedReserveData.stableBorrowRate = rates[1];
  expectedReserveData.variableBorrowRate = rates[2];

  updateTotalLiquidityAndUsageRatio(expectedReserveData);

  return expectedReserveData;
};

export const calcExpectedReserveDataAfterWithdraw = (
  amountWithdrawn: string,
  reserveDataBeforeAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  txTimestamp: BigNumber
): ReserveData => {
  const expectedReserveData: ReserveData = <ReserveData>{};
  expectedReserveData.unbacked = reserveDataBeforeAction.unbacked;
  expectedReserveData.address = reserveDataBeforeAction.address;
  expectedReserveData.reserveFactor = reserveDataBeforeAction.reserveFactor;

  if (amountWithdrawn == MAX_UINT_AMOUNT) {
    amountWithdrawn = calcExpectedATokenBalance(
      reserveDataBeforeAction,
      userDataBeforeAction,
      txTimestamp
    ).toString();
  }

  updateState(reserveDataBeforeAction, expectedReserveData, txTimestamp);
  updateLiquidityAndUsageRatios(
    reserveDataBeforeAction,
    expectedReserveData,
    BigNumber.from(0),
    BigNumber.from(amountWithdrawn)
  );

  expectedReserveData.averageStableBorrowRate = reserveDataBeforeAction.averageStableBorrowRate;
  const rates = calcExpectedInterestRates(
    reserveDataBeforeAction.symbol,
    reserveDataBeforeAction.marketStableRate,
    expectedReserveData.totalStableDebt,
    expectedReserveData.totalVariableDebt,
    expectedReserveData.averageStableBorrowRate,
    expectedReserveData.availableLiquidity,
    expectedReserveData.totalLiquidity
  );
  expectedReserveData.liquidityRate = rates[0];
  expectedReserveData.stableBorrowRate = rates[1];
  expectedReserveData.variableBorrowRate = rates[2];

  updateTotalLiquidityAndUsageRatio(expectedReserveData);

  return expectedReserveData;
};

export const calcExpectedReserveDataAfterBorrow = (
  amountBorrowed: string,
  borrowRateMode: string,
  reserveDataBeforeAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  txTimestamp: BigNumber,
  currentTimestamp: BigNumber
): ReserveData => {
  const expectedReserveData: ReserveData = <ReserveData>{};
  expectedReserveData.unbacked = reserveDataBeforeAction.unbacked;
  expectedReserveData.address = reserveDataBeforeAction.address;
  expectedReserveData.reserveFactor = reserveDataBeforeAction.reserveFactor;
  expectedReserveData.lastUpdateTimestamp = txTimestamp;

  const amountBorrowedBN = BigNumber.from(amountBorrowed);

  // Update indexes
  updateState(reserveDataBeforeAction, expectedReserveData, txTimestamp);
  updateLiquidityAndUsageRatios(
    reserveDataBeforeAction,
    expectedReserveData,
    BigNumber.from(0),
    BigNumber.from(amountBorrowed)
  );

  // Now we can perform the borrow THERE MUST BE SOMETHING IN HERE THAN CAN BE SIMPLIFIED
  if (borrowRateMode == RateMode.Stable) {
    const expectedStableDebtUntilTx = calcExpectedTotalStableDebt(
      reserveDataBeforeAction.principalStableDebt,
      reserveDataBeforeAction.averageStableBorrowRate,
      reserveDataBeforeAction.totalStableDebtLastUpdated,
      txTimestamp
    );

    expectedReserveData.averageStableBorrowRate = calcExpectedAverageStableBorrowRate(
      reserveDataBeforeAction.averageStableBorrowRate,
      expectedStableDebtUntilTx,
      amountBorrowedBN,
      reserveDataBeforeAction.stableBorrowRate
    );

    expectedReserveData.principalStableDebt = expectedStableDebtUntilTx.add(amountBorrowedBN);

    const ratesAfterTx = calcExpectedInterestRates(
      reserveDataBeforeAction.symbol,
      reserveDataBeforeAction.marketStableRate,
      expectedReserveData.principalStableDebt,
      expectedReserveData.totalVariableDebt,
      expectedReserveData.averageStableBorrowRate,
      expectedReserveData.availableLiquidity,
      expectedReserveData.totalLiquidity
    );

    expectedReserveData.liquidityRate = ratesAfterTx[0];
    expectedReserveData.stableBorrowRate = ratesAfterTx[1];
    expectedReserveData.variableBorrowRate = ratesAfterTx[2];

    expectedReserveData.totalStableDebt = calcExpectedTotalStableDebt(
      expectedReserveData.principalStableDebt,
      expectedReserveData.averageStableBorrowRate,
      txTimestamp,
      currentTimestamp
    );

    expectedReserveData.totalVariableDebt = reserveDataBeforeAction.scaledVariableDebt.rayMul(
      calcExpectedReserveNormalizedDebt(
        expectedReserveData.variableBorrowRate,
        expectedReserveData.variableBorrowIndex,
        txTimestamp,
        currentTimestamp
      )
    );

    [expectedReserveData.borrowUsageRatio, expectedReserveData.supplyUsageRatio] =
      calcExpectedUsageRatios(
        expectedReserveData.totalStableDebt,
        expectedReserveData.totalVariableDebt,
        expectedReserveData.availableLiquidity,
        expectedReserveData.totalLiquidity
      );
  } else {
    expectedReserveData.principalStableDebt = reserveDataBeforeAction.principalStableDebt;

    const totalStableDebtAfterTx = calcExpectedStableDebtTokenBalance(
      reserveDataBeforeAction.principalStableDebt,
      reserveDataBeforeAction.averageStableBorrowRate,
      reserveDataBeforeAction.totalStableDebtLastUpdated,
      txTimestamp
    );

    expectedReserveData.totalStableDebt = calcExpectedTotalStableDebt(
      reserveDataBeforeAction.principalStableDebt,
      reserveDataBeforeAction.averageStableBorrowRate,
      reserveDataBeforeAction.totalStableDebtLastUpdated,
      currentTimestamp
    );

    expectedReserveData.averageStableBorrowRate = reserveDataBeforeAction.averageStableBorrowRate;

    expectedReserveData.scaledVariableDebt = reserveDataBeforeAction.scaledVariableDebt.add(
      amountBorrowedBN.rayDiv(expectedReserveData.variableBorrowIndex)
    );

    const totalVariableDebtAfterTx = expectedReserveData.scaledVariableDebt.rayMul(
      expectedReserveData.variableBorrowIndex
    );

    [expectedReserveData.borrowUsageRatio, expectedReserveData.supplyUsageRatio] =
      calcExpectedUsageRatios(
        expectedReserveData.totalStableDebt,
        expectedReserveData.totalVariableDebt,
        expectedReserveData.availableLiquidity,
        expectedReserveData.totalLiquidity
      );

    const rates = calcExpectedInterestRates(
      reserveDataBeforeAction.symbol,
      reserveDataBeforeAction.marketStableRate,
      totalStableDebtAfterTx,
      totalVariableDebtAfterTx,
      expectedReserveData.averageStableBorrowRate,
      expectedReserveData.availableLiquidity,
      expectedReserveData.totalLiquidity
    );

    expectedReserveData.liquidityRate = rates[0];
    expectedReserveData.stableBorrowRate = rates[1];
    expectedReserveData.variableBorrowRate = rates[2];

    expectedReserveData.totalVariableDebt = expectedReserveData.scaledVariableDebt.rayMul(
      calcExpectedReserveNormalizedDebt(
        expectedReserveData.variableBorrowRate,
        expectedReserveData.variableBorrowIndex,
        txTimestamp,
        currentTimestamp
      )
    );

    [expectedReserveData.borrowUsageRatio, expectedReserveData.supplyUsageRatio] =
      calcExpectedUsageRatios(
        expectedReserveData.totalStableDebt,
        expectedReserveData.totalVariableDebt,
        expectedReserveData.availableLiquidity,
        expectedReserveData.totalLiquidity
      );
  }

  return expectedReserveData;
};

export const calcExpectedReserveDataAfterRepay = (
  amountRepaid: string,
  borrowRateMode: RateMode,
  reserveDataBeforeAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  txTimestamp: BigNumber,
  currentTimestamp: BigNumber
): ReserveData => {
  const expectedReserveData: ReserveData = <ReserveData>{};
  expectedReserveData.unbacked = reserveDataBeforeAction.unbacked;
  expectedReserveData.address = reserveDataBeforeAction.address;
  expectedReserveData.reserveFactor = reserveDataBeforeAction.reserveFactor;

  // TODO: The repay amount here need to be capped to the balance.

  let amountRepaidBN = BigNumber.from(amountRepaid);

  const userStableDebt = calcExpectedStableDebtTokenBalance(
    userDataBeforeAction.principalStableDebt,
    userDataBeforeAction.stableBorrowRate,
    userDataBeforeAction.stableRateLastUpdated,
    txTimestamp
  );

  const userVariableDebt = calcExpectedVariableDebtTokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );

  //if amount repaid == MAX_UINT_AMOUNT, user is repaying everything
  if (amountRepaidBN.abs().eq(MAX_UINT_AMOUNT)) {
    if (borrowRateMode == RateMode.Stable) {
      amountRepaidBN = userStableDebt;
    } else {
      amountRepaidBN = userVariableDebt;
    }
  }

  updateState(reserveDataBeforeAction, expectedReserveData, txTimestamp);
  updateLiquidityAndUsageRatios(
    reserveDataBeforeAction,
    expectedReserveData,
    amountRepaidBN,
    BigNumber.from(0)
  );

  if (borrowRateMode == RateMode.Stable) {
    const expectedDebt = calcExpectedTotalStableDebt(
      reserveDataBeforeAction.principalStableDebt,
      reserveDataBeforeAction.averageStableBorrowRate,
      reserveDataBeforeAction.totalStableDebtLastUpdated,
      txTimestamp
    );

    expectedReserveData.principalStableDebt = expectedReserveData.totalStableDebt =
      expectedDebt.sub(amountRepaidBN);

    //due to accumulation errors, the total stable debt might be smaller than the last user debt.
    //in this case we simply set the total supply and avg stable rate to 0.
    if (expectedReserveData.totalStableDebt.lt(0)) {
      expectedReserveData.principalStableDebt =
        expectedReserveData.totalStableDebt =
        expectedReserveData.averageStableBorrowRate =
          BigNumber.from(0);
    } else {
      expectedReserveData.averageStableBorrowRate = calcExpectedAverageStableBorrowRate(
        reserveDataBeforeAction.averageStableBorrowRate,
        expectedDebt,
        amountRepaidBN.negated(),
        userDataBeforeAction.stableBorrowRate
      );

      //also due to accumulation errors, the final avg stable rate when the last user repays might be negative.
      //if that is the case, it means a small leftover of total stable debt is left, which can be erased.
      if (expectedReserveData.averageStableBorrowRate.lt(0)) {
        expectedReserveData.principalStableDebt =
          expectedReserveData.totalStableDebt =
          expectedReserveData.averageStableBorrowRate =
            BigNumber.from(0);
      }
    }
  } else {
    expectedReserveData.scaledVariableDebt = reserveDataBeforeAction.scaledVariableDebt.sub(
      amountRepaidBN.rayDiv(expectedReserveData.variableBorrowIndex)
    );
    expectedReserveData.totalVariableDebt = expectedReserveData.scaledVariableDebt.rayMul(
      expectedReserveData.variableBorrowIndex
    );

    expectedReserveData.averageStableBorrowRate = reserveDataBeforeAction.averageStableBorrowRate;
  }

  // Update usage ratio because of debt change
  [expectedReserveData.borrowUsageRatio, expectedReserveData.supplyUsageRatio] =
    calcExpectedUsageRatios(
      expectedReserveData.totalStableDebt,
      expectedReserveData.totalVariableDebt,
      expectedReserveData.availableLiquidity,
      expectedReserveData.totalLiquidity
    );

  const rates = calcExpectedInterestRates(
    reserveDataBeforeAction.symbol,
    reserveDataBeforeAction.marketStableRate,
    expectedReserveData.totalStableDebt,
    expectedReserveData.totalVariableDebt,
    expectedReserveData.averageStableBorrowRate,
    expectedReserveData.availableLiquidity,
    expectedReserveData.totalLiquidity
  );
  expectedReserveData.liquidityRate = rates[0];
  expectedReserveData.stableBorrowRate = rates[1];
  expectedReserveData.variableBorrowRate = rates[2];

  expectedReserveData.lastUpdateTimestamp = txTimestamp;

  updateTotalLiquidityAndUsageRatio(expectedReserveData);

  return expectedReserveData;
};

export const calcExpectedUserDataAfterBorrow = (
  amountBorrowed: string,
  interestRateMode: string,
  reserveDataBeforeAction: ReserveData,
  expectedDataAfterAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  txTimestamp: BigNumber,
  currentTimestamp: BigNumber
): UserReserveData => {
  const expectedUserData = <UserReserveData>{};

  const amountBorrowedBN = BigNumber.from(amountBorrowed);

  if (interestRateMode == RateMode.Stable) {
    const stableDebtUntilTx = calcExpectedStableDebtTokenBalance(
      userDataBeforeAction.principalStableDebt,
      userDataBeforeAction.stableBorrowRate,
      userDataBeforeAction.stableRateLastUpdated,
      txTimestamp
    );

    expectedUserData.principalStableDebt = stableDebtUntilTx.add(amountBorrowed);
    expectedUserData.stableRateLastUpdated = txTimestamp;

    expectedUserData.stableBorrowRate = calcExpectedUserStableRate(
      stableDebtUntilTx,
      userDataBeforeAction.stableBorrowRate,
      amountBorrowedBN,
      reserveDataBeforeAction.stableBorrowRate
    );

    expectedUserData.currentStableDebt = calcExpectedStableDebtTokenBalance(
      expectedUserData.principalStableDebt,
      expectedUserData.stableBorrowRate,
      txTimestamp,
      currentTimestamp
    );

    expectedUserData.scaledVariableDebt = userDataBeforeAction.scaledVariableDebt;
  } else {
    expectedUserData.scaledVariableDebt = reserveDataBeforeAction.scaledVariableDebt.add(
      amountBorrowedBN.rayDiv(expectedDataAfterAction.variableBorrowIndex)
    );

    expectedUserData.principalStableDebt = userDataBeforeAction.principalStableDebt;

    expectedUserData.stableBorrowRate = userDataBeforeAction.stableBorrowRate;

    expectedUserData.stableRateLastUpdated = userDataBeforeAction.stableRateLastUpdated;

    expectedUserData.currentStableDebt = calcExpectedStableDebtTokenBalance(
      userDataBeforeAction.principalStableDebt,
      userDataBeforeAction.stableBorrowRate,
      userDataBeforeAction.stableRateLastUpdated,
      currentTimestamp
    );
  }

  expectedUserData.currentVariableDebt = calcExpectedVariableDebtTokenBalance(
    expectedDataAfterAction,
    expectedUserData,
    currentTimestamp
  );

  expectedUserData.liquidityRate = expectedDataAfterAction.liquidityRate;

  expectedUserData.usageAsCollateralEnabled = userDataBeforeAction.usageAsCollateralEnabled;

  expectedUserData.currentATokenBalance = calcExpectedATokenBalance(
    expectedDataAfterAction,
    userDataBeforeAction,
    currentTimestamp
  );

  expectedUserData.scaledATokenBalance = userDataBeforeAction.scaledATokenBalance;

  expectedUserData.walletBalance = userDataBeforeAction.walletBalance.add(amountBorrowed);

  return expectedUserData;
};

export const calcExpectedUserDataAfterRepay = (
  totalRepaid: string,
  rateMode: RateMode,
  reserveDataBeforeAction: ReserveData,
  expectedDataAfterAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  user: string,
  onBehalfOf: string,
  txTimestamp: BigNumber,
  currentTimestamp: BigNumber
): UserReserveData => {
  const expectedUserData = <UserReserveData>{};

  const variableDebt = calcExpectedVariableDebtTokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    currentTimestamp
  );

  const stableDebt = calcExpectedStableDebtTokenBalance(
    userDataBeforeAction.principalStableDebt,
    userDataBeforeAction.stableBorrowRate,
    userDataBeforeAction.stableRateLastUpdated,
    currentTimestamp
  );

  let totalRepaidBN = BigNumber.from(totalRepaid);
  if (totalRepaidBN.abs().eq(MAX_UINT_AMOUNT)) {
    totalRepaidBN = rateMode == RateMode.Stable ? stableDebt : variableDebt;
  }

  if (rateMode == RateMode.Stable) {
    expectedUserData.scaledVariableDebt = userDataBeforeAction.scaledVariableDebt;
    expectedUserData.currentVariableDebt = variableDebt;

    expectedUserData.principalStableDebt = expectedUserData.currentStableDebt =
      stableDebt.sub(totalRepaidBN);

    if (expectedUserData.currentStableDebt.eq('0')) {
      //user repaid everything
      expectedUserData.stableBorrowRate = expectedUserData.stableRateLastUpdated =
        BigNumber.from('0');
    } else {
      expectedUserData.stableBorrowRate = userDataBeforeAction.stableBorrowRate;
      expectedUserData.stableRateLastUpdated = txTimestamp;
    }
  } else {
    expectedUserData.currentStableDebt = userDataBeforeAction.principalStableDebt;
    expectedUserData.principalStableDebt = stableDebt;
    expectedUserData.stableBorrowRate = userDataBeforeAction.stableBorrowRate;
    expectedUserData.stableRateLastUpdated = userDataBeforeAction.stableRateLastUpdated;

    expectedUserData.scaledVariableDebt = userDataBeforeAction.scaledVariableDebt.sub(
      totalRepaidBN.rayDiv(expectedDataAfterAction.variableBorrowIndex)
    );
    expectedUserData.currentVariableDebt = expectedUserData.scaledVariableDebt.rayMul(
      expectedDataAfterAction.variableBorrowIndex
    );
  }

  expectedUserData.liquidityRate = expectedDataAfterAction.liquidityRate;

  expectedUserData.usageAsCollateralEnabled = userDataBeforeAction.usageAsCollateralEnabled;

  expectedUserData.currentATokenBalance = calcExpectedATokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );
  expectedUserData.scaledATokenBalance = userDataBeforeAction.scaledATokenBalance;

  if (user === onBehalfOf) {
    expectedUserData.walletBalance = userDataBeforeAction.walletBalance.sub(totalRepaidBN);
  } else {
    //wallet balance didn't change
    expectedUserData.walletBalance = userDataBeforeAction.walletBalance;
  }

  return expectedUserData;
};

export const calcExpectedUserDataAfterSetUseAsCollateral = (
  useAsCollateral: boolean,
  reserveDataBeforeAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  txCost: BigNumber
): UserReserveData => {
  const expectedUserData = { ...userDataBeforeAction };

  expectedUserData.usageAsCollateralEnabled = useAsCollateral;

  return expectedUserData;
};

export const calcExpectedReserveDataAfterSwapRateMode = (
  reserveDataBeforeAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  rateMode: string,
  txTimestamp: BigNumber
): ReserveData => {
  const expectedReserveData: ReserveData = <ReserveData>{};
  expectedReserveData.unbacked = reserveDataBeforeAction.unbacked;
  expectedReserveData.address = reserveDataBeforeAction.address;
  expectedReserveData.reserveFactor = reserveDataBeforeAction.reserveFactor;

  updateState(reserveDataBeforeAction, expectedReserveData, txTimestamp);

  updateLiquidityAndUsageRatios(
    reserveDataBeforeAction,
    expectedReserveData,
    BigNumber.from(0),
    BigNumber.from(0)
  );

  const variableDebt = calcExpectedVariableDebtTokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );

  const stableDebt = calcExpectedStableDebtTokenBalance(
    userDataBeforeAction.principalStableDebt,
    userDataBeforeAction.stableBorrowRate,
    userDataBeforeAction.stableRateLastUpdated,
    txTimestamp
  );

  const totalStableDebtUntilTx = expectedReserveData.totalStableDebt;

  if (rateMode === RateMode.Stable) {
    //swap user stable debt to variable
    expectedReserveData.scaledVariableDebt = reserveDataBeforeAction.scaledVariableDebt.add(
      stableDebt.rayDiv(expectedReserveData.variableBorrowIndex)
    );

    expectedReserveData.totalVariableDebt = expectedReserveData.scaledVariableDebt.rayMul(
      expectedReserveData.variableBorrowIndex
    );

    expectedReserveData.principalStableDebt = expectedReserveData.totalStableDebt =
      totalStableDebtUntilTx.sub(stableDebt);

    expectedReserveData.averageStableBorrowRate = calcExpectedAverageStableBorrowRate(
      reserveDataBeforeAction.averageStableBorrowRate,
      expectedReserveData.principalStableDebt.add(stableDebt),
      stableDebt.negated(),
      userDataBeforeAction.stableBorrowRate
    );
  } else {
    //swap variable to stable
    expectedReserveData.principalStableDebt = expectedReserveData.totalStableDebt =
      totalStableDebtUntilTx.add(variableDebt);

    expectedReserveData.scaledVariableDebt = reserveDataBeforeAction.scaledVariableDebt.sub(
      variableDebt.rayDiv(expectedReserveData.variableBorrowIndex)
    );

    expectedReserveData.totalVariableDebt = expectedReserveData.scaledVariableDebt.rayMul(
      expectedReserveData.variableBorrowIndex
    );

    expectedReserveData.averageStableBorrowRate = calcExpectedAverageStableBorrowRate(
      reserveDataBeforeAction.averageStableBorrowRate,
      reserveDataBeforeAction.totalStableDebt,
      variableDebt,
      reserveDataBeforeAction.stableBorrowRate
    );
  }

  [expectedReserveData.borrowUsageRatio, expectedReserveData.supplyUsageRatio] =
    calcExpectedUsageRatios(
      expectedReserveData.totalStableDebt,
      expectedReserveData.totalVariableDebt,
      expectedReserveData.availableLiquidity,
      expectedReserveData.totalLiquidity
    );
  const rates = calcExpectedInterestRates(
    reserveDataBeforeAction.symbol,
    reserveDataBeforeAction.marketStableRate,
    expectedReserveData.totalStableDebt,
    expectedReserveData.totalVariableDebt,
    expectedReserveData.averageStableBorrowRate,
    expectedReserveData.availableLiquidity,
    expectedReserveData.totalLiquidity
  );
  expectedReserveData.liquidityRate = rates[0];
  expectedReserveData.stableBorrowRate = rates[1];
  expectedReserveData.variableBorrowRate = rates[2];

  updateTotalLiquidityAndUsageRatio(expectedReserveData);

  return expectedReserveData;
};

export const calcExpectedUserDataAfterSwapRateMode = (
  reserveDataBeforeAction: ReserveData,
  expectedDataAfterAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  rateMode: string,
  txCost: BigNumber,
  txTimestamp: BigNumber
): UserReserveData => {
  const expectedUserData = { ...userDataBeforeAction };

  const stableDebtBalance = calcExpectedStableDebtTokenBalance(
    userDataBeforeAction.principalStableDebt,
    userDataBeforeAction.stableBorrowRate,
    userDataBeforeAction.stableRateLastUpdated,
    txTimestamp
  );

  const variableDebtBalance = calcExpectedVariableDebtTokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );

  expectedUserData.currentATokenBalance = calcExpectedATokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );

  if (rateMode === RateMode.Stable) {
    // swap to variable
    expectedUserData.currentStableDebt = expectedUserData.principalStableDebt = BigNumber.from(0);

    expectedUserData.stableBorrowRate = BigNumber.from(0);

    expectedUserData.scaledVariableDebt = userDataBeforeAction.scaledVariableDebt.add(
      stableDebtBalance.rayDiv(expectedDataAfterAction.variableBorrowIndex)
    );
    expectedUserData.currentVariableDebt = expectedUserData.scaledVariableDebt.rayMul(
      expectedDataAfterAction.variableBorrowIndex
    );

    expectedUserData.stableRateLastUpdated = BigNumber.from(0);
  } else {
    expectedUserData.principalStableDebt = expectedUserData.currentStableDebt =
      userDataBeforeAction.currentStableDebt.add(variableDebtBalance);

    //weighted average of the previous and the current
    expectedUserData.stableBorrowRate = calcExpectedUserStableRate(
      stableDebtBalance,
      userDataBeforeAction.stableBorrowRate,
      variableDebtBalance,
      reserveDataBeforeAction.stableBorrowRate
    );

    expectedUserData.stableRateLastUpdated = txTimestamp;

    expectedUserData.currentVariableDebt = expectedUserData.scaledVariableDebt = BigNumber.from(0);
  }

  expectedUserData.liquidityRate = expectedDataAfterAction.liquidityRate;

  return expectedUserData;
};

export const calcExpectedReserveDataAfterStableRateRebalance = (
  reserveDataBeforeAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  txTimestamp: BigNumber
): ReserveData => {
  const expectedReserveData: ReserveData = <ReserveData>{};
  expectedReserveData.unbacked = reserveDataBeforeAction.unbacked;
  expectedReserveData.address = reserveDataBeforeAction.address;
  expectedReserveData.reserveFactor = reserveDataBeforeAction.reserveFactor;

  updateState(reserveDataBeforeAction, expectedReserveData, txTimestamp);
  updateLiquidityAndUsageRatios(
    reserveDataBeforeAction,
    expectedReserveData,
    BigNumber.from(0),
    BigNumber.from(0)
  );

  const userStableDebt = calcExpectedStableDebtTokenBalance(
    userDataBeforeAction.principalStableDebt,
    userDataBeforeAction.stableBorrowRate,
    userDataBeforeAction.stableRateLastUpdated,
    txTimestamp
  );

  expectedReserveData.principalStableDebt = expectedReserveData.totalStableDebt =
    calcExpectedTotalStableDebt(
      reserveDataBeforeAction.principalStableDebt,
      reserveDataBeforeAction.averageStableBorrowRate,
      reserveDataBeforeAction.totalStableDebtLastUpdated,
      txTimestamp
    );

  //removing the stable liquidity at the old rate

  const avgRateBefore = calcExpectedAverageStableBorrowRateRebalance(
    reserveDataBeforeAction.averageStableBorrowRate,
    expectedReserveData.totalStableDebt,
    userStableDebt.negated(),
    userDataBeforeAction.stableBorrowRate
  );
  // adding it again at the new rate

  expectedReserveData.averageStableBorrowRate = calcExpectedAverageStableBorrowRateRebalance(
    avgRateBefore,
    expectedReserveData.totalStableDebt.sub(userStableDebt),
    userStableDebt,
    reserveDataBeforeAction.stableBorrowRate
  );

  [expectedReserveData.borrowUsageRatio, expectedReserveData.supplyUsageRatio] =
    calcExpectedUsageRatios(
      expectedReserveData.totalStableDebt,
      expectedReserveData.totalVariableDebt,
      expectedReserveData.availableLiquidity,
      expectedReserveData.totalLiquidity
    );

  const rates = calcExpectedInterestRates(
    reserveDataBeforeAction.symbol,
    reserveDataBeforeAction.marketStableRate,
    expectedReserveData.totalStableDebt,
    expectedReserveData.totalVariableDebt,
    expectedReserveData.averageStableBorrowRate,
    expectedReserveData.availableLiquidity,
    expectedReserveData.totalLiquidity
  );

  expectedReserveData.liquidityRate = rates[0];
  expectedReserveData.stableBorrowRate = rates[1];
  expectedReserveData.variableBorrowRate = rates[2];

  updateTotalLiquidityAndUsageRatio(expectedReserveData);

  return expectedReserveData;
};

export const calcExpectedUserDataAfterStableRateRebalance = (
  reserveDataBeforeAction: ReserveData,
  expectedDataAfterAction: ReserveData,
  userDataBeforeAction: UserReserveData,
  txCost: BigNumber,
  txTimestamp: BigNumber
): UserReserveData => {
  const expectedUserData = { ...userDataBeforeAction };

  expectedUserData.principalStableDebt = userDataBeforeAction.principalStableDebt;

  expectedUserData.principalVariableDebt = calcExpectedVariableDebtTokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );
  expectedUserData.currentStableDebt = expectedUserData.principalStableDebt =
    calcExpectedStableDebtTokenBalance(
      userDataBeforeAction.principalStableDebt,
      userDataBeforeAction.stableBorrowRate,
      userDataBeforeAction.stableRateLastUpdated,
      txTimestamp
    );

  expectedUserData.currentVariableDebt = calcExpectedVariableDebtTokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );

  expectedUserData.stableRateLastUpdated = txTimestamp;

  expectedUserData.principalVariableDebt = userDataBeforeAction.principalVariableDebt;

  // Stable rate after burn
  expectedUserData.stableBorrowRate = expectedDataAfterAction.averageStableBorrowRate;
  expectedUserData.liquidityRate = expectedDataAfterAction.liquidityRate;

  expectedUserData.currentATokenBalance = calcExpectedATokenBalance(
    reserveDataBeforeAction,
    userDataBeforeAction,
    txTimestamp
  );

  return expectedUserData;
};

const calcExpectedScaledATokenBalance = (
  userDataBeforeAction: UserReserveData,
  index: BigNumber,
  amountAdded: BigNumber,
  amountTaken: BigNumber
) => {
  return userDataBeforeAction.scaledATokenBalance
    .add(amountAdded.rayDiv(index))
    .sub(amountTaken.rayDiv(index));
};

export const calcExpectedATokenBalance = (
  reserveData: ReserveData,
  userData: UserReserveData,
  currentTimestamp: BigNumber
) => {
  const index = calcExpectedReserveNormalizedIncome(reserveData, currentTimestamp);

  const { scaledATokenBalance: scaledBalanceBeforeAction } = userData;

  return scaledBalanceBeforeAction.rayMul(index);
};

const calcExpectedAverageStableBorrowRate = (
  avgStableRateBefore: BigNumber,
  totalStableDebtBefore: BigNumber,
  amountChanged: string | BigNumber,
  rate: BigNumber
) => {
  const weightedTotalBorrows = avgStableRateBefore.mul(totalStableDebtBefore);
  const weightedAmountBorrowed = rate.mul(amountChanged);
  const totalBorrowedStable = totalStableDebtBefore.add(amountChanged);

  if (totalBorrowedStable.eq(0)) return BigNumber.from('0');

  return weightedTotalBorrows.add(weightedAmountBorrowed).div(totalBorrowedStable);
};

const calcExpectedAverageStableBorrowRateRebalance = (
  avgStableRateBefore: BigNumber,
  totalStableDebtBefore: BigNumber,
  amountChanged: BigNumber,
  rate: BigNumber
) => {
  const weightedTotalBorrows = avgStableRateBefore.rayMul(totalStableDebtBefore);
  const weightedAmountBorrowed = rate.rayMul(amountChanged.wadToRay());
  const totalBorrowedStable = totalStableDebtBefore.add(amountChanged.wadToRay());

  if (totalBorrowedStable.eq(0)) return BigNumber.from('0');

  return weightedTotalBorrows.add(weightedAmountBorrowed).rayDiv(totalBorrowedStable);
};

export const calcExpectedVariableDebtTokenBalance = (
  reserveData: ReserveData,
  userData: UserReserveData,
  currentTimestamp: BigNumber
) => {
  const normalizedDebt = calcExpectedReserveNormalizedDebt(
    reserveData.variableBorrowRate,
    reserveData.variableBorrowIndex,
    reserveData.lastUpdateTimestamp,
    currentTimestamp
  );

  const { scaledVariableDebt } = userData;

  return scaledVariableDebt.rayMul(normalizedDebt);
};

export const calcExpectedStableDebtTokenBalance = (
  principalStableDebt: BigNumber,
  stableBorrowRate: BigNumber,
  stableRateLastUpdated: BigNumber,
  currentTimestamp: BigNumber
) => {
  if (
    stableBorrowRate.eq(0) ||
    currentTimestamp.eq(stableRateLastUpdated) ||
    stableRateLastUpdated.eq(0)
  ) {
    return principalStableDebt;
  }

  const cumulatedInterest = calcCompoundedInterest(
    stableBorrowRate,
    currentTimestamp,
    stableRateLastUpdated
  );

  return principalStableDebt.rayMul(cumulatedInterest);
};

const calcLinearInterest = (
  rate: BigNumber,
  currentTimestamp: BigNumber,
  lastUpdateTimestamp: BigNumber
) => {
  const timeDifference = currentTimestamp.sub(lastUpdateTimestamp);

  const cumulatedInterest = rate.mul(timeDifference).div(BigNumber.from(ONE_YEAR)).add(RAY);

  return cumulatedInterest;
};

export const calcCompoundedInterest = (
  rate: BigNumber,
  currentTimestamp: BigNumber,
  lastUpdateTimestamp: BigNumber
) => {
  const timeDifference = currentTimestamp.sub(lastUpdateTimestamp);
  const SECONDS_PER_YEAR = BigNumber.from(ONE_YEAR);

  if (timeDifference.eq(0)) {
    return BigNumber.from(RAY);
  }

  const expMinusOne = timeDifference.sub(1);
  const expMinusTwo = timeDifference.gt(2) ? timeDifference.sub(2) : 0;

  const basePowerTwo = rate.rayMul(rate).div(SECONDS_PER_YEAR.mul(SECONDS_PER_YEAR));
  const basePowerThree = basePowerTwo.rayMul(rate).div(SECONDS_PER_YEAR);

  const secondTerm = timeDifference.mul(expMinusOne).mul(basePowerTwo).div(2);
  const thirdTerm = timeDifference.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree).div(6);

  return BigNumber.from(RAY)
    .add(rate.mul(timeDifference).div(SECONDS_PER_YEAR))
    .add(secondTerm)
    .add(thirdTerm);
};

export const calcExpectedInterestRates = (
  reserveSymbol: string,
  marketStableRate: BigNumber,
  totalStableDebt: BigNumber,
  totalVariableDebt: BigNumber,
  averageStableBorrowRate: BigNumber,
  availableLiquidity: BigNumber,
  totalLiquidity: BigNumber
): BigNumber[] => {
  const { reservesParams } = configuration;
  const reserveIndex = Object.keys(reservesParams).findIndex((value) => value === reserveSymbol);
  const [, reserveConfiguration] = (Object.entries(reservesParams) as [string, IReserveParams][])[
    reserveIndex
  ];

  const [borrowUsageRatio, supplyUsageRatio] = calcExpectedUsageRatios(
    totalStableDebt,
    totalVariableDebt,
    availableLiquidity,
    totalLiquidity
  );

  let stableBorrowRate: BigNumber = marketStableRate;
  let variableBorrowRate: BigNumber = BigNumber.from(
    reserveConfiguration.strategy.baseVariableBorrowRate
  );

  const OPTIMAL_USAGE_RATIO = BigNumber.from(reserveConfiguration.strategy.optimalUsageRatio);
  const MAX_EXCESS_USAGE_RATIO = BigNumber.from(RAY).sub(OPTIMAL_USAGE_RATIO);
  const OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = BigNumber.from(
    reserveConfiguration.strategy.optimalStableToTotalDebtRatio
  );
  const MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO = BigNumber.from(RAY).sub(
    OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO
  );

  const totalDebt = totalStableDebt.add(totalVariableDebt);

  const stableToTotalDebtRatio = totalStableDebt.gt(0)
    ? totalStableDebt.rayDiv(totalDebt)
    : BigNumber.from(0);

  if (borrowUsageRatio.gt(OPTIMAL_USAGE_RATIO)) {
    const excessBorrowUsageRatio = borrowUsageRatio
      .sub(reserveConfiguration.strategy.optimalUsageRatio)
      .rayDiv(MAX_EXCESS_USAGE_RATIO);

    stableBorrowRate = stableBorrowRate
      .add(reserveConfiguration.strategy.stableRateSlope1)
      .add(
        BigNumber.from(reserveConfiguration.strategy.stableRateSlope2).rayMul(
          excessBorrowUsageRatio
        )
      );

    variableBorrowRate = variableBorrowRate
      .add(reserveConfiguration.strategy.variableRateSlope1)
      .add(
        BigNumber.from(reserveConfiguration.strategy.variableRateSlope2).rayMul(
          excessBorrowUsageRatio
        )
      );
  } else {
    stableBorrowRate = stableBorrowRate.add(
      BigNumber.from(reserveConfiguration.strategy.stableRateSlope1)
        .rayMul(borrowUsageRatio)
        .rayDiv(BigNumber.from(OPTIMAL_USAGE_RATIO))
    );
    variableBorrowRate = variableBorrowRate.add(
      BigNumber.from(reserveConfiguration.strategy.variableRateSlope1)
        .rayMul(borrowUsageRatio)
        .rayDiv(OPTIMAL_USAGE_RATIO)
    );
  }

  if (stableToTotalDebtRatio.gt(OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO)) {
    const excessStableDebtRatio = stableToTotalDebtRatio
      .sub(OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO)
      .rayDiv(MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO);
    stableBorrowRate = stableBorrowRate.add(
      BigNumber.from(reserveConfiguration.strategy.stableRateExcessOffset).rayMul(
        excessStableDebtRatio
      )
    );
  }

  const expectedOverallRate = calcExpectedOverallBorrowRate(
    totalStableDebt,
    totalVariableDebt,
    variableBorrowRate,
    averageStableBorrowRate
  );
  const liquidityRate = expectedOverallRate
    .rayMul(supplyUsageRatio)
    .percentMul(BigNumber.from(PERCENTAGE_FACTOR).sub(reserveConfiguration.reserveFactor));

  return [liquidityRate, stableBorrowRate, variableBorrowRate];
};

export const calcExpectedOverallBorrowRate = (
  totalStableDebt: BigNumber,
  totalVariableDebt: BigNumber,
  currentVariableBorrowRate: BigNumber,
  currentAverageStableBorrowRate: BigNumber
): BigNumber => {
  const totalBorrows = totalStableDebt.add(totalVariableDebt);

  if (totalBorrows.eq(0)) return BigNumber.from(0);

  const weightedVariableRate = totalVariableDebt.wadToRay().rayMul(currentVariableBorrowRate);

  const weightedStableRate = totalStableDebt.wadToRay().rayMul(currentAverageStableBorrowRate);

  const overallBorrowRate = weightedVariableRate
    .add(weightedStableRate)
    .rayDiv(totalBorrows.wadToRay());

  return overallBorrowRate;
};

export const calcExpectedUsageRatios = (
  totalStableDebt: BigNumber,
  totalVariableDebt: BigNumber,
  availableLiquidity: BigNumber,
  totalLiquidity: BigNumber
): BigNumber[] => {
  const totalDebt = totalStableDebt.add(totalVariableDebt);
  const borrowUsageRatio = totalDebt.eq(0)
    ? BigNumber.from(0)
    : totalDebt.rayDiv(availableLiquidity.add(totalDebt));

  let supplyUsageRatio = totalDebt.eq(0)
    ? BigNumber.from(0)
    : totalDebt.rayDiv(totalLiquidity.add(totalDebt));

  expect(supplyUsageRatio).to.be.lte(borrowUsageRatio, 'Supply usage ratio > borrow usage ratio');

  return [borrowUsageRatio, supplyUsageRatio];
};

export const calcExpectedReserveNormalizedIncome = (
  reserveData: ReserveData,
  currentTimestamp: BigNumber
) => {
  const { liquidityRate, liquidityIndex, lastUpdateTimestamp } = reserveData;

  //if usage ratio is 0, nothing to compound
  if (liquidityRate.eq('0')) {
    return liquidityIndex;
  }

  const cumulatedInterest = calcLinearInterest(
    liquidityRate,
    currentTimestamp,
    lastUpdateTimestamp
  );

  const income = cumulatedInterest.rayMul(liquidityIndex);

  return income;
};

export const calcExpectedReserveNormalizedDebt = (
  variableBorrowRate: BigNumber,
  variableBorrowIndex: BigNumber,
  lastUpdateTimestamp: BigNumber,
  currentTimestamp: BigNumber
) => {
  //if usage ratio is 0, nothing to compound
  if (variableBorrowRate.eq('0')) {
    return variableBorrowIndex;
  }

  const cumulatedInterest = calcCompoundedInterest(
    variableBorrowRate,
    currentTimestamp,
    lastUpdateTimestamp
  );

  const debt = cumulatedInterest.rayMul(variableBorrowIndex);

  return debt;
};

const calcExpectedUserStableRate = (
  balanceBefore: BigNumber,
  rateBefore: BigNumber,
  amount: BigNumber,
  rateNew: BigNumber
) => {
  return balanceBefore.mul(rateBefore).add(amount.mul(rateNew)).div(balanceBefore.add(amount));
};

const calcExpectedLiquidityIndex = (reserveData: ReserveData, timestamp: BigNumber) => {
  //if usage ratio is 0, nothing to compound
  if (reserveData.supplyUsageRatio.eq(0)) {
    return reserveData.liquidityIndex;
  }

  const cumulatedInterest = calcLinearInterest(
    reserveData.liquidityRate,
    timestamp,
    reserveData.lastUpdateTimestamp
  );

  return cumulatedInterest.rayMul(reserveData.liquidityIndex);
};

const calcExpectedVariableBorrowIndex = (reserveData: ReserveData, timestamp: BigNumber) => {
  //if totalVariableDebt is 0, nothing to compound
  if (reserveData.totalVariableDebt.eq('0')) {
    return reserveData.variableBorrowIndex;
  }

  const cumulatedInterest = calcCompoundedInterest(
    reserveData.variableBorrowRate,
    timestamp,
    reserveData.lastUpdateTimestamp
  );

  return cumulatedInterest.rayMul(reserveData.variableBorrowIndex);
};

const calcExpectedTotalStableDebt = (
  principalStableDebt: BigNumber,
  averageStableBorrowRate: BigNumber,
  lastUpdateTimestamp: BigNumber,
  currentTimestamp: BigNumber
) => {
  const cumulatedInterest = calcCompoundedInterest(
    averageStableBorrowRate,
    currentTimestamp,
    lastUpdateTimestamp
  );

  return cumulatedInterest.rayMul(principalStableDebt);
};

const calcExpectedTotalVariableDebt = (
  reserveData: ReserveData,
  expectedVariableDebtIndex: BigNumber
) => {
  return reserveData.scaledVariableDebt.rayMul(expectedVariableDebtIndex);
};

const calcExpectedAccrueToTreasury = (reserveData: ReserveData, nextReserveData: ReserveData) => {
  const reserveFactor = reserveData.reserveFactor;
  if (reserveFactor.eq(0)) {
    return reserveData.accruedToTreasuryScaled;
  }

  const prevTotalVariableDebt = reserveData.scaledVariableDebt.rayMul(
    reserveData.variableBorrowIndex
  );

  const currTotalVariableDebt = nextReserveData.scaledVariableDebt.rayMul(
    nextReserveData.variableBorrowIndex
  );

  // Be aware that the ordering in the calcCompoundInterest is NOT the same as the solidity `calculateCompoundedInterest`
  const cumulatedStableInterest = calcCompoundedInterest(
    reserveData.averageStableBorrowRate,
    reserveData.lastUpdateTimestamp,
    reserveData.totalStableDebtLastUpdated
  );

  const prevTotalStableDebt = reserveData.principalStableDebt.rayMul(cumulatedStableInterest);

  const totalDebtAccrued = currTotalVariableDebt
    .add(nextReserveData.totalStableDebt)
    .sub(prevTotalVariableDebt)
    .sub(prevTotalStableDebt);

  const amountToMint = totalDebtAccrued.percentMul(reserveFactor);

  if (amountToMint.gt(0)) {
    return reserveData.accruedToTreasuryScaled.add(
      amountToMint.rayDiv(nextReserveData.liquidityIndex)
    );
  } else {
    return reserveData.accruedToTreasuryScaled;
  }
};

const updateState = (
  reserveDataBeforeAction: ReserveData,
  expectedReserveData: ReserveData,
  txTimestamp: BigNumber
) => {
  // Update indexes
  expectedReserveData.liquidityIndex = calcExpectedLiquidityIndex(
    reserveDataBeforeAction,
    txTimestamp
  );
  expectedReserveData.variableBorrowIndex = calcExpectedVariableBorrowIndex(
    reserveDataBeforeAction,
    txTimestamp
  );

  // Update debts
  expectedReserveData.totalStableDebt = calcExpectedTotalStableDebt(
    reserveDataBeforeAction.principalStableDebt,
    reserveDataBeforeAction.averageStableBorrowRate,
    reserveDataBeforeAction.totalStableDebtLastUpdated,
    txTimestamp
  );
  expectedReserveData.totalVariableDebt = calcExpectedTotalVariableDebt(
    reserveDataBeforeAction,
    expectedReserveData.variableBorrowIndex
  );

  expectedReserveData.scaledVariableDebt = reserveDataBeforeAction.scaledVariableDebt;
  expectedReserveData.principalStableDebt = reserveDataBeforeAction.principalStableDebt;

  // Accrue to treasury
  expectedReserveData.accruedToTreasuryScaled = calcExpectedAccrueToTreasury(
    reserveDataBeforeAction,
    expectedReserveData
  );
};

const updateLiquidityAndUsageRatios = (
  reserveDataBeforeAction: ReserveData,
  expectedReserveData: ReserveData,
  liquidityAdded: BigNumber,
  liquidityTaken: BigNumber
) => {
  expectedReserveData.availableLiquidity = reserveDataBeforeAction.availableLiquidity
    .add(liquidityAdded)
    .sub(liquidityTaken);

  expectedReserveData.totalLiquidity = expectedReserveData.availableLiquidity.add(
    expectedReserveData.unbacked
  );

  [expectedReserveData.borrowUsageRatio, expectedReserveData.supplyUsageRatio] =
    calcExpectedUsageRatios(
      expectedReserveData.totalStableDebt,
      expectedReserveData.totalVariableDebt,
      expectedReserveData.availableLiquidity,
      expectedReserveData.totalLiquidity
    );
};

const updateTotalLiquidityAndUsageRatio = (expectedReserveData: ReserveData) => {
  expectedReserveData.totalLiquidity = expectedReserveData.availableLiquidity.add(
    expectedReserveData.unbacked
  );

  [expectedReserveData.borrowUsageRatio, expectedReserveData.supplyUsageRatio] =
    calcExpectedUsageRatios(
      expectedReserveData.totalStableDebt,
      expectedReserveData.totalVariableDebt,
      expectedReserveData.availableLiquidity,
      expectedReserveData.totalLiquidity
    );
};



================================================
FILE: test-suites/helpers/utils/funds.ts
================================================
import { BigNumber, Signer } from 'ethers';
import { SelfdestructTransfer__factory } from '../../../types';

export const topUpNonPayableWithEther = async (
  holder: Signer,
  accounts: string[],
  amount: BigNumber
) => {
  let selfdestructContract;
  let factory = new SelfdestructTransfer__factory(holder);
  for (const account of accounts) {
    selfdestructContract = await factory.deploy();
    await selfdestructContract.deployed();
    await selfdestructContract.destroyAndTransfer(account, {
      value: amount,
    });
  }
};



================================================
FILE: test-suites/helpers/utils/helpers.ts
================================================
import { expect } from 'chai';
import { logger, utils, Contract } from 'ethers';
import { BigNumber } from '@ethersproject/bignumber';
import { TransactionReceipt } from '@ethersproject/providers';
import { getContract } from '@aave/deploy-v3';
import {
  getMintableERC20,
  getAToken,
  getStableDebtToken,
  getVariableDebtToken,
  getIRStrategy,
} from '@aave/deploy-v3/dist/helpers/contract-getters';
import { tEthereumAddress } from '../../../helpers/types';
import { AToken, AaveProtocolDataProvider, Pool } from '../../../types';
import { ReserveData, UserReserveData } from './interfaces';

export const getReserveData = async (
  helper: AaveProtocolDataProvider,
  reserve: tEthereumAddress
): Promise<ReserveData> => {
  const [reserveData, tokenAddresses, irStrategyAddress, reserveConfiguration, token] =
    await Promise.all([
      helper.getReserveData(reserve),
      helper.getReserveTokensAddresses(reserve),
      helper.getInterestRateStrategyAddress(reserve),
      helper.getReserveConfigurationData(reserve),
      getContract('IERC20Detailed', reserve),
    ]);

  const stableDebtToken = await getStableDebtToken(tokenAddresses.stableDebtTokenAddress);
  const variableDebtToken = await getVariableDebtToken(tokenAddresses.variableDebtTokenAddress);
  const irStrategy = await getIRStrategy(irStrategyAddress);

  const baseStableRate = await irStrategy.getBaseStableBorrowRate();

  const { 0: principalStableDebt } = await stableDebtToken.getSupplyData();
  const totalStableDebtLastUpdated = await stableDebtToken.getTotalSupplyLastUpdated();

  const scaledVariableDebt = await variableDebtToken.scaledTotalSupply();

  const symbol = await token.symbol();
  const decimals = BigNumber.from(await token.decimals());

  const accruedToTreasuryScaled = reserveData.accruedToTreasuryScaled;
  const unbacked = reserveData.unbacked;
  const aToken = (await getAToken(tokenAddresses.aTokenAddress)) as AToken;

  // Need the reserve factor
  const reserveFactor = reserveConfiguration.reserveFactor;

  const availableLiquidity = await token.balanceOf(aToken.address);

  const totalLiquidity = availableLiquidity.add(unbacked);

  const totalDebt = reserveData.totalStableDebt.add(reserveData.totalVariableDebt);

  const borrowUsageRatio = totalDebt.eq(0)
    ? BigNumber.from(0)
    : totalDebt.rayDiv(availableLiquidity.add(totalDebt));

  let supplyUsageRatio = totalDebt.eq(0)
    ? BigNumber.from(0)
    : totalDebt.rayDiv(totalLiquidity.add(totalDebt));

  expect(supplyUsageRatio).to.be.lte(borrowUsageRatio, 'Supply usage ratio > borrow usage ratio');

  return {
    reserveFactor,
    unbacked,
    accruedToTreasuryScaled,
    availableLiquidity,
    totalLiquidity,
    borrowUsageRatio,
    supplyUsageRatio,
    totalStableDebt: reserveData.totalStableDebt,
    totalVariableDebt: reserveData.totalVariableDebt,
    liquidityRate: reserveData.liquidityRate,
    variableBorrowRate: reserveData.variableBorrowRate,
    stableBorrowRate: reserveData.stableBorrowRate,
    averageStableBorrowRate: reserveData.averageStableBorrowRate,
    liquidityIndex: reserveData.liquidityIndex,
    variableBorrowIndex: reserveData.variableBorrowIndex,
    lastUpdateTimestamp: BigNumber.from(reserveData.lastUpdateTimestamp),
    totalStableDebtLastUpdated: BigNumber.from(totalStableDebtLastUpdated),
    principalStableDebt: principalStableDebt,
    scaledVariableDebt: scaledVariableDebt,
    address: reserve,
    aTokenAddress: tokenAddresses.aTokenAddress,
    symbol,
    decimals,
    marketStableRate: BigNumber.from(baseStableRate),
  };
};

export const getUserData = async (
  pool: Pool,
  helper: AaveProtocolDataProvider,
  reserve: string,
  user: tEthereumAddress,
  sender?: tEthereumAddress
): Promise<UserReserveData> => {
  const [userData, scaledATokenBalance] = await Promise.all([
    helper.getUserReserveData(reserve, user),
    getATokenUserData(reserve, user, helper),
  ]);

  const token = await getMintableERC20(reserve);
  const walletBalance = await token.balanceOf(sender || user);

  return {
    scaledATokenBalance: BigNumber.from(scaledATokenBalance),
    currentATokenBalance: userData.currentATokenBalance,
    currentStableDebt: userData.currentStableDebt,
    currentVariableDebt: userData.currentVariableDebt,
    principalStableDebt: userData.principalStableDebt,
    scaledVariableDebt: userData.scaledVariableDebt,
    stableBorrowRate: userData.stableBorrowRate,
    liquidityRate: userData.liquidityRate,
    usageAsCollateralEnabled: userData.usageAsCollateralEnabled,
    stableRateLastUpdated: BigNumber.from(userData.stableRateLastUpdated),
    walletBalance,
  };
};

const getATokenUserData = async (
  reserve: string,
  user: string,
  helpersContract: AaveProtocolDataProvider
) => {
  const aTokenAddress: string = (await helpersContract.getReserveTokensAddresses(reserve))
    .aTokenAddress;

  const aToken = await getAToken(aTokenAddress);

  const scaledBalance = await aToken.scaledBalanceOf(user);
  return scaledBalance.toString();
};

export const matchEvent = (
  receipt: TransactionReceipt,
  name: string,
  eventContract: Contract,
  emitterAddress?: string,
  expectedArgs?: any[]
) => {
  const events = receipt.logs;

  if (events != undefined) {
    // match name from list of events in eventContract, when found, compute the sigHash
    let sigHash: string | undefined;
    for (let contractEvent of Object.keys(eventContract.interface.events)) {
      if (contractEvent.startsWith(name) && contractEvent.charAt(name.length) == '(') {
        sigHash = utils.keccak256(utils.toUtf8Bytes(contractEvent));
        break;
      }
    }
    // Throw if the sigHash was not found
    if (!sigHash) {
      logger.throwError(
        `Event "${name}" not found in provided contract. \nAre you sure you're using the right contract?`
      );
    }

    // Find the given event in the emitted logs
    let invalidParamsButExists = false;
    for (let emittedEvent of events) {
      // If we find one with the correct sigHash, check if it is the one we're looking for
      if (emittedEvent.topics[0] == sigHash) {
        // If an emitter address is passed, validate that this is indeed the correct emitter, if not, continue
        if (emitterAddress) {
          if (emittedEvent.address != emitterAddress) continue;
        }
        const event = eventContract.interface.parseLog(emittedEvent);
        // If there are expected arguments, validate them, otherwise, return here
        if (expectedArgs) {
          if (expectedArgs.length != event.args.length) {
            logger.throwError(
              `Event "${name}" emitted with correct signature, but expected args are of invalid length`
            );
          }
          invalidParamsButExists = false;
          // Iterate through arguments and check them, if there is a mismatch, continue with the loop
          for (let i = 0; i < expectedArgs.length; i++) {
            // Parse empty arrays as empty bytes
            if (expectedArgs[i].constructor == Array && expectedArgs[i].length == 0) {
              expectedArgs[i] = '0x';
            }

            // Break out of the expected args loop if there is a mismatch, this will continue the emitted event loop
            if (BigNumber.isBigNumber(event.args[i])) {
              if (!event.args[i].eq(BigNumber.from(expectedArgs[i]))) {
                invalidParamsButExists = true;
                break;
              }
            } else if (event.args[i].constructor == Array) {
              let params = event.args[i];
              let expected = expectedArgs[i];
              for (let j = 0; j < params.length; j++) {
                if (BigNumber.isBigNumber(params[j])) {
                  if (!params[j].eq(BigNumber.from(expected[j]))) {
                    invalidParamsButExists = true;
                    break;
                  }
                } else if (params[j] != expected[j]) {
                  invalidParamsButExists = true;
                  break;
                }
              }
              if (invalidParamsButExists) break;
            } else if (event.args[i] != expectedArgs[i]) {
              invalidParamsButExists = true;
              break;
            }
          }
          // Return if the for loop did not cause a break, so a match has been found, otherwise proceed with the event loop
          if (!invalidParamsButExists) {
            return;
          }
        } else {
          return;
        }
      }
    }
    // Throw if the event args were not expected or the event was not found in the logs
    if (invalidParamsButExists) {
      logger.throwError(`Event "${name}" found in logs but with unexpected args`);
    } else {
      logger.throwError(
        `Event "${name}" not found emitted by "${emitterAddress}" in given transaction log`
      );
    }
  } else {
    logger.throwError('No events were emitted');
  }
};



================================================
FILE: test-suites/helpers/utils/tokenization-events.ts
================================================
import { MockATokenRepayment__factory } from './../../../types/factories/mocks/tokens/MockATokenRepayment__factory';
import { ethers } from 'hardhat';
import { utils } from 'ethers';
import { BigNumber } from '@ethersproject/bignumber';
import { TransactionReceipt } from '@ethersproject/providers';
import {
  AToken,
  AToken__factory,
  IERC20__factory,
  Pool,
  StableDebtToken,
  StableDebtToken__factory,
  VariableDebtToken,
  VariableDebtToken__factory,
} from '../../../types';
import { ZERO_ADDRESS } from '../../../helpers/constants';
import { SignerWithAddress } from '../make-suite';
import { calcExpectedStableDebtTokenBalance } from './calculations';
import { getTxCostAndTimestamp } from '../actions';
import { RateMode } from '../../../helpers/types';
import { convertToCurrencyDecimals } from '../../../helpers/contracts-helpers';
import { matchEvent } from './helpers';
import './wadraymath';
import { expect } from 'chai';

const ATOKEN_EVENTS = [
  { sig: 'Transfer(address,address,uint256)', args: ['from', 'to', 'value'] },
  {
    sig: 'Mint(address,address,uint256,uint256,uint256)',
    args: ['caller', 'onBehalfOf', 'value', 'balanceIncrease', 'index'],
  },
  {
    sig: 'Burn(address,address,uint256,uint256,uint256)',
    args: ['from', 'target', 'value', 'balanceIncrease', 'index'],
  },
  {
    sig: 'BalanceTransfer(address,address,uint256,uint256)',
    args: ['from', 'to', 'value', 'index'],
  },
];
const VARIABLE_DEBT_TOKEN_EVENTS = [
  { sig: 'Transfer(address,address,uint256)', args: ['from', 'to', 'value'] },
  {
    sig: 'Mint(address,address,uint256,uint256,uint256)',
    args: ['caller', 'onBehalfOf', 'value', 'balanceIncrease', 'index'],
  },
  {
    sig: 'Burn(address,address,uint256,uint256,uint256)',
    args: ['from', 'target', 'value', 'balanceIncrease', 'index'],
  },
];
const STABLE_DEBT_TOKEN_EVENTS = [
  { sig: 'Transfer(address,address,uint256)', args: ['from', 'to', 'value'] },
  {
    sig: 'Mint(address,address,uint256,uint256,uint256,uint256,uint256,uint256)',
    args: [
      'user',
      'onBehalfOf',
      'amount',
      'currentBalance',
      'balanceIncrease',
      'newRate',
      'avgStableRate',
      'newTotalSupply',
    ],
  },
  {
    sig: 'Burn(address,uint256,uint256,uint256,uint256,uint256)',
    args: [
      'from',
      'amount',
      'currentBalance',
      'balanceIncrease',
      'avgStableRate',
      'newTotalSupply',
    ],
  },
];

const getBalanceIncrease = (
  scaledBalance: BigNumber,
  indexBeforeAction: BigNumber,
  indexAfterAction: BigNumber
) => {
  return scaledBalance.rayMul(indexAfterAction).sub(scaledBalance.rayMul(indexBeforeAction));
};

export const supply = async (
  pool: Pool,
  user: SignerWithAddress,
  underlying: string,
  amountToConvert: string,
  onBehalfOf: string,
  debug: boolean = false
) => {
  const amount = await convertToCurrencyDecimals(underlying, amountToConvert);
  const { aTokenAddress } = await pool.getReserveData(underlying);
  const underlyingToken = IERC20__factory.connect(underlying, user.signer);
  const aToken = AToken__factory.connect(aTokenAddress, user.signer);

  const previousIndex = await aToken.getPreviousIndex(onBehalfOf);

  const tx = await pool.connect(user.signer).supply(underlying, amount, onBehalfOf, '0');
  const rcpt = await tx.wait();

  const indexAfter = await pool.getReserveNormalizedIncome(underlying);
  const addedScaledBalance = amount.rayDiv(indexAfter);
  const scaledBalance = (await aToken.scaledBalanceOf(onBehalfOf)).sub(addedScaledBalance);
  const balanceIncrease = getBalanceIncrease(scaledBalance, previousIndex, indexAfter);

  if (debug) printATokenEvents(aToken, rcpt);
  matchEvent(rcpt, 'Transfer', underlyingToken, underlying, [user.address, aToken.address, amount]);
  matchEvent(rcpt, 'Transfer', aToken, aToken.address, [
    ZERO_ADDRESS,
    onBehalfOf,
    amount.add(balanceIncrease),
  ]);
  matchEvent(rcpt, 'Mint', aToken, aToken.address, [
    user.address,
    onBehalfOf,
    amount.add(balanceIncrease),
    balanceIncrease,
    indexAfter,
  ]);
  return rcpt;
};

export const withdraw = async (
  pool: Pool,
  user: SignerWithAddress,
  underlying: string,
  amountToConvert: string,
  to: string,
  debug: boolean = false
) => {
  const amount = await convertToCurrencyDecimals(underlying, amountToConvert);
  const { aTokenAddress } = await pool.getReserveData(underlying);
  const underlyingToken = IERC20__factory.connect(underlying, user.signer);
  const aToken = AToken__factory.connect(aTokenAddress, user.signer);

  const previousIndex = await aToken.getPreviousIndex(user.address);

  const tx = await pool.connect(user.signer).withdraw(underlying, amount, to);
  const rcpt = await tx.wait();

  const indexAfter = await pool.getReserveNormalizedIncome(underlying);
  const addedScaledBalance = amount.rayDiv(indexAfter);
  const scaledBalance = (await aToken.scaledBalanceOf(user.address)).add(addedScaledBalance);
  const balanceIncrease = getBalanceIncrease(scaledBalance, previousIndex, indexAfter);

  if (debug) printATokenEvents(aToken, rcpt);
  matchEvent(rcpt, 'Transfer', underlyingToken, underlying, [aToken.address, to, amount]);

  if (balanceIncrease.gt(amount)) {
    matchEvent(rcpt, 'Transfer', aToken, aToken.address, [
      ZERO_ADDRESS,
      user.address,
      balanceIncrease.sub(amount),
    ]);
    matchEvent(rcpt, 'Mint', aToken, aToken.address, [
      user.address,
      user.address,
      balanceIncrease.sub(amount),
      balanceIncrease,
      indexAfter,
    ]);
  } else {
    matchEvent(rcpt, 'Transfer', aToken, aToken.address, [
      user.address,
      ZERO_ADDRESS,
      amount.sub(balanceIncrease),
    ]);
    matchEvent(rcpt, 'Burn', aToken, aToken.address, [
      user.address,
      to,
      amount.sub(balanceIncrease),
      balanceIncrease,
      indexAfter,
    ]);
  }

  return rcpt;
};

export const transfer = async (
  pool: Pool,
  user: SignerWithAddress,
  underlying: string,
  amountToConvert: string,
  to: string,
  debug: boolean = false
) => {
  const amount = await convertToCurrencyDecimals(underlying, amountToConvert);
  const { aTokenAddress } = await pool.getReserveData(underlying);
  const aToken = AToken__factory.connect(aTokenAddress, user.signer);

  const fromPreviousIndex = await aToken.getPreviousIndex(user.address);
  const toPreviousIndex = await aToken.getPreviousIndex(to);

  const tx = await aToken.connect(user.signer).transfer(to, amount);
  const rcpt = await tx.wait();

  const indexAfter = await pool.getReserveNormalizedIncome(underlying);
  const addedScaledBalance = amount.rayDiv(indexAfter);

  // The amount of scaled balance transferred is 0 if self-transfer
  const deltaScaledBalance = user.address == to ? BigNumber.from(0) : addedScaledBalance;
  const fromScaledBalance = (await aToken.scaledBalanceOf(user.address)).add(deltaScaledBalance);
  const toScaledBalance = (await aToken.scaledBalanceOf(to)).sub(deltaScaledBalance);
  const fromBalanceIncrease = getBalanceIncrease(fromScaledBalance, fromPreviousIndex, indexAfter);
  const toBalanceIncrease = getBalanceIncrease(toScaledBalance, toPreviousIndex, indexAfter);

  if (debug) printATokenEvents(aToken, rcpt);

  matchEvent(rcpt, 'Transfer', aToken, aToken.address, [user.address, to, amount]);
  matchEvent(rcpt, 'BalanceTransfer', aToken, aToken.address, [
    user.address,
    to,
    addedScaledBalance,
    indexAfter,
  ]);
  if (fromBalanceIncrease.gt(0)) {
    matchEvent(rcpt, 'Transfer', aToken, aToken.address, [
      ZERO_ADDRESS,
      user.address,
      fromBalanceIncrease,
    ]);
    matchEvent(rcpt, 'Mint', aToken, aToken.address, [
      user.address,
      user.address,
      fromBalanceIncrease,
      fromBalanceIncrease,
      indexAfter,
    ]);
  }
  if (user.address != to && toBalanceIncrease.gt(0)) {
    matchEvent(rcpt, 'Transfer', aToken, aToken.address, [ZERO_ADDRESS, to, toBalanceIncrease]);
    matchEvent(rcpt, 'Mint', aToken, aToken.address, [
      user.address,
      to,
      toBalanceIncrease,
      toBalanceIncrease,
      indexAfter,
    ]);
  }

  return rcpt;
};

export const transferFrom = async (
  pool: Pool,
  user: SignerWithAddress,
  origin: string,
  underlying: string,
  amountToConvert: string,
  to: string,
  debug: boolean = false
) => {
  const amount = await convertToCurrencyDecimals(underlying, amountToConvert);
  const { aTokenAddress } = await pool.getReserveData(underlying);
  const aToken = AToken__factory.connect(aTokenAddress, user.signer);

  const fromPreviousIndex = await aToken.getPreviousIndex(origin);
  const toPreviousIndex = await aToken.getPreviousIndex(to);

  const tx = await aToken.connect(user.signer).transferFrom(origin, to, amount);
  const rcpt = await tx.wait();

  const indexAfter = await pool.getReserveNormalizedIncome(underlying);
  const addedScaledBalance = amount.rayDiv(indexAfter);

  // The amount of scaled balance transferred is 0 if self-transfer
  const deltaScaledBalance = origin == to ? BigNumber.from(0) : addedScaledBalance;
  const fromScaledBalance = (await aToken.scaledBalanceOf(origin)).add(deltaScaledBalance);
  const toScaledBalance = (await aToken.scaledBalanceOf(to)).sub(deltaScaledBalance);
  const fromBalanceIncrease = getBalanceIncrease(fromScaledBalance, fromPreviousIndex, indexAfter);
  const toBalanceIncrease = getBalanceIncrease(toScaledBalance, toPreviousIndex, indexAfter);

  if (debug) printATokenEvents(aToken, rcpt);

  matchEvent(rcpt, 'Transfer', aToken, aToken.address, [origin, to, amount]);
  matchEvent(rcpt, 'BalanceTransfer', aToken, aToken.address, [
    origin,
    to,
    addedScaledBalance,
    indexAfter,
  ]);
  if (fromBalanceIncrease.gt(0)) {
    matchEvent(rcpt, 'Transfer', aToken, aToken.address, [
      ZERO_ADDRESS,
      origin,
      fromBalanceIncrease,
    ]);
    matchEvent(rcpt, 'Mint', aToken, aToken.address, [
      user.address,
      origin,
      fromBalanceIncrease,
      fromBalanceIncrease,
      indexAfter,
    ]);
  }
  if (origin != to && toBalanceIncrease.gt(0)) {
    matchEvent(rcpt, 'Transfer', aToken, aToken.address, [ZERO_ADDRESS, to, toBalanceIncrease]);
    matchEvent(rcpt, 'Mint', aToken, aToken.address, [
      user.address,
      to,
      toBalanceIncrease,
      toBalanceIncrease,
      indexAfter,
    ]);
  }

  return rcpt;
};

export const variableBorrow = async (
  pool: Pool,
  user: SignerWithAddress,
  underlying: string,
  amountToConvert: string,
  onBehalfOf: string,
  debug: boolean = false
) => {
  const amount = await convertToCurrencyDecimals(underlying, amountToConvert);
  const { aTokenAddress, variableDebtTokenAddress } = await pool.getReserveData(underlying);
  const underlyingToken = IERC20__factory.connect(underlying, user.signer);
  const aToken = AToken__factory.connect(aTokenAddress, user.signer);
  const variableDebtToken = VariableDebtToken__factory.connect(
    variableDebtTokenAddress,
    user.signer
  );

  let previousIndex = await variableDebtToken.getPreviousIndex(onBehalfOf);

  const tx = await pool
    .connect(user.signer)
    .borrow(underlying, amount, RateMode.Variable, 0, onBehalfOf);
  const rcpt = await tx.wait();

  const indexAfter = await pool.getReserveNormalizedVariableDebt(underlying);
  const addedScaledBalance = amount.rayDiv(indexAfter);
  const scaledBalance = (await variableDebtToken.scaledBalanceOf(onBehalfOf)).sub(
    addedScaledBalance
  );
  const balanceIncrease = getBalanceIncrease(scaledBalance, previousIndex, indexAfter);

  if (debug) printVariableDebtTokenEvents(variableDebtToken, rcpt);

  matchEvent(rcpt, 'Transfer', underlyingToken, underlying, [aToken.address, user.address, amount]);
  matchEvent(rcpt, 'Transfer', variableDebtToken, variableDebtToken.address, [
    ZERO_ADDRESS,
    onBehalfOf,
    amount.add(balanceIncrease),
  ]);
  matchEvent(rcpt, 'Mint', variableDebtToken, variableDebtToken.address, [
    user.address,
    onBehalfOf,
    amount.add(balanceIncrease),
    balanceIncrease,
    indexAfter,
  ]);
  return rcpt;
};

export const repayVariableBorrow = async (
  pool: Pool,
  user: SignerWithAddress,
  underlying: string,
  amountToConvert: string,
  onBehalfOf: string,
  debug: boolean = false
) => {
  const amount = await convertToCurrencyDecimals(underlying, amountToConvert);
  const { aTokenAddress, variableDebtTokenAddress } = await pool.getReserveData(underlying);
  const underlyingToken = IERC20__factory.connect(underlying, user.signer);
  const aToken = AToken__factory.connect(aTokenAddress, user.signer);
  const variableDebtToken = VariableDebtToken__factory.connect(
    variableDebtTokenAddress,
    user.signer
  );

  const previousIndex = await variableDebtToken.getPreviousIndex(onBehalfOf);

  const tx = await pool
    .connect(user.signer)
    .repay(underlying, amount, RateMode.Variable, onBehalfOf);
  const rcpt = await tx.wait();

  // check handleRepayment function is correctly called
  await expect(tx)
    .to.emit(MockATokenRepayment__factory.connect(aTokenAddress, user.signer), 'MockRepayment')
    .withArgs(user.address, onBehalfOf, amount);

  const indexAfter = await pool.getReserveNormalizedVariableDebt(underlying);
  const addedScaledBalance = amount.rayDiv(indexAfter);
  const scaledBalance = (await variableDebtToken.scaledBalanceOf(onBehalfOf)).add(
    addedScaledBalance
  );
  const balanceIncrease = getBalanceIncrease(scaledBalance, previousIndex, indexAfter);

  if (debug) printVariableDebtTokenEvents(variableDebtToken, rcpt);

  matchEvent(rcpt, 'Transfer', underlyingToken, underlying, [user.address, aToken.address, amount]);
  if (balanceIncrease.gt(amount)) {
    matchEvent(rcpt, 'Transfer', variableDebtToken, variableDebtToken.address, [
      ZERO_ADDRESS,
      onBehalfOf,
      balanceIncrease.sub(amount),
    ]);
    matchEvent(rcpt, 'Mint', variableDebtToken, variableDebtToken.address, [
      onBehalfOf,
      onBehalfOf,
      balanceIncrease.sub(amount),
      balanceIncrease,
      indexAfter,
    ]);
  } else {
    matchEvent(rcpt, 'Transfer', variableDebtToken, variableDebtToken.address, [
      onBehalfOf,
      ZERO_ADDRESS,
      amount.sub(balanceIncrease),
    ]);
    matchEvent(rcpt, 'Burn', variableDebtToken, variableDebtToken.address, [
      onBehalfOf,
      ZERO_ADDRESS,
      amount.sub(balanceIncrease),
      balanceIncrease,
      indexAfter,
    ]);
  }

  return rcpt;
};

export const stableBorrow = async (
  pool: Pool,
  user: SignerWithAddress,
  underlying: string,
  amountToConvert: string,
  onBehalfOf: string,
  debug: boolean = false
) => {
  const amount = await convertToCurrencyDecimals(underlying, amountToConvert);
  const { aTokenAddress, stableDebtTokenAddress } = await pool.getReserveData(underlying);
  const underlyingToken = IERC20__factory.connect(underlying, user.signer);
  const aToken = AToken__factory.connect(aTokenAddress, user.signer);
  const stableDebtToken = StableDebtToken__factory.connect(stableDebtTokenAddress, user.signer);

  const previousIndex = await stableDebtToken.getUserStableRate(onBehalfOf);
  const principalBalance = await stableDebtToken.principalBalanceOf(onBehalfOf);
  const lastTimestamp = await stableDebtToken.getUserLastUpdated(onBehalfOf);

  const tx = await pool
    .connect(user.signer)
    .borrow(underlying, amount, RateMode.Stable, 0, onBehalfOf);
  const rcpt = await tx.wait();

  const { txTimestamp } = await getTxCostAndTimestamp(rcpt);

  const newPrincipalBalance = calcExpectedStableDebtTokenBalance(
    principalBalance,
    previousIndex,
    BigNumber.from(lastTimestamp),
    txTimestamp
  );
  const balanceIncrease = newPrincipalBalance.sub(principalBalance);
  const currentAvgStableRate = await stableDebtToken.getAverageStableRate();
  const stableRateAfter = await stableDebtToken.getUserStableRate(onBehalfOf);
  const [totalSupply] = await stableDebtToken.getSupplyData();

  if (debug) printStableDebtTokenEvents(stableDebtToken, rcpt);

  matchEvent(rcpt, 'Transfer', underlyingToken, underlying, [aToken.address, user.address, amount]);
  matchEvent(rcpt, 'Transfer', stableDebtToken, stableDebtToken.address, [
    ZERO_ADDRESS,
    onBehalfOf,
    amount.add(balanceIncrease),
  ]);
  matchEvent(rcpt, 'Mint', stableDebtToken, stableDebtToken.address, [
    user.address,
    onBehalfOf,
    amount.add(balanceIncrease),
    newPrincipalBalance,
    balanceIncrease,
    stableRateAfter,
    currentAvgStableRate,
    totalSupply,
  ]);
  return rcpt;
};

export const repayStableBorrow = async (
  pool: Pool,
  user: SignerWithAddress,
  underlying: string,
  amountToConvert: string,
  onBehalfOf: string,
  debug: boolean = false
) => {
  const amount = await convertToCurrencyDecimals(underlying, amountToConvert);
  const { aTokenAddress, stableDebtTokenAddress } = await pool.getReserveData(underlying);
  const underlyingToken = IERC20__factory.connect(underlying, user.signer);
  const aToken = AToken__factory.connect(aTokenAddress, user.signer);
  const stableDebtToken = StableDebtToken__factory.connect(stableDebtTokenAddress, user.signer);

  const principalBalance = await stableDebtToken.principalBalanceOf(onBehalfOf);
  const previousIndex = await stableDebtToken.getUserStableRate(onBehalfOf);
  const lastTimestamp = await stableDebtToken.getUserLastUpdated(onBehalfOf);

  const tx = await pool.connect(user.signer).repay(underlying, amount, RateMode.Stable, onBehalfOf);
  const rcpt = await tx.wait();

  const { txTimestamp } = await getTxCostAndTimestamp(rcpt);

  const newPrincipalBalance = calcExpectedStableDebtTokenBalance(
    principalBalance,
    previousIndex,
    BigNumber.from(lastTimestamp),
    txTimestamp
  );

  const balanceIncrease = newPrincipalBalance.sub(principalBalance);
  const currentAvgStableRate = await stableDebtToken.getAverageStableRate();
  const stableRateAfter = await stableDebtToken.getUserStableRate(onBehalfOf);
  const [totalSupply] = await stableDebtToken.getSupplyData();

  if (debug) printStableDebtTokenEvents(stableDebtToken, rcpt);

  matchEvent(rcpt, 'Transfer', underlyingToken, underlying, [user.address, aToken.address, amount]);
  if (balanceIncrease.gt(amount)) {
    matchEvent(rcpt, 'Transfer', stableDebtToken, stableDebtToken.address, [
      ZERO_ADDRESS,
      onBehalfOf,
      balanceIncrease.sub(amount),
    ]);
    matchEvent(rcpt, 'Mint', stableDebtToken, stableDebtToken.address, [
      onBehalfOf,
      onBehalfOf,
      balanceIncrease.sub(amount),
      newPrincipalBalance,
      balanceIncrease,
      stableRateAfter,
      currentAvgStableRate,
      totalSupply,
    ]);
  } else {
    matchEvent(rcpt, 'Transfer', stableDebtToken, stableDebtToken.address, [
      onBehalfOf,
      ZERO_ADDRESS,
      amount.sub(balanceIncrease),
    ]);
    matchEvent(rcpt, 'Burn', stableDebtToken, stableDebtToken.address, [
      onBehalfOf,
      amount.sub(balanceIncrease),
      newPrincipalBalance,
      balanceIncrease,
      currentAvgStableRate,
      totalSupply,
    ]);
  }

  return rcpt;
};

export const printATokenEvents = (aToken: AToken, receipt: TransactionReceipt) => {
  for (const eventSig of ATOKEN_EVENTS) {
    const eventName = eventSig.sig.split('(')[0];
    const encodedSig = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(eventSig.sig));
    const rawEvents = receipt.logs.filter(
      (log) => log.topics[0] === encodedSig && log.address == aToken.address
    );
    for (const rawEvent of rawEvents) {
      const rawParsed = aToken.interface.decodeEventLog(eventName, rawEvent.data, rawEvent.topics);
      const parsed: any[] = [];

      let i = 0;
      for (const arg of eventSig.args) {
        parsed[i] = ['value', 'balanceIncrease'].includes(arg)
          ? ethers.utils.formatEther(rawParsed[arg])
          : rawParsed[arg];
        i++;
      }

      console.log(`event ${eventName} ${parsed[0]} -> ${parsed[1]}: ${parsed.slice(2).join(' ')}`);
    }
  }
};

export const getATokenEvent = (aToken: AToken, receipt: TransactionReceipt, eventName: string) => {
  const eventSig = ATOKEN_EVENTS.find((item) => item.sig.split('(')[0] === eventName);
  const results: utils.Result = [];
  if (eventSig) {
    const encodedSig = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(eventSig.sig));
    const rawEvents = receipt.logs.filter(
      (log) => log.topics[0] === encodedSig && log.address == aToken.address
    );
    for (const rawEvent of rawEvents) {
      results.push(aToken.interface.decodeEventLog(eventName, rawEvent.data, rawEvent.topics));
    }
  }
  return results;
};

export const printVariableDebtTokenEvents = (
  variableDebtToken: VariableDebtToken,
  receipt: TransactionReceipt
) => {
  for (const eventSig of VARIABLE_DEBT_TOKEN_EVENTS) {
    const eventName = eventSig.sig.split('(')[0];
    const encodedSig = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(eventSig.sig));
    const rawEvents = receipt.logs.filter(
      (log) => log.topics[0] === encodedSig && log.address == variableDebtToken.address
    );
    for (const rawEvent of rawEvents) {
      const rawParsed = variableDebtToken.interface.decodeEventLog(
        eventName,
        rawEvent.data,
        rawEvent.topics
      );
      const parsed: any[] = [];

      let i = 0;
      for (const arg of eventSig.args) {
        parsed[i] = ['value', 'balanceIncrease'].includes(arg)
          ? ethers.utils.formatEther(rawParsed[arg])
          : rawParsed[arg];
        i++;
      }

      console.log(`event ${eventName} ${parsed[0]} -> ${parsed[1]}: ${parsed.slice(2).join(' ')}`);
    }
  }
};

export const getVariableDebtTokenEvent = (
  variableDebtToken: VariableDebtToken,
  receipt: TransactionReceipt,
  eventName: string
) => {
  const eventSig = VARIABLE_DEBT_TOKEN_EVENTS.find((item) => item.sig.split('(')[0] === eventName);
  const results: utils.Result = [];
  if (eventSig) {
    const encodedSig = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(eventSig.sig));
    const rawEvents = receipt.logs.filter(
      (log) => log.topics[0] === encodedSig && log.address == variableDebtToken.address
    );
    for (const rawEvent of rawEvents) {
      results.push(
        variableDebtToken.interface.decodeEventLog(eventName, rawEvent.data, rawEvent.topics)
      );
    }
  }
  return results;
};

export const printStableDebtTokenEvents = (
  stableDebtToken: StableDebtToken,
  receipt: TransactionReceipt
) => {
  for (const eventSig of STABLE_DEBT_TOKEN_EVENTS) {
    const eventName = eventSig.sig.split('(')[0];
    const encodedSig = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(eventSig.sig));
    const rawEvents = receipt.logs.filter(
      (log) => log.topics[0] === encodedSig && log.address == stableDebtToken.address
    );
    for (const rawEvent of rawEvents) {
      const rawParsed = stableDebtToken.interface.decodeEventLog(
        eventName,
        rawEvent.data,
        rawEvent.topics
      );
      const parsed: any[] = [];

      let i = 0;
      for (const arg of eventSig.args) {
        parsed[i] = ['value', 'currentBalance', 'balanceIncrease'].includes(arg)
          ? ethers.utils.formatEther(rawParsed[arg])
          : rawParsed[arg];
        i++;
      }

      console.log(`event ${eventName} ${parsed[0]} -> ${parsed[1]}: ${parsed.slice(2).join(' ')}`);
    }
  }
};

export const getStableDebtTokenEvent = (
  stableDebtToken: StableDebtToken,
  receipt: TransactionReceipt,
  eventName: string
) => {
  const eventSig = STABLE_DEBT_TOKEN_EVENTS.find((item) => item.sig.split('(')[0] === eventName);
  const results: utils.Result = [];
  if (eventSig) {
    const encodedSig = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(eventSig.sig));
    const rawEvents = receipt.logs.filter(
      (log) => log.topics[0] === encodedSig && log.address == stableDebtToken.address
    );
    for (const rawEvent of rawEvents) {
      results.push(
        stableDebtToken.interface.decodeEventLog(eventName, rawEvent.data, rawEvent.topics)
      );
    }
  }
  return results;
};



================================================
FILE: test-suites/helpers/utils/wadraymath.ts
================================================
import { BigNumber } from '@ethersproject/bignumber';
import { BigNumberish } from 'ethers';

import {
  RAY,
  WAD,
  HALF_RAY,
  HALF_WAD,
  WAD_RAY_RATIO,
  HALF_PERCENTAGE,
  PERCENTAGE_FACTOR,
} from '../../../helpers/constants';

declare module '@ethersproject/bignumber' {
  interface BigNumber {
    ray: () => BigNumber;
    wad: () => BigNumber;
    halfRay: () => BigNumber;
    halfWad: () => BigNumber;
    halfPercentage: () => BigNumber;
    percentageFactor: () => BigNumber;
    wadMul: (a: BigNumber) => BigNumber;
    wadDiv: (a: BigNumber) => BigNumber;
    rayMul: (a: BigNumber) => BigNumber;
    rayDiv: (a: BigNumber) => BigNumber;
    percentMul: (a: BigNumberish) => BigNumber;
    percentDiv: (a: BigNumberish) => BigNumber;
    rayToWad: () => BigNumber;
    wadToRay: () => BigNumber;
    negated: () => BigNumber;
  }
}

BigNumber.prototype.ray = (): BigNumber => BigNumber.from(RAY);
BigNumber.prototype.wad = (): BigNumber => BigNumber.from(WAD);
BigNumber.prototype.halfRay = (): BigNumber => BigNumber.from(HALF_RAY);
BigNumber.prototype.halfWad = (): BigNumber => BigNumber.from(HALF_WAD);
BigNumber.prototype.halfPercentage = (): BigNumber => BigNumber.from(HALF_PERCENTAGE);
BigNumber.prototype.percentageFactor = (): BigNumber => BigNumber.from(PERCENTAGE_FACTOR);

BigNumber.prototype.wadMul = function (other: BigNumber): BigNumber {
  return this.halfWad().add(this.mul(other)).div(this.wad());
};

BigNumber.prototype.wadDiv = function (other: BigNumber): BigNumber {
  const halfOther = other.div(2);
  return halfOther.add(this.mul(this.wad())).div(other);
};

BigNumber.prototype.rayMul = function (other: BigNumber): BigNumber {
  return this.halfRay().add(this.mul(other)).div(this.ray());
};

BigNumber.prototype.rayDiv = function (other: BigNumber): BigNumber {
  const halfOther = other.div(2);
  return halfOther.add(this.mul(this.ray())).div(other);
};

BigNumber.prototype.percentMul = function (bps: BigNumberish): BigNumber {
  return this.halfPercentage().add(this.mul(bps)).div(PERCENTAGE_FACTOR);
};

BigNumber.prototype.percentDiv = function (bps: BigNumberish): BigNumber {
  const halfBps = BigNumber.from(bps).div(2);
  return halfBps.add(this.mul(PERCENTAGE_FACTOR)).div(bps);
};

BigNumber.prototype.rayToWad = function (): BigNumber {
  const halfRatio = BigNumber.from(WAD_RAY_RATIO).div(2);
  return halfRatio.add(this).div(WAD_RAY_RATIO);
};

BigNumber.prototype.wadToRay = function (): BigNumber {
  return this.mul(WAD_RAY_RATIO);
};

BigNumber.prototype.negated = function (): BigNumber {
  return this.mul(-1);
};



================================================
FILE: test-suites/helpers/utils/wallets.ts
================================================
import { accounts } from '../../../test-wallets.js';

export const getTestWallets = (): [{ secretKey: string; balance: string }] => {
  if (!accounts.every((element) => element.secretKey) || accounts.length === 0)
    throw new Error('INVALID_TEST_WALLETS');
  return accounts;
};



================================================
FILE: test-suites/helpers/utils/interfaces/index.ts
================================================
import { BigNumber } from '@ethersproject/bignumber';
import '../wadraymath';

export interface UserReserveData {
  scaledATokenBalance: BigNumber;
  currentATokenBalance: BigNumber;
  currentStableDebt: BigNumber;
  currentVariableDebt: BigNumber;
  principalStableDebt: BigNumber;
  scaledVariableDebt: BigNumber;
  liquidityRate: BigNumber;
  stableBorrowRate: BigNumber;
  stableRateLastUpdated: BigNumber;
  usageAsCollateralEnabled: Boolean;
  walletBalance: BigNumber;
  [key: string]: BigNumber | string | Boolean;
}

export interface ReserveData {
  address: string;
  symbol: string;
  decimals: BigNumber;
  reserveFactor: BigNumber;
  availableLiquidity: BigNumber;
  totalLiquidity: BigNumber;
  totalStableDebt: BigNumber;
  totalVariableDebt: BigNumber;
  principalStableDebt: BigNumber;
  scaledVariableDebt: BigNumber;
  averageStableBorrowRate: BigNumber;
  variableBorrowRate: BigNumber;
  stableBorrowRate: BigNumber;
  supplyUsageRatio: BigNumber;
  borrowUsageRatio: BigNumber;
  liquidityIndex: BigNumber;
  variableBorrowIndex: BigNumber;
  aTokenAddress: string;
  marketStableRate: BigNumber;
  lastUpdateTimestamp: BigNumber;
  totalStableDebtLastUpdated: BigNumber;
  liquidityRate: BigNumber;
  unbacked: BigNumber;
  accruedToTreasuryScaled: BigNumber;
  [key: string]: BigNumber | string;
}



================================================
FILE: .github/CODEOWNERS
================================================
* @The-3D @miguelmtzinf @foodaka @kartojal @Zer0dot @eboadom @kyzia551 @sakulstra


================================================
FILE: .github/workflows/certora.yml
================================================
name: certora

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

  workflow_dispatch:

jobs:
  verify:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Check key
        env:
          CERTORAKEY: ${{ secrets.CERTORAKEY }}
        run: echo "key length" ${#CERTORAKEY}

      - name: Install python
        uses: actions/setup-python@v2
        with: { python-version: 3.9 }

      - name: Install java
        uses: actions/setup-java@v1
        with: { java-version: '11', java-package: jre }

      - name: Install certora cli
        run: pip install certora-cli==3.6.8.post3

      - name: Install solc
        run: |
          wget https://github.com/ethereum/solidity/releases/download/v0.8.10/solc-static-linux
          chmod +x solc-static-linux
          sudo mv solc-static-linux /usr/local/bin/solc8.10

      - name: Verify rule ${{ matrix.rule }}
        run: |
          cd certora
          touch applyHarness.patch
          make munged
          cd ..
          echo "key length" ${#CERTORAKEY}
          sh certora/scripts/${{ matrix.rule }}
        env:
          CERTORAKEY: ${{ secrets.CERTORAKEY }}

    strategy:
      fail-fast: false
      max-parallel: 16
      matrix:
        rule:
          - verifyAToken.sh
          - verifyPool.sh getReserveNormalizedVariableDebtCheck
          - verifyReserveConfiguration.sh
          - verifyStableTokenCLI.sh
          - verifyUserConfigCLI.sh
          - verifyVariableTokenCLI.sh



================================================
FILE: .github/workflows/node.js.yml
================================================
name: Build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          scope: '@aave'
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run prettier:check
      - name: Test
        run: npm run ci:test
      - name: Coverage
        run: npm run coverage
      - name: Publish coverage
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}



================================================
FILE: .github/workflows/release.yml
================================================
name: release-please
on:
  push:
    branches:
      - master
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v3
        id: release
        with:
          release-type: node
          package-name: ${{ github.event.repository.name }}
      # The logic below handles the npm publication:
      - uses: actions/checkout@v2
        # these if statements ensure that a publication only occurs when
        # a new release is created:
        if: ${{ steps.release.outputs.release_created }}
      - uses: actions/setup-node@v3
        if: ${{ steps.release.outputs.release_created }}
        with:
          node-version: ${{ matrix.node-version }}
          scope: '@aave'
      - run: npm run ci:clean
        if: ${{ steps.release.outputs.release_created }}
      - run: npm ci
        if: ${{ steps.release.outputs.release_created }}
      - run: npm run ci:test
        if: ${{ steps.release.outputs.release_created }}
      - run: npm publish
        if: ${{ steps.release.outputs.release_created }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}



================================================
FILE: .husky/pre-commit
================================================
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx lint-staged


