Directory structure:
└── 1inch-limit-order-sdk/
    ├── README.md
    ├── cjs.swcrc
    ├── eslint.config.mjs
    ├── esm.swcrc
    ├── foundry.toml
    ├── jest.config.js
    ├── jest.integration.config.js
    ├── package.json
    ├── pnpm-lock.yaml
    ├── remappings.txt
    ├── tsconfig.json
    ├── tsconfig.types.json
    ├── .prettierignore
    ├── .prettierrc
    ├── contracts/
    │   └── src/
    │       ├── TestFeeTaker.sol
    │       └── TestLimitOrderProtocol.sol
    ├── eslint/
    │   └── require-extension.mjs
    ├── src/
    │   ├── address.ts
    │   ├── axios-ext.ts
    │   ├── bps.ts
    │   ├── constants.ts
    │   ├── index.ts
    │   ├── validations.ts
    │   ├── abi/
    │   │   └── AggregationRouterV6.abi.json
    │   ├── api/
    │   │   ├── api.ts
    │   │   ├── constants.ts
    │   │   ├── errors.ts
    │   │   ├── index.ts
    │   │   ├── pager.ts
    │   │   ├── types.ts
    │   │   └── connector/
    │   │       ├── index.ts
    │   │       └── http/
    │   │           ├── axios-provider.connector.spec.ts
    │   │           ├── axios-provider.connector.ts
    │   │           ├── fetch-provider.connector.ts
    │   │           ├── http-provider.connector.ts
    │   │           └── index.ts
    │   ├── limit-order/
    │   │   ├── README.md
    │   │   ├── amounts.ts
    │   │   ├── index.ts
    │   │   ├── interaction.spec.ts
    │   │   ├── interaction.ts
    │   │   ├── limit-order-with-fee.spec.ts
    │   │   ├── limit-order-with-fee.ts
    │   │   ├── limit-order.spec.ts
    │   │   ├── limit-order.ts
    │   │   ├── maker-traits.spec.ts
    │   │   ├── maker-traits.ts
    │   │   ├── source-track.ts
    │   │   ├── taker-traits.ts
    │   │   ├── types.ts
    │   │   ├── eip712/
    │   │   │   ├── domain.ts
    │   │   │   ├── eip712.types.ts
    │   │   │   ├── index.ts
    │   │   │   └── order-typed-data-builder.ts
    │   │   └── extensions/
    │   │       ├── README.md
    │   │       ├── extension-builder.ts
    │   │       ├── extension.spec.ts
    │   │       ├── extension.ts
    │   │       ├── index.ts
    │   │       └── fee-taker/
    │   │           ├── errors.ts
    │   │           ├── fee-calculator.spec.ts
    │   │           ├── fee-calculator.ts
    │   │           ├── fee-taker.extension.spec.ts
    │   │           ├── fee-taker.extension.ts
    │   │           ├── fees.ts
    │   │           ├── index.ts
    │   │           ├── integrator-fee.ts
    │   │           ├── resolver-fee.ts
    │   │           ├── types.ts
    │   │           └── whitelist-half-address.ts
    │   ├── limit-order-contract/
    │   │   ├── README.md
    │   │   ├── index.ts
    │   │   └── limit-order-contract.ts
    │   ├── rfq-order/
    │   │   ├── index.ts
    │   │   ├── rfq-order.spec.ts
    │   │   └── rfq-order.ts
    │   ├── sdk/
    │   │   ├── index.ts
    │   │   └── sdk.ts
    │   └── utils/
    │       ├── mul-div.ts
    │       ├── rand-bigint.spec.ts
    │       └── rand-bigint.ts
    ├── tests/
    │   ├── addresses.ts
    │   ├── global-setup.ts
    │   ├── global-tear-down.ts
    │   ├── global.d.ts
    │   ├── test-wallet.ts
    │   ├── utils.ts
    │   ├── extensions/
    │   │   └── fee-taker/
    │   │       └── fee-taker.spec.ts
    │   └── rfq/
    │       └── rfq.spec.ts
    └── .github/
        └── workflows/
            ├── pr-check.yml
            ├── publish.yml
            ├── release-dev.yml
            └── release.yml

================================================
FILE: README.md
================================================
# 1inch Limit Order Protocol v4 SDK

## Installation

```shell
npm install '@1inch/limit-order-sdk'
```

## Docs
- [Limit Order](./src/limit-order/README.md)
- [Limit Order Contract](./src/limit-order-contract/README.md)

## Usage examples

### Order creation
```typescript
import {LimitOrder, MakerTraits, Address, Sdk, randBigInt, FetchProviderConnector} from "@1inch/limit-order-sdk"
import {Wallet} from 'ethers'

// it is a well-known test private key, do not use it in production
const privKey =
    '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80'
const authKey = '...'
const maker = new Wallet(privKey)
const expiresIn = 120n // 2m
const expiration = BigInt(Math.floor(Date.now() / 1000)) + expiresIn

const UINT_40_MAX = (1n << 48n) - 1n

// see MakerTraits.ts
const makerTraits = MakerTraits.default()
  .withExpiration(expiration)
  .withNonce(randBigInt(UINT_40_MAX))

const sdk = new Sdk({ authKey, networkId: 1, httpConnector: new FetchProviderConnector() })

const order = await sdk.createOrder({
    makerAsset: new Address('0xdac17f958d2ee523a2206206994597c13d831ec7'),
    takerAsset: new Address('0x111111111117dc0aa78b770fa6a738034120c302'),
    makingAmount: 100_000000n, // 100 USDT
    takingAmount: 10_00000000000000000n, // 10 1INCH
    maker: new Address(maker.address),
    // salt? : bigint
    // receiver? : Address
}, makerTraits)

const typedData = order.getTypedData()
const signature = await maker.signTypedData(
    typedData.domain,
    {Order: typedData.types.Order},
    typedData.message
)

await sdk.submitOrder(order, signature)
```


### RFQ Order creation

`RfqOrder` is a light, gas efficient version of LimitOrder, but it does not support multiple fills and extension
Mainly used by market makers

```typescript
import {RfqOrder, Address, randBigInt} from "@1inch/limit-order-sdk"
import {UINT_40_MAX} from "@1inch/byte-utils"
import {Wallet} from 'ethers'

// it is a well-known test private key, do not use it in production
const privKey =
    '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80'

const maker = new Wallet(privKey)
const expiresIn = 120n // 2m
const expiration = BigInt(Math.floor(Date.now() / 1000)) + expiresIn

const order = new RfqOrder({
    makerAsset: new Address('0xdac17f958d2ee523a2206206994597c13d831ec7'),
    takerAsset: new Address('0x111111111117dc0aa78b770fa6a738034120c302'),
    makingAmount: 100_000000n, // 100 USDT
    takingAmount: 10_00000000000000000n, // 10 1INCH
    maker: new Address(maker.address)
}, {
    allowedSender: new Address('0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'),
    expiration,
    nonce: randBigInt(UINT_40_MAX),
})

const typedData = order.getTypedData()
const signature = await maker.signTypedData(
    typedData.domain,
    {Order: typedData.types.Order},
    typedData.message
)
```


### API

```typescript
import {Api, FetchProviderConnector, LimitOrder, HttpProviderConnector} from '@1inch/limit-order-sdk'

const networkId = 1 // ethereum
const api = new Api({
    networkId,
    authKey: 'key', // get it at https://portal.1inch.dev/
    httpConnector: new FetchProviderConnector() // or use any connector which implements `HttpProviderConnector`
})

// submit order
const order = ... /// see `Order creation` section
const signature = '0x'
await api.submitOrder(order, signature)

// get order by hash
const orderHash = order.getOrderHash(networkId)
const orderInfo = await api.getOrderByHash(orderHash)

// get orders by maker
const orders = await api.getOrdersByMaker(order.maker)
```

#### With `axios` as http provider

`axios` package should be installed

```typescript
import {Api, LimitOrder} from "@1inch/limit-order-sdk"
import {AxiosProviderConnector} from '@1inch/limit-order-sdk/axios'

const api = new Api({
    networkId: 1, // ethereum
    authKey: 'key', // get it at https://portal.1inch.dev/
    httpConnector: new AxiosProviderConnector()
})
```

##  Testing

### Unit tests

Install dependencies
```shell
pnpm install
```

Run tests
```shell
pnpm test
```

### Integration tests
Integration tests are inside [tests](./tests) folder.
They use [foundry](https://book.getfoundry.sh/) fork node and execute transaction on it.

Install dependencies
```shell
pnpm install && forge install
```

Run tests
```shell
pnpm test:integration
```



================================================
FILE: cjs.swcrc
================================================
{
    "jsc": {
        "parser": {
            "syntax": "typescript",
            "decorators": true
        },
        "experimental": {"keepImportAttributes": true},
        "transform":  {
            "decoratorMetadata": true
        },
        "preserveAllComments": true
    },
    "module": {
      "type": "commonjs"
    }
}



================================================
FILE: eslint.config.mjs
================================================
import oneInchEslintConfig from '@1inch/eslint-config'
import requireExtension from './eslint/require-extension.mjs'

export default [...oneInchEslintConfig, requireExtension.configs.recommended]



================================================
FILE: esm.swcrc
================================================
{
    "jsc": {
        "parser": {
            "syntax": "typescript",
            "decorators": true
        },
        "experimental": {"keepImportAttributes": true},
        "transform":  {
            "decoratorMetadata": true
        },
        "preserveAllComments": true
    }
}



================================================
FILE: foundry.toml
================================================
[profile.default]
solc = "0.8.23"
src = 'contracts/src'
out = 'dist/contracts'
libs = ['contracts/lib']

via_ir = true
optimizer_runs = 1000000
eth-rpc-url = 'http://localhost:8545'

fs_permissions = [{ access = "read", path = "dist/contracts" }, { access = "read-write", path = ".forge-snapshots/" }]



================================================
FILE: jest.config.js
================================================
module.exports = {
    moduleFileExtensions: ['js', 'json', 'ts'],
    rootDir: 'src',
    testRegex: '.*\\.(spec|test)\\.ts$',
    transform: {
        '^.+\\.(t|j)s$': '@swc/jest'
    },
    collectCoverageFrom: ['**/*.(t|j)s'],
    coverageDirectory: '../coverage',
    testEnvironment: 'node',
    moduleNameMapper: {
        '(.+)\\.js': '$1'
    }
}



================================================
FILE: jest.integration.config.js
================================================
module.exports = {
    moduleFileExtensions: ['js', 'json', 'ts'],
    rootDir: 'tests',
    testRegex: '.*\\.(spec|test)\\.ts$',

    globalSetup: '<rootDir>/global-setup.ts',
    globalTeardown: '<rootDir>/global-tear-down.ts',
    transform: {
        '^.+\\.(t|j)s$': '@swc/jest'
    },
    collectCoverageFrom: ['**/*.(t|j)s'],
    testTimeout: 20_000,
    coverageDirectory: '../coverage',
    testEnvironment: 'node'
}



================================================
FILE: package.json
================================================
{
  "name": "@1inch/limit-order-sdk",
  "version": "5.0.4-rc.0",
  "description": "SDK for 1inch Limit Order Protocol",
  "author": "@1inch",
  "license": "MIT",
  "private": false,
  "exports": {
    ".": {
      "types": "./dist/types/src/index.d.ts",
      "import": "./dist/esm/index.js",
      "require": "./dist/cjs/index.js",
      "node": "./dist/cjs/index.js",
      "default": "./dist/cjs/index.js"
    },
    "./axios": {
      "types": "./dist/types/src/axios-ext.d.ts",
      "import": "./dist/esm/axios-ext.js",
      "require": "./dist/cjs/axios-ext.js",
      "node": "./dist/cjs/axios-ext.js",
      "default": "./dist/cjs/axios-ext.js"
    },
    "./extensions/fee-taker": {
      "types": "./dist/types/src/fee-taker-ext.d.ts",
      "import": "./dist/esm/fee-taker-ext.js",
      "require": "./dist/cjs/fee-taker-ext.js",
      "node": "./dist/cjs/fee-taker-ext.js",
      "default": "./dist/cjs/fee-taker-ext.js"
    }
  },
  "module": "dist/esm/index.js",
  "main": "dist/cjs/index.js",
  "types": "dist/types/src/index.d.ts",
  "files": [
    "dist",
    "LICENSE",
    "README.md",
    "package.json"
  ],
  "repository": {
    "type": "git",
    "url": "ssh://git@github.com:1inch/limit-order-sdk.git"
  },
  "scripts": {
    "build": "npm run build:esm && npm run build:cjs && npm run build:types",
    "build:esm": "swc --config-file esm.swcrc ./src -d dist/esm --strip-leading-paths --copy-files && node -e 'const pkg = require(\"./package.json\"); require(\"fs\").writeFileSync(\"dist/esm/package.json\", JSON.stringify({name: pkg.name, version: pkg.version, type: \"module\"}))'",
    "build:cjs": "swc --config-file cjs.swcrc ./src -d dist/cjs --strip-leading-paths --copy-files",
    "build:types": "tsc --project tsconfig.types.json",
    "docs:generate": "tsdoc --src=src/limit-order/* --dest=src/limit-order/README.md && tsdoc --src=src/limit-order-contract/* --dest=src/limit-order-contract/README.md && tsdoc --src=src/limit-order/extensions/** --dest=src/limit-order/extensions/README.md",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "lint:ci": "eslint \"{src,apps,libs,test}/**/*.ts\"",
    "lint": "eslint  \"{src,apps,libs,test}/**/*.ts\" --fix",
    "lint:types": "tsc --noEmit",
    "test": "TZ=UTC jest",
    "test:integration": "TZ=UTC forge build && jest -c jest.integration.config.js",
    "test:watch": "TZ=UTC jest --watch",
    "check": "pnpm lint && pnpm lint:types && pnpm test",
    "changelog:generate": "changelog generate -a"
  },
  "dependencies": {
    "@1inch/byte-utils": "3.0.0",
    "ethers": "6.13.5"
  },
  "devDependencies": {
    "@1inch/eslint-config": "3.0.7",
    "@1inch/tsconfig": "1.0.8",
    "@swc/cli": "0.7.7",
    "@swc/core": "1.10.7",
    "@swc/jest": "0.2.37",
    "@types/jest": "29.5.14",
    "@types/node": "^22.14.1",
    "@typescript-eslint/eslint-plugin": "~8.20.0",
    "@typescript-eslint/parser": "~8.20.0",
    "axios": "^1.8.4",
    "eslint": "9.18.0",
    "eslint-config-prettier": "~10.1.2",
    "eslint-config-standard": "^17.1.0",
    "eslint-import-resolver-typescript": "3.7.0",
    "eslint-plugin-import": "~2.31.0",
    "eslint-plugin-n": "^17.17.0",
    "eslint-plugin-prettier": "^5.2.6",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-unused-imports": "^4.1.4",
    "generate-changelog": "1.8.0",
    "jest": "29.7.0",
    "prettier": "^3.5.3",
    "testcontainers": "11.0.3",
    "tsdoc-markdown": "1.1.0",
    "tslib": "2.8.1",
    "typescript": "5.7.3"
  },
  "peerDependencies": {
    "assert": "^2.0.0",
    "axios": ">=1 <2"
  },
  "peerDependenciesMeta": {
    "axios": {
      "optional": true
    },
    "assert": {
      "optional": true
    }
  },
  "engines": {
    "node": ">=20.9.0"
  },
  "volta": {
    "node": "20.9.0"
  },
  "pnpm": {
    "overrides": {
      "@babel/helpers@<7.26.10": ">=7.26.10",
      "tar-fs@>=2.0.0 <2.1.3": ">=2.1.3"
    }
  }
}



================================================
FILE: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

overrides:
  '@babel/helpers@<7.26.10': '>=7.26.10'
  tar-fs@>=2.0.0 <2.1.3: '>=2.1.3'

importers:

  .:
    dependencies:
      '@1inch/byte-utils':
        specifier: 3.0.0
        version: 3.0.0(assert@2.1.0)
      assert:
        specifier: ^2.0.0
        version: 2.1.0
      ethers:
        specifier: 6.13.5
        version: 6.13.5
    devDependencies:
      '@1inch/eslint-config':
        specifier: 3.0.7
        version: 3.0.7(59ef5ef85570e0c548bdb4ff16ff6e35)
      '@1inch/tsconfig':
        specifier: 1.0.8
        version: 1.0.8
      '@swc/cli':
        specifier: 0.7.7
        version: 0.7.7(@swc/core@1.10.7)
      '@swc/core':
        specifier: 1.10.7
        version: 1.10.7
      '@swc/jest':
        specifier: 0.2.37
        version: 0.2.37(@swc/core@1.10.7)
      '@types/jest':
        specifier: 29.5.14
        version: 29.5.14
      '@types/node':
        specifier: ^22.14.1
        version: 22.14.1
      '@typescript-eslint/eslint-plugin':
        specifier: ~8.20.0
        version: 8.20.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint@9.18.0)(typescript@5.7.3)
      '@typescript-eslint/parser':
        specifier: ~8.20.0
        version: 8.20.0(eslint@9.18.0)(typescript@5.7.3)
      axios:
        specifier: ^1.8.4
        version: 1.8.4
      eslint:
        specifier: 9.18.0
        version: 9.18.0
      eslint-config-prettier:
        specifier: ~10.1.2
        version: 10.1.2(eslint@9.18.0)
      eslint-config-standard:
        specifier: ^17.1.0
        version: 17.1.0(eslint-plugin-import@2.31.0)(eslint-plugin-n@17.17.0(eslint@9.18.0))(eslint-plugin-promise@7.2.1(eslint@9.18.0))(eslint@9.18.0)
      eslint-import-resolver-typescript:
        specifier: 3.7.0
        version: 3.7.0(eslint-plugin-import@2.31.0)(eslint@9.18.0)
      eslint-plugin-import:
        specifier: ~2.31.0
        version: 2.31.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint-import-resolver-typescript@3.7.0)(eslint@9.18.0)
      eslint-plugin-n:
        specifier: ^17.17.0
        version: 17.17.0(eslint@9.18.0)
      eslint-plugin-prettier:
        specifier: ^5.2.6
        version: 5.2.6(eslint-config-prettier@10.1.2(eslint@9.18.0))(eslint@9.18.0)(prettier@3.5.3)
      eslint-plugin-promise:
        specifier: ^7.2.1
        version: 7.2.1(eslint@9.18.0)
      eslint-plugin-unused-imports:
        specifier: ^4.1.4
        version: 4.1.4(@typescript-eslint/eslint-plugin@8.20.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint@9.18.0)(typescript@5.7.3))(eslint@9.18.0)
      generate-changelog:
        specifier: 1.8.0
        version: 1.8.0
      jest:
        specifier: 29.7.0
        version: 29.7.0(@types/node@22.14.1)
      prettier:
        specifier: ^3.5.3
        version: 3.5.3
      testcontainers:
        specifier: 11.0.3
        version: 11.0.3
      tsdoc-markdown:
        specifier: 1.1.0
        version: 1.1.0(typescript@5.7.3)
      tslib:
        specifier: 2.8.1
        version: 2.8.1
      typescript:
        specifier: 5.7.3
        version: 5.7.3

packages:

  '@1inch/byte-utils@3.0.0':
    resolution: {integrity: sha512-CuX4E0z/pzo9hKGzFsMi3vPVgHRRh14ZwNEZ5TY1svnKF8PjxWx3t0CjXCW4dyqKGe6TKAzgYqzzxrMrWPDy5Q==}
    engines: {node: '>=18.16.0'}
    peerDependencies:
      assert: ^2.0.0
    peerDependenciesMeta:
      assert:
        optional: true

  '@1inch/eslint-config@3.0.7':
    resolution: {integrity: sha512-2qsAgDb+fRpSbuHhKz9rChWQx70Xp59K7by72nCbuK6y8/fx7YDokas9ujOZ0nfj0dGUM5xWGB4EXvdWpqcvfA==}
    peerDependencies:
      '@eslint/compat': ^1.1.0
      '@eslint/eslintrc': ^3.1.0
      '@eslint/js': ^9.5.0
      '@stylistic/eslint-plugin': ^2.3.0
      '@typescript-eslint/eslint-plugin': ^7.14.1
      '@typescript-eslint/parser': ^7.14.1
      eslint: ^9.5.0
      eslint-config-prettier: ^9.1.0
      eslint-config-standard: ^17.1.0
      eslint-import-resolver-typescript: ^3.6.1
      eslint-plugin-import: ^2.29.1
      eslint-plugin-n: ^17.9.0
      eslint-plugin-prettier: ^5.1.3
      eslint-plugin-promise: ^6.2.0
      eslint-plugin-unused-imports: ^4.0.0
      globals: ^15.6.0
      prettier: ^3.3.2
      typescript: ^5.5.2

  '@1inch/tsconfig@1.0.8':
    resolution: {integrity: sha512-j9N4YPEo/QbGMuB5jP26Upb5P7qiO5H3w9rNtort5VD++LY7y8WD69fVEC/8hSAXxpQ0EHH1N2pY4oavwztyZQ==}

  '@adraffy/ens-normalize@1.10.1':
    resolution: {integrity: sha512-96Z2IP3mYmF1Xg2cDm8f1gWGf/HUVedQ3FMifV4kG/PQ4yEP51xDtRAEfhVNt5f/uzpNkZHwWQuUcu6D6K+Ekw==}

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@babel/code-frame@7.26.2':
    resolution: {integrity: sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.26.8':
    resolution: {integrity: sha512-oH5UPLMWR3L2wEFLnFJ1TZXqHufiTKAiLfqw5zkhS4dKXLJ10yVztfil/twG8EDTA4F/tvVNw9nOl4ZMslB8rQ==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.26.10':
    resolution: {integrity: sha512-vMqyb7XCDMPvJFFOaT9kxtiRh42GwlZEg1/uIgtZshS5a/8OaduUfCi7kynKgc3Tw/6Uo2D+db9qBttghhmxwQ==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.27.0':
    resolution: {integrity: sha512-VybsKvpiN1gU1sdMZIp7FcqphVVKEwcuj02x73uvcHE0PTihx1nlBcowYWhDwjpoAXRv43+gDzyggGnn1XZhVw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.27.0':
    resolution: {integrity: sha512-LVk7fbXml0H2xH34dFzKQ7TDZ2G4/rVTOrq9V+icbbadjbVxxeFeDsNHv2SrZeWoA+6ZiTyWYWtScEIW07EAcA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.25.9':
    resolution: {integrity: sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.26.0':
    resolution: {integrity: sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-plugin-utils@7.26.5':
    resolution: {integrity: sha512-RS+jZcRdZdRFzMyr+wcsaqOmld1/EqTghfaBGQQd/WnRdzdlvSZ//kF7U8VQTxf1ynZ4cjUcYgjVGx13ewNPMg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.25.9':
    resolution: {integrity: sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.25.9':
    resolution: {integrity: sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.25.9':
    resolution: {integrity: sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.27.0':
    resolution: {integrity: sha512-U5eyP/CTFPuNE3qk+WZMxFkp/4zUzdceQlfzf7DdGdhp+Fezd7HD+i8Y24ZuTMKX3wQBld449jijbGq6OdGNQg==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.27.0':
    resolution: {integrity: sha512-iaepho73/2Pz7w2eMS0Q5f83+0RKI7i4xmiYeBmDzfRVbQtTOG7Ts0S4HzJVsTMGI9keU8rNfuZr8DKfSt7Yyg==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-syntax-async-generators@7.8.4':
    resolution: {integrity: sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-bigint@7.8.3':
    resolution: {integrity: sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-class-properties@7.12.13':
    resolution: {integrity: sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-class-static-block@7.14.5':
    resolution: {integrity: sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-attributes@7.26.0':
    resolution: {integrity: sha512-e2dttdsJ1ZTpi3B9UYGLw41hifAubg19AtCu/2I/F1QNVclOBr1dYpTdmdyZ84Xiz43BS/tCUkMAZNLv12Pi+A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-meta@7.10.4':
    resolution: {integrity: sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-json-strings@7.8.3':
    resolution: {integrity: sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-jsx@7.25.9':
    resolution: {integrity: sha512-ld6oezHQMZsZfp6pWtbjaNDF2tiiCYYDqQszHt5VV437lewP9aSi2Of99CK0D0XB21k7FLgnLcmQKyKzynfeAA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-logical-assignment-operators@7.10.4':
    resolution: {integrity: sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-nullish-coalescing-operator@7.8.3':
    resolution: {integrity: sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-numeric-separator@7.10.4':
    resolution: {integrity: sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-object-rest-spread@7.8.3':
    resolution: {integrity: sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-optional-catch-binding@7.8.3':
    resolution: {integrity: sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-optional-chaining@7.8.3':
    resolution: {integrity: sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-private-property-in-object@7.14.5':
    resolution: {integrity: sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-top-level-await@7.14.5':
    resolution: {integrity: sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-typescript@7.25.9':
    resolution: {integrity: sha512-hjMgRy5hb8uJJjUcdWunWVcoi9bGpJp8p5Ol1229PoN6aytsLwNMgmdftO23wnCLMfVmTwZDWMPNq/D1SY60JQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/template@7.27.0':
    resolution: {integrity: sha512-2ncevenBqXI6qRMukPlXwHKHchC7RyMuu4xv5JBXRfOGVcTy1mXCD12qrp7Jsoxll1EV3+9sE4GugBVRjT2jFA==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.27.0':
    resolution: {integrity: sha512-19lYZFzYVQkkHkl4Cy4WrAVcqBkgvV2YM2TU3xG6DIwO7O3ecbDPfW3yM3bjAGcqcQHi+CCtjMR3dIEHxsd6bA==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.27.0':
    resolution: {integrity: sha512-H45s8fVLYjbhFH62dIJ3WtmJ6RSPt/3DRO0ZcT2SUiYiQyz3BLVb9ADEnLl91m74aQPS3AzzeajZHYOalWe3bg==}
    engines: {node: '>=6.9.0'}

  '@balena/dockerignore@1.0.2':
    resolution: {integrity: sha512-wMue2Sy4GAVTk6Ic4tJVcnfdau+gx2EnG7S+uAEe+TWJFqE4YoWN4/H8MSLj4eYJKxGg26lZwboEniNiNwZQ6Q==}

  '@bcoe/v8-coverage@0.2.3':
    resolution: {integrity: sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==}

  '@eslint-community/eslint-utils@4.6.0':
    resolution: {integrity: sha512-WhCn7Z7TauhBtmzhvKpoQs0Wwb/kBcy4CwpuI0/eEIr2Lx2auxmulAzLr91wVZJaz47iUZdkXOK7WlAfxGKCnA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.12.1':
    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/compat@1.2.8':
    resolution: {integrity: sha512-LqCYHdWL/QqKIJuZ/ucMAv8d4luKGs4oCPgpt8mWztQAtPrHfXKQ/XAUc8ljCHAfJCn6SvkpTcGt5Tsh8saowA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^9.10.0
    peerDependenciesMeta:
      eslint:
        optional: true

  '@eslint/config-array@0.19.2':
    resolution: {integrity: sha512-GNKqxfHG2ySmJOBSHg7LxeUx4xpuCoFjacmlCoYWEbaPXLwvfIjixRI12xCQZeULksQb23uiA8F40w5TojpV7w==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.10.0':
    resolution: {integrity: sha512-gFHJ+xBOo4G3WRlR1e/3G8A6/KZAH6zcE/hkLRCZTi/B9avAG365QhFA8uOGzTMqgTghpn7/fSnscW++dpMSAw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.13.0':
    resolution: {integrity: sha512-yfkgDw1KR66rkT5A8ci4irzDysN7FRpq3ttJolR88OqQikAWqwA8j5VZyas+vjyBNFIJ7MfybJ9plMILI2UrCw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/eslintrc@3.3.1':
    resolution: {integrity: sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/js@9.18.0':
    resolution: {integrity: sha512-fK6L7rxcq6/z+AaQMtiFTkvbHkBLNlwyRxHpKawP0x3u9+NC6MQTnFW+AdpwC6gfHTW0051cokQgtTN2FqlxQA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/object-schema@2.1.6':
    resolution: {integrity: sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/plugin-kit@0.2.8':
    resolution: {integrity: sha512-ZAoA40rNMPwSm+AeHpCq8STiNAwzWLJuP8Xv4CHIc9wv/PSuExjMrmjfYNj682vW0OOiZ1HKxzvjQr9XZIisQA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@grpc/grpc-js@1.13.3':
    resolution: {integrity: sha512-FTXHdOoPbZrBjlVLHuKbDZnsTxXv2BlHF57xw6LuThXacXvtkahEPED0CKMk6obZDf65Hv4k3z62eyPNpvinIg==}
    engines: {node: '>=12.10.0'}

  '@grpc/proto-loader@0.7.13':
    resolution: {integrity: sha512-AiXO/bfe9bmxBjxxtYxFAXGZvMaN5s8kO+jBHAJCON8rJoB5YS/D6X7ZNc6XQkuHNmyl4CYaMI1fJ/Gn27RGGw==}
    engines: {node: '>=6'}
    hasBin: true

  '@humanfs/core@0.19.1':
    resolution: {integrity: sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==}
    engines: {node: '>=18.18.0'}

  '@humanfs/node@0.16.6':
    resolution: {integrity: sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==}
    engines: {node: '>=18.18.0'}

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/retry@0.3.1':
    resolution: {integrity: sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==}
    engines: {node: '>=18.18'}

  '@humanwhocodes/retry@0.4.2':
    resolution: {integrity: sha512-xeO57FpIu4p1Ri3Jq/EXq4ClRm86dVF2z/+kvFnyqVYRavTZmaFaUBbWCOuuTh0o/g7DSsk6kc2vrS4Vl5oPOQ==}
    engines: {node: '>=18.18'}

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@istanbuljs/load-nyc-config@1.1.0':
    resolution: {integrity: sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==}
    engines: {node: '>=8'}

  '@istanbuljs/schema@0.1.3':
    resolution: {integrity: sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==}
    engines: {node: '>=8'}

  '@jest/console@29.7.0':
    resolution: {integrity: sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/core@29.7.0':
    resolution: {integrity: sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  '@jest/create-cache-key-function@29.7.0':
    resolution: {integrity: sha512-4QqS3LY5PBmTRHj9sAg1HLoPzqAI0uOX6wI/TRqHIcOxlFidy6YEmCQJk6FSZjNLGCeubDMfmkWL+qaLKhSGQA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/environment@29.7.0':
    resolution: {integrity: sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/expect-utils@29.7.0':
    resolution: {integrity: sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/expect@29.7.0':
    resolution: {integrity: sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/fake-timers@29.7.0':
    resolution: {integrity: sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/globals@29.7.0':
    resolution: {integrity: sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/reporters@29.7.0':
    resolution: {integrity: sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  '@jest/schemas@29.6.3':
    resolution: {integrity: sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/source-map@29.6.3':
    resolution: {integrity: sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/test-result@29.7.0':
    resolution: {integrity: sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/test-sequencer@29.7.0':
    resolution: {integrity: sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/transform@29.7.0':
    resolution: {integrity: sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/types@29.6.3':
    resolution: {integrity: sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jridgewell/gen-mapping@0.3.8':
    resolution: {integrity: sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@js-sdsl/ordered-map@4.4.2':
    resolution: {integrity: sha512-iUKgm52T8HOE/makSxjqoWhe95ZJA1/G1sYsGev2JDKUSS14KAgg1LHb+Ba+IPow0xflbnSkOsZcO08C7w1gYw==}

  '@napi-rs/nice-android-arm-eabi@1.0.4':
    resolution: {integrity: sha512-OZFMYUkih4g6HCKTjqJHhMUlgvPiDuSLZPbPBWHLjKmFTv74COzRlq/gwHtmEVaR39mJQ6ZyttDl2HNMUbLVoA==}
    engines: {node: '>= 10'}
    cpu: [arm]
    os: [android]

  '@napi-rs/nice-android-arm64@1.0.4':
    resolution: {integrity: sha512-k8u7cjeA64vQWXZcRrPbmwjH8K09CBnNaPnI9L1D5N6iMPL3XYQzLcN6WwQonfcqCDv5OCY3IqX89goPTV4KMw==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [android]

  '@napi-rs/nice-darwin-arm64@1.0.4':
    resolution: {integrity: sha512-GsLdQvUcuVzoyzmtjsThnpaVEizAqH5yPHgnsBmq3JdVoVZHELFo7PuJEdfOH1DOHi2mPwB9sCJEstAYf3XCJA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@napi-rs/nice-darwin-x64@1.0.4':
    resolution: {integrity: sha512-1y3gyT3e5zUY5SxRl3QDtJiWVsbkmhtUHIYwdWWIQ3Ia+byd/IHIEpqAxOGW1nhhnIKfTCuxBadHQb+yZASVoA==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@napi-rs/nice-freebsd-x64@1.0.4':
    resolution: {integrity: sha512-06oXzESPRdXUuzS8n2hGwhM2HACnDfl3bfUaSqLGImM8TA33pzDXgGL0e3If8CcFWT98aHows5Lk7xnqYNGFeA==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [freebsd]

  '@napi-rs/nice-linux-arm-gnueabihf@1.0.4':
    resolution: {integrity: sha512-CgklZ6g8WL4+EgVVkxkEvvsi2DSLf9QIloxWO0fvQyQBp6VguUSX3eHLeRpqwW8cRm2Hv/Q1+PduNk7VK37VZw==}
    engines: {node: '>= 10'}
    cpu: [arm]
    os: [linux]

  '@napi-rs/nice-linux-arm64-gnu@1.0.4':
    resolution: {integrity: sha512-wdAJ7lgjhAlsANUCv0zi6msRwq+D4KDgU+GCCHssSxWmAERZa2KZXO0H2xdmoJ/0i03i6YfK/sWaZgUAyuW2oQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@napi-rs/nice-linux-arm64-musl@1.0.4':
    resolution: {integrity: sha512-4b1KYG+sriufhFrpUS9uNOEYYJqSfcbnwGx6uGX7JjrH8tELG90cOpCawz5THNIwlS3DhLgnCOcn0+4p6z26QA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@napi-rs/nice-linux-ppc64-gnu@1.0.4':
    resolution: {integrity: sha512-iaf3vMRgr23oe1PUaKpxaH3DS0IMN0+N9iEiWVwYPm/U15vZFYdqVegGfN2PzrZLUl5lc8ZxbmEKDfuqslhAMA==}
    engines: {node: '>= 10'}
    cpu: [ppc64]
    os: [linux]

  '@napi-rs/nice-linux-riscv64-gnu@1.0.4':
    resolution: {integrity: sha512-UXoREY6Yw6rHrGuTwQgBxpfjK34t6mTjibE9/cXbefL9AuUCJ9gEgwNKZiONuR5QGswChqo9cnthjdKkYyAdDg==}
    engines: {node: '>= 10'}
    cpu: [riscv64]
    os: [linux]

  '@napi-rs/nice-linux-s390x-gnu@1.0.4':
    resolution: {integrity: sha512-eFbgYCRPmsqbYPAlLYU5hYTNbogmIDUvknilehHsFhCH1+0/kN87lP+XaLT0Yeq4V/rpwChSd9vlz4muzFArtw==}
    engines: {node: '>= 10'}
    cpu: [s390x]
    os: [linux]

  '@napi-rs/nice-linux-x64-gnu@1.0.4':
    resolution: {integrity: sha512-4T3E6uTCwWT6IPnwuPcWVz3oHxvEp/qbrCxZhsgzwTUBEwu78EGNXGdHfKJQt3soth89MLqZJw+Zzvnhrsg1mQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@napi-rs/nice-linux-x64-musl@1.0.4':
    resolution: {integrity: sha512-NtbBkAeyBPLvCBkWtwkKXkNSn677eaT0cX3tygq+2qVv71TmHgX4gkX6o9BXjlPzdgPGwrUudavCYPT9tzkEqQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@napi-rs/nice-win32-arm64-msvc@1.0.4':
    resolution: {integrity: sha512-vubOe3i+YtSJGEk/++73y+TIxbuVHi+W8ZzrRm2eETCjCRwNlgbfToQZ85dSA+4iBB/NJRGNp+O4hfdbbttZWA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@napi-rs/nice-win32-ia32-msvc@1.0.4':
    resolution: {integrity: sha512-BMOVrUDZeg1RNRKVlh4eyLv5djAAVLiSddfpuuQ47EFjBcklg0NUeKMFKNrKQR4UnSn4HAiACLD7YK7koskwmg==}
    engines: {node: '>= 10'}
    cpu: [ia32]
    os: [win32]

  '@napi-rs/nice-win32-x64-msvc@1.0.4':
    resolution: {integrity: sha512-kCNk6HcRZquhw/whwh4rHsdPyOSCQCgnVDVik+Y9cuSVTDy3frpiCJTScJqPPS872h4JgZKkr/+CwcwttNEo9Q==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@napi-rs/nice@1.0.4':
    resolution: {integrity: sha512-Sqih1YARrmMoHlXGgI9JrrgkzxcaaEso0AH+Y7j8NHonUs+xe4iDsgC3IBIDNdzEewbNpccNN6hip+b5vmyRLw==}
    engines: {node: '>= 10'}

  '@noble/curves@1.2.0':
    resolution: {integrity: sha512-oYclrNgRaM9SsBUBVbb8M6DTV7ZHRTKugureoYEncY5c65HOmRzvSiTE3y5CYaPYJA/GVkrhXEoF0M3Ya9PMnw==}

  '@noble/hashes@1.3.2':
    resolution: {integrity: sha512-MVC8EAQp7MvEcm30KWENFjgR+Mkmf+D189XJTkFIlwohU5hcBbn1ZkKq7KVTi2Hme3PMGF390DaL52beVrIihQ==}
    engines: {node: '>= 16'}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@nolyfill/is-core-module@1.0.39':
    resolution: {integrity: sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==}
    engines: {node: '>=12.4.0'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@pkgr/core@0.2.4':
    resolution: {integrity: sha512-ROFF39F6ZrnzSUEmQQZUar0Jt4xVoP9WnDRdWwF4NNcXs3xBTLgBUDoOwW141y1jP+S8nahIbdxbFC7IShw9Iw==}
    engines: {node: ^12.20.0 || ^14.18.0 || >=16.0.0}

  '@protobufjs/aspromise@1.1.2':
    resolution: {integrity: sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==}

  '@protobufjs/base64@1.1.2':
    resolution: {integrity: sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==}

  '@protobufjs/codegen@2.0.4':
    resolution: {integrity: sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==}

  '@protobufjs/eventemitter@1.1.0':
    resolution: {integrity: sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==}

  '@protobufjs/fetch@1.1.0':
    resolution: {integrity: sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==}

  '@protobufjs/float@1.0.2':
    resolution: {integrity: sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==}

  '@protobufjs/inquire@1.1.0':
    resolution: {integrity: sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==}

  '@protobufjs/path@1.1.2':
    resolution: {integrity: sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==}

  '@protobufjs/pool@1.1.0':
    resolution: {integrity: sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==}

  '@protobufjs/utf8@1.1.0':
    resolution: {integrity: sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==}

  '@rtsao/scc@1.1.0':
    resolution: {integrity: sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==}

  '@sec-ant/readable-stream@0.4.1':
    resolution: {integrity: sha512-831qok9r2t8AlxLko40y2ebgSDhenenCatLVeW/uBtnHPyhHOvG0C7TvfgecV+wHzIm5KUICgzmVpWS+IMEAeg==}

  '@sinclair/typebox@0.27.8':
    resolution: {integrity: sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==}

  '@sindresorhus/is@5.6.0':
    resolution: {integrity: sha512-TV7t8GKYaJWsn00tFDqBw8+Uqmr8A0fRU1tvTQhyZzGv0sJCGRQL3JGMI3ucuKo3XIZdUP+Lx7/gh2t3lewy7g==}
    engines: {node: '>=14.16'}

  '@sinonjs/commons@3.0.1':
    resolution: {integrity: sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==}

  '@sinonjs/fake-timers@10.3.0':
    resolution: {integrity: sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==}

  '@stylistic/eslint-plugin@2.13.0':
    resolution: {integrity: sha512-RnO1SaiCFHn666wNz2QfZEFxvmiNRqhzaMXHXxXXKt+MEP7aajlPxUSMIQpKAaJfverpovEYqjBOXDq6dDcaOQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: '>=8.40.0'

  '@swc/cli@0.7.7':
    resolution: {integrity: sha512-j4yYm9bx3pxWofaJKX1BFwj/3ngUDynN4UIQ2Xd2h0h/7Gt7zkReBTpDN7g5S13mgAYxacaTHTOUsz18097E8w==}
    engines: {node: '>= 16.14.0'}
    hasBin: true
    peerDependencies:
      '@swc/core': ^1.2.66
      chokidar: ^4.0.1
    peerDependenciesMeta:
      chokidar:
        optional: true

  '@swc/core-darwin-arm64@1.10.7':
    resolution: {integrity: sha512-SI0OFg987P6hcyT0Dbng3YRISPS9uhLX1dzW4qRrfqQdb0i75lPJ2YWe9CN47HBazrIA5COuTzrD2Dc0TcVsSQ==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [darwin]

  '@swc/core-darwin-x64@1.10.7':
    resolution: {integrity: sha512-RFIAmWVicD/l3RzxgHW0R/G1ya/6nyMspE2cAeDcTbjHi0I5qgdhBWd6ieXOaqwEwiCd0Mot1g2VZrLGoBLsjQ==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [darwin]

  '@swc/core-linux-arm-gnueabihf@1.10.7':
    resolution: {integrity: sha512-QP8vz7yELWfop5mM5foN6KkLylVO7ZUgWSF2cA0owwIaziactB2hCPZY5QU690coJouk9KmdFsPWDnaCFUP8tg==}
    engines: {node: '>=10'}
    cpu: [arm]
    os: [linux]

  '@swc/core-linux-arm64-gnu@1.10.7':
    resolution: {integrity: sha512-NgUDBGQcOeLNR+EOpmUvSDIP/F7i/OVOKxst4wOvT5FTxhnkWrW+StJGKj+DcUVSK5eWOYboSXr1y+Hlywwokw==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [linux]

  '@swc/core-linux-arm64-musl@1.10.7':
    resolution: {integrity: sha512-gp5Un3EbeSThBIh6oac5ZArV/CsSmTKj5jNuuUAuEsML3VF9vqPO+25VuxCvsRf/z3py+xOWRaN2HY/rjMeZog==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [linux]

  '@swc/core-linux-x64-gnu@1.10.7':
    resolution: {integrity: sha512-k/OxLLMl/edYqbZyUNg6/bqEHTXJT15l9WGqsl/2QaIGwWGvles8YjruQYQ9d4h/thSXLT9gd8bExU2D0N+bUA==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [linux]

  '@swc/core-linux-x64-musl@1.10.7':
    resolution: {integrity: sha512-XeDoURdWt/ybYmXLCEE8aSiTOzEn0o3Dx5l9hgt0IZEmTts7HgHHVeRgzGXbR4yDo0MfRuX5nE1dYpTmCz0uyA==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [linux]

  '@swc/core-win32-arm64-msvc@1.10.7':
    resolution: {integrity: sha512-nYAbi/uLS+CU0wFtBx8TquJw2uIMKBnl04LBmiVoFrsIhqSl+0MklaA9FVMGA35NcxSJfcm92Prl2W2LfSnTqQ==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [win32]

  '@swc/core-win32-ia32-msvc@1.10.7':
    resolution: {integrity: sha512-+aGAbsDsIxeLxw0IzyQLtvtAcI1ctlXVvVcXZMNXIXtTURM876yNrufRo4ngoXB3jnb1MLjIIjgXfFs/eZTUSw==}
    engines: {node: '>=10'}
    cpu: [ia32]
    os: [win32]

  '@swc/core-win32-x64-msvc@1.10.7':
    resolution: {integrity: sha512-TBf4clpDBjF/UUnkKrT0/th76/zwvudk5wwobiTFqDywMApHip5O0VpBgZ+4raY2TM8k5+ujoy7bfHb22zu17Q==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [win32]

  '@swc/core@1.10.7':
    resolution: {integrity: sha512-py91kjI1jV5D5W/Q+PurBdGsdU5TFbrzamP7zSCqLdMcHkKi3rQEM5jkQcZr0MXXSJTaayLxS3MWYTBIkzPDrg==}
    engines: {node: '>=10'}
    peerDependencies:
      '@swc/helpers': '*'
    peerDependenciesMeta:
      '@swc/helpers':
        optional: true

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/jest@0.2.37':
    resolution: {integrity: sha512-CR2BHhmXKGxTiFr21DYPRHQunLkX3mNIFGFkxBGji6r9uyIR5zftTOVYj1e0sFNMV2H7mf/+vpaglqaryBtqfQ==}
    engines: {npm: '>= 7.0.0'}
    peerDependencies:
      '@swc/core': '*'

  '@swc/types@0.1.21':
    resolution: {integrity: sha512-2YEtj5HJVbKivud9N4bpPBAyZhj4S2Ipe5LkUG94alTpr7in/GU/EARgPAd3BwU+YOmFVJC2+kjqhGRi3r0ZpQ==}

  '@szmarczak/http-timer@5.0.1':
    resolution: {integrity: sha512-+PmQX0PiAYPMeVYe237LJAYvOMYW1j2rH5YROyS3b4CTVJum34HfRvKvAzozHAQG0TnHNdUfY9nCeUyRAs//cw==}
    engines: {node: '>=14.16'}

  '@tokenizer/token@0.3.0':
    resolution: {integrity: sha512-OvjF+z51L3ov0OyAU0duzsYuvO01PH7x4t6DJx+guahgTnBHkhJdG7soQeTSFLWN3efnHyibZ4Z8l2EuWwJN3A==}

  '@types/babel__core@7.20.5':
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}

  '@types/babel__generator@7.27.0':
    resolution: {integrity: sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==}

  '@types/babel__template@7.4.4':
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}

  '@types/babel__traverse@7.20.7':
    resolution: {integrity: sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==}

  '@types/docker-modem@3.0.6':
    resolution: {integrity: sha512-yKpAGEuKRSS8wwx0joknWxsmLha78wNMe9R2S3UNsVOkZded8UqOrV8KoeDXoXsjndxwyF3eIhyClGbO1SEhEg==}

  '@types/dockerode@3.3.40':
    resolution: {integrity: sha512-O1ckSFYbcYv/KcnAHMLCnKQYY8/5+6CRzpsOPcQIePHRX2jG4Gmz8uXPMCXIxTGN9OYkE5eox/L67l2sGY1UYg==}

  '@types/estree@1.0.7':
    resolution: {integrity: sha512-w28IoSUCJpidD/TGviZwwMJckNESJZXFu7NBZ5YJ4mEUnNraUn9Pm8HSZm/jDF1pDWYKspWE7oVphigUPRakIQ==}

  '@types/graceful-fs@4.1.9':
    resolution: {integrity: sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==}

  '@types/http-cache-semantics@4.0.4':
    resolution: {integrity: sha512-1m0bIFVc7eJWyve9S0RnuRgcQqF/Xd5QsUZAZeQFr1Q3/p9JWoQQEqmVy+DPTNpGXwhgIetAoYF8JSc33q29QA==}

  '@types/istanbul-lib-coverage@2.0.6':
    resolution: {integrity: sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==}

  '@types/istanbul-lib-report@3.0.3':
    resolution: {integrity: sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==}

  '@types/istanbul-reports@3.0.4':
    resolution: {integrity: sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==}

  '@types/jest@29.5.14':
    resolution: {integrity: sha512-ZN+4sdnLUbo8EVvVc2ao0GFW6oVrQRPn4K2lglySj7APvSrgzxHiNNK99us4WDMi57xxA2yggblIAMNhXOotLQ==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/json5@0.0.29':
    resolution: {integrity: sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==}

  '@types/node@18.19.86':
    resolution: {integrity: sha512-fifKayi175wLyKyc5qUfyENhQ1dCNI1UNjp653d8kuYcPQN5JhX3dGuP/XmvPTg/xRBn1VTLpbmi+H/Mr7tLfQ==}

  '@types/node@22.14.1':
    resolution: {integrity: sha512-u0HuPQwe/dHrItgHHpmw3N2fYCR6x4ivMNbPHRkBVP4CvN+kiRrKHWk3i8tXiO/joPwXLMYvF9TTF0eqgHIuOw==}

  '@types/node@22.7.5':
    resolution: {integrity: sha512-jML7s2NAzMWc//QSJ1a3prpk78cOPchGvXJsC3C6R6PSMoooztvRVQEz89gmBTBY1SPMaqo5teB4uNHPdetShQ==}

  '@types/ssh2-streams@0.1.12':
    resolution: {integrity: sha512-Sy8tpEmCce4Tq0oSOYdfqaBpA3hDM8SoxoFh5vzFsu2oL+znzGz8oVWW7xb4K920yYMUY+PIG31qZnFMfPWNCg==}

  '@types/ssh2@0.5.52':
    resolution: {integrity: sha512-lbLLlXxdCZOSJMCInKH2+9V/77ET2J6NPQHpFI0kda61Dd1KglJs+fPQBchizmzYSOJBgdTajhPqBO1xxLywvg==}

  '@types/ssh2@1.15.5':
    resolution: {integrity: sha512-N1ASjp/nXH3ovBHddRJpli4ozpk6UdDYIX4RJWFa9L1YKnzdhTlVmiGHm4DZnj/jLbqZpes4aeR30EFGQtvhQQ==}

  '@types/stack-utils@2.0.3':
    resolution: {integrity: sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==}

  '@types/yargs-parser@21.0.3':
    resolution: {integrity: sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==}

  '@types/yargs@17.0.33':
    resolution: {integrity: sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==}

  '@typescript-eslint/eslint-plugin@8.20.0':
    resolution: {integrity: sha512-naduuphVw5StFfqp4Gq4WhIBE2gN1GEmMUExpJYknZJdRnc+2gDzB8Z3+5+/Kv33hPQRDGzQO/0opHE72lZZ6A==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      '@typescript-eslint/parser': ^8.0.0 || ^8.0.0-alpha.0
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.8.0'

  '@typescript-eslint/parser@8.20.0':
    resolution: {integrity: sha512-gKXG7A5HMyjDIedBi6bUrDcun8GIjnI8qOwVLiY3rx6T/sHP/19XLJOnIq/FgQvWLHja5JN/LSE7eklNBr612g==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.8.0'

  '@typescript-eslint/scope-manager@8.20.0':
    resolution: {integrity: sha512-J7+VkpeGzhOt3FeG1+SzhiMj9NzGD/M6KoGn9f4dbz3YzK9hvbhVTmLj/HiTp9DazIzJ8B4XcM80LrR9Dm1rJw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/scope-manager@8.30.1':
    resolution: {integrity: sha512-+C0B6ChFXZkuaNDl73FJxRYT0G7ufVPOSQkqkpM/U198wUwUFOtgo1k/QzFh1KjpBitaK7R1tgjVz6o9HmsRPg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/type-utils@8.20.0':
    resolution: {integrity: sha512-bPC+j71GGvA7rVNAHAtOjbVXbLN5PkwqMvy1cwGeaxUoRQXVuKCebRoLzm+IPW/NtFFpstn1ummSIasD5t60GA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.8.0'

  '@typescript-eslint/types@8.20.0':
    resolution: {integrity: sha512-cqaMiY72CkP+2xZRrFt3ExRBu0WmVitN/rYPZErA80mHjHx/Svgp8yfbzkJmDoQ/whcytOPO9/IZXnOc+wigRA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/types@8.30.1':
    resolution: {integrity: sha512-81KawPfkuulyWo5QdyG/LOKbspyyiW+p4vpn4bYO7DM/hZImlVnFwrpCTnmNMOt8CvLRr5ojI9nU1Ekpw4RcEw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/typescript-estree@8.20.0':
    resolution: {integrity: sha512-Y7ncuy78bJqHI35NwzWol8E0X7XkRVS4K4P4TCyzWkOJih5NDvtoRDW4Ba9YJJoB2igm9yXDdYI/+fkiiAxPzA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.8.0'

  '@typescript-eslint/typescript-estree@8.30.1':
    resolution: {integrity: sha512-kQQnxymiUy9tTb1F2uep9W6aBiYODgq5EMSk6Nxh4Z+BDUoYUSa029ISs5zTzKBFnexQEh71KqwjKnRz58lusQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/utils@8.20.0':
    resolution: {integrity: sha512-dq70RUw6UK9ei7vxc4KQtBRk7qkHZv447OUZ6RPQMQl71I3NZxQJX/f32Smr+iqWrB02pHKn2yAdHBb0KNrRMA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.8.0'

  '@typescript-eslint/utils@8.30.1':
    resolution: {integrity: sha512-T/8q4R9En2tcEsWPQgB5BQ0XJVOtfARcUvOa8yJP3fh9M/mXraLxZrkCfGb6ChrO/V3W+Xbd04RacUEqk1CFEQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/visitor-keys@8.20.0':
    resolution: {integrity: sha512-v/BpkeeYAsPkKCkR8BDwcno0llhzWVqPOamQrAEMdpZav2Y9OVjd9dwJyBLJWwf335B5DmlifECIkZRJCaGaHA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/visitor-keys@8.30.1':
    resolution: {integrity: sha512-aEhgas7aJ6vZnNFC7K4/vMGDGyOiqWcYZPpIWrTKuTAlsvDNKy2GFDqh9smL+iq069ZvR0YzEeq0B8NJlLzjFA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@xhmikosr/archive-type@7.0.0':
    resolution: {integrity: sha512-sIm84ZneCOJuiy3PpWR5bxkx3HaNt1pqaN+vncUBZIlPZCq8ASZH+hBVdu5H8znR7qYC6sKwx+ie2Q7qztJTxA==}
    engines: {node: ^14.14.0 || >=16.0.0}

  '@xhmikosr/bin-check@7.0.3':
    resolution: {integrity: sha512-4UnCLCs8DB+itHJVkqFp9Zjg+w/205/J2j2wNBsCEAm/BuBmtua2hhUOdAMQE47b1c7P9Xmddj0p+X1XVsfHsA==}
    engines: {node: '>=18'}

  '@xhmikosr/bin-wrapper@13.0.5':
    resolution: {integrity: sha512-DT2SAuHDeOw0G5bs7wZbQTbf4hd8pJ14tO0i4cWhRkIJfgRdKmMfkDilpaJ8uZyPA0NVRwasCNAmMJcWA67osw==}
    engines: {node: '>=18'}

  '@xhmikosr/decompress-tar@8.0.1':
    resolution: {integrity: sha512-dpEgs0cQKJ2xpIaGSO0hrzz3Kt8TQHYdizHsgDtLorWajuHJqxzot9Hbi0huRxJuAGG2qiHSQkwyvHHQtlE+fg==}
    engines: {node: '>=18'}

  '@xhmikosr/decompress-tarbz2@8.0.2':
    resolution: {integrity: sha512-p5A2r/AVynTQSsF34Pig6olt9CvRj6J5ikIhzUd3b57pUXyFDGtmBstcw+xXza0QFUh93zJsmY3zGeNDlR2AQQ==}
    engines: {node: '>=18'}

  '@xhmikosr/decompress-targz@8.0.1':
    resolution: {integrity: sha512-mvy5AIDIZjQ2IagMI/wvauEiSNHhu/g65qpdM4EVoYHUJBAmkQWqcPJa8Xzi1aKVTmOA5xLJeDk7dqSjlHq8Mg==}
    engines: {node: '>=18'}

  '@xhmikosr/decompress-unzip@7.0.0':
    resolution: {integrity: sha512-GQMpzIpWTsNr6UZbISawsGI0hJ4KA/mz5nFq+cEoPs12UybAqZWKbyIaZZyLbJebKl5FkLpsGBkrplJdjvUoSQ==}
    engines: {node: '>=18'}

  '@xhmikosr/decompress@10.0.1':
    resolution: {integrity: sha512-6uHnEEt5jv9ro0CDzqWlFgPycdE+H+kbJnwyxgZregIMLQ7unQSCNVsYG255FoqU8cP46DyggI7F7LohzEl8Ag==}
    engines: {node: '>=18'}

  '@xhmikosr/downloader@15.0.1':
    resolution: {integrity: sha512-fiuFHf3Dt6pkX8HQrVBsK0uXtkgkVlhrZEh8b7VgoDqFf+zrgFBPyrwCqE/3nDwn3hLeNz+BsrS7q3mu13Lp1g==}
    engines: {node: '>=18'}

  '@xhmikosr/os-filter-obj@3.0.0':
    resolution: {integrity: sha512-siPY6BD5dQ2SZPl3I0OZBHL27ZqZvLEosObsZRQ1NUB8qcxegwt0T9eKtV96JMFQpIz1elhkzqOg4c/Ri6Dp9A==}
    engines: {node: ^14.14.0 || >=16.0.0}

  abort-controller@3.0.0:
    resolution: {integrity: sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==}
    engines: {node: '>=6.5'}

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn@8.14.1:
    resolution: {integrity: sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  aes-js@4.0.0-beta.5:
    resolution: {integrity: sha512-G965FqalsNyrPqgEGON7nIx1e/OVENSgiEIzyC63haUMuvNnwIgIjMs52hlTCKhkBny7A2ORNlfY9Zu+jmGk1Q==}

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ansi-escapes@4.3.2:
    resolution: {integrity: sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==}
    engines: {node: '>=8'}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@5.2.0:
    resolution: {integrity: sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==}
    engines: {node: '>=10'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  arch@3.0.0:
    resolution: {integrity: sha512-AmIAC+Wtm2AU8lGfTtHsw0Y9Qtftx2YXEEtiBP10xFUtMOA+sHHx6OAddyL52mUKh1vsXQ6/w1mVDptZCyUt4Q==}

  archiver-utils@5.0.2:
    resolution: {integrity: sha512-wuLJMmIBQYCsGZgYLTy5FIB2pF6Lfb6cXMSF8Qywwk3t20zWnAi7zLcQFdKQmIB8wyZpY5ER38x08GbwtR2cLA==}
    engines: {node: '>= 14'}

  archiver@7.0.1:
    resolution: {integrity: sha512-ZcbTaIqJOfCc03QwD468Unz/5Ir8ATtvAHsK+FdXbDIbGfihqh9mrvdcYunQzqn4HrvWWaFyaxJhGZagaJJpPQ==}
    engines: {node: '>= 14'}

  argparse@1.0.10:
    resolution: {integrity: sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  array-buffer-byte-length@1.0.2:
    resolution: {integrity: sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==}
    engines: {node: '>= 0.4'}

  array-includes@3.1.8:
    resolution: {integrity: sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==}
    engines: {node: '>= 0.4'}

  array.prototype.findlastindex@1.2.6:
    resolution: {integrity: sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==}
    engines: {node: '>= 0.4'}

  array.prototype.flat@1.3.3:
    resolution: {integrity: sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==}
    engines: {node: '>= 0.4'}

  array.prototype.flatmap@1.3.3:
    resolution: {integrity: sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==}
    engines: {node: '>= 0.4'}

  arraybuffer.prototype.slice@1.0.4:
    resolution: {integrity: sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==}
    engines: {node: '>= 0.4'}

  asn1@0.2.6:
    resolution: {integrity: sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==}

  assert@2.1.0:
    resolution: {integrity: sha512-eLHpSK/Y4nhMJ07gDaAzoX/XAKS8PSaojml3M0DM4JpV1LAi5JOJ/p6H/XWrl8L+DzVEvVCW1z3vWAaB9oTsQw==}

  async-function@1.0.0:
    resolution: {integrity: sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==}
    engines: {node: '>= 0.4'}

  async-lock@1.4.1:
    resolution: {integrity: sha512-Az2ZTpuytrtqENulXwO3GGv1Bztugx6TT37NIo7imr/Qo0gsYiGtSdBa2B6fsXhTpVZDNfu1Qn3pk531e3q+nQ==}

  async@3.2.6:
    resolution: {integrity: sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  available-typed-arrays@1.0.7:
    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
    engines: {node: '>= 0.4'}

  axios@1.8.4:
    resolution: {integrity: sha512-eBSYY4Y68NNlHbHBMdeDmKNtDgXWhQsJcGqzO3iLUM0GraQFSS9cVgPX5I9b3lbdFKyYoAEGAZF1DwhTaljNAw==}

  b4a@1.6.7:
    resolution: {integrity: sha512-OnAYlL5b7LEkALw87fUVafQw5rVR9RjwGd4KUwNQ6DrrNmaVaUCgLipfVlzrPQ4tWOR9P0IXGNOx50jYCCdSJg==}

  babel-jest@29.7.0:
    resolution: {integrity: sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@babel/core': ^7.8.0

  babel-plugin-istanbul@6.1.1:
    resolution: {integrity: sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==}
    engines: {node: '>=8'}

  babel-plugin-jest-hoist@29.6.3:
    resolution: {integrity: sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  babel-preset-current-node-syntax@1.1.0:
    resolution: {integrity: sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==}
    peerDependencies:
      '@babel/core': ^7.0.0

  babel-preset-jest@29.6.3:
    resolution: {integrity: sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@babel/core': ^7.0.0

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  bare-events@2.5.4:
    resolution: {integrity: sha512-+gFfDkR8pj4/TrWCGUGWmJIkBwuxPS5F+a5yWjOHQt2hHvNZd5YLzadjmDUtFmMM4y429bnKLa8bYBMHcYdnQA==}

  bare-fs@4.1.2:
    resolution: {integrity: sha512-8wSeOia5B7LwD4+h465y73KOdj5QHsbbuoUfPBi+pXgFJIPuG7SsiOdJuijWMyfid49eD+WivpfY7KT8gbAzBA==}
    engines: {bare: '>=1.16.0'}
    peerDependencies:
      bare-buffer: '*'
    peerDependenciesMeta:
      bare-buffer:
        optional: true

  bare-os@3.6.1:
    resolution: {integrity: sha512-uaIjxokhFidJP+bmmvKSgiMzj2sV5GPHaZVAIktcxcpCyBFFWO+YlikVAdhmUo2vYFvFhOXIAlldqV29L8126g==}
    engines: {bare: '>=1.14.0'}

  bare-path@3.0.0:
    resolution: {integrity: sha512-tyfW2cQcB5NN8Saijrhqn0Zh7AnFNsnczRcuWODH0eYAXBsJ5gVxAUuNr7tsHSC6IZ77cA0SitzT+s47kot8Mw==}

  bare-stream@2.6.5:
    resolution: {integrity: sha512-jSmxKJNJmHySi6hC42zlZnq00rga4jjxcgNZjY9N5WlOe/iOoGRtdwGsHzQv2RlH2KOYMwGUXhf2zXd32BA9RA==}
    peerDependencies:
      bare-buffer: '*'
      bare-events: '*'
    peerDependenciesMeta:
      bare-buffer:
        optional: true
      bare-events:
        optional: true

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  bcrypt-pbkdf@1.0.2:
    resolution: {integrity: sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==}

  bin-version-check@5.1.0:
    resolution: {integrity: sha512-bYsvMqJ8yNGILLz1KP9zKLzQ6YpljV3ln1gqhuLkUtyfGi3qXKGuK2p+U4NAvjVFzDFiBBtOpCOSFNuYYEGZ5g==}
    engines: {node: '>=12'}

  bin-version@6.0.0:
    resolution: {integrity: sha512-nk5wEsP4RiKjG+vF+uG8lFsEn4d7Y6FVDamzzftSunXOoOcOOkzcWdKVlGgFFwlUQCj63SgnUkLLGF8v7lufhw==}
    engines: {node: '>=12'}

  bluebird@3.7.2:
    resolution: {integrity: sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg==}

  brace-expansion@1.1.12:
    resolution: {integrity: sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==}

  brace-expansion@2.0.2:
    resolution: {integrity: sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.24.4:
    resolution: {integrity: sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  bser@2.1.1:
    resolution: {integrity: sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==}

  buffer-crc32@0.2.13:
    resolution: {integrity: sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==}

  buffer-crc32@1.0.0:
    resolution: {integrity: sha512-Db1SbgBS/fg/392AblrMJk97KggmvYhr4pB5ZIMTWtaivCPMWLkmb7m21cJvpvgK+J3nsU2CmmixNBZx4vFj/w==}
    engines: {node: '>=8.0.0'}

  buffer-from@1.1.2:
    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}

  buffer@5.7.1:
    resolution: {integrity: sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==}

  buffer@6.0.3:
    resolution: {integrity: sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==}

  buildcheck@0.0.6:
    resolution: {integrity: sha512-8f9ZJCUXyT1M35Jx7MkBgmBMo3oHTTBIPLiY9xyL0pl3T5RwcPEY8cUHr5LBNfu/fk6c2T4DJZuVM/8ZZT2D2A==}
    engines: {node: '>=10.0.0'}

  byline@5.0.0:
    resolution: {integrity: sha512-s6webAy+R4SR8XVuJWt2V2rGvhnrhxN+9S15GNuTK3wKPOXFF6RNc+8ug2XhH+2s4f+uudG4kUVYmYOQWL2g0Q==}
    engines: {node: '>=0.10.0'}

  cacheable-lookup@7.0.0:
    resolution: {integrity: sha512-+qJyx4xiKra8mZrcwhjMRMUhD5NR1R8esPkzIYxX96JiecFoxAXFuz/GpR3+ev4PE1WamHip78wV0vcmPQtp8w==}
    engines: {node: '>=14.16'}

  cacheable-request@10.2.14:
    resolution: {integrity: sha512-zkDT5WAF4hSSoUgyfg5tFIxz8XQK+25W/TLVojJTMKBaxevLBBtLxgqguAuVQB8PVW79FVjHcU+GJ9tVbDZ9mQ==}
    engines: {node: '>=14.16'}

  call-bind-apply-helpers@1.0.2:
    resolution: {integrity: sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==}
    engines: {node: '>= 0.4'}

  call-bind@1.0.8:
    resolution: {integrity: sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==}
    engines: {node: '>= 0.4'}

  call-bound@1.0.4:
    resolution: {integrity: sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase@5.3.1:
    resolution: {integrity: sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==}
    engines: {node: '>=6'}

  camelcase@6.3.0:
    resolution: {integrity: sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==}
    engines: {node: '>=10'}

  caniuse-lite@1.0.30001713:
    resolution: {integrity: sha512-wCIWIg+A4Xr7NfhTuHdX+/FKh3+Op3LBbSp2N5Pfx6T/LhdQy3GTyoTg48BReaW/MyMNZAkTadsBtai3ldWK0Q==}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  char-regex@1.0.2:
    resolution: {integrity: sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==}
    engines: {node: '>=10'}

  ci-info@3.9.0:
    resolution: {integrity: sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==}
    engines: {node: '>=8'}

  cjs-module-lexer@1.4.3:
    resolution: {integrity: sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==}

  cliui@8.0.1:
    resolution: {integrity: sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==}
    engines: {node: '>=12'}

  co@4.6.0:
    resolution: {integrity: sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==}
    engines: {iojs: '>= 1.0.0', node: '>= 0.12.0'}

  collect-v8-coverage@1.0.2:
    resolution: {integrity: sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  commander@2.20.3:
    resolution: {integrity: sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==}

  commander@6.2.1:
    resolution: {integrity: sha512-U7VdrJFnJgo4xjrHpTzu0yrHPGImdsmD95ZlgYSEajAn2JKzDhDTPG9kBTefmObL2w/ngeZnilk+OV9CG3d7UA==}
    engines: {node: '>= 6'}

  commander@8.3.0:
    resolution: {integrity: sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==}
    engines: {node: '>= 12'}

  compress-commons@6.0.2:
    resolution: {integrity: sha512-6FqVXeETqWPoGcfzrXb37E50NP0LXT8kAMu5ooZayhWWdgEY4lBEEcbQNXtkuKQsGduxiIcI4gOTsxTmuq/bSg==}
    engines: {node: '>= 14'}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  content-disposition@0.5.4:
    resolution: {integrity: sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==}
    engines: {node: '>= 0.6'}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  core-util-is@1.0.3:
    resolution: {integrity: sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==}

  cpu-features@0.0.10:
    resolution: {integrity: sha512-9IkYqtX3YHPCzoVg1Py+o9057a3i0fp7S530UWokCSaFVTc7CwXPRiOjRjBQQ18ZCNafx78YfnG+HALxtVmOGA==}
    engines: {node: '>=10.0.0'}

  crc-32@1.2.2:
    resolution: {integrity: sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==}
    engines: {node: '>=0.8'}
    hasBin: true

  crc32-stream@6.0.0:
    resolution: {integrity: sha512-piICUB6ei4IlTv1+653yq5+KoqfBYmj9bw6LqXoOneTMDXk5nM1qt12mFW1caG3LlJXEKW1Bp0WggEmIfQB34g==}
    engines: {node: '>= 14'}

  create-jest@29.7.0:
    resolution: {integrity: sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  data-view-buffer@1.0.2:
    resolution: {integrity: sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-length@1.0.2:
    resolution: {integrity: sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-offset@1.0.1:
    resolution: {integrity: sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==}
    engines: {node: '>= 0.4'}

  debug@3.2.7:
    resolution: {integrity: sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.4.0:
    resolution: {integrity: sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.4.1:
    resolution: {integrity: sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decompress-response@6.0.0:
    resolution: {integrity: sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==}
    engines: {node: '>=10'}

  dedent@1.5.3:
    resolution: {integrity: sha512-NHQtfOOW68WD8lgypbLA5oT+Bt0xXJhiYvoR6SmmNXZfpzOGXwdKWmcwG8N7PwVVWV3eF/68nmD9BaJSsTBhyQ==}
    peerDependencies:
      babel-plugin-macros: ^3.1.0
    peerDependenciesMeta:
      babel-plugin-macros:
        optional: true

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  deepmerge@4.3.1:
    resolution: {integrity: sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==}
    engines: {node: '>=0.10.0'}

  defaults@3.0.0:
    resolution: {integrity: sha512-RsqXDEAALjfRTro+IFNKpcPCt0/Cy2FqHSIlnomiJp9YGadpQnrtbRpSgN2+np21qHcIKiva4fiOQGjS9/qR/A==}
    engines: {node: '>=18'}

  defer-to-connect@2.0.1:
    resolution: {integrity: sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==}
    engines: {node: '>=10'}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  define-properties@1.2.1:
    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
    engines: {node: '>= 0.4'}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  detect-newline@3.1.0:
    resolution: {integrity: sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==}
    engines: {node: '>=8'}

  diff-sequences@29.6.3:
    resolution: {integrity: sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  docker-compose@1.2.0:
    resolution: {integrity: sha512-wIU1eHk3Op7dFgELRdmOYlPYS4gP8HhH1ZmZa13QZF59y0fblzFDFmKPhyc05phCy2hze9OEvNZAsoljrs+72w==}
    engines: {node: '>= 6.0.0'}

  docker-modem@5.0.6:
    resolution: {integrity: sha512-ens7BiayssQz/uAxGzH8zGXCtiV24rRWXdjNha5V4zSOcxmAZsfGVm/PPFbwQdqEkDnhG+SyR9E3zSHUbOKXBQ==}
    engines: {node: '>= 8.0'}

  dockerode@4.0.7:
    resolution: {integrity: sha512-R+rgrSRTRdU5mH14PZTCPZtW/zw3HDWNTS/1ZAQpL/5Upe/ye5K9WQkIysu4wBoiMwKynsz0a8qWuGsHgEvSAA==}
    engines: {node: '>= 8.0'}

  doctrine@2.1.0:
    resolution: {integrity: sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==}
    engines: {node: '>=0.10.0'}

  dunder-proto@1.0.1:
    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
    engines: {node: '>= 0.4'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  electron-to-chromium@1.5.137:
    resolution: {integrity: sha512-/QSJaU2JyIuTbbABAo/crOs+SuAZLS+fVVS10PVrIT9hrRkmZl8Hb0xPSkKRUUWHQtYzXHpQUW3Dy5hwMzGZkA==}

  emittery@0.13.1:
    resolution: {integrity: sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==}
    engines: {node: '>=12'}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  end-of-stream@1.4.4:
    resolution: {integrity: sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==}

  enhanced-resolve@5.18.1:
    resolution: {integrity: sha512-ZSW3ma5GkcQBIpwZTSRAI8N71Uuwgs93IezB7mf7R60tC8ZbJideoDNKjHn2O9KIlx6rkGTTEk1xUCK2E1Y2Yg==}
    engines: {node: '>=10.13.0'}

  error-ex@1.3.2:
    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}

  es-abstract@1.23.9:
    resolution: {integrity: sha512-py07lI0wjxAC/DcfK1S6G7iANonniZwTISvdPzk9hzeH0IZIshbuuFxLIU96OyF89Yb9hiqWn8M/bY83KY5vzA==}
    engines: {node: '>= 0.4'}

  es-define-property@1.0.1:
    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-object-atoms@1.1.1:
    resolution: {integrity: sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.1.0:
    resolution: {integrity: sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==}
    engines: {node: '>= 0.4'}

  es-shim-unscopables@1.1.0:
    resolution: {integrity: sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==}
    engines: {node: '>= 0.4'}

  es-to-primitive@1.3.0:
    resolution: {integrity: sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==}
    engines: {node: '>= 0.4'}

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  escape-string-regexp@2.0.0:
    resolution: {integrity: sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==}
    engines: {node: '>=8'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-compat-utils@0.5.1:
    resolution: {integrity: sha512-3z3vFexKIEnjHE3zCMRo6fn/e44U7T1khUjg+Hp0ZQMCigh28rALD0nPFBcGZuiLC5rLZa2ubQHDRln09JfU2Q==}
    engines: {node: '>=12'}
    peerDependencies:
      eslint: '>=6.0.0'

  eslint-config-prettier@10.1.2:
    resolution: {integrity: sha512-Epgp/EofAUeEpIdZkW60MHKvPyru1ruQJxPL+WIycnaPApuseK0Zpkrh/FwL9oIpQvIhJwV7ptOy0DWUjTlCiA==}
    hasBin: true
    peerDependencies:
      eslint: '>=7.0.0'

  eslint-config-standard@17.1.0:
    resolution: {integrity: sha512-IwHwmaBNtDK4zDHQukFDW5u/aTb8+meQWZvNFWkiGmbWjD6bqyuSSBxxXKkCftCUzc1zwCH2m/baCNDLGmuO5Q==}
    engines: {node: '>=12.0.0'}
    peerDependencies:
      eslint: ^8.0.1
      eslint-plugin-import: ^2.25.2
      eslint-plugin-n: '^15.0.0 || ^16.0.0 '
      eslint-plugin-promise: ^6.0.0

  eslint-import-resolver-node@0.3.9:
    resolution: {integrity: sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==}

  eslint-import-resolver-typescript@3.7.0:
    resolution: {integrity: sha512-Vrwyi8HHxY97K5ebydMtffsWAn1SCR9eol49eCd5fJS4O1WV7PaAjbcjmbfJJSMz/t4Mal212Uz/fQZrOB8mow==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      eslint: '*'
      eslint-plugin-import: '*'
      eslint-plugin-import-x: '*'
    peerDependenciesMeta:
      eslint-plugin-import:
        optional: true
      eslint-plugin-import-x:
        optional: true

  eslint-module-utils@2.12.0:
    resolution: {integrity: sha512-wALZ0HFoytlyh/1+4wuZ9FJCD/leWHQzzrxJ8+rebyReSLk7LApMyd3WJaLVoN+D5+WIdJyDK1c6JnE65V4Zyg==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: '*'
      eslint-import-resolver-node: '*'
      eslint-import-resolver-typescript: '*'
      eslint-import-resolver-webpack: '*'
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true
      eslint:
        optional: true
      eslint-import-resolver-node:
        optional: true
      eslint-import-resolver-typescript:
        optional: true
      eslint-import-resolver-webpack:
        optional: true

  eslint-plugin-es-x@7.8.0:
    resolution: {integrity: sha512-7Ds8+wAAoV3T+LAKeu39Y5BzXCrGKrcISfgKEqTS4BDN8SFEDQd0S43jiQ8vIa3wUKD07qitZdfzlenSi8/0qQ==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      eslint: '>=8'

  eslint-plugin-import@2.31.0:
    resolution: {integrity: sha512-ixmkI62Rbc2/w8Vfxyh1jQRTdRTF52VxwRVHl/ykPAmqG+Nb7/kNn+byLP0LxPgI7zWA16Jt82SybJInmMia3A==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: ^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true

  eslint-plugin-n@17.17.0:
    resolution: {integrity: sha512-2VvPK7Mo73z1rDFb6pTvkH6kFibAmnTubFq5l83vePxu0WiY1s0LOtj2WHb6Sa40R3w4mnh8GFYbHBQyMlotKw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: '>=8.23.0'

  eslint-plugin-prettier@5.2.6:
    resolution: {integrity: sha512-mUcf7QG2Tjk7H055Jk0lGBjbgDnfrvqjhXh9t2xLMSCjZVcw9Rb1V6sVNXO0th3jgeO7zllWPTNRil3JW94TnQ==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      '@types/eslint': '>=8.0.0'
      eslint: '>=8.0.0'
      eslint-config-prettier: '>= 7.0.0 <10.0.0 || >=10.1.0'
      prettier: '>=3.0.0'
    peerDependenciesMeta:
      '@types/eslint':
        optional: true
      eslint-config-prettier:
        optional: true

  eslint-plugin-promise@7.2.1:
    resolution: {integrity: sha512-SWKjd+EuvWkYaS+uN2csvj0KoP43YTu7+phKQ5v+xw6+A0gutVX2yqCeCkC3uLCJFiPfR2dD8Es5L7yUsmvEaA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^7.0.0 || ^8.0.0 || ^9.0.0

  eslint-plugin-unused-imports@4.1.4:
    resolution: {integrity: sha512-YptD6IzQjDardkl0POxnnRBhU1OEePMV0nd6siHaRBbd+lyh6NAhFEobiznKU7kTsSsDeSD62Pe7kAM1b7dAZQ==}
    peerDependencies:
      '@typescript-eslint/eslint-plugin': ^8.0.0-0 || ^7.0.0 || ^6.0.0 || ^5.0.0
      eslint: ^9.0.0 || ^8.0.0
    peerDependenciesMeta:
      '@typescript-eslint/eslint-plugin':
        optional: true

  eslint-scope@8.3.0:
    resolution: {integrity: sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@4.2.0:
    resolution: {integrity: sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint@9.18.0:
    resolution: {integrity: sha512-+waTfRWQlSbpt3KWE+CjrPPYnbq9kfZIYUqapc0uBXyjTp8aYXZDsUH16m39Ryq3NjAVP4tjuF7KaukeqoCoaA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    hasBin: true
    peerDependencies:
      jiti: '*'
    peerDependenciesMeta:
      jiti:
        optional: true

  espree@10.3.0:
    resolution: {integrity: sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  esprima@4.0.1:
    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}
    engines: {node: '>=4'}
    hasBin: true

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  ethers@6.13.5:
    resolution: {integrity: sha512-+knKNieu5EKRThQJWwqaJ10a6HE9sSehGeqWN65//wE7j47ZpFhKAnHB/JJFibwwg61I/koxaPsXbXpD/skNOQ==}
    engines: {node: '>=14.0.0'}

  event-target-shim@5.0.1:
    resolution: {integrity: sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==}
    engines: {node: '>=6'}

  events@3.3.0:
    resolution: {integrity: sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==}
    engines: {node: '>=0.8.x'}

  execa@5.1.1:
    resolution: {integrity: sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==}
    engines: {node: '>=10'}

  exit@0.1.2:
    resolution: {integrity: sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==}
    engines: {node: '>= 0.8.0'}

  expect@29.7.0:
    resolution: {integrity: sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  ext-list@2.2.2:
    resolution: {integrity: sha512-u+SQgsubraE6zItfVA0tBuCBhfU9ogSRnsvygI7wht9TS510oLkBRXBsqopeUG/GBOIQyKZO9wjTqIu/sf5zFA==}
    engines: {node: '>=0.10.0'}

  ext-name@5.0.0:
    resolution: {integrity: sha512-yblEwXAbGv1VQDmow7s38W77hzAgJAO50ztBLMcUyUBfxv1HC+LGwtiEN+Co6LtlqT/5uwVOxsD4TNIilWhwdQ==}
    engines: {node: '>=4'}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-diff@1.3.0:
    resolution: {integrity: sha512-VxPP4NqbUjj6MaAOafWeUn2cXWLcCtljklUtZf0Ind4XQ+QPtmA0b18zZy0jIQx+ExRVCR/ZQpBmik5lXshNsw==}

  fast-fifo@1.3.2:
    resolution: {integrity: sha512-/d9sfos4yxzpwkDkuN7k2SqFKtYNmCTzgfEpz82x34IM9/zc8KGxQoXg1liNC/izpRM/MBdt44Nmx41ZWqk+FQ==}

  fast-glob@3.3.3:
    resolution: {integrity: sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fastq@1.19.1:
    resolution: {integrity: sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==}

  fb-watchman@2.0.2:
    resolution: {integrity: sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==}

  file-entry-cache@8.0.0:
    resolution: {integrity: sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==}
    engines: {node: '>=16.0.0'}

  file-type@19.6.0:
    resolution: {integrity: sha512-VZR5I7k5wkD0HgFnMsq5hOsSc710MJMu5Nc5QYsbe38NN5iPV/XTObYLc/cpttRTf6lX538+5uO1ZQRhYibiZQ==}
    engines: {node: '>=18'}

  filename-reserved-regex@3.0.0:
    resolution: {integrity: sha512-hn4cQfU6GOT/7cFHXBqeBg2TbrMBgdD0kcjLhvSQYYwm3s4B6cjvBfb7nBALJLAXqmU5xajSa7X2NnUud/VCdw==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  filenamify@6.0.0:
    resolution: {integrity: sha512-vqIlNogKeyD3yzrm0yhRMQg8hOVwYcYRfjEoODd49iCprMn4HL85gK3HcykQE53EPIpX3HcAbGA5ELQv216dAQ==}
    engines: {node: '>=16'}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  find-up@4.1.0:
    resolution: {integrity: sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  find-versions@5.1.0:
    resolution: {integrity: sha512-+iwzCJ7C5v5KgcBuueqVoNiHVoQpwiUK5XFLjf0affFTep+Wcw93tPvmb8tqujDNmzhBDPddnWV/qgWSXgq+Hg==}
    engines: {node: '>=12'}

  flat-cache@4.0.1:
    resolution: {integrity: sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==}
    engines: {node: '>=16'}

  flatted@3.3.3:
    resolution: {integrity: sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==}

  follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  for-each@0.3.5:
    resolution: {integrity: sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==}
    engines: {node: '>= 0.4'}

  foreground-child@3.3.1:
    resolution: {integrity: sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==}
    engines: {node: '>=14'}

  form-data-encoder@2.1.4:
    resolution: {integrity: sha512-yDYSgNMraqvnxiEXO4hi88+YZxaHC6QKzb5N84iRCTDeRO7ZALpir/lVmf/uXUhnwUr2O4HU8s/n6x+yNjQkHw==}
    engines: {node: '>= 14.17'}

  form-data@4.0.2:
    resolution: {integrity: sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w==}
    engines: {node: '>= 6'}

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  function.prototype.name@1.1.8:
    resolution: {integrity: sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==}
    engines: {node: '>= 0.4'}

  functions-have-names@1.2.3:
    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}

  generate-changelog@1.8.0:
    resolution: {integrity: sha512-msgpxeB75Ziyg3wGsZuPNl7c5RxChMKmYcAX5obnhUow90dBZW3nLic6nxGtst7Bpx453oS6zAIHcX7F3QVasw==}
    hasBin: true

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-caller-file@2.0.5:
    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
    engines: {node: 6.* || 8.* || >= 10.*}

  get-intrinsic@1.3.0:
    resolution: {integrity: sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==}
    engines: {node: '>= 0.4'}

  get-package-type@0.1.0:
    resolution: {integrity: sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==}
    engines: {node: '>=8.0.0'}

  get-port@7.1.0:
    resolution: {integrity: sha512-QB9NKEeDg3xxVwCCwJQ9+xycaz6pBB6iQ76wiWMl1927n0Kir6alPiP+yuiICLLU4jpMe08dXfpebuQppFA2zw==}
    engines: {node: '>=16'}

  get-proto@1.0.1:
    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
    engines: {node: '>= 0.4'}

  get-stream@6.0.1:
    resolution: {integrity: sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==}
    engines: {node: '>=10'}

  get-stream@9.0.1:
    resolution: {integrity: sha512-kVCxPF3vQM/N0B1PmoqVUqgHP+EeVjmZSQn+1oCRPxd2P21P2F19lIgbR3HBosbB1PUhOAoctJnfEn2GbN2eZA==}
    engines: {node: '>=18'}

  get-symbol-description@1.1.0:
    resolution: {integrity: sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==}
    engines: {node: '>= 0.4'}

  get-tsconfig@4.10.0:
    resolution: {integrity: sha512-kGzZ3LWWQcGIAmg6iWvXn0ei6WDtV26wzHRMwDSzmAbcXrTEXxHy6IehI6/4eT6VRKyMP1eF1VqwrVUmE/LR7A==}

  github-url-from-git@1.5.0:
    resolution: {integrity: sha512-WWOec4aRI7YAykQ9+BHmzjyNlkfJFG8QLXnDTsLz/kZefq7qkzdfo4p6fkYYMIq1aj+gZcQs/1HQhQh3DPPxlQ==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  glob@7.2.3:
    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
    deprecated: Glob versions prior to v9 are no longer supported

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  globals@14.0.0:
    resolution: {integrity: sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==}
    engines: {node: '>=18'}

  globals@15.15.0:
    resolution: {integrity: sha512-7ACyT3wmyp3I61S4fG682L0VA2RGD9otkqGJIwNUMF1SWUombIIk+af1unuDYgMm082aHYwD+mzJvv9Iu8dsgg==}
    engines: {node: '>=18'}

  globalthis@1.0.4:
    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
    engines: {node: '>= 0.4'}

  gopd@1.2.0:
    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
    engines: {node: '>= 0.4'}

  got@13.0.0:
    resolution: {integrity: sha512-XfBk1CxOOScDcMr9O1yKkNaQyy865NbYs+F7dr4H0LZMVgCj2Le59k6PqbNHoL5ToeaEQUYh6c6yMfVcc6SJxA==}
    engines: {node: '>=16'}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  has-bigints@1.1.0:
    resolution: {integrity: sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==}
    engines: {node: '>= 0.4'}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-proto@1.2.0:
    resolution: {integrity: sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==}
    engines: {node: '>= 0.4'}

  has-symbols@1.1.0:
    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  html-escaper@2.0.2:
    resolution: {integrity: sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==}

  http-cache-semantics@4.2.0:
    resolution: {integrity: sha512-dTxcvPXqPvXBQpq5dUr6mEMJX4oIEFv6bwom3FDwKRDsuIjjJGANqhBuoAn9c1RQJIdAKav33ED65E2ys+87QQ==}

  http2-wrapper@2.2.1:
    resolution: {integrity: sha512-V5nVw1PAOgfI3Lmeaj2Exmeg7fenjhRUgz1lPSezy1CuhPYbgQtbQj4jZfEAEMlaL+vupsvhjqCyjzob0yxsmQ==}
    engines: {node: '>=10.19.0'}

  human-signals@2.1.0:
    resolution: {integrity: sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==}
    engines: {node: '>=10.17.0'}

  ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  import-fresh@3.3.1:
    resolution: {integrity: sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==}
    engines: {node: '>=6'}

  import-local@3.2.0:
    resolution: {integrity: sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==}
    engines: {node: '>=8'}
    hasBin: true

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  inspect-with-kind@1.0.5:
    resolution: {integrity: sha512-MAQUJuIo7Xqk8EVNP+6d3CKq9c80hi4tjIbIAT6lmGW9W6WzlHiu9PS8uSuUYU+Do+j1baiFp3H25XEVxDIG2g==}

  internal-slot@1.1.0:
    resolution: {integrity: sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==}
    engines: {node: '>= 0.4'}

  is-arguments@1.2.0:
    resolution: {integrity: sha512-7bVbi0huj/wrIAOzb8U1aszg9kdi3KN/CyU19CTI7tAoZYEZoL9yCDXpbXN+uPsuWnP02cyug1gleqq+TU+YCA==}
    engines: {node: '>= 0.4'}

  is-array-buffer@3.0.5:
    resolution: {integrity: sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==}
    engines: {node: '>= 0.4'}

  is-arrayish@0.2.1:
    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}

  is-async-function@2.1.1:
    resolution: {integrity: sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==}
    engines: {node: '>= 0.4'}

  is-bigint@1.1.0:
    resolution: {integrity: sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==}
    engines: {node: '>= 0.4'}

  is-boolean-object@1.2.2:
    resolution: {integrity: sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==}
    engines: {node: '>= 0.4'}

  is-bun-module@1.3.0:
    resolution: {integrity: sha512-DgXeu5UWI0IsMQundYb5UAOzm6G2eVnarJ0byP6Tm55iZNKceD59LNPA2L4VvsScTtHcw0yEkVwSf7PC+QoLSA==}

  is-callable@1.2.7:
    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
    engines: {node: '>= 0.4'}

  is-core-module@2.16.1:
    resolution: {integrity: sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==}
    engines: {node: '>= 0.4'}

  is-data-view@1.0.2:
    resolution: {integrity: sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==}
    engines: {node: '>= 0.4'}

  is-date-object@1.1.0:
    resolution: {integrity: sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==}
    engines: {node: '>= 0.4'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-finalizationregistry@1.1.1:
    resolution: {integrity: sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==}
    engines: {node: '>= 0.4'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-generator-fn@2.1.0:
    resolution: {integrity: sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==}
    engines: {node: '>=6'}

  is-generator-function@1.1.0:
    resolution: {integrity: sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==}
    engines: {node: '>= 0.4'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-map@2.0.3:
    resolution: {integrity: sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==}
    engines: {node: '>= 0.4'}

  is-nan@1.3.2:
    resolution: {integrity: sha512-E+zBKpQ2t6MEo1VsonYmluk9NxGrbzpeeLC2xIViuO2EjU2xsXsBPwTr3Ykv9l08UYEVEdWeRZNouaZqF6RN0w==}
    engines: {node: '>= 0.4'}

  is-number-object@1.1.1:
    resolution: {integrity: sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==}
    engines: {node: '>= 0.4'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-plain-obj@1.1.0:
    resolution: {integrity: sha512-yvkRyxmFKEOQ4pNXCmJG5AEQNlXJS5LaONXo5/cLdTZdWvsZ1ioJEonLGAosKlMWE8lwUy/bJzMjcw8az73+Fg==}
    engines: {node: '>=0.10.0'}

  is-regex@1.2.1:
    resolution: {integrity: sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==}
    engines: {node: '>= 0.4'}

  is-set@2.0.3:
    resolution: {integrity: sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==}
    engines: {node: '>= 0.4'}

  is-shared-array-buffer@1.0.4:
    resolution: {integrity: sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==}
    engines: {node: '>= 0.4'}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  is-stream@4.0.1:
    resolution: {integrity: sha512-Dnz92NInDqYckGEUJv689RbRiTSEHCQ7wOVeALbkOz999YpqT46yMRIGtSNl2iCL1waAZSx40+h59NV/EwzV/A==}
    engines: {node: '>=18'}

  is-string@1.1.1:
    resolution: {integrity: sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==}
    engines: {node: '>= 0.4'}

  is-symbol@1.1.1:
    resolution: {integrity: sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==}
    engines: {node: '>= 0.4'}

  is-typed-array@1.1.15:
    resolution: {integrity: sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==}
    engines: {node: '>= 0.4'}

  is-weakmap@2.0.2:
    resolution: {integrity: sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==}
    engines: {node: '>= 0.4'}

  is-weakref@1.1.1:
    resolution: {integrity: sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==}
    engines: {node: '>= 0.4'}

  is-weakset@2.0.4:
    resolution: {integrity: sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==}
    engines: {node: '>= 0.4'}

  isarray@1.0.0:
    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}

  isarray@2.0.5:
    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  istanbul-lib-coverage@3.2.2:
    resolution: {integrity: sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@5.2.1:
    resolution: {integrity: sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@6.0.3:
    resolution: {integrity: sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==}
    engines: {node: '>=10'}

  istanbul-lib-report@3.0.1:
    resolution: {integrity: sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==}
    engines: {node: '>=10'}

  istanbul-lib-source-maps@4.0.1:
    resolution: {integrity: sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==}
    engines: {node: '>=10'}

  istanbul-reports@3.1.7:
    resolution: {integrity: sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==}
    engines: {node: '>=8'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jest-changed-files@29.7.0:
    resolution: {integrity: sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-circus@29.7.0:
    resolution: {integrity: sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-cli@29.7.0:
    resolution: {integrity: sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  jest-config@29.7.0:
    resolution: {integrity: sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@types/node': '*'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      '@types/node':
        optional: true
      ts-node:
        optional: true

  jest-diff@29.7.0:
    resolution: {integrity: sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-docblock@29.7.0:
    resolution: {integrity: sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-each@29.7.0:
    resolution: {integrity: sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-environment-node@29.7.0:
    resolution: {integrity: sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-get-type@29.6.3:
    resolution: {integrity: sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-haste-map@29.7.0:
    resolution: {integrity: sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-leak-detector@29.7.0:
    resolution: {integrity: sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-matcher-utils@29.7.0:
    resolution: {integrity: sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-message-util@29.7.0:
    resolution: {integrity: sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-mock@29.7.0:
    resolution: {integrity: sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-pnp-resolver@1.2.3:
    resolution: {integrity: sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==}
    engines: {node: '>=6'}
    peerDependencies:
      jest-resolve: '*'
    peerDependenciesMeta:
      jest-resolve:
        optional: true

  jest-regex-util@29.6.3:
    resolution: {integrity: sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-resolve-dependencies@29.7.0:
    resolution: {integrity: sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-resolve@29.7.0:
    resolution: {integrity: sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-runner@29.7.0:
    resolution: {integrity: sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-runtime@29.7.0:
    resolution: {integrity: sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-snapshot@29.7.0:
    resolution: {integrity: sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-util@29.7.0:
    resolution: {integrity: sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-validate@29.7.0:
    resolution: {integrity: sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-watcher@29.7.0:
    resolution: {integrity: sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-worker@29.7.0:
    resolution: {integrity: sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest@29.7.0:
    resolution: {integrity: sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-yaml@3.14.1:
    resolution: {integrity: sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==}
    hasBin: true

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsesc@3.1.0:
    resolution: {integrity: sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==}
    engines: {node: '>=6'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json5@1.0.2:
    resolution: {integrity: sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==}
    hasBin: true

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsonc-parser@3.3.1:
    resolution: {integrity: sha512-HUgH65KyejrUFPvHFPbqOY0rsFip3Bo5wb4ngvdi1EpCYWUQDC5V+Y7mZws+DLkr4M//zQJoanu1SP+87Dv1oQ==}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  kind-of@6.0.3:
    resolution: {integrity: sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==}
    engines: {node: '>=0.10.0'}

  kleur@3.0.3:
    resolution: {integrity: sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==}
    engines: {node: '>=6'}

  lazystream@1.0.1:
    resolution: {integrity: sha512-b94GiNHQNy6JNTrt5w6zNyffMrNkXZb3KTkCZJb2V1xaEGCk093vkZ2jk3tpaeP33/OiXC+WvK9AxUebnf5nbw==}
    engines: {node: '>= 0.6.3'}

  leven@3.1.0:
    resolution: {integrity: sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==}
    engines: {node: '>=6'}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  locate-path@5.0.0:
    resolution: {integrity: sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==}
    engines: {node: '>=8'}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.camelcase@4.3.0:
    resolution: {integrity: sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  long@5.3.1:
    resolution: {integrity: sha512-ka87Jz3gcx/I7Hal94xaN2tZEOPoUOEVftkQqZx2EeQRN7LGdfLlI3FvZ+7WDplm+vK2Urx9ULrvSowtdCieng==}

  lowercase-keys@3.0.0:
    resolution: {integrity: sha512-ozCC6gdQ+glXOQsveKD0YsDy8DSQFjDTz4zyzEHNV5+JP5D62LmfDZ6o1cycFx9ouG940M5dE8C8CTewdj2YWQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  make-dir@4.0.0:
    resolution: {integrity: sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==}
    engines: {node: '>=10'}

  makeerror@1.0.12:
    resolution: {integrity: sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==}

  math-intrinsics@1.1.0:
    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
    engines: {node: '>= 0.4'}

  merge-stream@2.0.0:
    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mimic-fn@2.1.0:
    resolution: {integrity: sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==}
    engines: {node: '>=6'}

  mimic-response@3.1.0:
    resolution: {integrity: sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==}
    engines: {node: '>=10'}

  mimic-response@4.0.0:
    resolution: {integrity: sha512-e5ISH9xMYU0DzrT+jl8q2ze9D6eWBto+I8CNpe+VI+K2J/F/k3PdkdTdz4wvGVH4NTpo+NRYTVIuMQEMMcsLqg==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@5.1.6:
    resolution: {integrity: sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==}
    engines: {node: '>=10'}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  mkdirp@1.0.4:
    resolution: {integrity: sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==}
    engines: {node: '>=10'}
    hasBin: true

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  nan@2.22.2:
    resolution: {integrity: sha512-DANghxFkS1plDdRsX0X9pm0Z6SJNN6gBdtXfanwoZ8hooC5gosGFSBGRYHUVPz1asKA/kMRqDRdHrluZ61SpBQ==}

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  node-int64@0.4.0:
    resolution: {integrity: sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==}

  node-releases@2.0.19:
    resolution: {integrity: sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  normalize-url@8.0.2:
    resolution: {integrity: sha512-Ee/R3SyN4BuynXcnTaekmaVdbDAEiNrHqjQIA37mHU8G9pf7aaAD4ZX3XjBLo6rsdcxA/gtkcNYZLt30ACgynw==}
    engines: {node: '>=14.16'}

  npm-run-path@4.0.1:
    resolution: {integrity: sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==}
    engines: {node: '>=8'}

  object-inspect@1.13.4:
    resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}
    engines: {node: '>= 0.4'}

  object-is@1.1.6:
    resolution: {integrity: sha512-F8cZ+KfGlSGi09lJT7/Nd6KJZ9ygtvYC0/UYYLI9nmQKLMnydpB9yvbv9K1uSkEu7FU9vYPmVwLg328tX+ot3Q==}
    engines: {node: '>= 0.4'}

  object-keys@1.1.1:
    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
    engines: {node: '>= 0.4'}

  object.assign@4.1.7:
    resolution: {integrity: sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==}
    engines: {node: '>= 0.4'}

  object.fromentries@2.0.8:
    resolution: {integrity: sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==}
    engines: {node: '>= 0.4'}

  object.groupby@1.0.3:
    resolution: {integrity: sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==}
    engines: {node: '>= 0.4'}

  object.values@1.2.1:
    resolution: {integrity: sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==}
    engines: {node: '>= 0.4'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  onetime@5.1.2:
    resolution: {integrity: sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==}
    engines: {node: '>=6'}

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  own-keys@1.0.1:
    resolution: {integrity: sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==}
    engines: {node: '>= 0.4'}

  p-cancelable@3.0.0:
    resolution: {integrity: sha512-mlVgR3PGuzlo0MmTdk4cXqXWlwQDLnONTAg6sm62XkMJEiRxN3GL3SffkYvqwonbkJBcrI7Uvv5Zh9yjvn2iUw==}
    engines: {node: '>=12.20'}

  p-limit@2.3.0:
    resolution: {integrity: sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==}
    engines: {node: '>=6'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@4.1.0:
    resolution: {integrity: sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==}
    engines: {node: '>=8'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  p-try@2.2.0:
    resolution: {integrity: sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==}
    engines: {node: '>=6'}

  package-json-from-dist@1.0.1:
    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse-json@5.2.0:
    resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
    engines: {node: '>=8'}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  peek-readable@5.4.2:
    resolution: {integrity: sha512-peBp3qZyuS6cNIJ2akRNG1uo1WJ1d0wTxg/fxMdZ0BqCVhx242bSFHM9eNqflfJVS9SsgkzgT/1UgnsurBOTMg==}
    engines: {node: '>=14.16'}

  pend@1.2.0:
    resolution: {integrity: sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg==}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  picomatch@4.0.2:
    resolution: {integrity: sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==}
    engines: {node: '>=12'}

  pirates@4.0.7:
    resolution: {integrity: sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==}
    engines: {node: '>= 6'}

  piscina@4.9.2:
    resolution: {integrity: sha512-Fq0FERJWFEUpB4eSY59wSNwXD4RYqR+nR/WiEVcZW8IWfVBxJJafcgTEZDQo8k3w0sUarJ8RyVbbUF4GQ2LGbQ==}

  pkg-dir@4.2.0:
    resolution: {integrity: sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==}
    engines: {node: '>=8'}

  possible-typed-array-names@1.1.0:
    resolution: {integrity: sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==}
    engines: {node: '>= 0.4'}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prettier-linter-helpers@1.0.0:
    resolution: {integrity: sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==}
    engines: {node: '>=6.0.0'}

  prettier@3.5.3:
    resolution: {integrity: sha512-QQtaxnoDJeAkDvDKWCLiwIXkTgRhwYDEQCghU9Z6q03iyek/rxRh/2lC3HB7P8sWT2xC/y5JDctPLBIGzHKbhw==}
    engines: {node: '>=14'}
    hasBin: true

  pretty-format@29.7.0:
    resolution: {integrity: sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  process-nextick-args@2.0.1:
    resolution: {integrity: sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==}

  process@0.11.10:
    resolution: {integrity: sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==}
    engines: {node: '>= 0.6.0'}

  prompts@2.4.2:
    resolution: {integrity: sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==}
    engines: {node: '>= 6'}

  proper-lockfile@4.1.2:
    resolution: {integrity: sha512-TjNPblN4BwAWMXU8s9AEz4JmQxnD1NNL7bNOY/AKUzyamc379FWASUhc/K1pL2noVb+XmZKLL68cjzLsiOAMaA==}

  properties-reader@2.3.0:
    resolution: {integrity: sha512-z597WicA7nDZxK12kZqHr2TcvwNU1GCfA5UwfDY/HDp3hXPoPlb5rlEx9bwGTiJnc0OqbBTkU975jDToth8Gxw==}
    engines: {node: '>=14'}

  protobufjs@7.4.0:
    resolution: {integrity: sha512-mRUWCc3KUU4w1jU8sGxICXH/gNS94DvI1gxqDvBzhj1JpcsimQkYiOJfwsPUykUI5ZaspFbSgmBLER8IrQ3tqw==}
    engines: {node: '>=12.0.0'}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  pump@3.0.2:
    resolution: {integrity: sha512-tUPXtzlGM8FE3P0ZL6DVs/3P58k9nk8/jZeQCurTJylQA8qFYzHFfhBJkuqyE0FifOsQ0uKWekiZ5g8wtr28cw==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  pure-rand@6.1.0:
    resolution: {integrity: sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  quick-lru@5.1.1:
    resolution: {integrity: sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==}
    engines: {node: '>=10'}

  react-is@18.3.1:
    resolution: {integrity: sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==}

  readable-stream@2.3.8:
    resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readable-stream@4.7.0:
    resolution: {integrity: sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  readdir-glob@1.1.3:
    resolution: {integrity: sha512-v05I2k7xN8zXvPD9N+z/uhXPaj0sUFCe2rcWZIpBsqxfP7xXFQ0tipAd/wjj1YxWyWtUS5IDJpOG82JKt2EAVA==}

  reflect.getprototypeof@1.0.10:
    resolution: {integrity: sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==}
    engines: {node: '>= 0.4'}

  regexp.prototype.flags@1.5.4:
    resolution: {integrity: sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==}
    engines: {node: '>= 0.4'}

  require-directory@2.1.1:
    resolution: {integrity: sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==}
    engines: {node: '>=0.10.0'}

  resolve-alpn@1.2.1:
    resolution: {integrity: sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==}

  resolve-cwd@3.0.0:
    resolution: {integrity: sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==}
    engines: {node: '>=8'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-from@5.0.0:
    resolution: {integrity: sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==}
    engines: {node: '>=8'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  resolve.exports@2.0.3:
    resolution: {integrity: sha512-OcXjMsGdhL4XnbShKpAcSqPMzQoYkYyhbEaeSko47MjRP9NfEQMhZkXL1DoFlt9LWQn4YttrdnV6X2OiyzBi+A==}
    engines: {node: '>=10'}

  resolve@1.22.10:
    resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}
    engines: {node: '>= 0.4'}
    hasBin: true

  responselike@3.0.0:
    resolution: {integrity: sha512-40yHxbNcl2+rzXvZuVkrYohathsSJlMTXKryG5y8uciHv1+xDLHQpgjG64JUO9nrEq2jGLH6IZ8BcZyw3wrweg==}
    engines: {node: '>=14.16'}

  retry@0.12.0:
    resolution: {integrity: sha512-9LkiTwjUh6rT555DtE9rTX+BKByPfrMzEAtnlEtdEwr3Nkffwiihqe2bWADg+OQRjt9gl6ICdmB/ZFDCGAtSow==}
    engines: {node: '>= 4'}

  reusify@1.1.0:
    resolution: {integrity: sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  safe-array-concat@1.1.3:
    resolution: {integrity: sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==}
    engines: {node: '>=0.4'}

  safe-buffer@5.1.2:
    resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safe-push-apply@1.0.0:
    resolution: {integrity: sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==}
    engines: {node: '>= 0.4'}

  safe-regex-test@1.1.0:
    resolution: {integrity: sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==}
    engines: {node: '>= 0.4'}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  seek-bzip@2.0.0:
    resolution: {integrity: sha512-SMguiTnYrhpLdk3PwfzHeotrcwi8bNV4iemL9tx9poR/yeaMYwB9VzR1w7b57DuWpuqR8n6oZboi0hj3AxZxQg==}
    hasBin: true

  semver-regex@4.0.5:
    resolution: {integrity: sha512-hunMQrEy1T6Jr2uEVjrAIqjwWcQTgOAcIM52C8MY1EZSD3DDNft04XzvYKPqjED65bNVVko0YI38nYeEHCX3yw==}
    engines: {node: '>=12'}

  semver-truncate@3.0.0:
    resolution: {integrity: sha512-LJWA9kSvMolR51oDE6PN3kALBNaUdkxzAGcexw8gjMA8xr5zUqK0JiR3CgARSqanYF3Z1YHvsErb1KDgh+v7Rg==}
    engines: {node: '>=12'}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.7.1:
    resolution: {integrity: sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==}
    engines: {node: '>=10'}
    hasBin: true

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  set-function-name@2.0.2:
    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
    engines: {node: '>= 0.4'}

  set-proto@1.0.0:
    resolution: {integrity: sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==}
    engines: {node: '>= 0.4'}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  side-channel-list@1.0.0:
    resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}
    engines: {node: '>= 0.4'}

  side-channel-map@1.0.1:
    resolution: {integrity: sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==}
    engines: {node: '>= 0.4'}

  side-channel-weakmap@1.0.2:
    resolution: {integrity: sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==}
    engines: {node: '>= 0.4'}

  side-channel@1.1.0:
    resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}
    engines: {node: '>= 0.4'}

  signal-exit@3.0.7:
    resolution: {integrity: sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  sisteransi@1.0.5:
    resolution: {integrity: sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  sort-keys-length@1.0.1:
    resolution: {integrity: sha512-GRbEOUqCxemTAk/b32F2xa8wDTs+Z1QHOkbhJDQTvv/6G3ZkbJ+frYWsTcc7cBB3Fu4wy4XlLCuNtJuMn7Gsvw==}
    engines: {node: '>=0.10.0'}

  sort-keys@1.1.2:
    resolution: {integrity: sha512-vzn8aSqKgytVik0iwdBEi+zevbTYZogewTUM6dtpmGwEcdzbub/TX4bCzRhebDCRC3QzXgJsLRKB2V/Oof7HXg==}
    engines: {node: '>=0.10.0'}

  source-map-support@0.5.13:
    resolution: {integrity: sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==}

  source-map@0.6.1:
    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
    engines: {node: '>=0.10.0'}

  source-map@0.7.4:
    resolution: {integrity: sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==}
    engines: {node: '>= 8'}

  split-ca@1.0.1:
    resolution: {integrity: sha512-Q5thBSxp5t8WPTTJQS59LrGqOZqOsrhDGDVm8azCqIBjSBd7nd9o2PM+mDulQQkh8h//4U6hFZnc/mul8t5pWQ==}

  sprintf-js@1.0.3:
    resolution: {integrity: sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==}

  ssh-remote-port-forward@1.0.4:
    resolution: {integrity: sha512-x0LV1eVDwjf1gmG7TTnfqIzf+3VPRz7vrNIjX6oYLbeCrf/PeVY6hkT68Mg+q02qXxQhrLjB0jfgvhevoCRmLQ==}

  ssh2@1.16.0:
    resolution: {integrity: sha512-r1X4KsBGedJqo7h8F5c4Ybpcr5RjyP+aWIG007uBPRjmdQWfEiVLzSK71Zji1B9sKxwaCvD8y8cwSkYrlLiRRg==}
    engines: {node: '>=10.16.0'}

  stable-hash@0.0.4:
    resolution: {integrity: sha512-LjdcbuBeLcdETCrPn9i8AYAZ1eCtu4ECAWtP7UleOiZ9LzVxRzzUZEoZ8zB24nhkQnDWyET0I+3sWokSDS3E7g==}

  stack-utils@2.0.6:
    resolution: {integrity: sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==}
    engines: {node: '>=10'}

  streamx@2.22.0:
    resolution: {integrity: sha512-sLh1evHOzBy/iWRiR6d1zRcLao4gGZr3C1kzNz4fopCOKJb6xD9ub8Mpi9Mr1R6id5o43S+d93fI48UC5uM9aw==}

  string-length@4.0.2:
    resolution: {integrity: sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==}
    engines: {node: '>=10'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string.prototype.trim@1.2.10:
    resolution: {integrity: sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==}
    engines: {node: '>= 0.4'}

  string.prototype.trimend@1.0.9:
    resolution: {integrity: sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==}
    engines: {node: '>= 0.4'}

  string.prototype.trimstart@1.0.8:
    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
    engines: {node: '>= 0.4'}

  string_decoder@1.1.1:
    resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom@3.0.0:
    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
    engines: {node: '>=4'}

  strip-bom@4.0.0:
    resolution: {integrity: sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==}
    engines: {node: '>=8'}

  strip-dirs@3.0.0:
    resolution: {integrity: sha512-I0sdgcFTfKQlUPZyAqPJmSG3HLO9rWDFnxonnIbskYNM3DwFOeTNB5KzVq3dA1GdRAc/25b5Y7UO2TQfKWw4aQ==}

  strip-final-newline@2.0.0:
    resolution: {integrity: sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==}
    engines: {node: '>=6'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  strtok3@9.1.1:
    resolution: {integrity: sha512-FhwotcEqjr241ZbjFzjlIYg6c5/L/s4yBGWSMvJ9UoExiSqL+FnFA/CaeZx17WGaZMS/4SOZp8wH18jSS4R4lw==}
    engines: {node: '>=16'}

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-color@8.1.1:
    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
    engines: {node: '>=10'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  synckit@0.11.4:
    resolution: {integrity: sha512-Q/XQKRaJiLiFIBNN+mndW7S/RHxvwzuZS6ZwmRzUBqJBv/5QIKCEwkBC8GBf8EQJKYnaFs0wOZbKTXBPj8L9oQ==}
    engines: {node: ^14.18.0 || >=16.0.0}

  tapable@2.2.1:
    resolution: {integrity: sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==}
    engines: {node: '>=6'}

  tar-fs@3.0.9:
    resolution: {integrity: sha512-XF4w9Xp+ZQgifKakjZYmFdkLoSWd34VGKcsTCwlNWM7QG3ZbaxnTsaBwnjFZqHRf/rROxaR8rXnbtwdvaDI+lA==}

  tar-stream@3.1.7:
    resolution: {integrity: sha512-qJj60CXt7IU1Ffyc3NJMjh6EkuCFej46zUqJ4J7pqYlThyd9bO0XBTmcOIhSzZJVWfsLks0+nle/j538YAW9RQ==}

  test-exclude@6.0.0:
    resolution: {integrity: sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==}
    engines: {node: '>=8'}

  testcontainers@11.0.3:
    resolution: {integrity: sha512-Xu6ZAaE1FaLyHzFSYdCsd+xMPxUegUjkum0r6zgO8SinnFDHRX/PllIHMt1D+DVUmJqBvPQI6vge/J5jgE5vng==}

  text-decoder@1.2.3:
    resolution: {integrity: sha512-3/o9z3X0X0fTupwsYvR03pJ/DjWuqqrfwBgTQzdWDiQSm9KitAyz/9WqsT2JQW7KV2m+bC2ol/zqpW37NHxLaA==}

  through@2.3.8:
    resolution: {integrity: sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==}

  tmp@0.2.3:
    resolution: {integrity: sha512-nZD7m9iCPC5g0pYmcaxogYKggSfLsdxl8of3Q/oIbqCqLLIO9IAF0GWjX1z9NZRHPiXv8Wex4yDCaZsgEw0Y8w==}
    engines: {node: '>=14.14'}

  tmpl@1.0.5:
    resolution: {integrity: sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  token-types@6.0.3:
    resolution: {integrity: sha512-IKJ6EzuPPWtKtEIEPpIdXv9j5j2LGJEYk0CKY2efgKoYKLBiZdh6iQkLVBow/CB3phyWAWCyk+bZeaimJn6uRQ==}
    engines: {node: '>=14.16'}

  ts-api-utils@2.1.0:
    resolution: {integrity: sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==}
    engines: {node: '>=18.12'}
    peerDependencies:
      typescript: '>=4.8.4'

  tsconfig-paths@3.15.0:
    resolution: {integrity: sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==}

  tsdoc-markdown@1.1.0:
    resolution: {integrity: sha512-uzToA1DlETBIW9lkPfeaWD7TXusL0/mEvRW2NWRYsy+57HwbFiolmeRYrqoIgPA0GOBY9D9jX3fB2dnwybmabg==}
    hasBin: true
    peerDependencies:
      typescript: ^5

  tslib@2.7.0:
    resolution: {integrity: sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA==}

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  tweetnacl@0.14.5:
    resolution: {integrity: sha512-KXXFFdAbFXY4geFIwoyNK+f5Z1b7swfXABfL7HXCmoIWMKU3dmS26672A4EeQtDzLKy7SXmfBu51JolvEKwtGA==}

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-detect@4.0.8:
    resolution: {integrity: sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==}
    engines: {node: '>=4'}

  type-fest@0.21.3:
    resolution: {integrity: sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==}
    engines: {node: '>=10'}

  typed-array-buffer@1.0.3:
    resolution: {integrity: sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==}
    engines: {node: '>= 0.4'}

  typed-array-byte-length@1.0.3:
    resolution: {integrity: sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==}
    engines: {node: '>= 0.4'}

  typed-array-byte-offset@1.0.4:
    resolution: {integrity: sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==}
    engines: {node: '>= 0.4'}

  typed-array-length@1.0.7:
    resolution: {integrity: sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==}
    engines: {node: '>= 0.4'}

  typescript@5.7.3:
    resolution: {integrity: sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==}
    engines: {node: '>=14.17'}
    hasBin: true

  uint8array-extras@1.4.0:
    resolution: {integrity: sha512-ZPtzy0hu4cZjv3z5NW9gfKnNLjoz4y6uv4HlelAjDK7sY/xOkKZv9xK/WQpcsBB3jEybChz9DPC2U/+cusjJVQ==}
    engines: {node: '>=18'}

  unbox-primitive@1.1.0:
    resolution: {integrity: sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==}
    engines: {node: '>= 0.4'}

  unbzip2-stream@1.4.3:
    resolution: {integrity: sha512-mlExGW4w71ebDJviH16lQLtZS32VKqsSfk80GCfUlwT/4/hNRFsoscrF/c++9xinkMzECL1uL9DDwXqFWkruPg==}

  undici-types@5.26.5:
    resolution: {integrity: sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==}

  undici-types@6.19.8:
    resolution: {integrity: sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==}

  undici-types@6.21.0:
    resolution: {integrity: sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==}

  undici@7.10.0:
    resolution: {integrity: sha512-u5otvFBOBZvmdjWLVW+5DAc9Nkq8f24g0O9oY7qw2JVIF1VocIFoyz9JFkuVOS2j41AufeO0xnlweJ2RLT8nGw==}
    engines: {node: '>=20.18.1'}

  update-browserslist-db@1.1.3:
    resolution: {integrity: sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  util@0.12.5:
    resolution: {integrity: sha512-kZf/K6hEIrWHI6XqOFUiiMa+79wE/D8Q+NCNAWclkyg3b4d2k7s0QGepNjiABc+aR3N1PAyHL7p6UcLY6LmrnA==}

  uuid@10.0.0:
    resolution: {integrity: sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==}
    hasBin: true

  v8-to-istanbul@9.3.0:
    resolution: {integrity: sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==}
    engines: {node: '>=10.12.0'}

  walker@1.0.8:
    resolution: {integrity: sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==}

  which-boxed-primitive@1.1.1:
    resolution: {integrity: sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==}
    engines: {node: '>= 0.4'}

  which-builtin-type@1.2.1:
    resolution: {integrity: sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==}
    engines: {node: '>= 0.4'}

  which-collection@1.0.2:
    resolution: {integrity: sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==}
    engines: {node: '>= 0.4'}

  which-typed-array@1.1.19:
    resolution: {integrity: sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==}
    engines: {node: '>= 0.4'}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  write-file-atomic@4.0.2:
    resolution: {integrity: sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==}
    engines: {node: ^12.13.0 || ^14.15.0 || >=16.0.0}

  ws@8.17.1:
    resolution: {integrity: sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  y18n@5.0.8:
    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}
    engines: {node: '>=10'}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yaml@2.7.1:
    resolution: {integrity: sha512-10ULxpnOCQXxJvBgxsn9ptjq6uviG/htZKk9veJGhlqn3w/DxQ631zFF+nlQXLwmImeS5amR2dl2U8sg6U9jsQ==}
    engines: {node: '>= 14'}
    hasBin: true

  yargs-parser@21.1.1:
    resolution: {integrity: sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==}
    engines: {node: '>=12'}

  yargs@17.7.2:
    resolution: {integrity: sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==}
    engines: {node: '>=12'}

  yauzl@3.2.0:
    resolution: {integrity: sha512-Ow9nuGZE+qp1u4JIPvg+uCiUr7xGQWdff7JQSk5VGYTAZMDe2q8lxJ10ygv10qmSj031Ty/6FNJpLO4o1Sgc+w==}
    engines: {node: '>=12'}

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  zip-stream@6.0.1:
    resolution: {integrity: sha512-zK7YHHz4ZXpW89AHXUPbQVGKI7uvkd3hzusTdotCg1UxyaVtg0zFJSTfW/Dq5f7OBBVnq6cZIaC8Ti4hb6dtCA==}
    engines: {node: '>= 14'}

snapshots:

  '@1inch/byte-utils@3.0.0(assert@2.1.0)':
    optionalDependencies:
      assert: 2.1.0

  '@1inch/eslint-config@3.0.7(59ef5ef85570e0c548bdb4ff16ff6e35)':
    dependencies:
      '@eslint/compat': 1.2.8(eslint@9.18.0)
      '@eslint/eslintrc': 3.3.1
      '@eslint/js': 9.18.0
      '@stylistic/eslint-plugin': 2.13.0(eslint@9.18.0)(typescript@5.7.3)
      '@typescript-eslint/eslint-plugin': 8.20.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint@9.18.0)(typescript@5.7.3)
      '@typescript-eslint/parser': 8.20.0(eslint@9.18.0)(typescript@5.7.3)
      eslint: 9.18.0
      eslint-config-prettier: 10.1.2(eslint@9.18.0)
      eslint-config-standard: 17.1.0(eslint-plugin-import@2.31.0)(eslint-plugin-n@17.17.0(eslint@9.18.0))(eslint-plugin-promise@7.2.1(eslint@9.18.0))(eslint@9.18.0)
      eslint-import-resolver-typescript: 3.7.0(eslint-plugin-import@2.31.0)(eslint@9.18.0)
      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint-import-resolver-typescript@3.7.0)(eslint@9.18.0)
      eslint-plugin-n: 17.17.0(eslint@9.18.0)
      eslint-plugin-prettier: 5.2.6(eslint-config-prettier@10.1.2(eslint@9.18.0))(eslint@9.18.0)(prettier@3.5.3)
      eslint-plugin-promise: 7.2.1(eslint@9.18.0)
      eslint-plugin-unused-imports: 4.1.4(@typescript-eslint/eslint-plugin@8.20.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint@9.18.0)(typescript@5.7.3))(eslint@9.18.0)
      globals: 15.15.0
      prettier: 3.5.3
      semver: 7.7.1
      typescript: 5.7.3

  '@1inch/tsconfig@1.0.8':
    dependencies:
      semver: 7.7.1

  '@adraffy/ens-normalize@1.10.1': {}

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25

  '@babel/code-frame@7.26.2':
    dependencies:
      '@babel/helper-validator-identifier': 7.25.9
      js-tokens: 4.0.0
      picocolors: 1.1.1

  '@babel/compat-data@7.26.8': {}

  '@babel/core@7.26.10':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.27.0
      '@babel/helper-compilation-targets': 7.27.0
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.10)
      '@babel/helpers': 7.27.0
      '@babel/parser': 7.27.0
      '@babel/template': 7.27.0
      '@babel/traverse': 7.27.0
      '@babel/types': 7.27.0
      convert-source-map: 2.0.0
      debug: 4.4.0
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.27.0':
    dependencies:
      '@babel/parser': 7.27.0
      '@babel/types': 7.27.0
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 3.1.0

  '@babel/helper-compilation-targets@7.27.0':
    dependencies:
      '@babel/compat-data': 7.26.8
      '@babel/helper-validator-option': 7.25.9
      browserslist: 4.24.4
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-module-imports@7.25.9':
    dependencies:
      '@babel/traverse': 7.27.0
      '@babel/types': 7.27.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.26.0(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-module-imports': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9
      '@babel/traverse': 7.27.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-plugin-utils@7.26.5': {}

  '@babel/helper-string-parser@7.25.9': {}

  '@babel/helper-validator-identifier@7.25.9': {}

  '@babel/helper-validator-option@7.25.9': {}

  '@babel/helpers@7.27.0':
    dependencies:
      '@babel/template': 7.27.0
      '@babel/types': 7.27.0

  '@babel/parser@7.27.0':
    dependencies:
      '@babel/types': 7.27.0

  '@babel/plugin-syntax-async-generators@7.8.4(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-bigint@7.8.3(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-class-properties@7.12.13(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-class-static-block@7.14.5(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-import-attributes@7.26.0(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-import-meta@7.10.4(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-json-strings@7.8.3(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-jsx@7.25.9(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-logical-assignment-operators@7.10.4(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-nullish-coalescing-operator@7.8.3(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-numeric-separator@7.10.4(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-object-rest-spread@7.8.3(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-optional-catch-binding@7.8.3(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-optional-chaining@7.8.3(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-private-property-in-object@7.14.5(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-top-level-await@7.14.5(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/plugin-syntax-typescript@7.25.9(@babel/core@7.26.10)':
    dependencies:
      '@babel/core': 7.26.10
      '@babel/helper-plugin-utils': 7.26.5

  '@babel/template@7.27.0':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/parser': 7.27.0
      '@babel/types': 7.27.0

  '@babel/traverse@7.27.0':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.27.0
      '@babel/parser': 7.27.0
      '@babel/template': 7.27.0
      '@babel/types': 7.27.0
      debug: 4.4.0
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.27.0':
    dependencies:
      '@babel/helper-string-parser': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9

  '@balena/dockerignore@1.0.2': {}

  '@bcoe/v8-coverage@0.2.3': {}

  '@eslint-community/eslint-utils@4.6.0(eslint@9.18.0)':
    dependencies:
      eslint: 9.18.0
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.12.1': {}

  '@eslint/compat@1.2.8(eslint@9.18.0)':
    optionalDependencies:
      eslint: 9.18.0

  '@eslint/config-array@0.19.2':
    dependencies:
      '@eslint/object-schema': 2.1.6
      debug: 4.4.0
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@eslint/core@0.10.0':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/core@0.13.0':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/eslintrc@3.3.1':
    dependencies:
      ajv: 6.12.6
      debug: 4.4.0
      espree: 10.3.0
      globals: 14.0.0
      ignore: 5.3.2
      import-fresh: 3.3.1
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@9.18.0': {}

  '@eslint/object-schema@2.1.6': {}

  '@eslint/plugin-kit@0.2.8':
    dependencies:
      '@eslint/core': 0.13.0
      levn: 0.4.1

  '@grpc/grpc-js@1.13.3':
    dependencies:
      '@grpc/proto-loader': 0.7.13
      '@js-sdsl/ordered-map': 4.4.2

  '@grpc/proto-loader@0.7.13':
    dependencies:
      lodash.camelcase: 4.3.0
      long: 5.3.1
      protobufjs: 7.4.0
      yargs: 17.7.2

  '@humanfs/core@0.19.1': {}

  '@humanfs/node@0.16.6':
    dependencies:
      '@humanfs/core': 0.19.1
      '@humanwhocodes/retry': 0.3.1

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/retry@0.3.1': {}

  '@humanwhocodes/retry@0.4.2': {}

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@istanbuljs/load-nyc-config@1.1.0':
    dependencies:
      camelcase: 5.3.1
      find-up: 4.1.0
      get-package-type: 0.1.0
      js-yaml: 3.14.1
      resolve-from: 5.0.0

  '@istanbuljs/schema@0.1.3': {}

  '@jest/console@29.7.0':
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 22.14.1
      chalk: 4.1.2
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      slash: 3.0.0

  '@jest/core@29.7.0':
    dependencies:
      '@jest/console': 29.7.0
      '@jest/reporters': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 22.14.1
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      ci-info: 3.9.0
      exit: 0.1.2
      graceful-fs: 4.2.11
      jest-changed-files: 29.7.0
      jest-config: 29.7.0(@types/node@22.14.1)
      jest-haste-map: 29.7.0
      jest-message-util: 29.7.0
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-resolve-dependencies: 29.7.0
      jest-runner: 29.7.0
      jest-runtime: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      jest-validate: 29.7.0
      jest-watcher: 29.7.0
      micromatch: 4.0.8
      pretty-format: 29.7.0
      slash: 3.0.0
      strip-ansi: 6.0.1
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color
      - ts-node

  '@jest/create-cache-key-function@29.7.0':
    dependencies:
      '@jest/types': 29.6.3

  '@jest/environment@29.7.0':
    dependencies:
      '@jest/fake-timers': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 22.14.1
      jest-mock: 29.7.0

  '@jest/expect-utils@29.7.0':
    dependencies:
      jest-get-type: 29.6.3

  '@jest/expect@29.7.0':
    dependencies:
      expect: 29.7.0
      jest-snapshot: 29.7.0
    transitivePeerDependencies:
      - supports-color

  '@jest/fake-timers@29.7.0':
    dependencies:
      '@jest/types': 29.6.3
      '@sinonjs/fake-timers': 10.3.0
      '@types/node': 22.14.1
      jest-message-util: 29.7.0
      jest-mock: 29.7.0
      jest-util: 29.7.0

  '@jest/globals@29.7.0':
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/expect': 29.7.0
      '@jest/types': 29.6.3
      jest-mock: 29.7.0
    transitivePeerDependencies:
      - supports-color

  '@jest/reporters@29.7.0':
    dependencies:
      '@bcoe/v8-coverage': 0.2.3
      '@jest/console': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@jridgewell/trace-mapping': 0.3.25
      '@types/node': 22.14.1
      chalk: 4.1.2
      collect-v8-coverage: 1.0.2
      exit: 0.1.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      istanbul-lib-coverage: 3.2.2
      istanbul-lib-instrument: 6.0.3
      istanbul-lib-report: 3.0.1
      istanbul-lib-source-maps: 4.0.1
      istanbul-reports: 3.1.7
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      jest-worker: 29.7.0
      slash: 3.0.0
      string-length: 4.0.2
      strip-ansi: 6.0.1
      v8-to-istanbul: 9.3.0
    transitivePeerDependencies:
      - supports-color

  '@jest/schemas@29.6.3':
    dependencies:
      '@sinclair/typebox': 0.27.8

  '@jest/source-map@29.6.3':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      callsites: 3.1.0
      graceful-fs: 4.2.11

  '@jest/test-result@29.7.0':
    dependencies:
      '@jest/console': 29.7.0
      '@jest/types': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      collect-v8-coverage: 1.0.2

  '@jest/test-sequencer@29.7.0':
    dependencies:
      '@jest/test-result': 29.7.0
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      slash: 3.0.0

  '@jest/transform@29.7.0':
    dependencies:
      '@babel/core': 7.26.10
      '@jest/types': 29.6.3
      '@jridgewell/trace-mapping': 0.3.25
      babel-plugin-istanbul: 6.1.1
      chalk: 4.1.2
      convert-source-map: 2.0.0
      fast-json-stable-stringify: 2.1.0
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-regex-util: 29.6.3
      jest-util: 29.7.0
      micromatch: 4.0.8
      pirates: 4.0.7
      slash: 3.0.0
      write-file-atomic: 4.0.2
    transitivePeerDependencies:
      - supports-color

  '@jest/types@29.6.3':
    dependencies:
      '@jest/schemas': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      '@types/istanbul-reports': 3.0.4
      '@types/node': 22.14.1
      '@types/yargs': 17.0.33
      chalk: 4.1.2

  '@jridgewell/gen-mapping@0.3.8':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@js-sdsl/ordered-map@4.4.2': {}

  '@napi-rs/nice-android-arm-eabi@1.0.4':
    optional: true

  '@napi-rs/nice-android-arm64@1.0.4':
    optional: true

  '@napi-rs/nice-darwin-arm64@1.0.4':
    optional: true

  '@napi-rs/nice-darwin-x64@1.0.4':
    optional: true

  '@napi-rs/nice-freebsd-x64@1.0.4':
    optional: true

  '@napi-rs/nice-linux-arm-gnueabihf@1.0.4':
    optional: true

  '@napi-rs/nice-linux-arm64-gnu@1.0.4':
    optional: true

  '@napi-rs/nice-linux-arm64-musl@1.0.4':
    optional: true

  '@napi-rs/nice-linux-ppc64-gnu@1.0.4':
    optional: true

  '@napi-rs/nice-linux-riscv64-gnu@1.0.4':
    optional: true

  '@napi-rs/nice-linux-s390x-gnu@1.0.4':
    optional: true

  '@napi-rs/nice-linux-x64-gnu@1.0.4':
    optional: true

  '@napi-rs/nice-linux-x64-musl@1.0.4':
    optional: true

  '@napi-rs/nice-win32-arm64-msvc@1.0.4':
    optional: true

  '@napi-rs/nice-win32-ia32-msvc@1.0.4':
    optional: true

  '@napi-rs/nice-win32-x64-msvc@1.0.4':
    optional: true

  '@napi-rs/nice@1.0.4':
    optionalDependencies:
      '@napi-rs/nice-android-arm-eabi': 1.0.4
      '@napi-rs/nice-android-arm64': 1.0.4
      '@napi-rs/nice-darwin-arm64': 1.0.4
      '@napi-rs/nice-darwin-x64': 1.0.4
      '@napi-rs/nice-freebsd-x64': 1.0.4
      '@napi-rs/nice-linux-arm-gnueabihf': 1.0.4
      '@napi-rs/nice-linux-arm64-gnu': 1.0.4
      '@napi-rs/nice-linux-arm64-musl': 1.0.4
      '@napi-rs/nice-linux-ppc64-gnu': 1.0.4
      '@napi-rs/nice-linux-riscv64-gnu': 1.0.4
      '@napi-rs/nice-linux-s390x-gnu': 1.0.4
      '@napi-rs/nice-linux-x64-gnu': 1.0.4
      '@napi-rs/nice-linux-x64-musl': 1.0.4
      '@napi-rs/nice-win32-arm64-msvc': 1.0.4
      '@napi-rs/nice-win32-ia32-msvc': 1.0.4
      '@napi-rs/nice-win32-x64-msvc': 1.0.4
    optional: true

  '@noble/curves@1.2.0':
    dependencies:
      '@noble/hashes': 1.3.2

  '@noble/hashes@1.3.2': {}

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.19.1

  '@nolyfill/is-core-module@1.0.39': {}

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@pkgr/core@0.2.4': {}

  '@protobufjs/aspromise@1.1.2': {}

  '@protobufjs/base64@1.1.2': {}

  '@protobufjs/codegen@2.0.4': {}

  '@protobufjs/eventemitter@1.1.0': {}

  '@protobufjs/fetch@1.1.0':
    dependencies:
      '@protobufjs/aspromise': 1.1.2
      '@protobufjs/inquire': 1.1.0

  '@protobufjs/float@1.0.2': {}

  '@protobufjs/inquire@1.1.0': {}

  '@protobufjs/path@1.1.2': {}

  '@protobufjs/pool@1.1.0': {}

  '@protobufjs/utf8@1.1.0': {}

  '@rtsao/scc@1.1.0': {}

  '@sec-ant/readable-stream@0.4.1': {}

  '@sinclair/typebox@0.27.8': {}

  '@sindresorhus/is@5.6.0': {}

  '@sinonjs/commons@3.0.1':
    dependencies:
      type-detect: 4.0.8

  '@sinonjs/fake-timers@10.3.0':
    dependencies:
      '@sinonjs/commons': 3.0.1

  '@stylistic/eslint-plugin@2.13.0(eslint@9.18.0)(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/utils': 8.30.1(eslint@9.18.0)(typescript@5.7.3)
      eslint: 9.18.0
      eslint-visitor-keys: 4.2.0
      espree: 10.3.0
      estraverse: 5.3.0
      picomatch: 4.0.2
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@swc/cli@0.7.7(@swc/core@1.10.7)':
    dependencies:
      '@swc/core': 1.10.7
      '@swc/counter': 0.1.3
      '@xhmikosr/bin-wrapper': 13.0.5
      commander: 8.3.0
      fast-glob: 3.3.3
      minimatch: 9.0.5
      piscina: 4.9.2
      semver: 7.7.1
      slash: 3.0.0
      source-map: 0.7.4

  '@swc/core-darwin-arm64@1.10.7':
    optional: true

  '@swc/core-darwin-x64@1.10.7':
    optional: true

  '@swc/core-linux-arm-gnueabihf@1.10.7':
    optional: true

  '@swc/core-linux-arm64-gnu@1.10.7':
    optional: true

  '@swc/core-linux-arm64-musl@1.10.7':
    optional: true

  '@swc/core-linux-x64-gnu@1.10.7':
    optional: true

  '@swc/core-linux-x64-musl@1.10.7':
    optional: true

  '@swc/core-win32-arm64-msvc@1.10.7':
    optional: true

  '@swc/core-win32-ia32-msvc@1.10.7':
    optional: true

  '@swc/core-win32-x64-msvc@1.10.7':
    optional: true

  '@swc/core@1.10.7':
    dependencies:
      '@swc/counter': 0.1.3
      '@swc/types': 0.1.21
    optionalDependencies:
      '@swc/core-darwin-arm64': 1.10.7
      '@swc/core-darwin-x64': 1.10.7
      '@swc/core-linux-arm-gnueabihf': 1.10.7
      '@swc/core-linux-arm64-gnu': 1.10.7
      '@swc/core-linux-arm64-musl': 1.10.7
      '@swc/core-linux-x64-gnu': 1.10.7
      '@swc/core-linux-x64-musl': 1.10.7
      '@swc/core-win32-arm64-msvc': 1.10.7
      '@swc/core-win32-ia32-msvc': 1.10.7
      '@swc/core-win32-x64-msvc': 1.10.7

  '@swc/counter@0.1.3': {}

  '@swc/jest@0.2.37(@swc/core@1.10.7)':
    dependencies:
      '@jest/create-cache-key-function': 29.7.0
      '@swc/core': 1.10.7
      '@swc/counter': 0.1.3
      jsonc-parser: 3.3.1

  '@swc/types@0.1.21':
    dependencies:
      '@swc/counter': 0.1.3

  '@szmarczak/http-timer@5.0.1':
    dependencies:
      defer-to-connect: 2.0.1

  '@tokenizer/token@0.3.0': {}

  '@types/babel__core@7.20.5':
    dependencies:
      '@babel/parser': 7.27.0
      '@babel/types': 7.27.0
      '@types/babel__generator': 7.27.0
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.7

  '@types/babel__generator@7.27.0':
    dependencies:
      '@babel/types': 7.27.0

  '@types/babel__template@7.4.4':
    dependencies:
      '@babel/parser': 7.27.0
      '@babel/types': 7.27.0

  '@types/babel__traverse@7.20.7':
    dependencies:
      '@babel/types': 7.27.0

  '@types/docker-modem@3.0.6':
    dependencies:
      '@types/node': 22.14.1
      '@types/ssh2': 1.15.5

  '@types/dockerode@3.3.40':
    dependencies:
      '@types/docker-modem': 3.0.6
      '@types/node': 22.14.1
      '@types/ssh2': 1.15.5

  '@types/estree@1.0.7': {}

  '@types/graceful-fs@4.1.9':
    dependencies:
      '@types/node': 22.14.1

  '@types/http-cache-semantics@4.0.4': {}

  '@types/istanbul-lib-coverage@2.0.6': {}

  '@types/istanbul-lib-report@3.0.3':
    dependencies:
      '@types/istanbul-lib-coverage': 2.0.6

  '@types/istanbul-reports@3.0.4':
    dependencies:
      '@types/istanbul-lib-report': 3.0.3

  '@types/jest@29.5.14':
    dependencies:
      expect: 29.7.0
      pretty-format: 29.7.0

  '@types/json-schema@7.0.15': {}

  '@types/json5@0.0.29': {}

  '@types/node@18.19.86':
    dependencies:
      undici-types: 5.26.5

  '@types/node@22.14.1':
    dependencies:
      undici-types: 6.21.0

  '@types/node@22.7.5':
    dependencies:
      undici-types: 6.19.8

  '@types/ssh2-streams@0.1.12':
    dependencies:
      '@types/node': 22.14.1

  '@types/ssh2@0.5.52':
    dependencies:
      '@types/node': 22.14.1
      '@types/ssh2-streams': 0.1.12

  '@types/ssh2@1.15.5':
    dependencies:
      '@types/node': 18.19.86

  '@types/stack-utils@2.0.3': {}

  '@types/yargs-parser@21.0.3': {}

  '@types/yargs@17.0.33':
    dependencies:
      '@types/yargs-parser': 21.0.3

  '@typescript-eslint/eslint-plugin@8.20.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint@9.18.0)(typescript@5.7.3)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 8.20.0(eslint@9.18.0)(typescript@5.7.3)
      '@typescript-eslint/scope-manager': 8.20.0
      '@typescript-eslint/type-utils': 8.20.0(eslint@9.18.0)(typescript@5.7.3)
      '@typescript-eslint/utils': 8.20.0(eslint@9.18.0)(typescript@5.7.3)
      '@typescript-eslint/visitor-keys': 8.20.0
      eslint: 9.18.0
      graphemer: 1.4.0
      ignore: 5.3.2
      natural-compare: 1.4.0
      ts-api-utils: 2.1.0(typescript@5.7.3)
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 8.20.0
      '@typescript-eslint/types': 8.20.0
      '@typescript-eslint/typescript-estree': 8.20.0(typescript@5.7.3)
      '@typescript-eslint/visitor-keys': 8.20.0
      debug: 4.4.0
      eslint: 9.18.0
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@8.20.0':
    dependencies:
      '@typescript-eslint/types': 8.20.0
      '@typescript-eslint/visitor-keys': 8.20.0

  '@typescript-eslint/scope-manager@8.30.1':
    dependencies:
      '@typescript-eslint/types': 8.30.1
      '@typescript-eslint/visitor-keys': 8.30.1

  '@typescript-eslint/type-utils@8.20.0(eslint@9.18.0)(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 8.20.0(typescript@5.7.3)
      '@typescript-eslint/utils': 8.20.0(eslint@9.18.0)(typescript@5.7.3)
      debug: 4.4.0
      eslint: 9.18.0
      ts-api-utils: 2.1.0(typescript@5.7.3)
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@8.20.0': {}

  '@typescript-eslint/types@8.30.1': {}

  '@typescript-eslint/typescript-estree@8.20.0(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/types': 8.20.0
      '@typescript-eslint/visitor-keys': 8.20.0
      debug: 4.4.0
      fast-glob: 3.3.3
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.7.1
      ts-api-utils: 2.1.0(typescript@5.7.3)
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/typescript-estree@8.30.1(typescript@5.7.3)':
    dependencies:
      '@typescript-eslint/types': 8.30.1
      '@typescript-eslint/visitor-keys': 8.30.1
      debug: 4.4.1
      fast-glob: 3.3.3
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.7.1
      ts-api-utils: 2.1.0(typescript@5.7.3)
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.20.0(eslint@9.18.0)(typescript@5.7.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.6.0(eslint@9.18.0)
      '@typescript-eslint/scope-manager': 8.20.0
      '@typescript-eslint/types': 8.20.0
      '@typescript-eslint/typescript-estree': 8.20.0(typescript@5.7.3)
      eslint: 9.18.0
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.30.1(eslint@9.18.0)(typescript@5.7.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.6.0(eslint@9.18.0)
      '@typescript-eslint/scope-manager': 8.30.1
      '@typescript-eslint/types': 8.30.1
      '@typescript-eslint/typescript-estree': 8.30.1(typescript@5.7.3)
      eslint: 9.18.0
      typescript: 5.7.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/visitor-keys@8.20.0':
    dependencies:
      '@typescript-eslint/types': 8.20.0
      eslint-visitor-keys: 4.2.0

  '@typescript-eslint/visitor-keys@8.30.1':
    dependencies:
      '@typescript-eslint/types': 8.30.1
      eslint-visitor-keys: 4.2.0

  '@xhmikosr/archive-type@7.0.0':
    dependencies:
      file-type: 19.6.0

  '@xhmikosr/bin-check@7.0.3':
    dependencies:
      execa: 5.1.1
      isexe: 2.0.0

  '@xhmikosr/bin-wrapper@13.0.5':
    dependencies:
      '@xhmikosr/bin-check': 7.0.3
      '@xhmikosr/downloader': 15.0.1
      '@xhmikosr/os-filter-obj': 3.0.0
      bin-version-check: 5.1.0

  '@xhmikosr/decompress-tar@8.0.1':
    dependencies:
      file-type: 19.6.0
      is-stream: 2.0.1
      tar-stream: 3.1.7

  '@xhmikosr/decompress-tarbz2@8.0.2':
    dependencies:
      '@xhmikosr/decompress-tar': 8.0.1
      file-type: 19.6.0
      is-stream: 2.0.1
      seek-bzip: 2.0.0
      unbzip2-stream: 1.4.3

  '@xhmikosr/decompress-targz@8.0.1':
    dependencies:
      '@xhmikosr/decompress-tar': 8.0.1
      file-type: 19.6.0
      is-stream: 2.0.1

  '@xhmikosr/decompress-unzip@7.0.0':
    dependencies:
      file-type: 19.6.0
      get-stream: 6.0.1
      yauzl: 3.2.0

  '@xhmikosr/decompress@10.0.1':
    dependencies:
      '@xhmikosr/decompress-tar': 8.0.1
      '@xhmikosr/decompress-tarbz2': 8.0.2
      '@xhmikosr/decompress-targz': 8.0.1
      '@xhmikosr/decompress-unzip': 7.0.0
      graceful-fs: 4.2.11
      make-dir: 4.0.0
      strip-dirs: 3.0.0

  '@xhmikosr/downloader@15.0.1':
    dependencies:
      '@xhmikosr/archive-type': 7.0.0
      '@xhmikosr/decompress': 10.0.1
      content-disposition: 0.5.4
      defaults: 3.0.0
      ext-name: 5.0.0
      file-type: 19.6.0
      filenamify: 6.0.0
      get-stream: 6.0.1
      got: 13.0.0

  '@xhmikosr/os-filter-obj@3.0.0':
    dependencies:
      arch: 3.0.0

  abort-controller@3.0.0:
    dependencies:
      event-target-shim: 5.0.1

  acorn-jsx@5.3.2(acorn@8.14.1):
    dependencies:
      acorn: 8.14.1

  acorn@8.14.1: {}

  aes-js@4.0.0-beta.5: {}

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ansi-escapes@4.3.2:
    dependencies:
      type-fest: 0.21.3

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@5.2.0: {}

  ansi-styles@6.2.1: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  arch@3.0.0: {}

  archiver-utils@5.0.2:
    dependencies:
      glob: 10.4.5
      graceful-fs: 4.2.11
      is-stream: 2.0.1
      lazystream: 1.0.1
      lodash: 4.17.21
      normalize-path: 3.0.0
      readable-stream: 4.7.0

  archiver@7.0.1:
    dependencies:
      archiver-utils: 5.0.2
      async: 3.2.6
      buffer-crc32: 1.0.0
      readable-stream: 4.7.0
      readdir-glob: 1.1.3
      tar-stream: 3.1.7
      zip-stream: 6.0.1

  argparse@1.0.10:
    dependencies:
      sprintf-js: 1.0.3

  argparse@2.0.1: {}

  array-buffer-byte-length@1.0.2:
    dependencies:
      call-bound: 1.0.4
      is-array-buffer: 3.0.5

  array-includes@3.1.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      is-string: 1.1.1

  array.prototype.findlastindex@1.2.6:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-shim-unscopables: 1.1.0

  array.prototype.flat@1.3.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-shim-unscopables: 1.1.0

  array.prototype.flatmap@1.3.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-shim-unscopables: 1.1.0

  arraybuffer.prototype.slice@1.0.4:
    dependencies:
      array-buffer-byte-length: 1.0.2
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      is-array-buffer: 3.0.5

  asn1@0.2.6:
    dependencies:
      safer-buffer: 2.1.2

  assert@2.1.0:
    dependencies:
      call-bind: 1.0.8
      is-nan: 1.3.2
      object-is: 1.1.6
      object.assign: 4.1.7
      util: 0.12.5

  async-function@1.0.0: {}

  async-lock@1.4.1: {}

  async@3.2.6: {}

  asynckit@0.4.0: {}

  available-typed-arrays@1.0.7:
    dependencies:
      possible-typed-array-names: 1.1.0

  axios@1.8.4:
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.2
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  b4a@1.6.7: {}

  babel-jest@29.7.0(@babel/core@7.26.10):
    dependencies:
      '@babel/core': 7.26.10
      '@jest/transform': 29.7.0
      '@types/babel__core': 7.20.5
      babel-plugin-istanbul: 6.1.1
      babel-preset-jest: 29.6.3(@babel/core@7.26.10)
      chalk: 4.1.2
      graceful-fs: 4.2.11
      slash: 3.0.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-istanbul@6.1.1:
    dependencies:
      '@babel/helper-plugin-utils': 7.26.5
      '@istanbuljs/load-nyc-config': 1.1.0
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-instrument: 5.2.1
      test-exclude: 6.0.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-jest-hoist@29.6.3:
    dependencies:
      '@babel/template': 7.27.0
      '@babel/types': 7.27.0
      '@types/babel__core': 7.20.5
      '@types/babel__traverse': 7.20.7

  babel-preset-current-node-syntax@1.1.0(@babel/core@7.26.10):
    dependencies:
      '@babel/core': 7.26.10
      '@babel/plugin-syntax-async-generators': 7.8.4(@babel/core@7.26.10)
      '@babel/plugin-syntax-bigint': 7.8.3(@babel/core@7.26.10)
      '@babel/plugin-syntax-class-properties': 7.12.13(@babel/core@7.26.10)
      '@babel/plugin-syntax-class-static-block': 7.14.5(@babel/core@7.26.10)
      '@babel/plugin-syntax-import-attributes': 7.26.0(@babel/core@7.26.10)
      '@babel/plugin-syntax-import-meta': 7.10.4(@babel/core@7.26.10)
      '@babel/plugin-syntax-json-strings': 7.8.3(@babel/core@7.26.10)
      '@babel/plugin-syntax-logical-assignment-operators': 7.10.4(@babel/core@7.26.10)
      '@babel/plugin-syntax-nullish-coalescing-operator': 7.8.3(@babel/core@7.26.10)
      '@babel/plugin-syntax-numeric-separator': 7.10.4(@babel/core@7.26.10)
      '@babel/plugin-syntax-object-rest-spread': 7.8.3(@babel/core@7.26.10)
      '@babel/plugin-syntax-optional-catch-binding': 7.8.3(@babel/core@7.26.10)
      '@babel/plugin-syntax-optional-chaining': 7.8.3(@babel/core@7.26.10)
      '@babel/plugin-syntax-private-property-in-object': 7.14.5(@babel/core@7.26.10)
      '@babel/plugin-syntax-top-level-await': 7.14.5(@babel/core@7.26.10)

  babel-preset-jest@29.6.3(@babel/core@7.26.10):
    dependencies:
      '@babel/core': 7.26.10
      babel-plugin-jest-hoist: 29.6.3
      babel-preset-current-node-syntax: 1.1.0(@babel/core@7.26.10)

  balanced-match@1.0.2: {}

  bare-events@2.5.4:
    optional: true

  bare-fs@4.1.2:
    dependencies:
      bare-events: 2.5.4
      bare-path: 3.0.0
      bare-stream: 2.6.5(bare-events@2.5.4)
    optional: true

  bare-os@3.6.1:
    optional: true

  bare-path@3.0.0:
    dependencies:
      bare-os: 3.6.1
    optional: true

  bare-stream@2.6.5(bare-events@2.5.4):
    dependencies:
      streamx: 2.22.0
    optionalDependencies:
      bare-events: 2.5.4
    optional: true

  base64-js@1.5.1: {}

  bcrypt-pbkdf@1.0.2:
    dependencies:
      tweetnacl: 0.14.5

  bin-version-check@5.1.0:
    dependencies:
      bin-version: 6.0.0
      semver: 7.7.1
      semver-truncate: 3.0.0

  bin-version@6.0.0:
    dependencies:
      execa: 5.1.1
      find-versions: 5.1.0

  bluebird@3.7.2: {}

  brace-expansion@1.1.12:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.2:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.24.4:
    dependencies:
      caniuse-lite: 1.0.30001713
      electron-to-chromium: 1.5.137
      node-releases: 2.0.19
      update-browserslist-db: 1.1.3(browserslist@4.24.4)

  bser@2.1.1:
    dependencies:
      node-int64: 0.4.0

  buffer-crc32@0.2.13: {}

  buffer-crc32@1.0.0: {}

  buffer-from@1.1.2: {}

  buffer@5.7.1:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  buffer@6.0.3:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  buildcheck@0.0.6:
    optional: true

  byline@5.0.0: {}

  cacheable-lookup@7.0.0: {}

  cacheable-request@10.2.14:
    dependencies:
      '@types/http-cache-semantics': 4.0.4
      get-stream: 6.0.1
      http-cache-semantics: 4.2.0
      keyv: 4.5.4
      mimic-response: 4.0.0
      normalize-url: 8.0.2
      responselike: 3.0.0

  call-bind-apply-helpers@1.0.2:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2

  call-bind@1.0.8:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      get-intrinsic: 1.3.0
      set-function-length: 1.2.2

  call-bound@1.0.4:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      get-intrinsic: 1.3.0

  callsites@3.1.0: {}

  camelcase@5.3.1: {}

  camelcase@6.3.0: {}

  caniuse-lite@1.0.30001713: {}

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  char-regex@1.0.2: {}

  ci-info@3.9.0: {}

  cjs-module-lexer@1.4.3: {}

  cliui@8.0.1:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 7.0.0

  co@4.6.0: {}

  collect-v8-coverage@1.0.2: {}

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  commander@2.20.3: {}

  commander@6.2.1: {}

  commander@8.3.0: {}

  compress-commons@6.0.2:
    dependencies:
      crc-32: 1.2.2
      crc32-stream: 6.0.0
      is-stream: 2.0.1
      normalize-path: 3.0.0
      readable-stream: 4.7.0

  concat-map@0.0.1: {}

  content-disposition@0.5.4:
    dependencies:
      safe-buffer: 5.2.1

  convert-source-map@2.0.0: {}

  core-util-is@1.0.3: {}

  cpu-features@0.0.10:
    dependencies:
      buildcheck: 0.0.6
      nan: 2.22.2
    optional: true

  crc-32@1.2.2: {}

  crc32-stream@6.0.0:
    dependencies:
      crc-32: 1.2.2
      readable-stream: 4.7.0

  create-jest@29.7.0(@types/node@22.14.1):
    dependencies:
      '@jest/types': 29.6.3
      chalk: 4.1.2
      exit: 0.1.2
      graceful-fs: 4.2.11
      jest-config: 29.7.0(@types/node@22.14.1)
      jest-util: 29.7.0
      prompts: 2.4.2
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  data-view-buffer@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  data-view-byte-length@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  data-view-byte-offset@1.0.1:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  debug@3.2.7:
    dependencies:
      ms: 2.1.3

  debug@4.4.0:
    dependencies:
      ms: 2.1.3

  debug@4.4.1:
    dependencies:
      ms: 2.1.3

  decompress-response@6.0.0:
    dependencies:
      mimic-response: 3.1.0

  dedent@1.5.3: {}

  deep-is@0.1.4: {}

  deepmerge@4.3.1: {}

  defaults@3.0.0: {}

  defer-to-connect@2.0.1: {}

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.1
      es-errors: 1.3.0
      gopd: 1.2.0

  define-properties@1.2.1:
    dependencies:
      define-data-property: 1.1.4
      has-property-descriptors: 1.0.2
      object-keys: 1.1.1

  delayed-stream@1.0.0: {}

  detect-newline@3.1.0: {}

  diff-sequences@29.6.3: {}

  docker-compose@1.2.0:
    dependencies:
      yaml: 2.7.1

  docker-modem@5.0.6:
    dependencies:
      debug: 4.4.1
      readable-stream: 3.6.2
      split-ca: 1.0.1
      ssh2: 1.16.0
    transitivePeerDependencies:
      - supports-color

  dockerode@4.0.7:
    dependencies:
      '@balena/dockerignore': 1.0.2
      '@grpc/grpc-js': 1.13.3
      '@grpc/proto-loader': 0.7.13
      docker-modem: 5.0.6
      protobufjs: 7.4.0
      tar-fs: 3.0.9
      uuid: 10.0.0
    transitivePeerDependencies:
      - bare-buffer
      - supports-color

  doctrine@2.1.0:
    dependencies:
      esutils: 2.0.3

  dunder-proto@1.0.1:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-errors: 1.3.0
      gopd: 1.2.0

  eastasianwidth@0.2.0: {}

  electron-to-chromium@1.5.137: {}

  emittery@0.13.1: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  end-of-stream@1.4.4:
    dependencies:
      once: 1.4.0

  enhanced-resolve@5.18.1:
    dependencies:
      graceful-fs: 4.2.11
      tapable: 2.2.1

  error-ex@1.3.2:
    dependencies:
      is-arrayish: 0.2.1

  es-abstract@1.23.9:
    dependencies:
      array-buffer-byte-length: 1.0.2
      arraybuffer.prototype.slice: 1.0.4
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.4
      data-view-buffer: 1.0.2
      data-view-byte-length: 1.0.2
      data-view-byte-offset: 1.0.1
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-set-tostringtag: 2.1.0
      es-to-primitive: 1.3.0
      function.prototype.name: 1.1.8
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      get-symbol-description: 1.1.0
      globalthis: 1.0.4
      gopd: 1.2.0
      has-property-descriptors: 1.0.2
      has-proto: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      internal-slot: 1.1.0
      is-array-buffer: 3.0.5
      is-callable: 1.2.7
      is-data-view: 1.0.2
      is-regex: 1.2.1
      is-shared-array-buffer: 1.0.4
      is-string: 1.1.1
      is-typed-array: 1.1.15
      is-weakref: 1.1.1
      math-intrinsics: 1.1.0
      object-inspect: 1.13.4
      object-keys: 1.1.1
      object.assign: 4.1.7
      own-keys: 1.0.1
      regexp.prototype.flags: 1.5.4
      safe-array-concat: 1.1.3
      safe-push-apply: 1.0.0
      safe-regex-test: 1.1.0
      set-proto: 1.0.0
      string.prototype.trim: 1.2.10
      string.prototype.trimend: 1.0.9
      string.prototype.trimstart: 1.0.8
      typed-array-buffer: 1.0.3
      typed-array-byte-length: 1.0.3
      typed-array-byte-offset: 1.0.4
      typed-array-length: 1.0.7
      unbox-primitive: 1.1.0
      which-typed-array: 1.1.19

  es-define-property@1.0.1: {}

  es-errors@1.3.0: {}

  es-object-atoms@1.1.1:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.1.0:
    dependencies:
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  es-shim-unscopables@1.1.0:
    dependencies:
      hasown: 2.0.2

  es-to-primitive@1.3.0:
    dependencies:
      is-callable: 1.2.7
      is-date-object: 1.1.0
      is-symbol: 1.1.1

  escalade@3.2.0: {}

  escape-string-regexp@2.0.0: {}

  escape-string-regexp@4.0.0: {}

  eslint-compat-utils@0.5.1(eslint@9.18.0):
    dependencies:
      eslint: 9.18.0
      semver: 7.7.1

  eslint-config-prettier@10.1.2(eslint@9.18.0):
    dependencies:
      eslint: 9.18.0

  eslint-config-standard@17.1.0(eslint-plugin-import@2.31.0)(eslint-plugin-n@17.17.0(eslint@9.18.0))(eslint-plugin-promise@7.2.1(eslint@9.18.0))(eslint@9.18.0):
    dependencies:
      eslint: 9.18.0
      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint-import-resolver-typescript@3.7.0)(eslint@9.18.0)
      eslint-plugin-n: 17.17.0(eslint@9.18.0)
      eslint-plugin-promise: 7.2.1(eslint@9.18.0)

  eslint-import-resolver-node@0.3.9:
    dependencies:
      debug: 3.2.7
      is-core-module: 2.16.1
      resolve: 1.22.10
    transitivePeerDependencies:
      - supports-color

  eslint-import-resolver-typescript@3.7.0(eslint-plugin-import@2.31.0)(eslint@9.18.0):
    dependencies:
      '@nolyfill/is-core-module': 1.0.39
      debug: 4.4.0
      enhanced-resolve: 5.18.1
      eslint: 9.18.0
      fast-glob: 3.3.3
      get-tsconfig: 4.10.0
      is-bun-module: 1.3.0
      is-glob: 4.0.3
      stable-hash: 0.0.4
    optionalDependencies:
      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint-import-resolver-typescript@3.7.0)(eslint@9.18.0)
    transitivePeerDependencies:
      - supports-color

  eslint-module-utils@2.12.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.7.0)(eslint@9.18.0):
    dependencies:
      debug: 3.2.7
    optionalDependencies:
      '@typescript-eslint/parser': 8.20.0(eslint@9.18.0)(typescript@5.7.3)
      eslint: 9.18.0
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.7.0(eslint-plugin-import@2.31.0)(eslint@9.18.0)
    transitivePeerDependencies:
      - supports-color

  eslint-plugin-es-x@7.8.0(eslint@9.18.0):
    dependencies:
      '@eslint-community/eslint-utils': 4.6.0(eslint@9.18.0)
      '@eslint-community/regexpp': 4.12.1
      eslint: 9.18.0
      eslint-compat-utils: 0.5.1(eslint@9.18.0)

  eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint-import-resolver-typescript@3.7.0)(eslint@9.18.0):
    dependencies:
      '@rtsao/scc': 1.1.0
      array-includes: 3.1.8
      array.prototype.findlastindex: 1.2.6
      array.prototype.flat: 1.3.3
      array.prototype.flatmap: 1.3.3
      debug: 3.2.7
      doctrine: 2.1.0
      eslint: 9.18.0
      eslint-import-resolver-node: 0.3.9
      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.7.0)(eslint@9.18.0)
      hasown: 2.0.2
      is-core-module: 2.16.1
      is-glob: 4.0.3
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      object.groupby: 1.0.3
      object.values: 1.2.1
      semver: 6.3.1
      string.prototype.trimend: 1.0.9
      tsconfig-paths: 3.15.0
    optionalDependencies:
      '@typescript-eslint/parser': 8.20.0(eslint@9.18.0)(typescript@5.7.3)
    transitivePeerDependencies:
      - eslint-import-resolver-typescript
      - eslint-import-resolver-webpack
      - supports-color

  eslint-plugin-n@17.17.0(eslint@9.18.0):
    dependencies:
      '@eslint-community/eslint-utils': 4.6.0(eslint@9.18.0)
      enhanced-resolve: 5.18.1
      eslint: 9.18.0
      eslint-plugin-es-x: 7.8.0(eslint@9.18.0)
      get-tsconfig: 4.10.0
      globals: 15.15.0
      ignore: 5.3.2
      minimatch: 9.0.5
      semver: 7.7.1

  eslint-plugin-prettier@5.2.6(eslint-config-prettier@10.1.2(eslint@9.18.0))(eslint@9.18.0)(prettier@3.5.3):
    dependencies:
      eslint: 9.18.0
      prettier: 3.5.3
      prettier-linter-helpers: 1.0.0
      synckit: 0.11.4
    optionalDependencies:
      eslint-config-prettier: 10.1.2(eslint@9.18.0)

  eslint-plugin-promise@7.2.1(eslint@9.18.0):
    dependencies:
      '@eslint-community/eslint-utils': 4.6.0(eslint@9.18.0)
      eslint: 9.18.0

  eslint-plugin-unused-imports@4.1.4(@typescript-eslint/eslint-plugin@8.20.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint@9.18.0)(typescript@5.7.3))(eslint@9.18.0):
    dependencies:
      eslint: 9.18.0
    optionalDependencies:
      '@typescript-eslint/eslint-plugin': 8.20.0(@typescript-eslint/parser@8.20.0(eslint@9.18.0)(typescript@5.7.3))(eslint@9.18.0)(typescript@5.7.3)

  eslint-scope@8.3.0:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint-visitor-keys@4.2.0: {}

  eslint@9.18.0:
    dependencies:
      '@eslint-community/eslint-utils': 4.6.0(eslint@9.18.0)
      '@eslint-community/regexpp': 4.12.1
      '@eslint/config-array': 0.19.2
      '@eslint/core': 0.10.0
      '@eslint/eslintrc': 3.3.1
      '@eslint/js': 9.18.0
      '@eslint/plugin-kit': 0.2.8
      '@humanfs/node': 0.16.6
      '@humanwhocodes/module-importer': 1.0.1
      '@humanwhocodes/retry': 0.4.2
      '@types/estree': 1.0.7
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.4.0
      escape-string-regexp: 4.0.0
      eslint-scope: 8.3.0
      eslint-visitor-keys: 4.2.0
      espree: 10.3.0
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 8.0.0
      find-up: 5.0.0
      glob-parent: 6.0.2
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      json-stable-stringify-without-jsonify: 1.0.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
    transitivePeerDependencies:
      - supports-color

  espree@10.3.0:
    dependencies:
      acorn: 8.14.1
      acorn-jsx: 5.3.2(acorn@8.14.1)
      eslint-visitor-keys: 4.2.0

  esprima@4.0.1: {}

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@5.3.0: {}

  esutils@2.0.3: {}

  ethers@6.13.5:
    dependencies:
      '@adraffy/ens-normalize': 1.10.1
      '@noble/curves': 1.2.0
      '@noble/hashes': 1.3.2
      '@types/node': 22.7.5
      aes-js: 4.0.0-beta.5
      tslib: 2.7.0
      ws: 8.17.1
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  event-target-shim@5.0.1: {}

  events@3.3.0: {}

  execa@5.1.1:
    dependencies:
      cross-spawn: 7.0.6
      get-stream: 6.0.1
      human-signals: 2.1.0
      is-stream: 2.0.1
      merge-stream: 2.0.0
      npm-run-path: 4.0.1
      onetime: 5.1.2
      signal-exit: 3.0.7
      strip-final-newline: 2.0.0

  exit@0.1.2: {}

  expect@29.7.0:
    dependencies:
      '@jest/expect-utils': 29.7.0
      jest-get-type: 29.6.3
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-util: 29.7.0

  ext-list@2.2.2:
    dependencies:
      mime-db: 1.52.0

  ext-name@5.0.0:
    dependencies:
      ext-list: 2.2.2
      sort-keys-length: 1.0.1

  fast-deep-equal@3.1.3: {}

  fast-diff@1.3.0: {}

  fast-fifo@1.3.2: {}

  fast-glob@3.3.3:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fastq@1.19.1:
    dependencies:
      reusify: 1.1.0

  fb-watchman@2.0.2:
    dependencies:
      bser: 2.1.1

  file-entry-cache@8.0.0:
    dependencies:
      flat-cache: 4.0.1

  file-type@19.6.0:
    dependencies:
      get-stream: 9.0.1
      strtok3: 9.1.1
      token-types: 6.0.3
      uint8array-extras: 1.4.0

  filename-reserved-regex@3.0.0: {}

  filenamify@6.0.0:
    dependencies:
      filename-reserved-regex: 3.0.0

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  find-up@4.1.0:
    dependencies:
      locate-path: 5.0.0
      path-exists: 4.0.0

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  find-versions@5.1.0:
    dependencies:
      semver-regex: 4.0.5

  flat-cache@4.0.1:
    dependencies:
      flatted: 3.3.3
      keyv: 4.5.4

  flatted@3.3.3: {}

  follow-redirects@1.15.9: {}

  for-each@0.3.5:
    dependencies:
      is-callable: 1.2.7

  foreground-child@3.3.1:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  form-data-encoder@2.1.4: {}

  form-data@4.0.2:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      es-set-tostringtag: 2.1.0
      mime-types: 2.1.35

  fs.realpath@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  function.prototype.name@1.1.8:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      functions-have-names: 1.2.3
      hasown: 2.0.2
      is-callable: 1.2.7

  functions-have-names@1.2.3: {}

  generate-changelog@1.8.0:
    dependencies:
      bluebird: 3.7.2
      commander: 2.20.3
      github-url-from-git: 1.5.0

  gensync@1.0.0-beta.2: {}

  get-caller-file@2.0.5: {}

  get-intrinsic@1.3.0:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      function-bind: 1.1.2
      get-proto: 1.0.1
      gopd: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      math-intrinsics: 1.1.0

  get-package-type@0.1.0: {}

  get-port@7.1.0: {}

  get-proto@1.0.1:
    dependencies:
      dunder-proto: 1.0.1
      es-object-atoms: 1.1.1

  get-stream@6.0.1: {}

  get-stream@9.0.1:
    dependencies:
      '@sec-ant/readable-stream': 0.4.1
      is-stream: 4.0.1

  get-symbol-description@1.1.0:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0

  get-tsconfig@4.10.0:
    dependencies:
      resolve-pkg-maps: 1.0.0

  github-url-from-git@1.5.0: {}

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.1
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 1.11.1

  glob@7.2.3:
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1

  globals@11.12.0: {}

  globals@14.0.0: {}

  globals@15.15.0: {}

  globalthis@1.0.4:
    dependencies:
      define-properties: 1.2.1
      gopd: 1.2.0

  gopd@1.2.0: {}

  got@13.0.0:
    dependencies:
      '@sindresorhus/is': 5.6.0
      '@szmarczak/http-timer': 5.0.1
      cacheable-lookup: 7.0.0
      cacheable-request: 10.2.14
      decompress-response: 6.0.0
      form-data-encoder: 2.1.4
      get-stream: 6.0.1
      http2-wrapper: 2.2.1
      lowercase-keys: 3.0.0
      p-cancelable: 3.0.0
      responselike: 3.0.0

  graceful-fs@4.2.11: {}

  graphemer@1.4.0: {}

  has-bigints@1.1.0: {}

  has-flag@4.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.1

  has-proto@1.2.0:
    dependencies:
      dunder-proto: 1.0.1

  has-symbols@1.1.0: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.1.0

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  html-escaper@2.0.2: {}

  http-cache-semantics@4.2.0: {}

  http2-wrapper@2.2.1:
    dependencies:
      quick-lru: 5.1.1
      resolve-alpn: 1.2.1

  human-signals@2.1.0: {}

  ieee754@1.2.1: {}

  ignore@5.3.2: {}

  import-fresh@3.3.1:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  import-local@3.2.0:
    dependencies:
      pkg-dir: 4.2.0
      resolve-cwd: 3.0.0

  imurmurhash@0.1.4: {}

  inflight@1.0.6:
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2

  inherits@2.0.4: {}

  inspect-with-kind@1.0.5:
    dependencies:
      kind-of: 6.0.3

  internal-slot@1.1.0:
    dependencies:
      es-errors: 1.3.0
      hasown: 2.0.2
      side-channel: 1.1.0

  is-arguments@1.2.0:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-array-buffer@3.0.5:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      get-intrinsic: 1.3.0

  is-arrayish@0.2.1: {}

  is-async-function@2.1.1:
    dependencies:
      async-function: 1.0.0
      call-bound: 1.0.4
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-bigint@1.1.0:
    dependencies:
      has-bigints: 1.1.0

  is-boolean-object@1.2.2:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-bun-module@1.3.0:
    dependencies:
      semver: 7.7.1

  is-callable@1.2.7: {}

  is-core-module@2.16.1:
    dependencies:
      hasown: 2.0.2

  is-data-view@1.0.2:
    dependencies:
      call-bound: 1.0.4
      get-intrinsic: 1.3.0
      is-typed-array: 1.1.15

  is-date-object@1.1.0:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-extglob@2.1.1: {}

  is-finalizationregistry@1.1.1:
    dependencies:
      call-bound: 1.0.4

  is-fullwidth-code-point@3.0.0: {}

  is-generator-fn@2.1.0: {}

  is-generator-function@1.1.0:
    dependencies:
      call-bound: 1.0.4
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-map@2.0.3: {}

  is-nan@1.3.2:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1

  is-number-object@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-number@7.0.0: {}

  is-plain-obj@1.1.0: {}

  is-regex@1.2.1:
    dependencies:
      call-bound: 1.0.4
      gopd: 1.2.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  is-set@2.0.3: {}

  is-shared-array-buffer@1.0.4:
    dependencies:
      call-bound: 1.0.4

  is-stream@2.0.1: {}

  is-stream@4.0.1: {}

  is-string@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-symbol@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-symbols: 1.1.0
      safe-regex-test: 1.1.0

  is-typed-array@1.1.15:
    dependencies:
      which-typed-array: 1.1.19

  is-weakmap@2.0.2: {}

  is-weakref@1.1.1:
    dependencies:
      call-bound: 1.0.4

  is-weakset@2.0.4:
    dependencies:
      call-bound: 1.0.4
      get-intrinsic: 1.3.0

  isarray@1.0.0: {}

  isarray@2.0.5: {}

  isexe@2.0.0: {}

  istanbul-lib-coverage@3.2.2: {}

  istanbul-lib-instrument@5.2.1:
    dependencies:
      '@babel/core': 7.26.10
      '@babel/parser': 7.27.0
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-instrument@6.0.3:
    dependencies:
      '@babel/core': 7.26.10
      '@babel/parser': 7.27.0
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 7.7.1
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-report@3.0.1:
    dependencies:
      istanbul-lib-coverage: 3.2.2
      make-dir: 4.0.0
      supports-color: 7.2.0

  istanbul-lib-source-maps@4.0.1:
    dependencies:
      debug: 4.4.0
      istanbul-lib-coverage: 3.2.2
      source-map: 0.6.1
    transitivePeerDependencies:
      - supports-color

  istanbul-reports@3.1.7:
    dependencies:
      html-escaper: 2.0.2
      istanbul-lib-report: 3.0.1

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jest-changed-files@29.7.0:
    dependencies:
      execa: 5.1.1
      jest-util: 29.7.0
      p-limit: 3.1.0

  jest-circus@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/expect': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 22.14.1
      chalk: 4.1.2
      co: 4.6.0
      dedent: 1.5.3
      is-generator-fn: 2.1.0
      jest-each: 29.7.0
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-runtime: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      p-limit: 3.1.0
      pretty-format: 29.7.0
      pure-rand: 6.1.0
      slash: 3.0.0
      stack-utils: 2.0.6
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color

  jest-cli@29.7.0(@types/node@22.14.1):
    dependencies:
      '@jest/core': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      chalk: 4.1.2
      create-jest: 29.7.0(@types/node@22.14.1)
      exit: 0.1.2
      import-local: 3.2.0
      jest-config: 29.7.0(@types/node@22.14.1)
      jest-util: 29.7.0
      jest-validate: 29.7.0
      yargs: 17.7.2
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  jest-config@29.7.0(@types/node@22.14.1):
    dependencies:
      '@babel/core': 7.26.10
      '@jest/test-sequencer': 29.7.0
      '@jest/types': 29.6.3
      babel-jest: 29.7.0(@babel/core@7.26.10)
      chalk: 4.1.2
      ci-info: 3.9.0
      deepmerge: 4.3.1
      glob: 7.2.3
      graceful-fs: 4.2.11
      jest-circus: 29.7.0
      jest-environment-node: 29.7.0
      jest-get-type: 29.6.3
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-runner: 29.7.0
      jest-util: 29.7.0
      jest-validate: 29.7.0
      micromatch: 4.0.8
      parse-json: 5.2.0
      pretty-format: 29.7.0
      slash: 3.0.0
      strip-json-comments: 3.1.1
    optionalDependencies:
      '@types/node': 22.14.1
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color

  jest-diff@29.7.0:
    dependencies:
      chalk: 4.1.2
      diff-sequences: 29.6.3
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-docblock@29.7.0:
    dependencies:
      detect-newline: 3.1.0

  jest-each@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      chalk: 4.1.2
      jest-get-type: 29.6.3
      jest-util: 29.7.0
      pretty-format: 29.7.0

  jest-environment-node@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/fake-timers': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 22.14.1
      jest-mock: 29.7.0
      jest-util: 29.7.0

  jest-get-type@29.6.3: {}

  jest-haste-map@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/graceful-fs': 4.1.9
      '@types/node': 22.14.1
      anymatch: 3.1.3
      fb-watchman: 2.0.2
      graceful-fs: 4.2.11
      jest-regex-util: 29.6.3
      jest-util: 29.7.0
      jest-worker: 29.7.0
      micromatch: 4.0.8
      walker: 1.0.8
    optionalDependencies:
      fsevents: 2.3.3

  jest-leak-detector@29.7.0:
    dependencies:
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-matcher-utils@29.7.0:
    dependencies:
      chalk: 4.1.2
      jest-diff: 29.7.0
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-message-util@29.7.0:
    dependencies:
      '@babel/code-frame': 7.26.2
      '@jest/types': 29.6.3
      '@types/stack-utils': 2.0.3
      chalk: 4.1.2
      graceful-fs: 4.2.11
      micromatch: 4.0.8
      pretty-format: 29.7.0
      slash: 3.0.0
      stack-utils: 2.0.6

  jest-mock@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 22.14.1
      jest-util: 29.7.0

  jest-pnp-resolver@1.2.3(jest-resolve@29.7.0):
    optionalDependencies:
      jest-resolve: 29.7.0

  jest-regex-util@29.6.3: {}

  jest-resolve-dependencies@29.7.0:
    dependencies:
      jest-regex-util: 29.6.3
      jest-snapshot: 29.7.0
    transitivePeerDependencies:
      - supports-color

  jest-resolve@29.7.0:
    dependencies:
      chalk: 4.1.2
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-pnp-resolver: 1.2.3(jest-resolve@29.7.0)
      jest-util: 29.7.0
      jest-validate: 29.7.0
      resolve: 1.22.10
      resolve.exports: 2.0.3
      slash: 3.0.0

  jest-runner@29.7.0:
    dependencies:
      '@jest/console': 29.7.0
      '@jest/environment': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 22.14.1
      chalk: 4.1.2
      emittery: 0.13.1
      graceful-fs: 4.2.11
      jest-docblock: 29.7.0
      jest-environment-node: 29.7.0
      jest-haste-map: 29.7.0
      jest-leak-detector: 29.7.0
      jest-message-util: 29.7.0
      jest-resolve: 29.7.0
      jest-runtime: 29.7.0
      jest-util: 29.7.0
      jest-watcher: 29.7.0
      jest-worker: 29.7.0
      p-limit: 3.1.0
      source-map-support: 0.5.13
    transitivePeerDependencies:
      - supports-color

  jest-runtime@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/fake-timers': 29.7.0
      '@jest/globals': 29.7.0
      '@jest/source-map': 29.6.3
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 22.14.1
      chalk: 4.1.2
      cjs-module-lexer: 1.4.3
      collect-v8-coverage: 1.0.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-message-util: 29.7.0
      jest-mock: 29.7.0
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      slash: 3.0.0
      strip-bom: 4.0.0
    transitivePeerDependencies:
      - supports-color

  jest-snapshot@29.7.0:
    dependencies:
      '@babel/core': 7.26.10
      '@babel/generator': 7.27.0
      '@babel/plugin-syntax-jsx': 7.25.9(@babel/core@7.26.10)
      '@babel/plugin-syntax-typescript': 7.25.9(@babel/core@7.26.10)
      '@babel/types': 7.27.0
      '@jest/expect-utils': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      babel-preset-current-node-syntax: 1.1.0(@babel/core@7.26.10)
      chalk: 4.1.2
      expect: 29.7.0
      graceful-fs: 4.2.11
      jest-diff: 29.7.0
      jest-get-type: 29.6.3
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      natural-compare: 1.4.0
      pretty-format: 29.7.0
      semver: 7.7.1
    transitivePeerDependencies:
      - supports-color

  jest-util@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 22.14.1
      chalk: 4.1.2
      ci-info: 3.9.0
      graceful-fs: 4.2.11
      picomatch: 2.3.1

  jest-validate@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      camelcase: 6.3.0
      chalk: 4.1.2
      jest-get-type: 29.6.3
      leven: 3.1.0
      pretty-format: 29.7.0

  jest-watcher@29.7.0:
    dependencies:
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 22.14.1
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      emittery: 0.13.1
      jest-util: 29.7.0
      string-length: 4.0.2

  jest-worker@29.7.0:
    dependencies:
      '@types/node': 22.14.1
      jest-util: 29.7.0
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jest@29.7.0(@types/node@22.14.1):
    dependencies:
      '@jest/core': 29.7.0
      '@jest/types': 29.6.3
      import-local: 3.2.0
      jest-cli: 29.7.0(@types/node@22.14.1)
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  js-tokens@4.0.0: {}

  js-yaml@3.14.1:
    dependencies:
      argparse: 1.0.10
      esprima: 4.0.1

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsesc@3.1.0: {}

  json-buffer@3.0.1: {}

  json-parse-even-better-errors@2.3.1: {}

  json-schema-traverse@0.4.1: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json5@1.0.2:
    dependencies:
      minimist: 1.2.8

  json5@2.2.3: {}

  jsonc-parser@3.3.1: {}

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  kind-of@6.0.3: {}

  kleur@3.0.3: {}

  lazystream@1.0.1:
    dependencies:
      readable-stream: 2.3.8

  leven@3.1.0: {}

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lines-and-columns@1.2.4: {}

  locate-path@5.0.0:
    dependencies:
      p-locate: 4.1.0

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.camelcase@4.3.0: {}

  lodash.merge@4.6.2: {}

  lodash@4.17.21: {}

  long@5.3.1: {}

  lowercase-keys@3.0.0: {}

  lru-cache@10.4.3: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  make-dir@4.0.0:
    dependencies:
      semver: 7.7.1

  makeerror@1.0.12:
    dependencies:
      tmpl: 1.0.5

  math-intrinsics@1.1.0: {}

  merge-stream@2.0.0: {}

  merge2@1.4.1: {}

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mimic-fn@2.1.0: {}

  mimic-response@3.1.0: {}

  mimic-response@4.0.0: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.12

  minimatch@5.1.6:
    dependencies:
      brace-expansion: 2.0.2

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.2

  minimist@1.2.8: {}

  minipass@7.1.2: {}

  mkdirp@1.0.4: {}

  ms@2.1.3: {}

  nan@2.22.2:
    optional: true

  natural-compare@1.4.0: {}

  node-int64@0.4.0: {}

  node-releases@2.0.19: {}

  normalize-path@3.0.0: {}

  normalize-url@8.0.2: {}

  npm-run-path@4.0.1:
    dependencies:
      path-key: 3.1.1

  object-inspect@1.13.4: {}

  object-is@1.1.6:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1

  object-keys@1.1.1: {}

  object.assign@4.1.7:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1
      has-symbols: 1.1.0
      object-keys: 1.1.1

  object.fromentries@2.0.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-object-atoms: 1.1.1

  object.groupby@1.0.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9

  object.values@1.2.1:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  onetime@5.1.2:
    dependencies:
      mimic-fn: 2.1.0

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  own-keys@1.0.1:
    dependencies:
      get-intrinsic: 1.3.0
      object-keys: 1.1.1
      safe-push-apply: 1.0.0

  p-cancelable@3.0.0: {}

  p-limit@2.3.0:
    dependencies:
      p-try: 2.2.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@4.1.0:
    dependencies:
      p-limit: 2.3.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  p-try@2.2.0: {}

  package-json-from-dist@1.0.1: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse-json@5.2.0:
    dependencies:
      '@babel/code-frame': 7.26.2
      error-ex: 1.3.2
      json-parse-even-better-errors: 2.3.1
      lines-and-columns: 1.2.4

  path-exists@4.0.0: {}

  path-is-absolute@1.0.1: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  peek-readable@5.4.2: {}

  pend@1.2.0: {}

  picocolors@1.1.1: {}

  picomatch@2.3.1: {}

  picomatch@4.0.2: {}

  pirates@4.0.7: {}

  piscina@4.9.2:
    optionalDependencies:
      '@napi-rs/nice': 1.0.4

  pkg-dir@4.2.0:
    dependencies:
      find-up: 4.1.0

  possible-typed-array-names@1.1.0: {}

  prelude-ls@1.2.1: {}

  prettier-linter-helpers@1.0.0:
    dependencies:
      fast-diff: 1.3.0

  prettier@3.5.3: {}

  pretty-format@29.7.0:
    dependencies:
      '@jest/schemas': 29.6.3
      ansi-styles: 5.2.0
      react-is: 18.3.1

  process-nextick-args@2.0.1: {}

  process@0.11.10: {}

  prompts@2.4.2:
    dependencies:
      kleur: 3.0.3
      sisteransi: 1.0.5

  proper-lockfile@4.1.2:
    dependencies:
      graceful-fs: 4.2.11
      retry: 0.12.0
      signal-exit: 3.0.7

  properties-reader@2.3.0:
    dependencies:
      mkdirp: 1.0.4

  protobufjs@7.4.0:
    dependencies:
      '@protobufjs/aspromise': 1.1.2
      '@protobufjs/base64': 1.1.2
      '@protobufjs/codegen': 2.0.4
      '@protobufjs/eventemitter': 1.1.0
      '@protobufjs/fetch': 1.1.0
      '@protobufjs/float': 1.0.2
      '@protobufjs/inquire': 1.1.0
      '@protobufjs/path': 1.1.2
      '@protobufjs/pool': 1.1.0
      '@protobufjs/utf8': 1.1.0
      '@types/node': 22.14.1
      long: 5.3.1

  proxy-from-env@1.1.0: {}

  pump@3.0.2:
    dependencies:
      end-of-stream: 1.4.4
      once: 1.4.0

  punycode@2.3.1: {}

  pure-rand@6.1.0: {}

  queue-microtask@1.2.3: {}

  quick-lru@5.1.1: {}

  react-is@18.3.1: {}

  readable-stream@2.3.8:
    dependencies:
      core-util-is: 1.0.3
      inherits: 2.0.4
      isarray: 1.0.0
      process-nextick-args: 2.0.1
      safe-buffer: 5.1.2
      string_decoder: 1.1.1
      util-deprecate: 1.0.2

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readable-stream@4.7.0:
    dependencies:
      abort-controller: 3.0.0
      buffer: 6.0.3
      events: 3.3.0
      process: 0.11.10
      string_decoder: 1.3.0

  readdir-glob@1.1.3:
    dependencies:
      minimatch: 5.1.6

  reflect.getprototypeof@1.0.10:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      which-builtin-type: 1.2.1

  regexp.prototype.flags@1.5.4:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-errors: 1.3.0
      get-proto: 1.0.1
      gopd: 1.2.0
      set-function-name: 2.0.2

  require-directory@2.1.1: {}

  resolve-alpn@1.2.1: {}

  resolve-cwd@3.0.0:
    dependencies:
      resolve-from: 5.0.0

  resolve-from@4.0.0: {}

  resolve-from@5.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  resolve.exports@2.0.3: {}

  resolve@1.22.10:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  responselike@3.0.0:
    dependencies:
      lowercase-keys: 3.0.0

  retry@0.12.0: {}

  reusify@1.1.0: {}

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  safe-array-concat@1.1.3:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      get-intrinsic: 1.3.0
      has-symbols: 1.1.0
      isarray: 2.0.5

  safe-buffer@5.1.2: {}

  safe-buffer@5.2.1: {}

  safe-push-apply@1.0.0:
    dependencies:
      es-errors: 1.3.0
      isarray: 2.0.5

  safe-regex-test@1.1.0:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-regex: 1.2.1

  safer-buffer@2.1.2: {}

  seek-bzip@2.0.0:
    dependencies:
      commander: 6.2.1

  semver-regex@4.0.5: {}

  semver-truncate@3.0.0:
    dependencies:
      semver: 7.7.1

  semver@6.3.1: {}

  semver@7.7.1: {}

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.3.0
      gopd: 1.2.0
      has-property-descriptors: 1.0.2

  set-function-name@2.0.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      functions-have-names: 1.2.3
      has-property-descriptors: 1.0.2

  set-proto@1.0.0:
    dependencies:
      dunder-proto: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  side-channel-list@1.0.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4

  side-channel-map@1.0.1:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4

  side-channel-weakmap@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4
      side-channel-map: 1.0.1

  side-channel@1.1.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4
      side-channel-list: 1.0.0
      side-channel-map: 1.0.1
      side-channel-weakmap: 1.0.2

  signal-exit@3.0.7: {}

  signal-exit@4.1.0: {}

  sisteransi@1.0.5: {}

  slash@3.0.0: {}

  sort-keys-length@1.0.1:
    dependencies:
      sort-keys: 1.1.2

  sort-keys@1.1.2:
    dependencies:
      is-plain-obj: 1.1.0

  source-map-support@0.5.13:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map@0.6.1: {}

  source-map@0.7.4: {}

  split-ca@1.0.1: {}

  sprintf-js@1.0.3: {}

  ssh-remote-port-forward@1.0.4:
    dependencies:
      '@types/ssh2': 0.5.52
      ssh2: 1.16.0

  ssh2@1.16.0:
    dependencies:
      asn1: 0.2.6
      bcrypt-pbkdf: 1.0.2
    optionalDependencies:
      cpu-features: 0.0.10
      nan: 2.22.2

  stable-hash@0.0.4: {}

  stack-utils@2.0.6:
    dependencies:
      escape-string-regexp: 2.0.0

  streamx@2.22.0:
    dependencies:
      fast-fifo: 1.3.2
      text-decoder: 1.2.3
    optionalDependencies:
      bare-events: 2.5.4

  string-length@4.0.2:
    dependencies:
      char-regex: 1.0.2
      strip-ansi: 6.0.1

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string.prototype.trim@1.2.10:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-data-property: 1.1.4
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-object-atoms: 1.1.1
      has-property-descriptors: 1.0.2

  string.prototype.trimend@1.0.9:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  string.prototype.trimstart@1.0.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  string_decoder@1.1.1:
    dependencies:
      safe-buffer: 5.1.2

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-bom@3.0.0: {}

  strip-bom@4.0.0: {}

  strip-dirs@3.0.0:
    dependencies:
      inspect-with-kind: 1.0.5
      is-plain-obj: 1.1.0

  strip-final-newline@2.0.0: {}

  strip-json-comments@3.1.1: {}

  strtok3@9.1.1:
    dependencies:
      '@tokenizer/token': 0.3.0
      peek-readable: 5.4.2

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-color@8.1.1:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  synckit@0.11.4:
    dependencies:
      '@pkgr/core': 0.2.4
      tslib: 2.8.1

  tapable@2.2.1: {}

  tar-fs@3.0.9:
    dependencies:
      pump: 3.0.2
      tar-stream: 3.1.7
    optionalDependencies:
      bare-fs: 4.1.2
      bare-path: 3.0.0
    transitivePeerDependencies:
      - bare-buffer

  tar-stream@3.1.7:
    dependencies:
      b4a: 1.6.7
      fast-fifo: 1.3.2
      streamx: 2.22.0

  test-exclude@6.0.0:
    dependencies:
      '@istanbuljs/schema': 0.1.3
      glob: 7.2.3
      minimatch: 3.1.2

  testcontainers@11.0.3:
    dependencies:
      '@balena/dockerignore': 1.0.2
      '@types/dockerode': 3.3.40
      archiver: 7.0.1
      async-lock: 1.4.1
      byline: 5.0.0
      debug: 4.4.1
      docker-compose: 1.2.0
      dockerode: 4.0.7
      get-port: 7.1.0
      proper-lockfile: 4.1.2
      properties-reader: 2.3.0
      ssh-remote-port-forward: 1.0.4
      tar-fs: 3.0.9
      tmp: 0.2.3
      undici: 7.10.0
    transitivePeerDependencies:
      - bare-buffer
      - supports-color

  text-decoder@1.2.3:
    dependencies:
      b4a: 1.6.7

  through@2.3.8: {}

  tmp@0.2.3: {}

  tmpl@1.0.5: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  token-types@6.0.3:
    dependencies:
      '@tokenizer/token': 0.3.0
      ieee754: 1.2.1

  ts-api-utils@2.1.0(typescript@5.7.3):
    dependencies:
      typescript: 5.7.3

  tsconfig-paths@3.15.0:
    dependencies:
      '@types/json5': 0.0.29
      json5: 1.0.2
      minimist: 1.2.8
      strip-bom: 3.0.0

  tsdoc-markdown@1.1.0(typescript@5.7.3):
    dependencies:
      typescript: 5.7.3

  tslib@2.7.0: {}

  tslib@2.8.1: {}

  tweetnacl@0.14.5: {}

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-detect@4.0.8: {}

  type-fest@0.21.3: {}

  typed-array-buffer@1.0.3:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-typed-array: 1.1.15

  typed-array-byte-length@1.0.3:
    dependencies:
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      has-proto: 1.2.0
      is-typed-array: 1.1.15

  typed-array-byte-offset@1.0.4:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      has-proto: 1.2.0
      is-typed-array: 1.1.15
      reflect.getprototypeof: 1.0.10

  typed-array-length@1.0.7:
    dependencies:
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      is-typed-array: 1.1.15
      possible-typed-array-names: 1.1.0
      reflect.getprototypeof: 1.0.10

  typescript@5.7.3: {}

  uint8array-extras@1.4.0: {}

  unbox-primitive@1.1.0:
    dependencies:
      call-bound: 1.0.4
      has-bigints: 1.1.0
      has-symbols: 1.1.0
      which-boxed-primitive: 1.1.1

  unbzip2-stream@1.4.3:
    dependencies:
      buffer: 5.7.1
      through: 2.3.8

  undici-types@5.26.5: {}

  undici-types@6.19.8: {}

  undici-types@6.21.0: {}

  undici@7.10.0: {}

  update-browserslist-db@1.1.3(browserslist@4.24.4):
    dependencies:
      browserslist: 4.24.4
      escalade: 3.2.0
      picocolors: 1.1.1

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  util-deprecate@1.0.2: {}

  util@0.12.5:
    dependencies:
      inherits: 2.0.4
      is-arguments: 1.2.0
      is-generator-function: 1.1.0
      is-typed-array: 1.1.15
      which-typed-array: 1.1.19

  uuid@10.0.0: {}

  v8-to-istanbul@9.3.0:
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      '@types/istanbul-lib-coverage': 2.0.6
      convert-source-map: 2.0.0

  walker@1.0.8:
    dependencies:
      makeerror: 1.0.12

  which-boxed-primitive@1.1.1:
    dependencies:
      is-bigint: 1.1.0
      is-boolean-object: 1.2.2
      is-number-object: 1.1.1
      is-string: 1.1.1
      is-symbol: 1.1.1

  which-builtin-type@1.2.1:
    dependencies:
      call-bound: 1.0.4
      function.prototype.name: 1.1.8
      has-tostringtag: 1.0.2
      is-async-function: 2.1.1
      is-date-object: 1.1.0
      is-finalizationregistry: 1.1.1
      is-generator-function: 1.1.0
      is-regex: 1.2.1
      is-weakref: 1.1.1
      isarray: 2.0.5
      which-boxed-primitive: 1.1.1
      which-collection: 1.0.2
      which-typed-array: 1.1.19

  which-collection@1.0.2:
    dependencies:
      is-map: 2.0.3
      is-set: 2.0.3
      is-weakmap: 2.0.2
      is-weakset: 2.0.4

  which-typed-array@1.1.19:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.4
      for-each: 0.3.5
      get-proto: 1.0.1
      gopd: 1.2.0
      has-tostringtag: 1.0.2

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  word-wrap@1.2.5: {}

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  write-file-atomic@4.0.2:
    dependencies:
      imurmurhash: 0.1.4
      signal-exit: 3.0.7

  ws@8.17.1: {}

  y18n@5.0.8: {}

  yallist@3.1.1: {}

  yaml@2.7.1: {}

  yargs-parser@21.1.1: {}

  yargs@17.7.2:
    dependencies:
      cliui: 8.0.1
      escalade: 3.2.0
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      string-width: 4.2.3
      y18n: 5.0.8
      yargs-parser: 21.1.1

  yauzl@3.2.0:
    dependencies:
      buffer-crc32: 0.2.13
      pend: 1.2.0

  yocto-queue@0.1.0: {}

  zip-stream@6.0.1:
    dependencies:
      archiver-utils: 5.0.2
      compress-commons: 6.0.2
      readable-stream: 4.7.0



================================================
FILE: remappings.txt
================================================
@1inch/solidity-utils/=contracts/lib/solidity-utils/
@openzeppelin/=contracts/lib/openzeppelin-contracts.git/



================================================
FILE: tsconfig.json
================================================
{
    "extends": "@1inch/tsconfig",
    "compilerOptions": {
        "target": "ES2021",
        "lib": ["ES2021"],
        "module": "ESNext",
        "moduleResolution": "Node",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "resolveJsonModule": true,
        "baseUrl": "./src"
    },
    "include": ["./src/**/*.ts", "./src/**/*.json"]
}



================================================
FILE: tsconfig.types.json
================================================
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "outDir": "./dist/types",
        "declaration": true,
        "emitDeclarationOnly": true,
        "composite": true
    },
    "exclude": [
        "node_modules",
        "test",
        "dist",
        "**/*spec.ts"
    ]
}



================================================
FILE: .prettierignore
================================================
.github
CHANGELOG.md
coverage



================================================
FILE: .prettierrc
================================================
{
    "trailingComma": "none",
    "tabWidth": 4,
    "bracketSpacing": false,
    "singleQuote": true,
    "semi": false
}



================================================
FILE: contracts/src/TestFeeTaker.sol
================================================
pragma solidity ^0.8.23;

import "../lib/limit-order-protocol/contracts/extensions/FeeTaker.sol";

contract TestFeeTaker is FeeTaker
{
    // solhint-disable-next-line no-empty-blocks
    constructor(address limitOrderProtocol, IERC20 accessToken, address weth, address owner) FeeTaker(limitOrderProtocol, accessToken, weth, owner) {}
}



================================================
FILE: contracts/src/TestLimitOrderProtocol.sol
================================================
pragma solidity ^0.8.23;

import "../lib/limit-order-protocol/contracts/LimitOrderProtocol.sol";

contract TestLimitOrderProtocol is EIP712("1inch Aggregation Router", "6"), Ownable, OrderMixin
{
    // solhint-disable-next-line no-empty-blocks
    constructor(IWETH _weth) OrderMixin(_weth) Ownable(msg.sender) {}
}



================================================
FILE: eslint/require-extension.mjs
================================================
/* eslint-disable @typescript-eslint/explicit-function-return-type */
import {existsSync, lstatSync} from 'fs'
import {dirname, resolve} from 'path'

const requireExtensions = {
    configs: {},
    rules: {},
    processors: {}
}

Object.assign(requireExtensions.configs, {
    recommended: {
        plugins: {
            'require-extensions': requireExtensions
        },
        rules: {
            'require-extensions/require-extensions': 'error',
            'require-extensions/require-index': 'error'
        }
    }
})

Object.assign(requireExtensions.rules, {
    'require-extensions': rule((context, node, path) => {
        if (!existsSync(path)) {
            let fix

            if (!node.source.value.includes('?')) {
                fix = (fixer) => {
                    return fixer.replaceText(
                        node.source,
                        `'${node.source.value.replace(/(\.|\.j)$/, '')}.js'`
                    )
                }
            }

            context.report({
                node,
                message: 'Relative imports and exports must end with .js',
                fix
            })
        }
    }),
    'require-index': rule((context, node, path) => {
        if (existsSync(path) && lstatSync(path).isDirectory()) {
            context.report({
                node,
                message: 'Directory paths must end with index.js',
                fix(fixer) {
                    return fixer.replaceText(
                        node.source,
                        `'${node.source.value}/index.js'`
                    )
                }
            })
        }
    })
})

function rule(check) {
    return {
        meta: {
            fixable: true
        },
        create(context) {
            function rule(node) {
                const source = node.source

                if (!source) return

                const value = source.value.replace(/\?.*$/, '')

                if (!value || !value.startsWith('.') || value.endsWith('.js'))
                    return

                check(
                    context,
                    node,
                    resolve(dirname(context.getFilename()), value)
                )
            }

            return {
                DeclareExportDeclaration: rule,
                DeclareExportAllDeclaration: rule,
                ExportAllDeclaration: rule,
                ExportNamedDeclaration: rule,
                ImportDeclaration: rule
            }
        }
    }
}

export default requireExtensions



================================================
FILE: src/address.ts
================================================
import {isAddress} from 'ethers'
import {add0x} from '@1inch/byte-utils'
import assert from 'assert'

export class Address {
    static NATIVE_CURRENCY = new Address(
        '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'
    )

    static ZERO_ADDRESS = new Address(
        '0x0000000000000000000000000000000000000000'
    )

    private readonly val: string

    constructor(val: string) {
        assert(isAddress(val), `Invalid address ${val}`)

        this.val = val.toLowerCase()
    }

    static fromBigInt(val: bigint): Address {
        return new Address(add0x(val.toString(16).padStart(40, '0')))
    }

    static fromFirstBytes(bytes: string): Address {
        return new Address(bytes.slice(0, 42))
    }

    public toString(): string {
        return this.val
    }

    public equal(other: Address): boolean {
        return this.val === other.val
    }

    public isNative(): boolean {
        return this.equal(Address.NATIVE_CURRENCY)
    }

    public isZero(): boolean {
        return this.equal(Address.ZERO_ADDRESS)
    }

    public lastHalf(): string {
        return add0x(this.val.slice(-20))
    }
}



================================================
FILE: src/axios-ext.ts
================================================
export * from './api/connector/http/axios-provider.connector.js'



================================================
FILE: src/bps.ts
================================================
import assert from 'assert'

/**
 * Basis point in range [0, 100]%
 *
 * 1bps = 0.01%
 */
export class Bps {
    static ZERO = new Bps(0n)

    constructor(public readonly value: bigint) {
        assert(value >= 0 && value <= 10000, `invalid bps ${value}`)
    }

    /**
     * Create BPS from percent value.
     * If `value` has precision more than 1bps (with accounting to `base`), it will be rounded down
     * @param val
     * @param base what represents 100%
     */
    public static fromPercent(val: number, base = 1n): Bps {
        return new Bps(BigInt(100 * val) / base)
    }

    /**
     * Create BPS from fraction value.
     * If `value` has precision more than 1bps (with accounting to `base`), it will be rounded down
     * @param val
     * @param base what represents 100%
     */
    public static fromFraction(val: number, base = 1n): Bps {
        return new Bps(BigInt(10000 * val) / base)
    }

    public equal(other: Bps): boolean {
        return this.value === other.value
    }

    public isZero(): boolean {
        return this.value === 0n
    }

    /**
     * @param base what represents 100%
     */
    public toPercent(base = 1n): number {
        return Number(this.value * base) / 100
    }

    /**
     * @param base what represents 100%
     */
    public toFraction(base = 1n): number {
        return Number(this.value * base) / 10000
    }

    public toString(): string {
        return this.value.toString()
    }
}



================================================
FILE: src/constants.ts
================================================
export const ZX = '0x'

const ONE_INCH_LIMIT_ORDER_V4 = '0x111111125421ca6dc452d289314280a0f8842a65'
const ONE_INCH_LIMIT_ORDER_V4_ZK_SYNC =
    '0x6fd4383cb451173d5f9304f041c7bcbf27d561ff'

export const getLimitOrderContract = (chainId: number): string => {
    if (chainId === 324 /*ZkSync*/) {
        return ONE_INCH_LIMIT_ORDER_V4_ZK_SYNC
    }

    return ONE_INCH_LIMIT_ORDER_V4
}



================================================
FILE: src/index.ts
================================================
export * from './limit-order-contract/index.js'
export * from './limit-order/index.js'
export * from './rfq-order/index.js'
export * from './address.js'
export * from './bps.js'
export * from './constants.js'
export * from './utils/rand-bigint.js'
export * from './utils/mul-div.js'
export * from './api/index.js'
export * from './sdk/index.js'



================================================
FILE: src/validations.ts
================================================
export function isInt(val: number): boolean {
    return Math.floor(val) === val
}



================================================
FILE: src/abi/AggregationRouterV6.abi.json
================================================
[
    {
        "inputs": [
            {
                "internalType": "contract IWETH",
                "name": "_weth",
                "type": "address"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "AdvanceEpochFailed",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "ArbitraryStaticCallFailed",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "BadSignature",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "BitInvalidatedOrder",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "ETHTransferFailed",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "EpochManagerAndBitInvalidatorsAreIncompatible",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "EthDepositRejected",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "InvalidMsgValue",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "InvalidPermit2Transfer",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "InvalidShortString",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "InvalidatedOrder",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "MakingAmountTooLow",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "MismatchArraysLengths",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "OrderExpired",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "OrderIsNotSuitableForMassInvalidation",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "PartialFillNotAllowed",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "Permit2TransferAmountTooHigh",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "PredicateIsNotTrue",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "PrivateOrder",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "ReentrancyDetected",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "RemainingInvalidatedOrder",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "SafeTransferFailed",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "SafeTransferFromFailed",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "bool",
                "name": "success",
                "type": "bool"
            },
            {
                "internalType": "bytes",
                "name": "res",
                "type": "bytes"
            }
        ],
        "name": "SimulationResults",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "str",
                "type": "string"
            }
        ],
        "name": "StringTooLong",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "SwapWithZeroAmount",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "TakingAmountExceeded",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "TakingAmountTooHigh",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "TransferFromMakerToTakerFailed",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "TransferFromTakerToMakerFailed",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "WrongSeriesNonce",
        "type": "error"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "maker",
                "type": "address"
            },
            {
                "indexed": false,
                "internalType": "uint256",
                "name": "slotIndex",
                "type": "uint256"
            },
            {
                "indexed": false,
                "internalType": "uint256",
                "name": "slotValue",
                "type": "uint256"
            }
        ],
        "name": "BitInvalidatorUpdated",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [],
        "name": "EIP712DomainChanged",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "maker",
                "type": "address"
            },
            {
                "indexed": false,
                "internalType": "uint256",
                "name": "series",
                "type": "uint256"
            },
            {
                "indexed": false,
                "internalType": "uint256",
                "name": "newEpoch",
                "type": "uint256"
            }
        ],
        "name": "EpochIncreased",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32"
            }
        ],
        "name": "OrderCancelled",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32"
            },
            {
                "indexed": false,
                "internalType": "uint256",
                "name": "remainingAmount",
                "type": "uint256"
            }
        ],
        "name": "OrderFilled",
        "type": "event"
    },
    {
        "inputs": [],
        "name": "DOMAIN_SEPARATOR",
        "outputs": [
            {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint96",
                "name": "series",
                "type": "uint96"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "advanceEpoch",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "offsets",
                "type": "uint256"
            },
            {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "and",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "target",
                "type": "address"
            },
            {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "arbitraryStaticCall",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "maker",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "slot",
                "type": "uint256"
            }
        ],
        "name": "bitInvalidatorForOrder",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "MakerTraits",
                "name": "makerTraits",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "additionalMask",
                "type": "uint256"
            }
        ],
        "name": "bitsInvalidateForOrder",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "MakerTraits",
                "name": "makerTraits",
                "type": "uint256"
            },
            {
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32"
            }
        ],
        "name": "cancelOrder",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "MakerTraits[]",
                "name": "makerTraits",
                "type": "uint256[]"
            },
            {
                "internalType": "bytes32[]",
                "name": "orderHashes",
                "type": "bytes32[]"
            }
        ],
        "name": "cancelOrders",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes",
                "name": "predicate",
                "type": "bytes"
            }
        ],
        "name": "checkPredicate",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "eip712Domain",
        "outputs": [
            {
                "internalType": "bytes1",
                "name": "fields",
                "type": "bytes1"
            },
            {
                "internalType": "string",
                "name": "name",
                "type": "string"
            },
            {
                "internalType": "string",
                "name": "version",
                "type": "string"
            },
            {
                "internalType": "uint256",
                "name": "chainId",
                "type": "uint256"
            },
            {
                "internalType": "address",
                "name": "verifyingContract",
                "type": "address"
            },
            {
                "internalType": "bytes32",
                "name": "salt",
                "type": "bytes32"
            },
            {
                "internalType": "uint256[]",
                "name": "extensions",
                "type": "uint256[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "maker",
                "type": "address"
            },
            {
                "internalType": "uint96",
                "name": "series",
                "type": "uint96"
            }
        ],
        "name": "epoch",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "maker",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "series",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "makerEpoch",
                "type": "uint256"
            }
        ],
        "name": "epochEquals",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
            },
            {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "eq",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "salt",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "maker",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "receiver",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "makerAsset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "takerAsset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "makingAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takingAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "MakerTraits",
                        "name": "makerTraits",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct IOrderMixin.Order",
                "name": "order",
                "type": "tuple"
            },
            {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            },
            {
                "internalType": "TakerTraits",
                "name": "takerTraits",
                "type": "uint256"
            }
        ],
        "name": "fillContractOrder",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            },
            {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "salt",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "maker",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "receiver",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "makerAsset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "takerAsset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "makingAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takingAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "MakerTraits",
                        "name": "makerTraits",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct IOrderMixin.Order",
                "name": "order",
                "type": "tuple"
            },
            {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            },
            {
                "internalType": "TakerTraits",
                "name": "takerTraits",
                "type": "uint256"
            },
            {
                "internalType": "bytes",
                "name": "args",
                "type": "bytes"
            }
        ],
        "name": "fillContractOrderArgs",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            },
            {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "salt",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "maker",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "receiver",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "makerAsset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "takerAsset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "makingAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takingAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "MakerTraits",
                        "name": "makerTraits",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct IOrderMixin.Order",
                "name": "order",
                "type": "tuple"
            },
            {
                "internalType": "bytes32",
                "name": "r",
                "type": "bytes32"
            },
            {
                "internalType": "bytes32",
                "name": "vs",
                "type": "bytes32"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            },
            {
                "internalType": "TakerTraits",
                "name": "takerTraits",
                "type": "uint256"
            }
        ],
        "name": "fillOrder",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            },
            {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
            }
        ],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "salt",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "maker",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "receiver",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "makerAsset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "takerAsset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "makingAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takingAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "MakerTraits",
                        "name": "makerTraits",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct IOrderMixin.Order",
                "name": "order",
                "type": "tuple"
            },
            {
                "internalType": "bytes32",
                "name": "r",
                "type": "bytes32"
            },
            {
                "internalType": "bytes32",
                "name": "vs",
                "type": "bytes32"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            },
            {
                "internalType": "TakerTraits",
                "name": "takerTraits",
                "type": "uint256"
            },
            {
                "internalType": "bytes",
                "name": "args",
                "type": "bytes"
            }
        ],
        "name": "fillOrderArgs",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            },
            {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
            }
        ],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
            },
            {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "gt",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "salt",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "maker",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "receiver",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "makerAsset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "Address",
                        "name": "takerAsset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "makingAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takingAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "MakerTraits",
                        "name": "makerTraits",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct IOrderMixin.Order",
                "name": "order",
                "type": "tuple"
            }
        ],
        "name": "hashOrder",
        "outputs": [
            {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint96",
                "name": "series",
                "type": "uint96"
            }
        ],
        "name": "increaseEpoch",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
            },
            {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "lt",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "not",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "offsets",
                "type": "uint256"
            },
            {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "or",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes",
                "name": "permit",
                "type": "bytes"
            },
            {
                "internalType": "bytes",
                "name": "action",
                "type": "bytes"
            }
        ],
        "name": "permitAndCall",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "maker",
                "type": "address"
            },
            {
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32"
            }
        ],
        "name": "rawRemainingInvalidatorForOrder",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "maker",
                "type": "address"
            },
            {
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32"
            }
        ],
        "name": "remainingInvalidatorForOrder",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "target",
                "type": "address"
            },
            {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "simulate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "stateMutability": "payable",
        "type": "receive"
    }
]



================================================
FILE: src/api/api.ts
================================================
import {
    ApiConfig,
    FeeInfoDTO,
    LimitOrderApiItem,
    SortKey,
    StatusKey
} from './types.js'
import {DEV_PORTAL_LIMIT_ORDER_BASE_URL} from './constants.js'
import {Headers, HttpProviderConnector} from './connector/index.js'
import {Pager} from './pager.js'
import {LimitOrder} from '../limit-order/index.js'
import {Address} from '../address.js'

export class Api {
    private readonly baseUrl: string

    private readonly networkId: number

    private readonly httpClient: HttpProviderConnector

    private readonly authHeader: string

    constructor(config: ApiConfig) {
        this.baseUrl = config.baseUrl || DEV_PORTAL_LIMIT_ORDER_BASE_URL
        this.networkId = config.networkId
        this.httpClient = config.httpConnector
        this.authHeader = `Bearer ${config.authKey}`
    }

    /**
     * Submit order to orderbook
     * @param order
     * @param signature
     */
    public async submitOrder(
        order: LimitOrder,
        signature: string
    ): Promise<void> {
        await this.httpClient.post(
            this.url('/'),
            {
                orderHash: order.getOrderHash(this.networkId),
                signature,
                data: {
                    ...order.build(),
                    extension: order.extension.encode()
                }
            },
            this.headers()
        )
    }

    /**
     * Fetch orders created by `maker`
     */
    public async getOrdersByMaker(
        maker: Address,
        filters?: {
            pager?: Pager
            /**
             * 1 - Valid orders,
             * 2 - Temporarily invalid orders,
             * 3 - Invalid orders.
             */
            statuses?: StatusKey[]
            takerAsset?: Address
            makerAsset?: Address
        },
        sort?: SortKey
    ): Promise<LimitOrderApiItem[]> {
        const params = {
            limit: filters?.pager?.limit.toString(),
            page: filters?.pager?.page.toString(),
            statuses: filters?.statuses?.join(','),
            makerAsset: filters?.makerAsset?.toString(),
            takerAsset: filters?.takerAsset?.toString(),
            sortBy: sort
        } as Record<string, string>

        return this.httpClient.get(
            this.url(`/address/${maker}`, params),
            this.headers()
        )
    }

    /**
     * Get limit order by hash
     *
     * Error will be thrown if order is not found
     */
    public async getOrderByHash(hash: string): Promise<LimitOrderApiItem> {
        return this.httpClient.get(this.url(`/order/${hash}`), this.headers())
    }

    /**
     * Fetch current fee params, only orders with matched params can be submitted to 1inch relayer
     */
    public async getFeeParams(params: {
        makerAsset: Address
        takerAsset: Address
        makerAmount: bigint
        takerAmount: bigint
    }): Promise<FeeInfoDTO> {
        return this.httpClient.get(
            this.url(`/fee-info`, {
                makerAsset: params.makerAsset.toString(),
                takerAsset: params.takerAsset.toString(),
                makerAmount: params.makerAmount.toString(),
                takerAmount: params.takerAmount.toString()
            }),
            this.headers()
        )
    }

    private url(path: string, params?: Record<string, string>): string {
        const query = params
            ? `?${new URLSearchParams(
                  Object.entries(params).filter(([_, val]) => val !== undefined)
              )}`
            : ''

        return `${this.baseUrl}/${this.networkId}${path}${query}`
    }

    private headers(additional?: Headers): Headers {
        return {Authorization: this.authHeader, ...additional}
    }
}



================================================
FILE: src/api/constants.ts
================================================
export const DEV_PORTAL_LIMIT_ORDER_BASE_URL =
    'https://api.1inch.dev/orderbook/v4.0'



================================================
FILE: src/api/errors.ts
================================================
export class AuthError extends Error {
    constructor() {
        super('Auth error, please use token from https://portal.1inch.dev/')
    }
}



================================================
FILE: src/api/index.ts
================================================
export * from './api.js'
export * from './errors.js'
export * from './pager.js'
export * from './types.js'
export * from './connector/index.js'



================================================
FILE: src/api/pager.ts
================================================
import assert from 'assert'
import {isInt} from '../validations.js'

export class Pager {
    public readonly limit: number

    public readonly page: number

    constructor({limit, page} = {page: 1, limit: 100}) {
        assert(isInt(limit) && limit > 0, 'Invalid limit')
        assert(isInt(page) && page > 0, 'Invalid page')

        this.limit = limit
        this.page = page
    }
}



================================================
FILE: src/api/types.ts
================================================
import {HttpProviderConnector} from './connector/index.js'
import {LimitOrderV4Struct} from '../limit-order/index.js'

export type ApiConfig = {
    authKey: string
    httpConnector: HttpProviderConnector
    baseUrl?: string
    networkId: number
}

export type LimitOrderApiItem = {
    signature: string
    orderHash: string
    createDateTime: string
    remainingMakerAmount: string
    makerBalance: string
    makerAllowance: string
    data: LimitOrderV4Struct & {extension: string}
    makerRate: string
    takerRate: string
    isMakerContract: boolean
    orderInvalidReason: null | string[]
}

export type FeeInfoDTO = {
    whitelist: Record</*Whitelist*/ string, /*Promotee*/ string>
    feeBps: number
    whitelistDiscountPercent: number
    protocolFeeReceiver: string
    extensionAddress: string
}

/**
 * 1 - Valid orders,
 * 2 - Temporarily invalid orders,
 * 3 - Invalid orders.
 */
export type StatusKey = 1 | 2 | 3
export type SortKey =
    | 'createDateTime'
    | 'takerRate'
    | 'makerRate'
    | 'makerAmount'
    | 'takerAmount'



================================================
FILE: src/api/connector/index.ts
================================================
export * from './http/index.js'



================================================
FILE: src/api/connector/http/axios-provider.connector.spec.ts
================================================
import axios from 'axios'
import {AxiosProviderConnector} from './axios-provider.connector.js'

describe('Axios Http provider connector', () => {
    let httpConnector: AxiosProviderConnector

    beforeEach(() => {
        httpConnector = new AxiosProviderConnector()
    })

    it('should make get() request', async () => {
        const url = 'https://123.com/test/?val=1'
        const returnedValue = {
            data: {a: 1}
        }
        jest.spyOn(axios, 'get').mockImplementationOnce(() =>
            Promise.resolve(returnedValue)
        )
        const res = await httpConnector.get(url, {
            Authorization: 'Bearer test-key'
        })
        expect(res).toStrictEqual(returnedValue.data)
        expect(axios.get).toHaveBeenCalledWith(url, {
            headers: {Authorization: 'Bearer test-key'}
        })
    })

    it('should make post() request', async () => {
        const url = 'https://123.com/test/?val=1'
        const body = {info: 123}
        const returnedValue = {
            data: {a: 1}
        }
        jest.spyOn(axios, 'post').mockImplementationOnce(() =>
            Promise.resolve(returnedValue)
        )
        const res = await httpConnector.post(url, body, {
            Authorization: 'Bearer test-key'
        })
        expect(res).toStrictEqual(returnedValue.data)
        expect(axios.post).toHaveBeenCalledWith(url, body, {
            headers: {Authorization: 'Bearer test-key'}
        })
    })
})



================================================
FILE: src/api/connector/http/axios-provider.connector.ts
================================================
import axios, {isAxiosError} from 'axios'
import {Headers, HttpProviderConnector} from './http-provider.connector.js'
import {AuthError} from '../../errors.js'

export class AxiosProviderConnector implements HttpProviderConnector {
    async get<T>(url: string, headers: Headers): Promise<T> {
        try {
            const res = await axios.get<T>(url, {
                headers
            })

            return res.data
        } catch (error) {
            if (isAxiosError(error) && error.response?.status === 401) {
                throw new AuthError()
            }

            throw error
        }
    }

    async post<T>(url: string, data: unknown, headers: Headers): Promise<T> {
        try {
            const res = await axios.post<T>(url, data, {
                headers
            })

            return res.data
        } catch (error) {
            if (isAxiosError(error) && error.response?.status === 401) {
                throw new AuthError()
            }

            throw error
        }
    }
}



================================================
FILE: src/api/connector/http/fetch-provider.connector.ts
================================================
import {Headers, HttpProviderConnector} from './http-provider.connector.js'
import {AuthError} from '../../errors.js'

export class FetchProviderConnector implements HttpProviderConnector {
    async get<T>(url: string, headers: Headers): Promise<T> {
        const res = await fetch(url, {headers, method: 'GET'})

        if (res.status === 401) {
            throw new AuthError()
        }

        if (res.ok) {
            return res.json() as Promise<T>
        }

        throw new Error(
            `Request failed with status ${res.status}: ${await res.text()}`
        )
    }

    async post<T>(url: string, data: unknown, headers: Headers): Promise<T> {
        const res = await fetch(url, {
            headers: {
                ...headers,
                'Content-Type': 'application/json'
            },
            method: 'POST',
            body: JSON.stringify(data)
        })

        if (res.status === 401) {
            throw new AuthError()
        }

        if (res.ok) {
            return res.json() as Promise<T>
        }

        throw new Error(
            `Request failed with status ${res.status}: ${await res.text()}`
        )
    }
}



================================================
FILE: src/api/connector/http/http-provider.connector.ts
================================================
export type Headers = Record<string, string>

export interface HttpProviderConnector {
    get<T>(url: string, headers: Headers): Promise<T>

    post<T>(url: string, data: unknown, headers: Headers): Promise<T>
}



================================================
FILE: src/api/connector/http/index.ts
================================================
export * from './http-provider.connector.js'
export * from './fetch-provider.connector.js'



================================================
FILE: src/limit-order/README.md
================================================
## :toolbox: Functions

- [calcTakingAmount](#gear-calctakingamount)
- [calcMakingAmount](#gear-calcmakingamount)

### :gear: calcTakingAmount

Calculates taker amount by linear proportion

| Function | Type |
| ---------- | ---------- |
| `calcTakingAmount` | `(swapMakerAmount: bigint, orderMakerAmount: bigint, orderTakerAmount: bigint) => bigint` |

### :gear: calcMakingAmount

Calculates maker amount by linear proportion

| Function | Type |
| ---------- | ---------- |
| `calcMakingAmount` | `(swapTakerAmount: bigint, orderMakerAmount: bigint, orderTakerAmount: bigint) => bigint` |


## :factory: MakerTraits

The MakerTraits type is an uint256, and different parts of the number are used to encode different traits.
High bits are used for flags
255 bit `NO_PARTIAL_FILLS_FLAG`          - if set, the order does not allow partial fills
254 bit `ALLOW_MULTIPLE_FILLS_FLAG`      - if set, the order permits multiple fills
253 bit                                  - unused
252 bit `PRE_INTERACTION_CALL_FLAG`      - if set, the order requires pre-interaction call
251 bit `POST_INTERACTION_CALL_FLAG`     - if set, the order requires post-interaction call
250 bit `NEED_CHECK_EPOCH_MANAGER_FLAG`  - if set, the order requires to check the epoch manager
249 bit `HAS_EXTENSION_FLAG`             - if set, the order has extension(s)
248 bit `USE_PERMIT2_FLAG`               - if set, the order uses permit2
247 bit `UNWRAP_WETH_FLAG`               - if set, the order requires to unwrap WETH

Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series
uint80 last 10 bytes of allowed sender address (0 if any)
uint40 expiration timestamp (0 if none)
uint40 nonce or epoch
uint40 series

### Methods

- [default](#gear-default)
- [allowedSender](#gear-allowedsender)
- [isPrivate](#gear-isprivate)
- [withAllowedSender](#gear-withallowedsender)
- [withAnySender](#gear-withanysender)
- [expiration](#gear-expiration)
- [withExpiration](#gear-withexpiration)
- [nonceOrEpoch](#gear-nonceorepoch)
- [withNonce](#gear-withnonce)
- [withEpoch](#gear-withepoch)
- [series](#gear-series)
- [hasExtension](#gear-hasextension)
- [withExtension](#gear-withextension)
- [isPartialFillAllowed](#gear-ispartialfillallowed)
- [disablePartialFills](#gear-disablepartialfills)
- [allowPartialFills](#gear-allowpartialfills)
- [setPartialFills](#gear-setpartialfills)
- [isMultipleFillsAllowed](#gear-ismultiplefillsallowed)
- [allowMultipleFills](#gear-allowmultiplefills)
- [disableMultipleFills](#gear-disablemultiplefills)
- [setMultipleFills](#gear-setmultiplefills)
- [hasPreInteraction](#gear-haspreinteraction)
- [enablePreInteraction](#gear-enablepreinteraction)
- [disablePreInteraction](#gear-disablepreinteraction)
- [hasPostInteraction](#gear-haspostinteraction)
- [enablePostInteraction](#gear-enablepostinteraction)
- [disablePostInteraction](#gear-disablepostinteraction)
- [isEpochManagerEnabled](#gear-isepochmanagerenabled)
- [isPermit2](#gear-ispermit2)
- [enablePermit2](#gear-enablepermit2)
- [disablePermit2](#gear-disablepermit2)
- [isNativeUnwrapEnabled](#gear-isnativeunwrapenabled)
- [enableNativeUnwrap](#gear-enablenativeunwrap)
- [disableNativeUnwrap](#gear-disablenativeunwrap)
- [asBigInt](#gear-asbigint)
- [isBitInvalidatorMode](#gear-isbitinvalidatormode)

#### :gear: default

| Method | Type |
| ---------- | ---------- |
| `default` | `() => MakerTraits` |

#### :gear: allowedSender

Last 10bytes of address

| Method | Type |
| ---------- | ---------- |
| `allowedSender` | `() => string` |

#### :gear: isPrivate

| Method | Type |
| ---------- | ---------- |
| `isPrivate` | `() => boolean` |

#### :gear: withAllowedSender

| Method | Type |
| ---------- | ---------- |
| `withAllowedSender` | `(sender: Address) => this` |

#### :gear: withAnySender

Removes `sender` check on contract

| Method | Type |
| ---------- | ---------- |
| `withAnySender` | `() => this` |

#### :gear: expiration

If null is return than order has no expiration

| Method | Type |
| ---------- | ---------- |
| `expiration` | `() => bigint or null` |

#### :gear: withExpiration

Set order expiration time

| Method | Type |
| ---------- | ---------- |
| `withExpiration` | `(expiration: bigint) => this` |

Parameters:

* `expiration`: expiration timestamp in sec


#### :gear: nonceOrEpoch

Returns epoch in case `isEpochManagerEnabled()` and nonce otherwise

| Method | Type |
| ---------- | ---------- |
| `nonceOrEpoch` | `() => bigint` |

#### :gear: withNonce

Set nonce
Note: nonce and epoch share the same field, so they cant be set together

| Method | Type |
| ---------- | ---------- |
| `withNonce` | `(nonce: bigint) => this` |

Parameters:

* `nonce`: must be less or equal to `uint40::max`


#### :gear: withEpoch

Enable epoch manager check

If set, the contract will check that order epoch equals to epoch on `SeriesEpochManager` contract
Note: epoch manager can be used only when `partialFills` AND `multipleFills` allowed
Note: nonce and epoch share the same field, so they cant be set together

| Method | Type |
| ---------- | ---------- |
| `withEpoch` | `(series: bigint, epoch: bigint) => this` |

Parameters:

* `series`: subgroup for epoch
* `epoch`: unique order id inside series


#### :gear: series

Get current series

| Method | Type |
| ---------- | ---------- |
| `series` | `() => bigint` |

#### :gear: hasExtension

Returns true if order has an extension and false otherwise

| Method | Type |
| ---------- | ---------- |
| `hasExtension` | `() => boolean` |

#### :gear: withExtension

Mark that order has an extension

| Method | Type |
| ---------- | ---------- |
| `withExtension` | `() => this` |

#### :gear: isPartialFillAllowed

Is partial fills allowed for order

| Method | Type |
| ---------- | ---------- |
| `isPartialFillAllowed` | `() => boolean` |

#### :gear: disablePartialFills

Disable partial fills for order

| Method | Type |
| ---------- | ---------- |
| `disablePartialFills` | `() => this` |

#### :gear: allowPartialFills

Allow partial fills for order

| Method | Type |
| ---------- | ---------- |
| `allowPartialFills` | `() => this` |

#### :gear: setPartialFills

Set partial fill flag to passed value

| Method | Type |
| ---------- | ---------- |
| `setPartialFills` | `(val: boolean) => this` |

#### :gear: isMultipleFillsAllowed

Returns true if order allowing more than one fill and false otherwise

| Method | Type |
| ---------- | ---------- |
| `isMultipleFillsAllowed` | `() => boolean` |

#### :gear: allowMultipleFills

Allow many fills for order

| Method | Type |
| ---------- | ---------- |
| `allowMultipleFills` | `() => this` |

#### :gear: disableMultipleFills

Allow at max 1 fill for order

| Method | Type |
| ---------- | ---------- |
| `disableMultipleFills` | `() => this` |

#### :gear: setMultipleFills

If `val` is true, then multiple fills allowed, otherwise disallowed

| Method | Type |
| ---------- | ---------- |
| `setMultipleFills` | `(val: boolean) => this` |

#### :gear: hasPreInteraction

Returns true if maker has pre-interaction and false otherwise

| Method | Type |
| ---------- | ---------- |
| `hasPreInteraction` | `() => boolean` |

#### :gear: enablePreInteraction

Enable maker pre-interaction

| Method | Type |
| ---------- | ---------- |
| `enablePreInteraction` | `() => this` |

#### :gear: disablePreInteraction

Disable maker pre-interaction

| Method | Type |
| ---------- | ---------- |
| `disablePreInteraction` | `() => this` |

#### :gear: hasPostInteraction

Returns true if maker has post-interaction and false otherwise

| Method | Type |
| ---------- | ---------- |
| `hasPostInteraction` | `() => boolean` |

#### :gear: enablePostInteraction

Enable maker post-interaction

| Method | Type |
| ---------- | ---------- |
| `enablePostInteraction` | `() => this` |

#### :gear: disablePostInteraction

Disable maker post-interaction

| Method | Type |
| ---------- | ---------- |
| `disablePostInteraction` | `() => this` |

#### :gear: isEpochManagerEnabled

Returns true if epoch manager enabled

| Method | Type |
| ---------- | ---------- |
| `isEpochManagerEnabled` | `() => boolean` |

#### :gear: isPermit2

Returns true if `permit2` enabled for maker funds transfer

| Method | Type |
| ---------- | ---------- |
| `isPermit2` | `() => boolean` |

#### :gear: enablePermit2

Use `permit2` to transfer maker funds to contract

| Method | Type |
| ---------- | ---------- |
| `enablePermit2` | `() => this` |

#### :gear: disablePermit2

Do not use `permit2` to transfer maker funds to contract

| Method | Type |
| ---------- | ---------- |
| `disablePermit2` | `() => this` |

#### :gear: isNativeUnwrapEnabled

Is WRAPPED token will be unwrapped to NATIVE before sending to maker

| Method | Type |
| ---------- | ---------- |
| `isNativeUnwrapEnabled` | `() => boolean` |

#### :gear: enableNativeUnwrap

Unwrap WRAPPED token to NATIVE before sending it to maker

| Method | Type |
| ---------- | ---------- |
| `enableNativeUnwrap` | `() => this` |

#### :gear: disableNativeUnwrap

Do not unwrap WRAPPED token to NATIVE before sending it to maker

| Method | Type |
| ---------- | ---------- |
| `disableNativeUnwrap` | `() => this` |

#### :gear: asBigInt

| Method | Type |
| ---------- | ---------- |
| `asBigInt` | `() => bigint` |

#### :gear: isBitInvalidatorMode

Returns true if bit invalidator mode is used to invalidate order (cancel/mark as filled)

Bit invalidator is cheaper in terms of gas, but can be used only when partial fills OR multiple fills are disabled

| Method | Type |
| ---------- | ---------- |
| `isBitInvalidatorMode` | `() => boolean` |

## :factory: LimitOrder

### Methods

- [buildSalt](#gear-buildsalt)
- [verifySalt](#gear-verifysalt)
- [fromCalldata](#gear-fromcalldata)
- [fromDataAndExtension](#gear-fromdataandextension)
- [toCalldata](#gear-tocalldata)
- [build](#gear-build)
- [getTypedData](#gear-gettypeddata)
- [getOrderHash](#gear-getorderhash)
- [isPrivate](#gear-isprivate)

#### :gear: buildSalt

Build correct salt for order

If order has extension - it is crucial to build correct salt
otherwise order won't be ever filled

| Method | Type |
| ---------- | ---------- |
| `buildSalt` | `(extension: Extension, baseSalt?: bigint) => bigint` |

#### :gear: verifySalt

| Method | Type |
| ---------- | ---------- |
| `verifySalt` | `(salt: bigint, extension: Extension) => bigint` |

#### :gear: fromCalldata

| Method | Type |
| ---------- | ---------- |
| `fromCalldata` | `(bytes: string) => LimitOrder` |

#### :gear: fromDataAndExtension

| Method | Type |
| ---------- | ---------- |
| `fromDataAndExtension` | `(data: LimitOrderV4Struct, extension: Extension) => LimitOrder` |

#### :gear: toCalldata

| Method | Type |
| ---------- | ---------- |
| `toCalldata` | `() => string` |

#### :gear: build

| Method | Type |
| ---------- | ---------- |
| `build` | `() => LimitOrderV4Struct` |

#### :gear: getTypedData

| Method | Type |
| ---------- | ---------- |
| `getTypedData` | `(chainId: number) => EIP712TypedData` |

#### :gear: getOrderHash

| Method | Type |
| ---------- | ---------- |
| `getOrderHash` | `(chainId: number) => string` |

#### :gear: isPrivate

Returns true if only a specific address can fill order

| Method | Type |
| ---------- | ---------- |
| `isPrivate` | `() => boolean` |

### Properties

- [salt](#gear-salt)
- [maker](#gear-maker)
- [receiver](#gear-receiver)
- [makerAsset](#gear-makerasset)
- [takerAsset](#gear-takerasset)
- [makingAmount](#gear-makingamount)
- [takingAmount](#gear-takingamount)
- [makerTraits](#gear-makertraits)

#### :gear: salt

| Property | Type |
| ---------- | ---------- |
| `salt` | `bigint` |

#### :gear: maker

| Property | Type |
| ---------- | ---------- |
| `maker` | `Address` |

#### :gear: receiver

| Property | Type |
| ---------- | ---------- |
| `receiver` | `Address` |

#### :gear: makerAsset

| Property | Type |
| ---------- | ---------- |
| `makerAsset` | `Address` |

#### :gear: takerAsset

| Property | Type |
| ---------- | ---------- |
| `takerAsset` | `Address` |

#### :gear: makingAmount

| Property | Type |
| ---------- | ---------- |
| `makingAmount` | `bigint` |

#### :gear: takingAmount

| Property | Type |
| ---------- | ---------- |
| `takingAmount` | `bigint` |

#### :gear: makerTraits

| Property | Type |
| ---------- | ---------- |
| `makerTraits` | `MakerTraits` |

## :factory: Interaction

### Methods

- [decode](#gear-decode)
- [encode](#gear-encode)

#### :gear: decode

Create `Interaction` from bytes

| Method | Type |
| ---------- | ---------- |
| `decode` | `(bytes: string) => Interaction` |

Parameters:

* `bytes`: Hex string with 0x. First 20 bytes are target, then data


#### :gear: encode

Hex string with 0x. First 20 bytes are target, then data

| Method | Type |
| ---------- | ---------- |
| `encode` | `() => string` |

## :factory: LimitOrderWithFee

### Methods

- [withRandomNonce](#gear-withrandomnonce)
- [fromDataAndExtension](#gear-fromdataandextension)
- [getTakingAmount](#gear-gettakingamount)
- [getMakingAmount](#gear-getmakingamount)
- [getResolverFee](#gear-getresolverfee)
- [getIntegratorFee](#gear-getintegratorfee)
- [getProtocolFee](#gear-getprotocolfee)

#### :gear: withRandomNonce

Set random nonce to `makerTraits` and creates `LimitOrderWithFee`

| Method | Type |
| ---------- | ---------- |
| `withRandomNonce` | `(orderInfo: Omit<OrderInfoData, "receiver">, feeExtension: FeeTakerExtension, makerTraits?: MakerTraits) => LimitOrderWithFee` |

#### :gear: fromDataAndExtension

| Method | Type |
| ---------- | ---------- |
| `fromDataAndExtension` | `(data: LimitOrderV4Struct, extension: Extension) => LimitOrderWithFee` |

#### :gear: getTakingAmount

Calculates the `takingAmount` required from the taker in exchange for the `makingAmount`

| Method | Type |
| ---------- | ---------- |
| `getTakingAmount` | `(taker: Address, makingAmount?: bigint) => bigint` |

Parameters:

* `makingAmount`: amount to be filled


#### :gear: getMakingAmount

Calculates the `makingAmount` that the taker receives in exchange for the `takingAmount`

| Method | Type |
| ---------- | ---------- |
| `getMakingAmount` | `(taker: Address, takingAmount?: bigint) => bigint` |

Parameters:

* `takingAmount`: amount to be filled


#### :gear: getResolverFee

Fee in `takerAsset` which resolver pays to resolver fee receiver

| Method | Type |
| ---------- | ---------- |
| `getResolverFee` | `(taker: Address, makingAmount?: bigint) => bigint` |

Parameters:

* `taker`: who will fill order
* `makingAmount`: amount wanted to fill


#### :gear: getIntegratorFee

Fee in `takerAsset` which integrator gets to integrator wallet

| Method | Type |
| ---------- | ---------- |
| `getIntegratorFee` | `(taker: Address, makingAmount?: bigint) => bigint` |

Parameters:

* `taker`: who will fill order
* `makingAmount`: amount wanted to fill


#### :gear: getProtocolFee

Fee in `takerAsset` which protocol gets
It equals to `share from integrator fee plus resolver fee`

| Method | Type |
| ---------- | ---------- |
| `getProtocolFee` | `(taker: Address, makingAmount?: bigint) => bigint` |

Parameters:

* `taker`: who will fill order
* `makingAmount`: amount wanted to fill


## :factory: TakerTraits

TakerTraitsLib
This class defines TakerTraits, which are used to encode the taker's preferences for an order in a single uint256.

The TakerTraits are structured as follows:
High bits are used for flags
255 bit `_MAKER_AMOUNT_FLAG`           - If set, the taking amount is calculated based on making amount, otherwise making amount is calculated based on taking amount.
254 bit `_UNWRAP_WETH_FLAG`            - If set, the WETH will be unwrapped into ETH before sending to taker.
253 bit `_SKIP_ORDER_PERMIT_FLAG`      - If set, the order skips maker's permit execution.
252 bit `_USE_PERMIT2_FLAG`            - If set, the order uses the permit2 function for authorization.
251 bit `_ARGS_HAS_TARGET`             - If set, then first 20 bytes of args are treated as receiver address for maker’s funds transfer.
224-247 bits `ARGS_EXTENSION_LENGTH`   - The length of the extension calldata in the args.
200-223 bits `ARGS_INTERACTION_LENGTH` - The length of the interaction calldata in the args.
0-184 bits                             - The threshold amount (the maximum amount a taker agrees to give in exchange for a making amount).

### Methods

- [default](#gear-default)
- [getAmountMode](#gear-getamountmode)
- [setAmountMode](#gear-setamountmode)
- [isNativeUnwrapEnabled](#gear-isnativeunwrapenabled)
- [enableNativeUnwrap](#gear-enablenativeunwrap)
- [disableNativeUnwrap](#gear-disablenativeunwrap)
- [isOrderPermitSkipped](#gear-isorderpermitskipped)
- [skipOrderPermit](#gear-skiporderpermit)
- [isPermit2Enabled](#gear-ispermit2enabled)
- [enablePermit2](#gear-enablepermit2)
- [disablePermit2](#gear-disablepermit2)
- [setReceiver](#gear-setreceiver)
- [removeReceiver](#gear-removereceiver)
- [setExtension](#gear-setextension)
- [removeExtension](#gear-removeextension)
- [setAmountThreshold](#gear-setamountthreshold)
- [getAmountThreshold](#gear-getamountthreshold)
- [removeAmountThreshold](#gear-removeamountthreshold)
- [setInteraction](#gear-setinteraction)
- [removeInteraction](#gear-removeinteraction)
- [encode](#gear-encode)

#### :gear: default

| Method | Type |
| ---------- | ---------- |
| `default` | `() => TakerTraits` |

#### :gear: getAmountMode

Returns enabled amount mode, it defines how to treat passed amount in `fillContractOrderArgs` function

| Method | Type |
| ---------- | ---------- |
| `getAmountMode` | `() => AmountMode` |

#### :gear: setAmountMode

| Method | Type |
| ---------- | ---------- |
| `setAmountMode` | `(mode: AmountMode) => this` |

#### :gear: isNativeUnwrapEnabled

Is the Wrapped native currency will be unwrapped into Native currency before sending to taker

| Method | Type |
| ---------- | ---------- |
| `isNativeUnwrapEnabled` | `() => boolean` |

#### :gear: enableNativeUnwrap

Wrapped native currency will be unwrapped into Native currency before sending to taker

| Method | Type |
| ---------- | ---------- |
| `enableNativeUnwrap` | `() => this` |

#### :gear: disableNativeUnwrap

Wrapped native currency will NOT be unwrapped into Native currency before sending to taker

| Method | Type |
| ---------- | ---------- |
| `disableNativeUnwrap` | `() => this` |

#### :gear: isOrderPermitSkipped

If true, then maker's permit execution is skipped

| Method | Type |
| ---------- | ---------- |
| `isOrderPermitSkipped` | `() => boolean` |

#### :gear: skipOrderPermit

The order skips maker's permit execution

| Method | Type |
| ---------- | ---------- |
| `skipOrderPermit` | `() => this` |

#### :gear: isPermit2Enabled

Should use permit2 function for authorization or not

| Method | Type |
| ---------- | ---------- |
| `isPermit2Enabled` | `() => boolean` |

#### :gear: enablePermit2

Use permit2 function for authorization

| Method | Type |
| ---------- | ---------- |
| `enablePermit2` | `() => this` |

#### :gear: disablePermit2

NOT use permit2 function for authorization

| Method | Type |
| ---------- | ---------- |
| `disablePermit2` | `() => this` |

#### :gear: setReceiver

Sets address where order filled to, `msg.sender` used if not set

| Method | Type |
| ---------- | ---------- |
| `setReceiver` | `(receiver: Address) => this` |

#### :gear: removeReceiver

Set order receiver as `msg.sender`

| Method | Type |
| ---------- | ---------- |
| `removeReceiver` | `() => this` |

#### :gear: setExtension

Sets extension, it is required to provide same extension as in order creation (if any)

| Method | Type |
| ---------- | ---------- |
| `setExtension` | `(ext: Extension) => this` |

#### :gear: removeExtension

| Method | Type |
| ---------- | ---------- |
| `removeExtension` | `() => this` |

#### :gear: setAmountThreshold

Set threshold amount

In taker amount mode: the minimum amount a taker agrees to receive in exchange for a taking amount.
In maker amount mode: the maximum amount a taker agrees to give in exchange for a making amount.

| Method | Type |
| ---------- | ---------- |
| `setAmountThreshold` | `(threshold: bigint) => this` |

#### :gear: getAmountThreshold

Get threshold amount

In taker amount mode: the minimum amount a taker agrees to receive in exchange for a taking amount.
In maker amount mode: the maximum amount a taker agrees to give in exchange for a making amount.

| Method | Type |
| ---------- | ---------- |
| `getAmountThreshold` | `() => bigint` |

#### :gear: removeAmountThreshold

| Method | Type |
| ---------- | ---------- |
| `removeAmountThreshold` | `() => this` |

#### :gear: setInteraction

Sets taker interaction

`interaction.target` should implement `ITakerInteraction` interface

| Method | Type |
| ---------- | ---------- |
| `setInteraction` | `(interaction: Interaction) => this` |

#### :gear: removeInteraction

| Method | Type |
| ---------- | ---------- |
| `removeInteraction` | `() => this` |

#### :gear: encode

| Method | Type |
| ---------- | ---------- |
| `encode` | `() => { trait: bigint; args: string; }` |

## :nut_and_bolt: Enum

- [AmountMode](#gear-amountmode)

### :gear: AmountMode



| Property | Type | Description |
| ---------- | ---------- | ---------- |
| `taker` | `` | Amount provided to fill function treated as `takingAmount` and `makingAmount` calculated based on it |
| `maker` | `` | Amount provided to fill function treated as `makingAmount` and `takingAmount` calculated based on it |




================================================
FILE: src/limit-order/amounts.ts
================================================
/**
 * Calculates taker amount by linear proportion
 *
 * @return Ceiled taker amount
 * @see https://github.com/1inch/limit-order-protocol/blob/23d655844191dea7960a186652307604a1ed480a/contracts/libraries/AmountCalculatorLib.sol#L6
 */
export function calcTakingAmount(
    swapMakerAmount: bigint,
    orderMakerAmount: bigint,
    orderTakerAmount: bigint
): bigint {
    return (
        (swapMakerAmount * orderTakerAmount + orderMakerAmount - 1n) /
        orderMakerAmount
    )
}

/**
 * Calculates maker amount by linear proportion
 *
 * @return Floored maker amount
 * @see https://github.com/1inch/limit-order-protocol/blob/23d655844191dea7960a186652307604a1ed480a/contracts/libraries/AmountCalculatorLib.sol#L6
 */
export function calcMakingAmount(
    swapTakerAmount: bigint,
    orderMakerAmount: bigint,
    orderTakerAmount: bigint
): bigint {
    return (swapTakerAmount * orderMakerAmount) / orderTakerAmount
}



================================================
FILE: src/limit-order/index.ts
================================================
export * from './eip712/index.js'
export * from './limit-order.js'
export * from './limit-order-with-fee.js'
export * from './maker-traits.js'
export * from './taker-traits.js'
export * from './extensions/index.js'
export * from './interaction.js'
export * from './types.js'
export * from './amounts.js'



================================================
FILE: src/limit-order/interaction.spec.ts
================================================
import {Interaction} from './interaction.js'
import {Address} from '../address.js'

describe('Interaction', () => {
    it('should encode/decode', () => {
        const interaction = new Interaction(
            Address.fromBigInt(1337n),
            '0xdeadbeef'
        )

        expect(Interaction.decode(interaction.encode())).toStrictEqual(
            interaction
        )
    })
})



================================================
FILE: src/limit-order/interaction.ts
================================================
import {BytesIter, isHexBytes, trim0x} from '@1inch/byte-utils'
import assert from 'assert'
import {Address} from '../address.js'

export class Interaction {
    constructor(
        public readonly target: Address,
        public readonly data: string
    ) {
        assert(isHexBytes(data), 'Interaction data must be valid hex bytes')
    }

    /**
     * Create `Interaction` from bytes
     *
     * @param bytes Hex string with 0x. First 20 bytes are target, then data
     */
    public static decode(bytes: string): Interaction {
        const iter = BytesIter.HexString(bytes)

        return new Interaction(new Address(iter.nextUint160()), iter.rest())
    }

    /**
     * Hex string with 0x. First 20 bytes are target, then data
     */
    public encode(): string {
        return this.target.toString() + trim0x(this.data)
    }
}



================================================
FILE: src/limit-order/limit-order-with-fee.spec.ts
================================================
import {LimitOrderWithFee} from './limit-order-with-fee.js'
import {FeeTakerExtension} from './extensions/fee-taker/fee-taker.extension.js'
import {Fees} from './extensions/fee-taker/fees.js'
import {ResolverFee} from './extensions/fee-taker/resolver-fee.js'
import {IntegratorFee} from './extensions/fee-taker/integrator-fee.js'
import {Interaction} from './interaction.js'
import {MakerTraits} from './maker-traits.js'
import {Address} from '../address.js'
import {Bps} from '../bps.js'

describe('LimitOrderWithFee', () => {
    it('should create fromDataAndExtension', () => {
        const recipients = {
            integratorFeeRecipient: Address.fromBigInt(2n),
            protocolFeeRecipient: Address.fromBigInt(3n),
            tokensRecipient: Address.fromBigInt(4n)
        }
        const extension = FeeTakerExtension.new(
            Address.fromBigInt(1n),
            new Fees(
                new ResolverFee(
                    recipients.protocolFeeRecipient,
                    Bps.fromPercent(2)
                ),
                new IntegratorFee(
                    recipients.integratorFeeRecipient,
                    recipients.protocolFeeRecipient,
                    Bps.fromFraction(0.0001),
                    Bps.fromPercent(5)
                )
            ),
            [Address.fromBigInt(100n)],
            {
                makerPermit: new Interaction(
                    Address.fromBigInt(1n),
                    '0xdeadbeef'
                ),
                extraInteraction: new Interaction(
                    Address.fromBigInt(99n),
                    '0xdeadbeefdeadbeef'
                ),
                customReceiver: recipients.tokensRecipient
            }
        )
        const order = new LimitOrderWithFee(
            {
                makerAsset: new Address(
                    '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                ),
                takerAsset: new Address(
                    '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
                ),
                makingAmount: 1000000000000000000n,
                takingAmount: 1420000000n,
                maker: new Address('0x00000000219ab540356cbb839cbe05303d7705fa')
            },
            MakerTraits.default(),
            extension
        )

        expect(
            LimitOrderWithFee.fromDataAndExtension(
                order.build(),
                order.extension
            )
        ).toEqual(order)
    })
})



================================================
FILE: src/limit-order/limit-order-with-fee.ts
================================================
import {UINT_40_MAX} from '@1inch/byte-utils'
import assert from 'assert'
import {FeeTakerExtension} from './extensions/fee-taker/fee-taker.extension.js'
import {LimitOrder} from './limit-order.js'
import {LimitOrderV4Struct, OrderInfoData} from './types.js'
import {MakerTraits} from './maker-traits.js'
import {Extension} from './extensions/extension.js'
import {calcMakingAmount, calcTakingAmount} from './amounts.js'
import {Address} from '../address.js'
import {randBigInt} from '../utils/rand-bigint.js'

export class LimitOrderWithFee extends LimitOrder {
    constructor(
        /**
         * Use `FeeTakerExtension.customReceiver` to set custom receiver
         */
        orderInfo: Omit<OrderInfoData, 'receiver'>,
        makerTraits = MakerTraits.default(),
        public readonly feeExtension: FeeTakerExtension
    ) {
        makerTraits.enablePostInteraction() // to execute extension

        super(
            {...orderInfo, receiver: feeExtension.address},
            makerTraits,
            feeExtension.build()
        )
    }

    /**
     * Set random nonce to `makerTraits` and creates `LimitOrderWithFee`
     */
    static withRandomNonce(
        /**
         * Use `FeeTakerExtension.recipients.tokensRecipient` to set custom receiver
         */
        orderInfo: Omit<OrderInfoData, 'receiver'>,
        feeExtension: FeeTakerExtension,
        makerTraits = MakerTraits.default()
    ): LimitOrderWithFee {
        makerTraits.withNonce(randBigInt(UINT_40_MAX))

        return new LimitOrderWithFee(orderInfo, makerTraits, feeExtension)
    }

    static fromDataAndExtension(
        data: LimitOrderV4Struct,
        extension: Extension
    ): LimitOrderWithFee {
        const makerTraits = new MakerTraits(BigInt(data.makerTraits))
        const feeExt = FeeTakerExtension.fromExtension(extension)

        assert(
            feeExt.address.equal(new Address(data.receiver)),
            `invalid order: receiver must be FeeTaker extension address`
        )

        return new LimitOrderWithFee(
            {
                salt: BigInt(data.salt),
                maker: new Address(data.maker),
                makerAsset: new Address(data.makerAsset),
                takerAsset: new Address(data.takerAsset),
                makingAmount: BigInt(data.makingAmount),
                takingAmount: BigInt(data.takingAmount)
            },
            makerTraits,
            feeExt
        )
    }

    /**
     * Calculates the `takingAmount` required from the taker in exchange for the `makingAmount`
     *
     * @param taker
     * @param makingAmount amount to be filled
     */
    public getTakingAmount(
        taker: Address,
        makingAmount = this.makingAmount
    ): bigint {
        const takingAmount = calcTakingAmount(
            makingAmount,
            this.makingAmount,
            this.takingAmount
        )

        return this.feeExtension.getTakingAmount(taker, takingAmount)
    }

    /**
     * Calculates the `makingAmount` that the taker receives in exchange for the `takingAmount`
     *
     * @param taker
     * @param takingAmount amount to be filled
     */
    public getMakingAmount(
        taker: Address,
        takingAmount = this.takingAmount
    ): bigint {
        const makingAmount = calcMakingAmount(
            takingAmount,
            this.makingAmount,
            this.takingAmount
        )

        return this.feeExtension.getMakingAmount(taker, makingAmount)
    }

    /**
     * Fee in `takerAsset` which resolver pays to resolver fee receiver
     *
     * @param taker who will fill order
     * @param makingAmount amount wanted to fill
     */
    public getResolverFee(
        taker: Address,
        makingAmount = this.makingAmount
    ): bigint {
        const takingAmount = calcTakingAmount(
            makingAmount,
            this.makingAmount,
            this.takingAmount
        )

        return this.feeExtension.getResolverFee(taker, takingAmount)
    }

    /**
     * Fee in `takerAsset` which integrator gets to integrator wallet
     *
     * @param taker who will fill order
     * @param makingAmount amount wanted to fill
     */
    public getIntegratorFee(
        taker: Address,
        makingAmount = this.makingAmount
    ): bigint {
        const takingAmount = calcTakingAmount(
            makingAmount,
            this.makingAmount,
            this.takingAmount
        )

        return this.feeExtension.getIntegratorFee(taker, takingAmount)
    }

    /**
     * Fee in `takerAsset` which protocol gets
     * It equals to `share from integrator fee plus resolver fee`
     *
     * @param taker who will fill order
     * @param makingAmount amount wanted to fill
     */
    public getProtocolFee(
        taker: Address,
        makingAmount = this.makingAmount
    ): bigint {
        const takingAmount = calcTakingAmount(
            makingAmount,
            this.makingAmount,
            this.takingAmount
        )

        return this.feeExtension.getProtocolFee(taker, takingAmount)
    }
}



================================================
FILE: src/limit-order/limit-order.spec.ts
================================================
import {LimitOrder} from './limit-order.js'
import {ExtensionBuilder} from './extensions/extension-builder.js'
import {MakerTraits} from './maker-traits.js'
import {Address} from '../address.js'

describe('Limit Order', () => {
    jest.spyOn(Math, 'random').mockReturnValue(1)
    jest.spyOn(Date, 'now').mockReturnValue(1673549418040)

    it('should create limit order', () => {
        const order = new LimitOrder({
            makerAsset: new Address(
                '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            ),
            takerAsset: new Address(
                '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
            ),
            makingAmount: 1000000000000000000n,
            takingAmount: 1420000000n,
            maker: new Address('0x00000000219ab540356cbb839cbe05303d7705fa')
        })

        expect(LimitOrder.fromCalldata(order.toCalldata())).toEqual(order)
    })

    it('should create limit order with passed salt', () => {
        const order = new LimitOrder({
            makerAsset: new Address(
                '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            ),
            takerAsset: new Address(
                '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
            ),
            makingAmount: 1000000000000000000n,
            takingAmount: 1420000000n,
            maker: new Address('0x00000000219ab540356cbb839cbe05303d7705fa'),
            salt: 10n
        })

        expect(LimitOrder.fromCalldata(order.toCalldata())).toEqual(order)
    })

    it('should create limit order with extension and salt', () => {
        const ext = new ExtensionBuilder().withCustomData('0xdeadbeef').build()
        const order = new LimitOrder(
            {
                makerAsset: new Address(
                    '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                ),
                takerAsset: new Address(
                    '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
                ),
                makingAmount: 1000000000000000000n,
                takingAmount: 1420000000n,
                maker: new Address(
                    '0x00000000219ab540356cbb839cbe05303d7705fa'
                ),
                salt: LimitOrder.buildSalt(ext)
            },
            MakerTraits.default(),
            ext
        )

        expect(LimitOrder.fromDataAndExtension(order.build(), ext)).toEqual(
            order
        )
    })
})



================================================
FILE: src/limit-order/limit-order.ts
================================================
import {AbiCoder} from 'ethers'
import {isHexString, UINT_160_MAX, UINT_256_MAX} from '@1inch/byte-utils'
import assert from 'assert'
import {
    buildOrderTypedData,
    getLimitOrderV4Domain,
    getOrderHash,
    EIP712TypedData
} from './eip712/index.js'
import {LimitOrderV4Struct, OrderInfoData} from './types.js'
import {MakerTraits} from './maker-traits.js'
import {Extension} from './extensions/extension.js'
import {injectTrackCode} from './source-track.js'
import {Address} from '../address.js'
import {randBigInt} from '../utils/rand-bigint.js'

export class LimitOrder {
    private static readonly Web3Type = `tuple(${[
        'uint256 salt',
        'address maker',
        'address receiver',
        'address makerAsset',
        'address takerAsset',
        'uint256 makingAmount',
        'uint256 takingAmount',
        'uint256 makerTraits'
    ]})`

    public readonly maker: Address

    public readonly receiver: Address

    public readonly makerAsset: Address

    public readonly takerAsset: Address

    public readonly makingAmount: bigint

    public readonly takingAmount: bigint

    public readonly makerTraits: MakerTraits

    private _salt: bigint

    constructor(
        orderInfo: OrderInfoData,
        makerTraits = new MakerTraits(0n),
        public readonly extension: Extension = Extension.default()
    ) {
        assert(
            !orderInfo.takerAsset.isNative(),
            `${orderInfo.takerAsset} can not be 'takerAsset'. Use wrapper address as 'takerAsset' and 'makerTraits.enableNativeUnwrap' to swap to NATIVE currency`
        )

        assert(
            !orderInfo.makerAsset.isNative(),
            'Maker asset can not be NATIVE, use wrapper'
        )

        this.makerAsset = orderInfo.makerAsset
        this.takerAsset = orderInfo.takerAsset
        this.makingAmount = orderInfo.makingAmount
        this.takingAmount = orderInfo.takingAmount
        this._salt = LimitOrder.verifySalt(
            orderInfo.salt || LimitOrder.buildSalt(extension),
            extension
        )
        this.maker = orderInfo.maker
        this.receiver = orderInfo.receiver?.equal(orderInfo.maker)
            ? Address.ZERO_ADDRESS
            : orderInfo.receiver || Address.ZERO_ADDRESS
        this.makerTraits = makerTraits

        assert(this.makingAmount <= UINT_256_MAX, 'makingAmount too big')
        assert(this.takingAmount <= UINT_256_MAX, 'takingAmount too big')

        if (!extension.isEmpty()) {
            this.makerTraits.withExtension()
        }
    }

    public get salt(): bigint {
        return this._salt
    }

    /**
     * Build correct salt for order
     *
     * If order has extension - it is crucial to build correct salt
     * otherwise order won't be ever filled
     *
     * @see https://github.com/1inch/limit-order-protocol/blob/7bc5129ae19832338169ca21e4cf6331e8ff44f6/contracts/OrderLib.sol#L153
     *
     */
    static buildSalt(
        extension: Extension,
        baseSalt = randBigInt((1n << 96n) - 1n)
    ): bigint {
        if (extension.isEmpty()) {
            return baseSalt
        }

        return (baseSalt << 160n) | (extension.keccak256() & UINT_160_MAX)
    }

    static verifySalt(salt: bigint, extension: Extension): bigint {
        assert(salt <= UINT_256_MAX, 'salt too big')

        if (extension.isEmpty()) {
            return salt
        }

        const hash = salt & UINT_160_MAX
        const expectedHash = extension.keccak256() & UINT_160_MAX
        assert(
            hash === expectedHash,
            'invalid salt: lowest 160 bits should be extension hash'
        )

        return salt
    }

    static fromCalldata(bytes: string): LimitOrder {
        assert(
            isHexString(bytes),
            'Bytes should be valid hex string with 0x prefix'
        )

        const info = AbiCoder.defaultAbiCoder().decode(
            [LimitOrder.Web3Type],
            bytes
        )

        const order = info[0]

        return new LimitOrder(
            {
                salt: order.salt ? BigInt(order.salt) : undefined,
                maker: new Address(order.maker),
                receiver: new Address(order.receiver),
                takingAmount: BigInt(order.takingAmount),
                makingAmount: BigInt(order.makingAmount),
                takerAsset: new Address(order.takerAsset),
                makerAsset: new Address(order.makerAsset)
            },
            new MakerTraits(BigInt(order.makerTraits))
        )
    }

    static fromDataAndExtension(
        data: LimitOrderV4Struct,
        extension: Extension
    ): LimitOrder {
        return new LimitOrder(
            {
                salt: BigInt(data.salt),
                maker: new Address(data.maker),
                receiver: new Address(data.receiver),
                takingAmount: BigInt(data.takingAmount),
                makingAmount: BigInt(data.makingAmount),
                takerAsset: new Address(data.takerAsset),
                makerAsset: new Address(data.makerAsset)
            },
            new MakerTraits(BigInt(data.makerTraits)),
            extension
        )
    }

    /**
     * Injects source info to order `salt` [224, 255] bits
     * check `getTrackCodeForSource` implementation for exact injected data
     *
     * @param source order source identifier
     * @see getTrackCodeForSource
     */
    public setSource(source: string): this {
        this._salt = injectTrackCode(this.salt, source)

        return this
    }

    public toCalldata(): string {
        return AbiCoder.defaultAbiCoder().encode(
            [LimitOrder.Web3Type],
            [this.build()]
        )
    }

    public build(): LimitOrderV4Struct {
        return {
            maker: this.maker.toString(),
            makerAsset: this.makerAsset.toString(),
            takerAsset: this.takerAsset.toString(),
            makerTraits: (this.makerTraits?.asBigInt() || 0n).toString(),
            salt: this.salt.toString(),
            makingAmount: this.makingAmount.toString(),
            takingAmount: this.takingAmount.toString(),
            receiver: this.receiver.toString()
        }
    }

    public getTypedData(chainId: number): EIP712TypedData {
        const domain = getLimitOrderV4Domain(chainId)

        return buildOrderTypedData(
            domain.chainId,
            domain.verifyingContract,
            domain.name,
            domain.version,
            this.build()
        )
    }

    public getOrderHash(chainId: number): string {
        return getOrderHash(this.getTypedData(chainId))
    }

    /**
     * Returns true if only a specific address can fill order
     */
    public isPrivate(): boolean {
        return this.makerTraits.isPrivate()
    }
}



================================================
FILE: src/limit-order/maker-traits.spec.ts
================================================
import {UINT_160_MAX, UINT_40_MAX} from '@1inch/byte-utils'
import {MakerTraits} from './maker-traits.js'
import {Address} from '../address.js'

describe('MakerTraits', () => {
    test('allowed sender', () => {
        const traits = MakerTraits.default()

        const sender = Address.fromBigInt(1337n)

        const senderHalf = traits.withAllowedSender(sender).allowedSender()

        expect(senderHalf).toEqual(sender.toString().slice(-20))
    })

    test('nonce', () => {
        const traits = MakerTraits.default()

        const nonce = 1n << 10n

        traits.withNonce(nonce)
        expect(traits.nonceOrEpoch()).toEqual(nonce)

        const big_nonce = 1n << 50n
        expect(() => traits.withNonce(big_nonce)).toThrow('to big for mask')
    })

    test('expiration', () => {
        const traits = MakerTraits.default()
        const expiration = 1000000n

        traits.withExpiration(expiration)
        expect(traits.expiration()).toEqual(expiration)
    })

    test('epoch', () => {
        const traits = MakerTraits.default()
        const series = 100n
        const epoch = 1n
        traits.allowPartialFills().allowMultipleFills().withEpoch(series, epoch)
        expect(traits.series()).toEqual(series)
        expect(traits.nonceOrEpoch()).toEqual(epoch)
        expect(traits.isEpochManagerEnabled()).toEqual(true)
    })

    test('extension', () => {
        const traits = MakerTraits.default()
        expect(traits.hasExtension()).toEqual(false)

        traits.withExtension()
        expect(traits.hasExtension()).toEqual(true)
    })

    test('partial fills', () => {
        const traits = MakerTraits.default()
        expect(traits.isPartialFillAllowed()).toEqual(true)

        traits.disablePartialFills()
        expect(traits.isPartialFillAllowed()).toEqual(false)

        traits.allowPartialFills()
        expect(traits.isPartialFillAllowed()).toEqual(true)
    })

    test('multiple fills', () => {
        const traits = MakerTraits.default()
        expect(traits.isMultipleFillsAllowed()).toEqual(false)

        traits.allowMultipleFills()
        expect(traits.isMultipleFillsAllowed()).toEqual(true)

        traits.disableMultipleFills()
        expect(traits.isMultipleFillsAllowed()).toEqual(false)
    })

    test('pre interaction', () => {
        const traits = MakerTraits.default()
        expect(traits.hasPreInteraction()).toEqual(false)

        traits.enablePreInteraction()
        expect(traits.hasPreInteraction()).toEqual(true)

        traits.disablePreInteraction()
        expect(traits.hasPreInteraction()).toEqual(false)
    })

    test('post interaction', () => {
        const traits = MakerTraits.default()
        expect(traits.hasPostInteraction()).toEqual(false)

        traits.enablePostInteraction()
        expect(traits.hasPostInteraction()).toEqual(true)

        traits.disablePostInteraction()
        expect(traits.hasPostInteraction()).toEqual(false)
    })

    test('permit2', () => {
        const traits = MakerTraits.default()
        expect(traits.isPermit2()).toEqual(false)

        traits.enablePermit2()
        expect(traits.isPermit2()).toEqual(true)

        traits.disablePermit2()
        expect(traits.isPermit2()).toEqual(false)
    })

    test('native unwrap', () => {
        const traits = MakerTraits.default()
        expect(traits.isNativeUnwrapEnabled()).toEqual(false)

        traits.enableNativeUnwrap()
        expect(traits.isNativeUnwrapEnabled()).toEqual(true)

        traits.disableNativeUnwrap()
        expect(traits.isNativeUnwrapEnabled()).toEqual(false)
    })

    test('all', () => {
        const traits = MakerTraits.default()
            .withAllowedSender(Address.fromBigInt(UINT_160_MAX))
            .allowPartialFills()
            .allowMultipleFills()
            .withEpoch(UINT_40_MAX, UINT_40_MAX)
            .withExpiration(UINT_40_MAX)
            .withExtension()
            .enablePermit2()
            .enableNativeUnwrap()
            .enablePreInteraction()
            .enablePostInteraction()

        expect(traits.asBigInt().toString(16)).toEqual(
            '5f800000000000ffffffffffffffffffffffffffffffffffffffffffffffffff'
        )
    })
})



================================================
FILE: src/limit-order/maker-traits.ts
================================================
import {add0x, BitMask, BN} from '@1inch/byte-utils'
import assert from 'assert'
import {Address} from '../address.js'

/**
 * The MakerTraits type is an uint256, and different parts of the number are used to encode different traits.
 * High bits are used for flags
 * 255 bit `NO_PARTIAL_FILLS_FLAG`          - if set, the order does not allow partial fills
 * 254 bit `ALLOW_MULTIPLE_FILLS_FLAG`      - if set, the order permits multiple fills
 * 253 bit                                  - unused
 * 252 bit `PRE_INTERACTION_CALL_FLAG`      - if set, the order requires pre-interaction call
 * 251 bit `POST_INTERACTION_CALL_FLAG`     - if set, the order requires post-interaction call
 * 250 bit `NEED_CHECK_EPOCH_MANAGER_FLAG`  - if set, the order requires to check the epoch manager
 * 249 bit `HAS_EXTENSION_FLAG`             - if set, the order has extension(s)
 * 248 bit `USE_PERMIT2_FLAG`               - if set, the order uses permit2
 * 247 bit `UNWRAP_WETH_FLAG`               - if set, the order requires to unwrap WETH
 *
 * Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series
 * uint80 last 10 bytes of allowed sender address (0 if any)
 * uint40 expiration timestamp (0 if none)
 * uint40 nonce or epoch
 * uint40 series
 */
export class MakerTraits {
    // Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series
    private static ALLOWED_SENDER_MASK = new BitMask(0n, 80n)

    private static EXPIRATION_MASK = new BitMask(80n, 120n)

    private static NONCE_OR_EPOCH_MASK = new BitMask(120n, 160n)

    private static SERIES_MASK = new BitMask(160n, 200n)

    private static NO_PARTIAL_FILLS_FLAG = 255n

    private static ALLOW_MULTIPLE_FILLS_FLAG = 254n

    private static PRE_INTERACTION_CALL_FLAG = 252n

    private static POST_INTERACTION_CALL_FLAG = 251n

    private static NEED_CHECK_EPOCH_MANAGER_FLAG = 250n

    private static HAS_EXTENSION_FLAG = 249n

    private static USE_PERMIT2_FLAG = 248n

    private static UNWRAP_WETH_FLAG = 247n

    private value: BN

    constructor(val: bigint) {
        this.value = new BN(val)
    }

    static default(): MakerTraits {
        return new MakerTraits(0n)
    }

    /**
     * Last 10bytes of address
     */
    public allowedSender(): string {
        return this.value
            .getMask(MakerTraits.ALLOWED_SENDER_MASK)
            .value.toString(16)
            .padStart(20, '0')
    }

    public isPrivate(): boolean {
        return this.value.getMask(MakerTraits.ALLOWED_SENDER_MASK).value !== 0n
    }

    public withAllowedSender(sender: Address): this {
        assert(!sender.isZero(), 'Use withAnySender() to remove sender check')

        const lastHalf = add0x(sender.toString().slice(-20))
        this.value = this.value.setMask(
            MakerTraits.ALLOWED_SENDER_MASK,
            BigInt(lastHalf)
        )

        return this
    }

    /**
     * Removes `sender` check on contract
     */
    public withAnySender(): this {
        this.value = this.value.setMask(
            MakerTraits.ALLOWED_SENDER_MASK,
            BigInt(0)
        )

        return this
    }

    /**
     * If null is return than order has no expiration
     */
    public expiration(): bigint | null {
        const timestampSec = this.value.getMask(MakerTraits.EXPIRATION_MASK)

        if (timestampSec.isZero()) {
            return null
        }

        return timestampSec.value
    }

    /**
     * Set order expiration time
     *
     * @param expiration expiration timestamp in sec
     */
    public withExpiration(expiration: bigint): this {
        const expirationSec = expiration === null ? 0n : expiration

        this.value = this.value.setMask(
            MakerTraits.EXPIRATION_MASK,
            expirationSec
        )

        return this
    }

    /**
     * Returns epoch in case `isEpochManagerEnabled()` and nonce otherwise
     */
    public nonceOrEpoch(): bigint {
        return this.value.getMask(MakerTraits.NONCE_OR_EPOCH_MASK).value
    }

    /**
     * Set nonce
     * Note: nonce and epoch share the same field, so they cant be set together
     * @param nonce must be less or equal to `uint40::max`
     */
    public withNonce(nonce: bigint): this {
        this.value = this.value.setMask(MakerTraits.NONCE_OR_EPOCH_MASK, nonce)

        return this
    }

    /**
     * Enable epoch manager check
     *
     * If set, the contract will check that order epoch equals to epoch on `SeriesEpochManager` contract
     * Note: epoch manager can be used only when `partialFills` AND `multipleFills` allowed
     * Note: nonce and epoch share the same field, so they cant be set together
     *
     * @param series subgroup for epoch
     * @param epoch unique order id inside series
     * @see https://github.com/1inch/limit-order-protocol/blob/23d655844191dea7960a186652307604a1ed480a/contracts/helpers/SeriesEpochManager.sol#L6
     */
    public withEpoch(series: bigint, epoch: bigint): this {
        this.setSeries(series)
        this.enableEpochManagerCheck()

        return this.withNonce(epoch)
    }

    /**
     * Get current series
     */
    public series(): bigint {
        return this.value.getMask(MakerTraits.SERIES_MASK).value
    }

    /**
     * Returns true if order has an extension and false otherwise
     */
    public hasExtension(): boolean {
        return this.value.getBit(MakerTraits.HAS_EXTENSION_FLAG) === 1
    }

    /**
     * Mark that order has an extension
     */
    public withExtension(): this {
        this.value = this.value.setBit(MakerTraits.HAS_EXTENSION_FLAG, 1)

        return this
    }

    /**
     * Is partial fills allowed for order
     */
    public isPartialFillAllowed(): boolean {
        return this.value.getBit(MakerTraits.NO_PARTIAL_FILLS_FLAG) === 0
    }

    /**
     * Disable partial fills for order
     */
    public disablePartialFills(): this {
        this.value = this.value.setBit(MakerTraits.NO_PARTIAL_FILLS_FLAG, 1)

        return this
    }

    /**
     * Allow partial fills for order
     */
    public allowPartialFills(): this {
        this.value = this.value.setBit(MakerTraits.NO_PARTIAL_FILLS_FLAG, 0)

        return this
    }

    /**
     * Set partial fill flag to passed value
     */
    public setPartialFills(val: boolean): this {
        return val ? this.allowPartialFills() : this.disablePartialFills()
    }

    /**
     * Returns true if order allowing more than one fill and false otherwise
     */
    public isMultipleFillsAllowed(): boolean {
        return this.value.getBit(MakerTraits.ALLOW_MULTIPLE_FILLS_FLAG) === 1
    }

    /**
     * Allow many fills for order
     */
    public allowMultipleFills(): this {
        this.value = this.value.setBit(MakerTraits.ALLOW_MULTIPLE_FILLS_FLAG, 1)

        return this
    }

    /**
     * Allow at max 1 fill for order
     */
    public disableMultipleFills(): this {
        this.value = this.value.setBit(MakerTraits.ALLOW_MULTIPLE_FILLS_FLAG, 0)

        return this
    }

    /**
     * If `val` is true, then multiple fills allowed, otherwise disallowed
     */
    public setMultipleFills(val: boolean): this {
        return val ? this.allowMultipleFills() : this.disableMultipleFills()
    }

    /**
     * Returns true if maker has pre-interaction and false otherwise
     */
    public hasPreInteraction(): boolean {
        return this.value.getBit(MakerTraits.PRE_INTERACTION_CALL_FLAG) === 1
    }

    /**
     * Enable maker pre-interaction
     */
    public enablePreInteraction(): this {
        this.value = this.value.setBit(MakerTraits.PRE_INTERACTION_CALL_FLAG, 1)

        return this
    }

    /**
     * Disable maker pre-interaction
     */
    public disablePreInteraction(): this {
        this.value = this.value.setBit(MakerTraits.PRE_INTERACTION_CALL_FLAG, 0)

        return this
    }

    /**
     * Returns true if maker has post-interaction and false otherwise
     */
    public hasPostInteraction(): boolean {
        return this.value.getBit(MakerTraits.POST_INTERACTION_CALL_FLAG) === 1
    }

    /**
     * Enable maker post-interaction
     */
    public enablePostInteraction(): this {
        this.value = this.value.setBit(
            MakerTraits.POST_INTERACTION_CALL_FLAG,
            1
        )

        return this
    }

    /**
     * Disable maker post-interaction
     */
    public disablePostInteraction(): this {
        this.value = this.value.setBit(
            MakerTraits.POST_INTERACTION_CALL_FLAG,
            0
        )

        return this
    }

    /**
     * Returns true if epoch manager enabled
     *
     * @see MakerTraits.enableEpochManagerCheck
     */
    public isEpochManagerEnabled(): boolean {
        return (
            this.value.getBit(MakerTraits.NEED_CHECK_EPOCH_MANAGER_FLAG) === 1
        )
    }

    /**
     * Returns true if `permit2` enabled for maker funds transfer
     *
     * @see https://github.com/Uniswap/permit2
     */
    public isPermit2(): boolean {
        return this.value.getBit(MakerTraits.USE_PERMIT2_FLAG) === 1
    }

    /**
     * Use `permit2` to transfer maker funds to contract
     *
     * @see https://github.com/Uniswap/permit2
     */
    public enablePermit2(): this {
        this.value = this.value.setBit(MakerTraits.USE_PERMIT2_FLAG, 1)

        return this
    }

    /**
     * Do not use `permit2` to transfer maker funds to contract
     *
     * @see https://github.com/Uniswap/permit2
     */
    public disablePermit2(): this {
        this.value = this.value.setBit(MakerTraits.USE_PERMIT2_FLAG, 0)

        return this
    }

    /**
     * Is WRAPPED token will be unwrapped to NATIVE before sending to maker
     */
    public isNativeUnwrapEnabled(): boolean {
        return this.value.getBit(MakerTraits.UNWRAP_WETH_FLAG) === 1
    }

    /**
     * Unwrap WRAPPED token to NATIVE before sending it to maker
     */
    public enableNativeUnwrap(): this {
        this.value = this.value.setBit(MakerTraits.UNWRAP_WETH_FLAG, 1)

        return this
    }

    /**
     * Do not unwrap WRAPPED token to NATIVE before sending it to maker
     */
    public disableNativeUnwrap(): this {
        this.value = this.value.setBit(MakerTraits.UNWRAP_WETH_FLAG, 0)

        return this
    }

    public asBigInt(): bigint {
        return this.value.value
    }

    /**
     * Returns true if bit invalidator mode is used to invalidate order (cancel/mark as filled)
     *
     * Bit invalidator is cheaper in terms of gas, but can be used only when partial fills OR multiple fills are disabled
     *
     * @see https://github.com/1inch/limit-order-protocol/blob/3c9b8ab8bbc4c10ff8d615fc3d33f501993c292d/contracts/libraries/MakerTraitsLib.sol#L142
     */
    public isBitInvalidatorMode(): boolean {
        return !this.isPartialFillAllowed() || !this.isMultipleFillsAllowed()
    }

    private enableEpochManagerCheck(): void {
        assert(
            !this.isBitInvalidatorMode(),
            'Epoch manager allowed only when partialFills and multipleFills enabled'
        )

        this.value = this.value.setBit(
            MakerTraits.NEED_CHECK_EPOCH_MANAGER_FLAG,
            1
        )
    }

    /**
     * Set series. Only when epoch manager enabled
     * Series is a subgroup for epoch's, it can be useful when you want to cancel a group of orders at once
     *
     * @see MakerTraits.enableEpochManagerCheck
     */
    private setSeries(series: bigint): void {
        this.value = this.value.setMask(MakerTraits.SERIES_MASK, series)
    }
}



================================================
FILE: src/limit-order/source-track.ts
================================================
import {add0x, BitMask, BN, isHexString} from '@1inch/byte-utils'
import {id} from 'ethers'

const TRACK_CODE_MASK = new BitMask(224n, 256n)

function getTrackCodeForSource(source: string): bigint {
    if (!isHexString(source)) {
        return createId(source)
    }

    if (source.length === 10) {
        return BigInt(source)
    }

    if (source.length === 66) {
        return BigInt(source.substring(0, 10))
    }

    return createId(source)
}

function createId(source: string): bigint {
    return BigInt(add0x(id(source).slice(0, 10)))
}

export function injectTrackCode(salt: bigint, source?: string): bigint {
    const track = source ? getTrackCodeForSource(source) : 0n

    return new BN(salt).setMask(TRACK_CODE_MASK, track).value
}



================================================
FILE: src/limit-order/taker-traits.ts
================================================
import {BitMask, BN, getBytesCount, trim0x} from '@1inch/byte-utils'
import {Extension} from './extensions/extension.js'
import {Interaction} from './interaction.js'
import {Address} from '../address.js'
import {ZX} from '../constants.js'

export enum AmountMode {
    /**
     * Amount provided to fill function treated as `takingAmount` and `makingAmount` calculated based on it
     */
    taker,

    /**
     * Amount provided to fill function treated as `makingAmount` and `takingAmount` calculated based on it
     */
    maker
}

/**
 * TakerTraitsLib
 * This class defines TakerTraits, which are used to encode the taker's preferences for an order in a single uint256.
 *
 * The TakerTraits are structured as follows:
 * High bits are used for flags
 * 255 bit `_MAKER_AMOUNT_FLAG`           - If set, the taking amount is calculated based on making amount, otherwise making amount is calculated based on taking amount.
 * 254 bit `_UNWRAP_WETH_FLAG`            - If set, the WETH will be unwrapped into ETH before sending to taker.
 * 253 bit `_SKIP_ORDER_PERMIT_FLAG`      - If set, the order skips maker's permit execution.
 * 252 bit `_USE_PERMIT2_FLAG`            - If set, the order uses the permit2 function for authorization.
 * 251 bit `_ARGS_HAS_TARGET`             - If set, then first 20 bytes of args are treated as receiver address for maker’s funds transfer.
 * 224-247 bits `ARGS_EXTENSION_LENGTH`   - The length of the extension calldata in the args.
 * 200-223 bits `ARGS_INTERACTION_LENGTH` - The length of the interaction calldata in the args.
 * 0-184 bits                             - The threshold amount (the maximum amount a taker agrees to give in exchange for a making amount).
 */
export class TakerTraits {
    private static MAKER_AMOUNT_FLAG = 255n

    private static UNWRAP_WETH_FLAG = 254n

    private static SKIP_ORDER_PERMIT_FLAG = 253n

    private static USE_PERMIT2_FLAG = 252n

    private static ARGS_HAS_RECEIVER = 251n

    private static THRESHOLD_MASK = new BitMask(0n, 185n)

    private static ARGS_INTERACTION_LENGTH_MASK = new BitMask(200n, 224n)

    private static ARGS_EXTENSION_LENGTH_MASK = new BitMask(224n, 248n)

    private flags: BN

    private receiver?: Address

    private extension?: Extension

    private interaction?: Interaction

    constructor(
        flag: bigint,
        data: {
            receiver?: Address
            extension?: Extension
            interaction?: Interaction
        }
    ) {
        this.flags = new BN(flag)
        this.receiver = data.receiver
        this.extension = data.extension

        this.interaction = data.interaction
    }

    static default(): TakerTraits {
        return new TakerTraits(0n, {})
    }

    /**
     * Returns enabled amount mode, it defines how to treat passed amount in `fillContractOrderArgs` function
     *
     * @see AmountMode
     */
    public getAmountMode(): AmountMode {
        return this.flags.getBit(TakerTraits.MAKER_AMOUNT_FLAG)
    }

    public setAmountMode(mode: AmountMode): this {
        this.flags = this.flags.setBit(TakerTraits.MAKER_AMOUNT_FLAG, mode)

        return this
    }

    /**
     * Is the Wrapped native currency will be unwrapped into Native currency before sending to taker
     */
    public isNativeUnwrapEnabled(): boolean {
        return this.flags.getBit(TakerTraits.UNWRAP_WETH_FLAG) === 1
    }

    /**
     * Wrapped native currency will be unwrapped into Native currency before sending to taker
     */
    public enableNativeUnwrap(): this {
        this.flags = this.flags.setBit(TakerTraits.UNWRAP_WETH_FLAG, 1)

        return this
    }

    /**
     * Wrapped native currency will NOT be unwrapped into Native currency before sending to taker
     */
    public disableNativeUnwrap(): this {
        this.flags = this.flags.setBit(TakerTraits.UNWRAP_WETH_FLAG, 0)

        return this
    }

    /**
     * If true, then maker's permit execution is skipped
     */
    public isOrderPermitSkipped(): boolean {
        return Boolean(this.flags.getBit(TakerTraits.SKIP_ORDER_PERMIT_FLAG))
    }

    /**
     * The order skips maker's permit execution
     */
    public skipOrderPermit(): this {
        this.flags = this.flags.setBit(TakerTraits.SKIP_ORDER_PERMIT_FLAG, 1)

        return this
    }

    /**
     * Should use permit2 function for authorization or not
     *
     * @see https://github.com/Uniswap/permit2
     */
    public isPermit2Enabled(): boolean {
        return this.flags.getBit(TakerTraits.USE_PERMIT2_FLAG) === 1
    }

    /**
     * Use permit2 function for authorization
     *
     * @see https://github.com/Uniswap/permit2
     */
    public enablePermit2(): this {
        this.flags = this.flags.setBit(TakerTraits.USE_PERMIT2_FLAG, 1)

        return this
    }

    /**
     * NOT use permit2 function for authorization
     */
    public disablePermit2(): this {
        this.flags = this.flags.setBit(TakerTraits.USE_PERMIT2_FLAG, 0)

        return this
    }

    /**
     * Sets address where order filled to, `msg.sender` used if not set
     *
     * @param receiver
     */
    public setReceiver(receiver: Address): this {
        this.receiver = receiver

        return this
    }

    /**
     * Set order receiver as `msg.sender`
     */
    public removeReceiver(): this {
        this.receiver = undefined

        return this
    }

    /**
     * Sets extension, it is required to provide same extension as in order creation (if any)
     */
    public setExtension(ext: Extension): this {
        this.extension = ext

        return this
    }

    public removeExtension(): this {
        this.extension = undefined

        return this
    }

    /**
     * Set threshold amount
     *
     * In taker amount mode: the minimum amount a taker agrees to receive in exchange for a taking amount.
     * In maker amount mode: the maximum amount a taker agrees to give in exchange for a making amount.
     *
     * @see AmountMode
     */
    public setAmountThreshold(threshold: bigint): this {
        this.flags = this.flags.setMask(TakerTraits.THRESHOLD_MASK, threshold)

        return this
    }

    /**
     * Get threshold amount
     *
     * In taker amount mode: the minimum amount a taker agrees to receive in exchange for a taking amount.
     * In maker amount mode: the maximum amount a taker agrees to give in exchange for a making amount.
     *
     * @see AmountMode
     */
    public getAmountThreshold(): bigint {
        return this.flags.getMask(TakerTraits.THRESHOLD_MASK).value
    }

    /**
     * @see setAmountThreshold
     */
    public removeAmountThreshold(): this {
        this.flags = this.flags.setMask(TakerTraits.THRESHOLD_MASK, 0n)

        return this
    }

    /**
     * Sets taker interaction
     *
     * `interaction.target` should implement `ITakerInteraction` interface
     *
     * @see https://github.com/1inch/limit-order-protocol/blob/1a32e059f78ddcf1fe6294baed6cafb73a04b685/contracts/interfaces/ITakerInteraction.sol#L11
     */
    public setInteraction(interaction: Interaction): this {
        this.interaction = interaction

        return this
    }

    public removeInteraction(): this {
        this.interaction = undefined

        return this
    }

    public encode(): {trait: bigint; args: string} {
        const extensionLen = this.extension
            ? getBytesCount(this.extension.encode())
            : 0n

        const interactionLen = this.interaction
            ? getBytesCount(this.interaction.encode())
            : 0n

        const flags = this.flags
            .setBit(TakerTraits.ARGS_HAS_RECEIVER, this.receiver ? 1 : 0)
            .setMask(TakerTraits.ARGS_EXTENSION_LENGTH_MASK, extensionLen)
            .setMask(TakerTraits.ARGS_INTERACTION_LENGTH_MASK, interactionLen)

        const args =
            (this.receiver?.toString() || ZX) +
            trim0x(this.extension?.encode() || '') +
            trim0x(this.interaction?.encode() || '')

        return {
            trait: flags.value,
            args
        }
    }
}



================================================
FILE: src/limit-order/types.ts
================================================
import {Extension} from './extensions/extension.js'
import {Address} from '../address.js'

export type OrderInfoData = {
    makerAsset: Address
    takerAsset: Address
    makingAmount: bigint
    takingAmount: bigint
    maker: Address
    salt?: bigint
    receiver?: Address
}

export type LimitOrderV4Struct = {
    salt: string
    maker: string
    receiver: string
    makerAsset: string
    takerAsset: string
    makingAmount: string
    takingAmount: string
    makerTraits: string
}

export interface IExtensionBuilder {
    build(): Extension
}



================================================
FILE: src/limit-order/eip712/domain.ts
================================================
export const EIP712Domain = [
    {name: 'name', type: 'string'},
    {name: 'version', type: 'string'},
    {name: 'chainId', type: 'uint256'},
    {name: 'verifyingContract', type: 'address'}
]

export const Order = [
    {name: 'salt', type: 'uint256'},
    {name: 'maker', type: 'address'},
    {name: 'receiver', type: 'address'},
    {name: 'makerAsset', type: 'address'},
    {name: 'takerAsset', type: 'address'},
    {name: 'makingAmount', type: 'uint256'},
    {name: 'takingAmount', type: 'uint256'},
    {name: 'makerTraits', type: 'uint256'}
]

export const LimitOrderV4TypeDataName = '1inch Aggregation Router'
export const LimitOrderV4TypeDataVersion = '6'



================================================
FILE: src/limit-order/eip712/eip712.types.ts
================================================
export interface EIP712TypedData {
    types: EIP712Types
    domain: EIP712Object
    message: EIP712Object
    primaryType: string
}

export interface EIP712Types {
    [key: string]: EIP712Parameter[]
}

export interface EIP712Parameter {
    name: string
    type: string
}

export declare type EIP712ObjectValue = string | bigint | number | EIP712Object

export interface EIP712Object {
    [key: string]: EIP712ObjectValue
}

export type EIP712DomainType = {
    name: string
    version: string
    chainId: number
    verifyingContract: string
}



================================================
FILE: src/limit-order/eip712/index.ts
================================================
export * from './domain.js'
export * from './eip712.types.js'
export * from './order-typed-data-builder.js'



================================================
FILE: src/limit-order/eip712/order-typed-data-builder.ts
================================================
import {ethers} from 'ethers'
import {
    EIP712Domain,
    LimitOrderV4TypeDataName,
    LimitOrderV4TypeDataVersion,
    Order
} from './domain.js'
import {EIP712DomainType, EIP712TypedData} from './eip712.types.js'
import {LimitOrderV4Struct} from '../types.js'
import {getLimitOrderContract} from '../../constants.js'

export function getOrderHash(data: EIP712TypedData): string {
    return ethers.TypedDataEncoder.hash(
        data.domain,
        {Order: data.types.Order},
        data.message
    )
}

export function buildOrderTypedData(
    chainId: number,
    verifyingContract: string,
    name: string,
    version: string,
    order: LimitOrderV4Struct
): EIP712TypedData {
    return {
        primaryType: 'Order',
        types: {EIP712Domain, Order},
        domain: {name, version, chainId, verifyingContract},
        message: order
    }
}

export function getDomainSeparator(
    name: string,
    version: string,
    chainId: number,
    verifyingContract: string
): string {
    return ethers.TypedDataEncoder.hashStruct(
        'EIP712Domain',
        {EIP712Domain: EIP712Domain},
        {name, version, chainId, verifyingContract}
    )
}

export function getLimitOrderV4Domain(chainId: number): EIP712DomainType {
    return {
        name: LimitOrderV4TypeDataName,
        version: LimitOrderV4TypeDataVersion,
        chainId,
        verifyingContract: getLimitOrderContract(chainId)
    }
}



================================================
FILE: src/limit-order/extensions/README.md
================================================
## :factory: Extension

### Methods

- [decode](#gear-decode)
- [default](#gear-default)
- [keccak256](#gear-keccak256)
- [isEmpty](#gear-isempty)
- [encode](#gear-encode)

#### :gear: decode

| Method | Type |
| ---------- | ---------- |
| `decode` | `(bytes: string) => Extension` |

#### :gear: default

| Method | Type |
| ---------- | ---------- |
| `default` | `() => Extension` |

#### :gear: keccak256

| Method | Type |
| ---------- | ---------- |
| `keccak256` | `() => bigint` |

#### :gear: isEmpty

| Method | Type |
| ---------- | ---------- |
| `isEmpty` | `() => boolean` |

#### :gear: encode

Hex string with 0x

| Method | Type |
| ---------- | ---------- |
| `encode` | `() => string` |

### Properties

- [EMPTY](#gear-empty)
- [makerAssetSuffix](#gear-makerassetsuffix)
- [takerAssetSuffix](#gear-takerassetsuffix)
- [makingAmountData](#gear-makingamountdata)
- [takingAmountData](#gear-takingamountdata)
- [predicate](#gear-predicate)
- [makerPermit](#gear-makerpermit)
- [preInteraction](#gear-preinteraction)
- [postInteraction](#gear-postinteraction)
- [customData](#gear-customdata)

#### :gear: EMPTY

| Property | Type |
| ---------- | ---------- |
| `EMPTY` | `{ makerAssetSuffix: string; takerAssetSuffix: string; makingAmountData: string; takingAmountData: string; predicate: string; makerPermit: string; preInteraction: string; postInteraction: string; customData: string; }` |

#### :gear: makerAssetSuffix

| Property | Type |
| ---------- | ---------- |
| `makerAssetSuffix` | `string` |

#### :gear: takerAssetSuffix

| Property | Type |
| ---------- | ---------- |
| `takerAssetSuffix` | `string` |

#### :gear: makingAmountData

| Property | Type |
| ---------- | ---------- |
| `makingAmountData` | `string` |

#### :gear: takingAmountData

| Property | Type |
| ---------- | ---------- |
| `takingAmountData` | `string` |

#### :gear: predicate

| Property | Type |
| ---------- | ---------- |
| `predicate` | `string` |

#### :gear: makerPermit

| Property | Type |
| ---------- | ---------- |
| `makerPermit` | `string` |

#### :gear: preInteraction

| Property | Type |
| ---------- | ---------- |
| `preInteraction` | `string` |

#### :gear: postInteraction

| Property | Type |
| ---------- | ---------- |
| `postInteraction` | `string` |

#### :gear: customData

| Property | Type |
| ---------- | ---------- |
| `customData` | `string` |

## :factory: ExtensionBuilder

### Methods

- [withMakerAssetSuffix](#gear-withmakerassetsuffix)
- [withTakerAssetSuffix](#gear-withtakerassetsuffix)
- [withMakingAmountData](#gear-withmakingamountdata)
- [withTakingAmountData](#gear-withtakingamountdata)
- [withPredicate](#gear-withpredicate)
- [withMakerPermit](#gear-withmakerpermit)
- [withPreInteraction](#gear-withpreinteraction)
- [withPostInteraction](#gear-withpostinteraction)
- [withCustomData](#gear-withcustomdata)
- [build](#gear-build)

#### :gear: withMakerAssetSuffix

| Method | Type |
| ---------- | ---------- |
| `withMakerAssetSuffix` | `(suffix: string) => this` |

#### :gear: withTakerAssetSuffix

| Method | Type |
| ---------- | ---------- |
| `withTakerAssetSuffix` | `(suffix: string) => this` |

#### :gear: withMakingAmountData

| Method | Type |
| ---------- | ---------- |
| `withMakingAmountData` | `(address: Address, data: string) => this` |

Parameters:

* `address`: Address of contract which will be called with `data` to calculate making amount


#### :gear: withTakingAmountData

| Method | Type |
| ---------- | ---------- |
| `withTakingAmountData` | `(address: Address, data: string) => this` |

Parameters:

* `address`: Address of contract which will be called with `data` to calculate taking amount


#### :gear: withPredicate

| Method | Type |
| ---------- | ---------- |
| `withPredicate` | `(predicate: string) => this` |

#### :gear: withMakerPermit

| Method | Type |
| ---------- | ---------- |
| `withMakerPermit` | `(tokenFrom: Address, permitData: string) => this` |

#### :gear: withPreInteraction

| Method | Type |
| ---------- | ---------- |
| `withPreInteraction` | `(interaction: Interaction) => this` |

#### :gear: withPostInteraction

| Method | Type |
| ---------- | ---------- |
| `withPostInteraction` | `(interaction: Interaction) => this` |

#### :gear: withCustomData

| Method | Type |
| ---------- | ---------- |
| `withCustomData` | `(data: string) => this` |

#### :gear: build

| Method | Type |
| ---------- | ---------- |
| `build` | `() => Extension` |



================================================
FILE: src/limit-order/extensions/extension-builder.ts
================================================
import {isHexString, trim0x} from '@1inch/byte-utils'
import assert from 'assert'
import {Extension} from './extension.js'
import {IExtensionBuilder} from '../types.js'
import {Interaction} from '../interaction.js'
import {Address} from '../../address.js'
import {ZX} from '../../constants.js'

export class ExtensionBuilder implements IExtensionBuilder {
    private makerAssetSuffix = ZX

    private takerAssetSuffix = ZX

    private makingAmountData = ZX

    private takingAmountData = ZX

    private predicate = ZX

    private makerPermit = ZX

    private preInteraction = ZX

    private postInteraction = ZX

    private customData = ZX

    public withMakerAssetSuffix(suffix: string): this {
        assert(isHexString(suffix), 'MakerAssetSuffix must be valid hex string')

        this.makerAssetSuffix = suffix

        return this
    }

    public withTakerAssetSuffix(suffix: string): this {
        assert(isHexString(suffix), 'TakerAssetSuffix must be valid hex string')

        this.takerAssetSuffix = suffix

        return this
    }

    /**
     *
     * @param address Address of contract which will be called with `data` to calculate making amount
     * @param data
     */
    public withMakingAmountData(address: Address, data: string): this {
        assert(isHexString(data), 'MakingAmountData must be valid hex string')

        this.makingAmountData = address.toString() + trim0x(data)

        return this
    }

    /**
     *
     * @param address Address of contract which will be called with `data` to calculate taking amount
     * @param data
     */
    public withTakingAmountData(address: Address, data: string): this {
        assert(isHexString(data), 'TakingAmountData must be valid hex string')

        this.takingAmountData = address.toString() + trim0x(data)

        return this
    }

    public withPredicate(predicate: string): this {
        assert(isHexString(predicate), 'Predicate must be valid hex string')
        this.predicate = predicate

        return this
    }

    public withMakerPermit(tokenFrom: Address, permitData: string): this {
        assert(isHexString(permitData), 'Permit data must be valid hex string')

        this.makerPermit = tokenFrom.toString() + trim0x(permitData)

        return this
    }

    public withPreInteraction(interaction: Interaction): this {
        this.preInteraction = interaction.encode()

        return this
    }

    public withPostInteraction(interaction: Interaction): this {
        this.postInteraction = interaction.encode()

        return this
    }

    public withCustomData(data: string): this {
        assert(isHexString(data), 'Custom data must be valid hex string')

        this.customData = data

        return this
    }

    public build(): Extension {
        return new Extension({
            makerAssetSuffix: this.makerAssetSuffix,
            takerAssetSuffix: this.takerAssetSuffix,
            makingAmountData: this.makingAmountData,
            takingAmountData: this.takingAmountData,
            predicate: this.predicate,
            makerPermit: this.makerPermit,
            preInteraction: this.preInteraction,
            postInteraction: this.postInteraction,
            customData: this.customData
        })
    }
}



================================================
FILE: src/limit-order/extensions/extension.spec.ts
================================================
import {Extension} from './extension.js'

describe('Extension', () => {
    it('should encode/decode', () => {
        const ext = new Extension({
            makerAssetSuffix: '0x01',
            takerAssetSuffix: '0x02',
            makerPermit: '0x03',
            predicate: '0x04',
            makingAmountData: '0x05',
            takingAmountData: '0x06',
            preInteraction: '0x07',
            postInteraction: '0x08',
            customData: '0xff'
        })

        expect(Extension.decode(ext.encode())).toStrictEqual(ext)
    })
})



================================================
FILE: src/limit-order/extensions/extension.ts
================================================
import {keccak256} from 'ethers'
import {BytesIter, isHexString, trim0x, UINT_32_MAX} from '@1inch/byte-utils'
import assert from 'assert'
import {ZX} from '../../constants.js'

export class Extension {
    public static EMPTY = {
        makerAssetSuffix: ZX,
        takerAssetSuffix: ZX,
        makingAmountData: ZX,
        takingAmountData: ZX,
        predicate: ZX,
        makerPermit: ZX,
        preInteraction: ZX,
        postInteraction: ZX,
        customData: ZX
    }

    private static fields = [
        'makerAssetSuffix',
        'takerAssetSuffix',
        'makingAmountData',
        'takingAmountData',
        'predicate',
        'makerPermit',
        'preInteraction',
        'postInteraction'
    ] as const

    public readonly makerAssetSuffix: string = ZX

    public readonly takerAssetSuffix: string = ZX

    public readonly makingAmountData: string = ZX

    public readonly takingAmountData: string = ZX

    public readonly predicate: string = ZX

    public readonly makerPermit: string = ZX

    public readonly preInteraction: string = ZX

    public readonly postInteraction: string = ZX

    public readonly customData: string = ZX

    constructor(data = Extension.EMPTY) {
        Object.entries(data).forEach(([key, val]) =>
            assert(
                isHexString(val) || val === ZX,
                `${key} must be valid hex string`
            )
        )

        this.makerAssetSuffix = data.makerAssetSuffix
        this.takerAssetSuffix = data.takerAssetSuffix
        this.makingAmountData = data.makingAmountData
        this.takingAmountData = data.takingAmountData
        this.predicate = data.predicate
        this.makerPermit = data.makerPermit
        this.preInteraction = data.preInteraction
        this.postInteraction = data.postInteraction
        this.customData = data.customData
    }

    get hasPredicate(): boolean {
        return this.predicate !== ZX
    }

    get hasMakerPermit(): boolean {
        return this.makerPermit !== ZX
    }

    static decode(bytes: string): Extension {
        if (bytes === ZX) {
            return Extension.default()
        }

        const iter = BytesIter.HexString(bytes)
        let offsets = BigInt(iter.nextUint256())
        let consumed = 0

        const data = {} as Record<
            (typeof Extension.fields)[number] | 'customData',
            string
        >

        for (const field of Extension.fields) {
            const offset = Number(offsets & UINT_32_MAX)
            const bytesCount = offset - consumed
            data[field] = iter.nextBytes(bytesCount)

            consumed += bytesCount
            offsets = offsets >> 32n
        }

        data.customData = iter.rest()

        return new Extension(data)
    }

    static default(): Extension {
        return new Extension()
    }

    public keccak256(): bigint {
        return BigInt(keccak256(this.encode()))
    }

    public isEmpty(): boolean {
        const allInteractions = this.getAll()
        const allInteractionsConcat =
            allInteractions.map(trim0x).join('') + trim0x(this.customData)

        return allInteractionsConcat.length === 0
    }

    /**
     * Hex string with 0x
     */
    public encode(): string {
        const allInteractions = this.getAll()

        const allInteractionsConcat =
            allInteractions.map(trim0x).join('') + trim0x(this.customData)

        // https://stackoverflow.com/a/55261098/440168
        const cumulativeSum = (
            (sum) =>
            (value: number): number => {
                sum += value

                return sum
            }
        )(0)
        const offsets = allInteractions
            .map((a) => a.length / 2 - 1)
            .map(cumulativeSum)
            .reduce((acc, a, i) => acc + (BigInt(a) << BigInt(32 * i)), 0n)

        let extension = '0x'

        if (allInteractionsConcat.length > 0) {
            extension +=
                offsets.toString(16).padStart(64, '0') + allInteractionsConcat
        }

        return extension
    }

    private getAll(): string[] {
        return Extension.fields.map((f) => this[f])
    }
}



================================================
FILE: src/limit-order/extensions/index.ts
================================================
export * from './extension.js'
export * from './extension-builder.js'
export * as FeeTakerExt from './fee-taker/index.js'



================================================
FILE: src/limit-order/extensions/fee-taker/errors.ts
================================================
export class FeeTakerExtensionError extends Error {}



================================================
FILE: src/limit-order/extensions/fee-taker/fee-calculator.spec.ts
================================================
import {FeeCalculator} from './fee-calculator.js'
import {IntegratorFee} from './integrator-fee.js'
import {WhitelistHalfAddress} from './whitelist-half-address.js'
import {Fees} from './fees.js'
import {Address} from '../../../address.js'
import {Bps} from '../../../bps.js'

describe('FeeCalculator', () => {
    it('should calculate protocol fee amount', () => {
        // https://etherscan.io/tx/0x8f95dc0e6e836ca0abdad88e20cf61b0caf7c5463d67b577740f3084d428e56e

        const calculator = new FeeCalculator(
            Fees.integratorFee(
                new IntegratorFee(
                    new Address('0x8e097e5e0493de033270a01b324caf31f464dc67'),
                    new Address('0x90cbe4bdd538d6e9b379bff5fe72c3d67a521de5'),
                    new Bps(10n),
                    new Bps(6000n)
                )
            ),
            WhitelistHalfAddress.new([Address.fromBigInt(1n)])
        )

        const protocolFee = calculator.getProtocolFee(
            Address.ZERO_ADDRESS,
            18442227n
        )

        expect(protocolFee).toBe(7377n)
    })
})



================================================
FILE: src/limit-order/extensions/fee-taker/fee-calculator.ts
================================================
import {Fees} from './fees.js'
import {Whitelist} from './types.js'
import {Address} from '../../../address.js'
import {mulDiv, Rounding} from '../../../utils/mul-div.js'

export class FeeCalculator {
    constructor(
        public readonly fees: Fees,
        public readonly whitelist: Whitelist
    ) {}

    public getTakingAmount(taker: Address, orderTakingAmount: bigint): bigint {
        const fees = this.getFeesForTaker(taker)

        return mulDiv(
            orderTakingAmount,
            Fees.BASE_1E5 + fees.resolverFee + fees.integratorFee,
            Fees.BASE_1E5,
            Rounding.Ceil
        )
    }

    public getMakingAmount(taker: Address, makingAmount: bigint): bigint {
        const fees = this.getFeesForTaker(taker)

        return mulDiv(
            makingAmount,
            Fees.BASE_1E5,
            Fees.BASE_1E5 + fees.resolverFee + fees.integratorFee
        )
    }

    /**
     * Fee in `takerAsset` which resolver pays to resolver fee receiver
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */
    public getResolverFee(taker: Address, orderTakingAmount: bigint): bigint {
        // the logic copied from contract to avoid calculation issues
        // @see https://github.com/1inch/limit-order-protocol/blob/22a18f7f20acfec69d4f50ce1880e8e662477710/contracts/extensions/FeeTaker.sol#L145

        const takingAmount = this.getTakingAmount(taker, orderTakingAmount)
        const fees = this.getFeesForTaker(taker)

        return mulDiv(
            takingAmount,
            fees.resolverFee,
            Fees.BASE_1E5 + fees.resolverFee + fees.integratorFee
        )
    }

    /**
     * Fee in `takerAsset` which integrator gets to integrator wallet
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */
    public getIntegratorFee(taker: Address, orderTakingAmount: bigint): bigint {
        // the logic copied from contract to avoid calculation issues
        // @see https://github.com/1inch/limit-order-protocol/blob/22a18f7f20acfec69d4f50ce1880e8e662477710/contracts/extensions/FeeTaker.sol#L145

        const takingAmount = this.getTakingAmount(taker, orderTakingAmount)
        const fees = this.getFeesForTaker(taker)

        const total = mulDiv(
            takingAmount,
            fees.integratorFee,
            Fees.BASE_1E5 + fees.resolverFee + fees.integratorFee
        )

        return mulDiv(
            total,
            BigInt(this.fees.integrator.share.toFraction(Fees.BASE_1E2)),
            Fees.BASE_1E2
        )
    }

    /**
     * Fee in `takerAsset` which protocol gets as share from integrator fee
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */
    public getProtocolShareOfIntegratorFee(
        taker: Address,
        orderTakingAmount: bigint
    ): bigint {
        // the logic copied from contract to avoid calculation issues
        // @see https://github.com/1inch/limit-order-protocol/blob/22a18f7f20acfec69d4f50ce1880e8e662477710/contracts/extensions/FeeTaker.sol#L145

        const takingAmount = this.getTakingAmount(taker, orderTakingAmount)
        const fees = this.getFeesForTaker(taker)

        const total = mulDiv(
            takingAmount,
            fees.integratorFee,
            Fees.BASE_1E5 + fees.resolverFee + fees.integratorFee
        )

        return total - this.getIntegratorFee(taker, orderTakingAmount)
    }

    /**
     * Fee in `takerAsset` which protocol gets
     * It equals to `share from integrator fee plus resolver fee`
     *
     * @param taker who will fill order
     * @param orderTakingAmount taking amount from order struct
     */
    public getProtocolFee(taker: Address, orderTakingAmount: bigint): bigint {
        const resolverFee = this.getResolverFee(taker, orderTakingAmount)
        const integratorPart = this.getProtocolShareOfIntegratorFee(
            taker,
            orderTakingAmount
        )

        return integratorPart + resolverFee
    }

    private getFeesForTaker(taker: Address): {
        resolverFee: bigint
        integratorFee: bigint
    } {
        const discountNumerator = this.whitelist.isWhitelisted(taker)
            ? Number(Fees.BASE_1E2) -
              this.fees.resolver.whitelistDiscount.toFraction(Fees.BASE_1E2)
            : 100

        const resolverFee =
            BigInt(
                discountNumerator *
                    this.fees.resolver.fee.toFraction(Fees.BASE_1E5)
            ) / Fees.BASE_1E2

        const resolverFeeBN = BigInt(resolverFee)
        const integratorFeeBN = BigInt(
            this.fees.integrator.fee.toFraction(Fees.BASE_1E5)
        )

        return {
            resolverFee: resolverFeeBN,
            integratorFee: integratorFeeBN
        }
    }
}



================================================
FILE: src/limit-order/extensions/fee-taker/fee-taker.extension.spec.ts
================================================
import {FeeTakerExtension} from './fee-taker.extension.js'
import {Fees} from './fees.js'
import {ResolverFee} from './resolver-fee.js'
import {IntegratorFee} from './integrator-fee.js'
import {Address} from '../../../address.js'
import {Bps} from '../../../bps.js'
import {Interaction} from '../../interaction.js'

describe('FeeTakerExtension', () => {
    describe('serialize/deserialize', () => {
        it('all data', () => {
            const recipients = {
                integratorFeeRecipient: Address.fromBigInt(2n),
                protocolFeeRecipient: Address.fromBigInt(3n),
                tokensRecipient: Address.fromBigInt(4n)
            }
            const extension = FeeTakerExtension.new(
                Address.fromBigInt(1n),
                new Fees(
                    new ResolverFee(
                        recipients.protocolFeeRecipient,
                        Bps.fromPercent(2),
                        Bps.fromPercent(1)
                    ),
                    new IntegratorFee(
                        recipients.integratorFeeRecipient,
                        recipients.protocolFeeRecipient,
                        Bps.fromFraction(0.0001),
                        Bps.fromPercent(5)
                    )
                ),
                [Address.fromBigInt(100n)],
                {
                    makerPermit: new Interaction(
                        Address.fromBigInt(1n),
                        '0xdeadbeef'
                    ),
                    extraInteraction: new Interaction(
                        Address.fromBigInt(99n),
                        '0xdeadbeefdeadbeef'
                    ),
                    customReceiver: recipients.tokensRecipient
                }
            )

            expect(FeeTakerExtension.fromExtension(extension.build())).toEqual(
                extension
            )
        })

        it('only resolver data', () => {
            const recipients = {
                protocolFeeRecipient: Address.fromBigInt(3n)
            }
            const extension = FeeTakerExtension.new(
                Address.fromBigInt(1n),
                Fees.resolverFee(
                    new ResolverFee(
                        recipients.protocolFeeRecipient,
                        Bps.fromPercent(2)
                    )
                ),
                [Address.fromBigInt(100n)]
            )

            expect(FeeTakerExtension.fromExtension(extension.build())).toEqual(
                extension
            )
        })

        it('only integrator data', () => {
            const recipients = {
                integratorFeeRecipient: Address.fromBigInt(2n),
                protocolFeeRecipient: Address.fromBigInt(3n)
            }
            const extension = FeeTakerExtension.new(
                Address.fromBigInt(1n),
                Fees.integratorFee(
                    new IntegratorFee(
                        recipients.integratorFeeRecipient,
                        recipients.protocolFeeRecipient,
                        Bps.fromFraction(0.0001),
                        Bps.fromPercent(5)
                    )
                ),
                [Address.fromBigInt(100n)]
            )

            expect(FeeTakerExtension.fromExtension(extension.build())).toEqual(
                extension
            )
        })
    })

    it('should calculate taking amount', () => {
        const takerAddress = Address.fromBigInt(100n)
        const ext = FeeTakerExtension.new(
            Address.fromBigInt(1n),
            Fees.resolverFee(
                new ResolverFee(Address.fromBigInt(2n), Bps.fromPercent(1))
            ),
            [takerAddress] // mark taker as whitelisted resolver
        )

        const takingAmount = ext.getTakingAmount(takerAddress, 100_000_000n)
        expect(takingAmount).toEqual(101_000_000n)
    })

    it('should calculate resolver fee', () => {
        const takerAddress = Address.fromBigInt(100n)
        const ext = FeeTakerExtension.new(
            Address.fromBigInt(1n),
            Fees.resolverFee(
                new ResolverFee(Address.fromBigInt(2n), Bps.fromPercent(1))
            ),
            [takerAddress] // mark taker as whitelisted resolver
        )

        const resolverFee = ext.getResolverFee(takerAddress, 100_000_000n)
        expect(resolverFee).toEqual(1_000_000n)
    })

    it('should calculate integrator fee', () => {
        const takerAddress = Address.fromBigInt(100n)
        const ext = FeeTakerExtension.new(
            Address.fromBigInt(1n),
            Fees.integratorFee(
                new IntegratorFee(
                    Address.fromBigInt(2n),
                    Address.fromBigInt(3n),
                    Bps.fromPercent(5), // fee
                    Bps.fromPercent(10) // share
                )
            ),
            [takerAddress] // mark taker as whitelisted resolver
        )

        const integratorFee = ext.getIntegratorFee(takerAddress, 100_000_000n)
        expect(integratorFee).toEqual(500_000n) // 10% from 5% = 0.5%
    })

    it('should calculate protocol fee', () => {
        const protocolAddress = Address.fromBigInt(111n)
        const takerAddress = Address.fromBigInt(100n)
        const ext = FeeTakerExtension.new(
            Address.fromBigInt(1n),
            new Fees(
                new ResolverFee(protocolAddress, Bps.fromPercent(1)),
                new IntegratorFee(
                    Address.fromBigInt(2n),
                    protocolAddress,
                    Bps.fromPercent(5), // fee
                    Bps.fromPercent(10) // share
                )
            ),
            [takerAddress] // mark taker as whitelisted resolver
        )

        const protocolFee = ext.getProtocolFee(takerAddress, 100_000_000n)
        expect(protocolFee).toEqual(1_000_000n + 4_500_000n) // 90% from 5% (integrator fee share)+ 1% (resolver fee) = 5.5%
    })
})



================================================
FILE: src/limit-order/extensions/fee-taker/fee-taker.extension.ts
================================================
import {BN, BytesBuilder, BytesIter} from '@1inch/byte-utils'
import assert from 'assert'
import {Fees} from './fees.js'
import {ResolverFee} from './resolver-fee.js'
import {IntegratorFee} from './integrator-fee.js'
import {WhitelistHalfAddress} from './whitelist-half-address.js'
import {FeeCalculator} from './fee-calculator.js'
import {ExtensionBuilder} from '../extension-builder.js'
import {Address} from '../../../address.js'
import {Interaction} from '../../interaction.js'
import {Extension} from '../extension.js'
import {Bps} from '../../../bps.js'

/**
 * @see https://github.com/1inch/limit-order-protocol/blob/master/contracts/extensions/FeeTaker.sol
 */
export class FeeTakerExtension {
    /**
     * Flags for post-interaction data
     * @private
     */
    private static CUSTOM_RECEIVER_FLAG_BIT = 0n

    private constructor(
        public readonly address: Address,
        public readonly fees: Fees,
        public readonly whitelist: WhitelistHalfAddress,
        public readonly makerPermit?: Interaction,
        public readonly extraInteraction?: Interaction,
        public readonly customReceiver?: Address
    ) {}

    static new(
        /**
         * Address of extension
         */
        address: Address,
        /**
         * @see ResolverFee
         * @see IntegratorFee
         */
        fees: Fees,
        /**
         * If empty, then KYC token is required to fill order
         */
        whitelist?: Address[],
        extra?: {
            makerPermit?: Interaction
            /**
             * In case receiver of taker tokens is not maker
             */
            customReceiver?: Address

            /**
             * Will be called after FeeTaker.postInteraction
             */
            extraInteraction?: Interaction
        }
    ): FeeTakerExtension {
        return new FeeTakerExtension(
            address,
            fees,
            WhitelistHalfAddress.new(whitelist || []),
            extra?.makerPermit,
            extra?.extraInteraction,
            extra?.customReceiver
        )
    }

    /**
     * Create `FeeTakerExtension` from bytes
     *
     * @param bytes 0x prefixed bytes
     */
    public static decode(bytes: string): FeeTakerExtension {
        const extension = Extension.decode(bytes)

        return FeeTakerExtension.fromExtension(extension)
    }

    /**
     * Create `FeeTakerExtension` from `Extension`
     */
    public static fromExtension(extension: Extension): FeeTakerExtension {
        const extensionAddress = Address.fromFirstBytes(
            extension.makingAmountData
        )

        assert(
            Address.fromFirstBytes(extension.takingAmountData).equal(
                extensionAddress
            ) &&
                Address.fromFirstBytes(extension.postInteraction).equal(
                    extensionAddress
                ),
            'Invalid extension, all calls should be to the same address'
        )

        assert(
            extension.takingAmountData == extension.makingAmountData,
            'Invalid extension, taking amount data must be equal to making amount data'
        )

        // region Parse postInteraction data
        const interactionBytes = BytesIter.HexString(extension.postInteraction)
        interactionBytes.nextUint160() // skip address of extension
        const flags = BN.fromHex(interactionBytes.nextUint8())
        const integratorFeeRecipient = new Address(
            interactionBytes.nextUint160()
        )
        const protocolFeeRecipient = new Address(interactionBytes.nextUint160())

        const customTokensRecipient = flags.getBit(
            FeeTakerExtension.CUSTOM_RECEIVER_FLAG_BIT
        )
            ? new Address(interactionBytes.nextUint160())
            : undefined

        const interactionData = parseAmountData(interactionBytes)

        const extraInteraction = interactionBytes.isEmpty()
            ? undefined
            : Interaction.decode(interactionBytes.rest())

        //endregion Parse postInteraction data

        //region Parse amount data
        const amountBytes = BytesIter.HexString(extension.makingAmountData)
        amountBytes.nextUint160() // skip address of extension

        const amountData = parseAmountData(amountBytes)

        //endregion Parse amount data

        const permit = extension.hasMakerPermit
            ? Interaction.decode(extension.makerPermit)
            : undefined

        assert(
            amountData.fees.integratorFee.value ===
                interactionData.fees.integratorFee.value,
            `invalid extension: integrator fee must be same in interaction data and in amount data`
        )
        assert(
            amountData.fees.resolverFee.value ===
                interactionData.fees.resolverFee.value,
            `invalid extension: resolver fee must be same in interaction data and in amount data`
        )

        assert(
            amountData.whitelist.discount.value ===
                interactionData.whitelist.discount.value,
            `invalid extension: whitelist discount fee must be same in interaction data and in amount data`
        )
        assert(
            amountData.fees.integratorShare.value ===
                interactionData.fees.integratorShare.value,
            `invalid extension: integrator share must be same in interaction data and in amount data`
        )

        assert(
            interactionData.whitelist.addresses.length ===
                amountData.whitelist.addresses.length,
            'whitelist must be same in interaction data and in amount data'
        )
        assert(
            interactionData.whitelist.addresses.every(
                (val, i) => amountData.whitelist.addresses[i] === val
            ),
            'whitelist must be same in interaction data and in amount data'
        )

        return new FeeTakerExtension(
            extensionAddress,
            new Fees(
                amountData.fees.resolverFee.isZero()
                    ? ResolverFee.ZERO
                    : new ResolverFee(
                          protocolFeeRecipient,
                          amountData.fees.resolverFee,
                          amountData.whitelist.discount
                      ),
                amountData.fees.integratorFee.isZero()
                    ? IntegratorFee.ZERO
                    : new IntegratorFee(
                          integratorFeeRecipient,
                          protocolFeeRecipient,
                          amountData.fees.integratorFee,
                          amountData.fees.integratorShare
                      )
            ),
            new WhitelistHalfAddress(amountData.whitelist.addresses),
            permit,
            extraInteraction,
            customTokensRecipient
        )
    }

    public getFeeCalculator(): FeeCalculator {
        return new FeeCalculator(this.fees, this.whitelist)
    }

    public build(): Extension {
        const amountGetterData = this.buildAmountGetterData()

        const builder = new ExtensionBuilder()
            .withMakingAmountData(this.address, amountGetterData)
            .withTakingAmountData(this.address, amountGetterData)
            .withPostInteraction(
                new Interaction(this.address, this.buildInteractionData())
            )

        if (this.makerPermit) {
            builder.withMakerPermit(
                this.makerPermit.target,
                this.makerPermit.data
            )
        }

        return builder.build()
    }

    /**
     * Returns takingAmount with applied fees to it
     *
     * @param taker address which fill order
     * @param takingAmount amount to apply fee to
     */
    public getTakingAmount(taker: Address, takingAmount: bigint): bigint {
        return this.getFeeCalculator().getTakingAmount(taker, takingAmount)
    }

    /**
     * Returns makingAmount with applied fees to it
     *
     * @param taker address which fill order
     * @param makingAmount amount to apply fee to
     */
    public getMakingAmount(taker: Address, makingAmount: bigint): bigint {
        return this.getFeeCalculator().getMakingAmount(taker, makingAmount)
    }

    /**
     * Fee in `takerAsset` which resolver pays to resolver fee receiver
     *
     * @param taker who will fill order
     * @param takingAmount taking amount to apply fee to
     */
    public getResolverFee(taker: Address, takingAmount: bigint): bigint {
        return this.getFeeCalculator().getResolverFee(taker, takingAmount)
    }

    /**
     * Fee in `takerAsset` which integrator gets to integrator wallet
     *
     * @param taker who will fill order
     * @param takingAmount taking amount to calculate fee from
     */
    public getIntegratorFee(taker: Address, takingAmount: bigint): bigint {
        return this.getFeeCalculator().getIntegratorFee(taker, takingAmount)
    }

    /**
     * Fee in `takerAsset` which protocol gets as share from integrator fee
     *
     * @param taker who will fill order
     * @param takingAmount taking amount to calculate fee from
     */
    public getProtocolShareOfIntegratorFee(
        taker: Address,
        takingAmount: bigint
    ): bigint {
        return this.getFeeCalculator().getProtocolShareOfIntegratorFee(
            taker,
            takingAmount
        )
    }

    /**
     * Fee in `takerAsset` which protocol gets
     * It equals to `share from integrator fee plus resolver fee`
     *
     * @param taker who will fill order
     * @param takingAmount taking amount to calculate fee from
     */
    public getProtocolFee(taker: Address, takingAmount: bigint): bigint {
        return this.getFeeCalculator().getProtocolFee(taker, takingAmount)
    }

    /**
     * Build data for AmountGetterWithFee
     *
     * 2 bytes — integrator fee percentage (in 1e5)
     * 1 byte - integrator share percentage (in 1e2)
     * 2 bytes — resolver fee percentage (in 1e5)
     * 1 byte - whitelist discount numerator (in 1e2)
     * 1 byte - size of the whitelist
     * (bytes10)[N] whitelisted addresses;
     *
     * @see https://github.com/1inch/limit-order-protocol/blob/22a18f7f20acfec69d4f50ce1880e8e662477710/contracts/extensions/AmountGetterWithFee.sol#L56
     */
    private buildAmountGetterData(): string {
        const integrator = {
            fee: this.fees.integrator.fee.toFraction(Fees.BASE_1E5),
            share: this.fees.integrator.share.toFraction(Fees.BASE_1E2)
        }

        const resolverFee = this.fees.resolver.fee.toFraction(Fees.BASE_1E5)

        const builder = new BytesBuilder()
            .addUint16(BigInt(integrator.fee))
            .addUint8(BigInt(integrator.share))
            .addUint16(BigInt(resolverFee))
            .addUint8(
                BigInt(
                    // contract expects discount numerator, but class contain discount
                    Number(Fees.BASE_1E2) -
                        this.fees.resolver.whitelistDiscount.toFraction(
                            Fees.BASE_1E2
                        )
                )
            )

        this.whitelist.encodeTo(builder)

        return builder.asHex()
    }

    /**
     * Build data for `FeeTaker.postInteraction`
     *
     *
     * 1 byte - flags:
     *      01 bit `CUSTOM_RECEIVER_FLAG` - set to 1 if order has custom receiver
     * 20 bytes — integrator fee recipient
     * 20 bytes - protocol fee recipient
     * [20 bytes] — receiver of taking tokens (optional, if not set, maker is used). See `CUSTOM_RECEIVER_FLAG` flag
     * Same as in `buildAmountGetterData`
     * [bytes20, bytes] - optional extra interaction
     * @see buildAmountGetterData
     * @see https://github.com/1inch/limit-order-protocol/blob/22a18f7f20acfec69d4f50ce1880e8e662477710/contracts/extensions/FeeTaker.sol#L114
     */
    private buildInteractionData(): string {
        const flags = new BN(0n).setBit(
            FeeTakerExtension.CUSTOM_RECEIVER_FLAG_BIT,
            Boolean(this.customReceiver)
        )

        const builder = new BytesBuilder()
            .addUint8(flags)
            .addAddress(this.fees.integrator.integrator.toString())
            .addAddress(this.fees.protocol.toString())

        if (this.customReceiver) {
            builder.addAddress(this.customReceiver.toString())
        }

        builder.addBytes(this.buildAmountGetterData())

        if (this.extraInteraction) {
            builder
                .addAddress(this.extraInteraction.target.toString())
                .addBytes(this.extraInteraction.data)
        }

        return builder.asHex()
    }
}

function parseAmountData(iter: BytesIter<string>): {
    fees: {integratorFee: Bps; integratorShare: Bps; resolverFee: Bps}
    whitelist: {addresses: string[]; discount: Bps}
} {
    const fees = {
        integratorFee: Bps.fromFraction(
            Number(iter.nextUint16()),
            Fees.BASE_1E5
        ),
        integratorShare: Bps.fromFraction(
            Number(iter.nextUint8()),
            Fees.BASE_1E2
        ),
        resolverFee: Bps.fromFraction(Number(iter.nextUint16()), Fees.BASE_1E5)
    }

    const whitelistDiscount = Bps.fromFraction(
        Number(Fees.BASE_1E2) - Number(iter.nextUint8()), // contract uses 1 - discount
        Fees.BASE_1E2
    )

    const whitelistAddresses: string[] = []
    const whitelistFromAmountSize = Number(iter.nextUint8())

    for (let i = 0; i < whitelistFromAmountSize; i++) {
        whitelistAddresses.push(iter.nextBytes(10))
    }

    return {
        fees,
        whitelist: {discount: whitelistDiscount, addresses: whitelistAddresses}
    }
}



================================================
FILE: src/limit-order/extensions/fee-taker/fees.ts
================================================
import assert from 'assert'
import {ResolverFee} from './resolver-fee.js'
import {IntegratorFee} from './integrator-fee.js'
import {Address} from '../../../address.js'

export class Fees {
    /**
     * 100% = 100000
     */
    public static BASE_1E5 = 100_000n

    /**
     * 100% = 100
     */
    public static BASE_1E2 = 100n

    constructor(
        public readonly resolver: ResolverFee,
        public readonly integrator: IntegratorFee
    ) {
        if (!resolver.fee.isZero() && !integrator.fee.isZero()) {
            assert(
                resolver.receiver.equal(integrator.protocol),
                'resolver fee receiver address and integrator fee protocol address must be same'
            )
        }

        assert(
            !(resolver.fee.isZero() && integrator.fee.isZero()),
            'at least one fee must be set'
        )

        assert(
            this.integrator.fee.toFraction() < 0.6553,
            'max fee is 65.53%' // 2bytes
        )
        assert(
            this.resolver.fee.toFraction() < 0.6553,
            'max fee is 65.53%' // 2bytes
        )
    }

    public get protocol(): Address {
        return this.integrator.fee.isZero()
            ? this.resolver.receiver
            : this.integrator.protocol
    }

    static resolverFee(fee: ResolverFee): Fees {
        return new Fees(fee, IntegratorFee.ZERO)
    }

    static integratorFee(fee: IntegratorFee): Fees {
        return new Fees(ResolverFee.ZERO, fee)
    }
}



================================================
FILE: src/limit-order/extensions/fee-taker/index.ts
================================================
export * from './fee-taker.extension.js'
export * from './fees.js'
export * from './integrator-fee.js'
export * from './resolver-fee.js'
export * from './fee-calculator.js'
export * from './types.js'
export * from './whitelist-half-address.js'



================================================
FILE: src/limit-order/extensions/fee-taker/integrator-fee.ts
================================================
import {Address} from '../../../address.js'
import {Bps} from '../../../bps.js'

/**
 * Integrator gets `share` of `fee` to `integrator` and the rest goes to `protocol`
 */
export class IntegratorFee {
    public static ZERO = new IntegratorFee(
        Address.ZERO_ADDRESS,
        Address.ZERO_ADDRESS,
        Bps.ZERO,
        Bps.ZERO
    )

    constructor(
        public readonly integrator: Address,
        public readonly protocol: Address,
        public readonly fee: Bps,
        public readonly share: Bps
    ) {
        if (fee.isZero()) {
            if (!share.isZero()) {
                throw new Error('integrator share must be zero if fee is zero')
            }

            if (!integrator.isZero()) {
                throw new Error(
                    'integrator address must be zero if fee is zero'
                )
            }

            if (!protocol.isZero()) {
                throw new Error('protocol address must be zero if fee is zero')
            }
        }

        if ((integrator.isZero() || protocol.isZero()) && !fee.isZero()) {
            throw new Error(
                'fee must be zero if integrator or protocol is zero address'
            )
        }
    }
}



================================================
FILE: src/limit-order/extensions/fee-taker/resolver-fee.ts
================================================
import assert from 'assert'
import {Address} from '../../../address.js'
import {Bps} from '../../../bps.js'

/**
 * Fee paid by resolver to `receiver`
 */
export class ResolverFee {
    public static ZERO = new ResolverFee(Address.ZERO_ADDRESS, Bps.ZERO)

    constructor(
        public readonly receiver: Address,
        public readonly fee: Bps,
        /**
         * whitelisted resolvers have discount on fee
         */
        public readonly whitelistDiscount = Bps.ZERO
    ) {
        if (receiver.isZero() && !fee.isZero()) {
            throw new Error('fee must be zero if receiver is zero address')
        }

        if (!receiver.isZero() && fee.isZero()) {
            throw new Error('receiver must be zero address if fee is zero')
        }

        if (fee.isZero() && !whitelistDiscount.isZero()) {
            throw new Error('whitelist discount must be zero if fee is zero')
        }

        assert(
            this.whitelistDiscount.value % 100n === 0n,
            `whitelist discount must have percent precision: 1%, 2% and so on`
        )
    }
}



================================================
FILE: src/limit-order/extensions/fee-taker/types.ts
================================================
import {Address} from '../../../address.js'

export type Whitelist = {
    isWhitelisted(taker: Address): boolean
}



================================================
FILE: src/limit-order/extensions/fee-taker/whitelist-half-address.ts
================================================
import {BytesBuilder} from '@1inch/byte-utils'
import {Address} from 'address'
import {Whitelist} from './types.js'

export class WhitelistHalfAddress implements Whitelist {
    constructor(
        /**
         * Last 10 bytes of addresses
         */
        private readonly addresses: string[]
    ) {}

    public get length(): number {
        return this.addresses.length
    }

    static new(addresses: Address[]): WhitelistHalfAddress {
        return new WhitelistHalfAddress(
            addresses?.map((w) => w.lastHalf()) || []
        )
    }

    public isWhitelisted(address: Address): boolean {
        const half = address.lastHalf()

        return this.addresses.some((w) => w === half)
    }

    public encodeTo(builder: BytesBuilder): BytesBuilder {
        builder.addUint8(BigInt(this.addresses.length))

        for (const halfAddress of this.addresses) {
            builder.addBytes(halfAddress)
        }

        return builder
    }
}



================================================
FILE: src/limit-order-contract/README.md
================================================
## :factory: LimitOrderContract

### Methods

- [getFillOrderCalldata](#gear-getfillordercalldata)
- [getFillContractOrderCalldata](#gear-getfillcontractordercalldata)
- [getFillOrderArgsCalldata](#gear-getfillorderargscalldata)
- [getFillContractOrderArgsCalldata](#gear-getfillcontractorderargscalldata)

#### :gear: getFillOrderCalldata

Fill order WITHOUT an extension and taker interaction

| Method | Type |
| ---------- | ---------- |
| `getFillOrderCalldata` | `(order: LimitOrderV4Struct, signature: string, takerTraits: TakerTraits, amount: bigint) => string` |

#### :gear: getFillContractOrderCalldata

Fill contract order (order maker is smart-contract) WITHOUT an extension and taker interaction

| Method | Type |
| ---------- | ---------- |
| `getFillContractOrderCalldata` | `(order: LimitOrderV4Struct, signature: string, takerTraits: TakerTraits, amount: bigint) => string` |

#### :gear: getFillOrderArgsCalldata

Fill order WITH an extension or taker interaction

| Method | Type |
| ---------- | ---------- |
| `getFillOrderArgsCalldata` | `(order: LimitOrderV4Struct, signature: string, takerTraits: TakerTraits, amount: bigint) => string` |

#### :gear: getFillContractOrderArgsCalldata

Fill contract order (order maker is smart-contract) WITH an extension or taker interaction

| Method | Type |
| ---------- | ---------- |
| `getFillContractOrderArgsCalldata` | `(order: LimitOrderV4Struct, signature: string, takerTraits: TakerTraits, amount: bigint) => string` |



================================================
FILE: src/limit-order-contract/index.ts
================================================
export * from './limit-order-contract.js'



================================================
FILE: src/limit-order-contract/limit-order-contract.ts
================================================
import {Interface, Signature} from 'ethers'
import assert from 'assert'
import {LimitOrderV4Struct, TakerTraits} from '../limit-order/index.js'
import LOP_V4_ABI from '../abi/AggregationRouterV6.abi.json' with {type: 'json'}
import {ZX} from '../constants.js'

const lopContract = new Interface(LOP_V4_ABI)

/**
 * @see https://github.com/1inch/limit-order-protocol/blob/3169ea46932ef44114a215a60d1d91ef022b416d/contracts/OrderMixin.sol#L27
 */
export class LimitOrderContract {
    /**
     *  Fill order WITHOUT an extension and taker interaction
     *
     *  @see getFillOrderArgsCalldata
     *  @see getFillContractOrderCalldata
     */
    static getFillOrderCalldata(
        order: LimitOrderV4Struct,
        signature: string,
        takerTraits: TakerTraits,
        amount: bigint
    ): string {
        const {r, yParityAndS: vs} = Signature.from(signature)
        const {args, trait} = takerTraits.encode()

        assert(
            args === ZX,
            'takerTraits contains args data, use LimitOrderContract.getFillOrderArgsCalldata method'
        )

        return lopContract.encodeFunctionData('fillOrder', [
            order,
            r,
            vs,
            amount,
            trait
        ])
    }

    /**
     *  Fill contract order (order maker is smart-contract) WITHOUT an extension and taker interaction
     *
     *  @see getFillContractOrderArgsCalldata
     *  @see getFillOrderCalldata
     */
    static getFillContractOrderCalldata(
        order: LimitOrderV4Struct,
        signature: string,
        takerTraits: TakerTraits,
        amount: bigint
    ): string {
        const {args, trait} = takerTraits.encode()

        assert(
            args === ZX,
            'takerTraits contains args data, use LimitOrderContract.getFillContractOrderArgsCalldata method'
        )

        return lopContract.encodeFunctionData('fillContractOrder', [
            order,
            signature,
            amount,
            trait,
            args
        ])
    }

    /**
     *  Fill order WITH an extension or taker interaction
     *
     *  @see getFillOrderCalldata
     *  @see getFillContractOrderArgsCalldata
     */
    static getFillOrderArgsCalldata(
        order: LimitOrderV4Struct,
        signature: string,
        takerTraits: TakerTraits,
        amount: bigint
    ): string {
        const {r, yParityAndS: vs} = Signature.from(signature)
        const {args, trait} = takerTraits.encode()

        return lopContract.encodeFunctionData('fillOrderArgs', [
            order,
            r,
            vs,
            amount,
            trait,
            args
        ])
    }

    /**
     *  Fill contract order (order maker is smart-contract) WITH an extension or taker interaction
     *
     *  @see getFillOrderArgsCalldata
     *  @see getFillContractOrderCalldata
     */
    static getFillContractOrderArgsCalldata(
        order: LimitOrderV4Struct,
        signature: string,
        takerTraits: TakerTraits,
        amount: bigint
    ): string {
        const {args, trait} = takerTraits.encode()

        return lopContract.encodeFunctionData('fillContractOrderArgs', [
            order,
            signature,
            amount,
            trait,
            args
        ])
    }
}



================================================
FILE: src/rfq-order/index.ts
================================================
export * from './rfq-order.js'



================================================
FILE: src/rfq-order/rfq-order.spec.ts
================================================
import {RfqOrder} from './rfq-order.js'
import {Address} from '../address.js'

describe('RfqOrder', () => {
    it('Should validate max nonce', () => {
        expect(
            () =>
                new RfqOrder(
                    {
                        makerAsset: new Address(
                            '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                        ),
                        takerAsset: new Address(
                            '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
                        ),
                        makingAmount: 1000000000000000000n,
                        takingAmount: 1420000000n,
                        maker: new Address(
                            '0x00000000219ab540356cbb839cbe05303d7705fa'
                        )
                    },
                    {nonce: 1n << 41n, expiration: 1000n}
                )
        ).toThrow()
    })
})

it('should create RfqOrder with permit2', () => {
    const order = new RfqOrder(
        {
            makerAsset: new Address(
                '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            ),
            takerAsset: new Address(
                '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
            ),
            makingAmount: 1000000000000000000n,
            takingAmount: 1420000000n,
            maker: new Address('0x00000000219ab540356cbb839cbe05303d7705fa')
        },
        {
            nonce: 1n,
            expiration: 1000n,
            usePermit2: true
        }
    )

    expect(order.makerTraits.isPermit2()).toEqual(true)
})



================================================
FILE: src/rfq-order/rfq-order.ts
================================================
import {LimitOrder, MakerTraits, OrderInfoData} from '../limit-order/index.js'
import {Address} from '../address.js'

/**
 * Light, gas efficient version of LimitOrder
 * It does not support multiple fills and extension
 */
export class RfqOrder extends LimitOrder {
    constructor(
        orderInfo: Omit<OrderInfoData, 'salt' | 'receiver'>,
        options: {
            allowedSender?: Address
            /**
             * Timestamp in seconds
             */
            expiration: bigint
            /**
             * Unique id among all maker orders
             * Max value is UINT_40_MAX
             */
            nonce: bigint
            usePermit2?: boolean
        }
    ) {
        const {allowedSender, nonce, expiration, usePermit2} = options

        const makerTraits = new MakerTraits(0n)
            .disableMultipleFills()
            .allowPartialFills()
            .withExpiration(expiration)
            .withNonce(nonce)

        if (allowedSender) {
            makerTraits.withAllowedSender(allowedSender)
        }

        if (usePermit2) {
            makerTraits.enablePermit2()
        }

        super(orderInfo, makerTraits)
    }
}



================================================
FILE: src/sdk/index.ts
================================================
export * from './sdk.js'



================================================
FILE: src/sdk/sdk.ts
================================================
import {Address} from '../address.js'
import {
    LimitOrderWithFee,
    MakerTraits,
    OrderInfoData,
    FeeTakerExt,
    Interaction
} from '../limit-order/index.js'
import {Api, ApiConfig} from '../api/index.js'
import {Bps} from '../bps.js'

export class Sdk {
    private readonly api: Api

    constructor(apiConfig: ApiConfig) {
        this.api = new Api(apiConfig)
    }

    /**
     * Create LimitOrder with an extension params from API
     *
     * @returns LimitOrderWithFee to sign and submit to relayer
     */
    public async createOrder(
        orderInfo: OrderInfoData,
        makerTraits = MakerTraits.default(),
        extra: {
            makerPermit?: Interaction
            integratorFee?: FeeTakerExt.IntegratorFee
        } = {}
    ): Promise<LimitOrderWithFee> {
        const feeParams = await this.api.getFeeParams({
            makerAsset: orderInfo.makerAsset,
            takerAsset: orderInfo.takerAsset,
            makerAmount: orderInfo.makingAmount,
            takerAmount: orderInfo.takingAmount
        })

        const fees = new FeeTakerExt.Fees(
            new FeeTakerExt.ResolverFee(
                new Address(feeParams.protocolFeeReceiver),
                new Bps(BigInt(feeParams.feeBps)),
                Bps.fromPercent(feeParams.whitelistDiscountPercent)
            ),
            extra.integratorFee ?? FeeTakerExt.IntegratorFee.ZERO
        )

        const feeExt = FeeTakerExt.FeeTakerExtension.new(
            new Address(feeParams.extensionAddress),
            fees,
            Object.values(feeParams.whitelist).map((w) => new Address(w)),
            {
                ...extra,
                customReceiver: orderInfo.receiver
            }
        )

        return new LimitOrderWithFee(orderInfo, makerTraits, feeExt)
    }

    public submitOrder(
        order: LimitOrderWithFee,
        signature: string
    ): Promise<void> {
        return this.api.submitOrder(order, signature)
    }
}



================================================
FILE: src/utils/mul-div.ts
================================================
export enum Rounding {
    Ceil,
    Floor
}

// todo: move to more appropriate place
export function mulDiv(
    a: bigint,
    b: bigint,
    x: bigint,
    rounding: Rounding = Rounding.Floor
): bigint {
    const res = (a * b) / x

    if (rounding === Rounding.Ceil && (a * b) % x > 0) {
        return res + 1n
    }

    return res
}



================================================
FILE: src/utils/rand-bigint.spec.ts
================================================
import {randBigInt} from './rand-bigint.js'

describe('randBigint', () => {
    it('should generate rand bigint in correct interval', () => {
        expect(randBigInt(1)).toBeGreaterThanOrEqual(0n)
        expect(randBigInt(1)).toBeLessThanOrEqual(1n)

        expect(randBigInt(10n)).toBeGreaterThanOrEqual(0)
        expect(randBigInt(10n)).toBeLessThanOrEqual(10n)

        expect(randBigInt(2n << 96n)).toBeGreaterThanOrEqual(0)
        expect(randBigInt(2n << 96n)).toBeLessThanOrEqual(2n << 96n)
    })
})



================================================
FILE: src/utils/rand-bigint.ts
================================================
import {randomBytes} from 'ethers'

export function randBigInt(max: number | bigint): bigint {
    let bytesCount = 0
    max = BigInt(max) + 1n
    let rest = max
    while (rest) {
        rest = rest >> 8n
        bytesCount += 1
    }

    const bytes = randomBytes(bytesCount)

    const val = bytes.reduce(
        (acc, val, i) => acc + (BigInt(val) << BigInt(i * 8)),
        0n
    )

    return val % max
}



================================================
FILE: tests/addresses.ts
================================================
export const WETH = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
export const USDC = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'



================================================
FILE: tests/global-setup.ts
================================================
import {GenericContainer} from 'testcontainers'
import {LogWaitStrategy} from 'testcontainers/build/wait-strategies/log-wait-strategy'
import {
    ContractFactory,
    InterfaceAbi,
    JsonRpcProvider,
    parseEther,
    parseUnits,
    Wallet
} from 'ethers'
import './global.d.ts'
import {TestWallet} from './test-wallet'
import {USDC, WETH} from './addresses'
import LOP from '../dist/contracts/TestLimitOrderProtocol.sol/TestLimitOrderProtocol.json'
import FeeTakerExt from '../dist/contracts/TestFeeTaker.sol/TestFeeTaker.json'

export default async function setupGlobalSetup(): Promise<void> {
    await startNode()
    await deployContracts()
    await initUsers()
}

const forkUrl = process.env.FORK_URL || 'https://eth.meowrpc.com'

async function startNode(): Promise<void> {
    const innerPort = 8545
    const anvil = await new GenericContainer(
        'ghcr.io/foundry-rs/foundry:nightly-1710187c614f01598116e67aaf4cda76e7b532ec@sha256:8ff219280417ac9a288d5ce136314b38807e0df71cb9e00f4245d7a2917395ff'
    )
        .withExposedPorts(innerPort)
        .withCommand([`anvil -f ${forkUrl} --host 0.0.0.0`])
        // .withLogConsumer((s) => s.pipe(process.stdout))
        .withWaitStrategy(new LogWaitStrategy('Listening on 0.0.0.0:8545', 1))
        .withName(`anvil_limit_order_tests`)
        .start()

    const url = `http://127.0.0.1:${anvil.getMappedPort(innerPort)}`

    globalThis.localNode = anvil
    globalThis.localNodeProvider = new JsonRpcProvider(url, 1, {
        cacheTimeout: -1,
        staticNetwork: true
    })
}

async function deployContracts(): Promise<void> {
    const deployer = new Wallet(
        '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80',
        globalThis.localNodeProvider
    )

    globalThis.limitOrderProtocolAddress = await deploy(LOP, [WETH], deployer)
    globalThis.feeTakerExtensionAddress = await deploy(
        FeeTakerExt,
        [
            globalThis.limitOrderProtocolAddress,
            '0xacce550000159e70908c0499a1119d04e7039c28', // access token
            WETH,
            deployer.address // owner
        ],
        deployer
    )
}
async function initUsers(): Promise<void> {
    const USDC_DONOR = await TestWallet.fromAddress(
        '0x47ac0Fb4F2D84898e4D9E7b4DaB3C24507a6D503',
        globalThis.localNodeProvider
    )

    // maker have WETH
    globalThis.maker = await TestWallet.fromAddress(
        '0x70997970C51812dc3A010C7d01b50e0d17dc79C8',
        globalThis.localNodeProvider
    )
    await globalThis.maker.transfer(WETH, parseEther('5'))
    await globalThis.maker.unlimitedApprove(
        WETH,
        globalThis.limitOrderProtocolAddress
    )

    // Taker have USDC
    globalThis.taker = await TestWallet.fromAddress(
        '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',
        globalThis.localNodeProvider
    )
    await USDC_DONOR.transferToken(
        USDC,
        await globalThis.taker.getAddress(),
        parseUnits('100000', 6)
    )
    await globalThis.taker.unlimitedApprove(
        USDC,
        globalThis.limitOrderProtocolAddress
    )
}

/**
 * Deploy contract and return its address
 */
async function deploy(
    json: {abi: InterfaceAbi; bytecode: {object: string}},
    params: unknown[],
    deployer: Wallet
): Promise<string> {
    const deployed = await new ContractFactory(
        json.abi,
        json.bytecode,
        deployer
    ).deploy(...params)
    await deployed.waitForDeployment()

    return deployed.getAddress()
}



================================================
FILE: tests/global-tear-down.ts
================================================
import './global.d.ts'

export default async function (): Promise<void> {
    globalThis.localNodeProvider.destroy()
    await globalThis.localNode.stop()
}



================================================
FILE: tests/global.d.ts
================================================
import {StartedTestContainer} from 'testcontainers'
import {TestWallet} from './test-wallet'

/* eslint-disable no-var */

declare global {
    var localNode: StartedTestContainer
    var localNodeProvider: JsonRpcProvider
    var maker: TestWallet
    var taker: TestWallet
    var limitOrderProtocolAddress: string
    var feeTakerExtensionAddress: string
}



================================================
FILE: tests/test-wallet.ts
================================================
import {
    AbiCoder,
    Contract,
    JsonRpcProvider,
    Signer,
    TransactionRequest,
    Wallet as PKWallet
} from 'ethers'
import ERC20 from '../dist/contracts/IERC20.sol/IERC20.json'
import {EIP712TypedData} from '../src'

const coder = AbiCoder.defaultAbiCoder()

export class TestWallet {
    public provider: JsonRpcProvider

    public signer: Signer

    constructor(
        privateKeyOrSigner: string | Signer,
        provider: JsonRpcProvider
    ) {
        this.provider = provider
        this.signer =
            typeof privateKeyOrSigner === 'string'
                ? new PKWallet(privateKeyOrSigner, this.provider)
                : privateKeyOrSigner
    }

    static async signTypedData(
        signer: Signer,
        typedData: EIP712TypedData
    ): Promise<string> {
        return signer.signTypedData(
            typedData.domain,
            {Order: typedData.types[typedData.primaryType]},
            typedData.message
        )
    }

    public static async fromAddress(
        address: string,
        provider: JsonRpcProvider
    ): Promise<TestWallet> {
        await provider.send('anvil_impersonateAccount', [address.toString()])

        const signer = await provider.getSigner(address.toString())

        return new TestWallet(signer, provider)
    }

    async tokenBalance(token: string): Promise<bigint> {
        const tokenContract = new Contract(
            token.toString(),
            ERC20.abi,
            this.provider
        )

        return tokenContract.balanceOf(await this.getAddress())
    }

    public async nativeBalance(): Promise<bigint> {
        return this.provider.getBalance(await this.getAddress())
    }

    async topUpFromDonor(
        token: string,
        donor: string,
        amount: bigint
    ): Promise<void> {
        const donorWallet = await TestWallet.fromAddress(donor, this.provider)
        await donorWallet.transferToken(token, await this.getAddress(), amount)
    }

    public async getAddress(): Promise<string> {
        return this.signer.getAddress()
    }

    public async unlimitedApprove(
        tokenAddress: string,
        spender: string
    ): Promise<void> {
        const currentApprove = await this.getAllowance(tokenAddress, spender)

        // for usdt like tokens
        if (currentApprove !== 0n) {
            await this.approveToken(tokenAddress, spender, 0n)
        }

        await this.approveToken(tokenAddress, spender, (1n << 256n) - 1n)
    }

    public async getAllowance(token: string, spender: string): Promise<bigint> {
        const contract = new Contract(
            token.toString(),
            ERC20.abi,
            this.provider
        )

        return contract.allowance(await this.getAddress(), spender.toString())
    }

    public async transfer(dest: string, amount: bigint): Promise<void> {
        await this.signer.sendTransaction({
            to: dest,
            value: amount
        })
    }

    public async transferToken(
        token: string,
        dest: string,
        amount: bigint
    ): Promise<void> {
        const tx = await this.signer.sendTransaction({
            to: token.toString(),
            data:
                '0xa9059cbb' +
                coder
                    .encode(['address', 'uint256'], [dest.toString(), amount])
                    .slice(2),
            gasLimit: 1_000_000
        })

        await tx.wait()
    }

    public async approveToken(
        token: string,
        spender: string,
        amount: bigint
    ): Promise<void> {
        const tx = await this.signer.sendTransaction({
            to: token.toString(),
            data:
                '0x095ea7b3' +
                coder
                    .encode(
                        ['address', 'uint256'],
                        [spender.toString(), amount]
                    )
                    .slice(2)
        })

        await tx.wait()
    }

    public async signTypedData(typedData: EIP712TypedData): Promise<string> {
        return TestWallet.signTypedData(this.signer, typedData)
    }

    async send(
        param: TransactionRequest
    ): Promise<{txHash: string; blockTimestamp: bigint; blockHash: string}> {
        const res = await this.signer.sendTransaction({
            ...param,
            gasLimit: 10_000_000,
            from: this.getAddress()
        })
        const receipt = await res.wait(1)

        if (receipt && receipt.status) {
            return {
                txHash: receipt.hash,
                blockTimestamp: BigInt((await res.getBlock())!.timestamp),
                blockHash: res.blockHash as string
            }
        }

        throw new Error((await receipt?.getResult()) || 'unknown error')
    }
}



================================================
FILE: tests/utils.ts
================================================
import {EIP712TypedData} from '../src'
import './global.d.ts'

export const now = (): bigint => BigInt(Math.floor(Date.now() / 1000))
export const patchVerifyingContract = (
    td: EIP712TypedData
): EIP712TypedData => {
    td.domain.verifyingContract =
        globalThis.limitOrderProtocolAddress.toLowerCase()

    return td
}



================================================
FILE: tests/extensions/fee-taker/fee-taker.spec.ts
================================================
import {parseEther, parseUnits} from 'ethers'
import {
    Address,
    AmountMode,
    LimitOrderContract,
    MakerTraits,
    TakerTraits
} from '../../../src'
import '../../global.d.ts'
import {USDC, WETH} from '../../addresses'
import {patchVerifyingContract} from '../../utils'
import {TestWallet} from '../../test-wallet'
import {LimitOrderWithFee} from '../../../src/limit-order/limit-order-with-fee'
import {FeeTakerExtension} from '../../../src/limit-order/extensions/fee-taker/fee-taker.extension'
import {Fees} from '../../../src/limit-order/extensions/fee-taker/fees'
import {ResolverFee} from '../../../src/limit-order/extensions/fee-taker/resolver-fee'
import {Bps} from '../../../src/bps'
import {IntegratorFee} from '../../../src/limit-order/extensions/fee-taker'

describe('FeeTakerExtension', () => {
    const maker = globalThis.maker
    const taker = globalThis.taker
    const LOP = globalThis.limitOrderProtocolAddress
    const FEE_TAKER_EXT = globalThis.feeTakerExtensionAddress

    let protocol: TestWallet
    beforeAll(async () => {
        protocol = await TestWallet.fromAddress(
            Address.fromBigInt(256n).toString(),
            globalThis.localNodeProvider
        )
    })

    it('should execute order with resolver fee', async () => {
        const initBalances = {
            usdc: {
                maker: await maker.tokenBalance(USDC),
                taker: await taker.tokenBalance(USDC),
                protocol: await protocol.tokenBalance(USDC)
            },
            weth: {
                maker: await maker.tokenBalance(WETH),
                taker: await taker.tokenBalance(WETH),
                protocol: await protocol.tokenBalance(WETH)
            }
        }

        const takerAddress = new Address(await taker.getAddress())

        const feeExtension = FeeTakerExtension.new(
            new Address(FEE_TAKER_EXT),
            Fees.resolverFee(
                new ResolverFee(
                    new Address(await protocol.getAddress()),
                    Bps.fromPercent(1)
                )
            ),
            [takerAddress] // mark taker as whitelisted resolver
        )

        const order = new LimitOrderWithFee(
            {
                maker: new Address(await maker.getAddress()),
                makerAsset: new Address(WETH),
                takerAsset: new Address(USDC),
                makingAmount: parseEther('0.1'),
                takingAmount: parseUnits('100', 6)
            },
            MakerTraits.default(),
            feeExtension
        )

        const signature = await maker.signTypedData(
            patchVerifyingContract(order.getTypedData(1))
        )

        const data = LimitOrderContract.getFillOrderArgsCalldata(
            order.build(),
            signature,
            TakerTraits.default()
                .setExtension(order.extension)
                .setAmountMode(AmountMode.maker),
            order.makingAmount
        )

        await taker.send({
            data,
            to: LOP
        })

        const finalBalances = {
            usdc: {
                maker: await maker.tokenBalance(USDC),
                taker: await taker.tokenBalance(USDC),
                protocol: await protocol.tokenBalance(USDC)
            },
            weth: {
                maker: await maker.tokenBalance(WETH),
                taker: await taker.tokenBalance(WETH),
                protocol: await protocol.tokenBalance(WETH)
            }
        }

        expect(initBalances.weth.maker - finalBalances.weth.maker).toBe(
            order.makingAmount
        )
        expect(finalBalances.usdc.maker - initBalances.usdc.maker).toBe(
            order.takingAmount
        )

        expect(finalBalances.weth.taker - initBalances.weth.taker).toBe(
            order.makingAmount
        )
        expect(initBalances.usdc.taker - finalBalances.usdc.taker).toBe(
            order.getTakingAmount(takerAddress)
        )

        expect(finalBalances.usdc.protocol - initBalances.usdc.protocol).toBe(
            order.getProtocolFee(takerAddress)
        )
        expect(finalBalances.weth.protocol - initBalances.weth.protocol).toBe(
            0n
        )
    })

    it('should execute order with integrator fee', async () => {
        const integrator = await TestWallet.fromAddress(
            Address.fromBigInt(256n).toString(),
            globalThis.localNodeProvider
        )
        const initBalances = {
            usdc: {
                maker: await maker.tokenBalance(USDC),
                taker: await taker.tokenBalance(USDC),
                protocol: await protocol.tokenBalance(USDC),
                integrator: await integrator.tokenBalance(USDC)
            },
            weth: {
                maker: await maker.tokenBalance(WETH),
                taker: await taker.tokenBalance(WETH),
                protocol: await protocol.tokenBalance(WETH),
                integrator: await integrator.tokenBalance(WETH)
            }
        }

        const takerAddress = new Address(await taker.getAddress())
        const protocolAddress = new Address(await protocol.getAddress())

        const feeExtension = FeeTakerExtension.new(
            new Address(FEE_TAKER_EXT),
            Fees.integratorFee(
                new IntegratorFee(
                    Address.fromBigInt(2n),
                    protocolAddress,
                    Bps.fromPercent(5), // fee
                    Bps.fromPercent(50) // share
                )
            ),
            [takerAddress] // mark taker as whitelisted resolver
        )

        const order = new LimitOrderWithFee(
            {
                maker: new Address(await maker.getAddress()),
                makerAsset: new Address(WETH),
                takerAsset: new Address(USDC),
                makingAmount: parseEther('0.1'),
                takingAmount: parseUnits('100', 6)
            },
            MakerTraits.default(),
            feeExtension
        )

        const signature = await maker.signTypedData(
            patchVerifyingContract(order.getTypedData(1))
        )

        const data = LimitOrderContract.getFillOrderArgsCalldata(
            order.build(),
            signature,
            TakerTraits.default()
                .setExtension(order.extension)
                .setAmountMode(AmountMode.maker),
            order.makingAmount
        )

        await taker.send({
            data,
            to: LOP
        })

        const finalBalances = {
            usdc: {
                maker: await maker.tokenBalance(USDC),
                taker: await taker.tokenBalance(USDC),
                protocol: await protocol.tokenBalance(USDC),
                integrator: await integrator.tokenBalance(USDC)
            },
            weth: {
                maker: await maker.tokenBalance(WETH),
                taker: await taker.tokenBalance(WETH),
                protocol: await protocol.tokenBalance(WETH),
                integrator: await integrator.tokenBalance(WETH)
            }
        }

        expect(initBalances.weth.maker - finalBalances.weth.maker).toBe(
            order.makingAmount
        )
        expect(finalBalances.usdc.maker - initBalances.usdc.maker).toBe(
            order.takingAmount
        )

        expect(finalBalances.weth.taker - initBalances.weth.taker).toBe(
            order.makingAmount
        )
        expect(initBalances.usdc.taker - finalBalances.usdc.taker).toBe(
            order.getTakingAmount(takerAddress)
        )

        expect(finalBalances.usdc.protocol - initBalances.usdc.protocol).toBe(
            order.getProtocolFee(takerAddress)
        )
        expect(finalBalances.weth.protocol - initBalances.weth.protocol).toBe(
            0n
        )

        expect(
            finalBalances.usdc.integrator - initBalances.usdc.integrator
        ).toBe(order.getIntegratorFee(takerAddress))
        expect(
            finalBalances.weth.integrator - initBalances.weth.integrator
        ).toBe(0n)
    })
})



================================================
FILE: tests/rfq/rfq.spec.ts
================================================
import {parseEther, parseUnits} from 'ethers'
import {
    Address,
    AmountMode,
    LimitOrderContract,
    randBigInt,
    RfqOrder,
    TakerTraits
} from '../../src'
import '../global.d.ts'
import {USDC, WETH} from '../addresses'
import {now, patchVerifyingContract} from '../utils'

describe('RFQ', () => {
    const maker = globalThis.maker
    const taker = globalThis.taker
    const LOP = globalThis.limitOrderProtocolAddress

    it('should execute RFQ order', async () => {
        const initBalances = {
            usdc: {
                maker: await maker.tokenBalance(USDC),
                taker: await taker.tokenBalance(USDC)
            },
            weth: {
                maker: await maker.tokenBalance(WETH),
                taker: await taker.tokenBalance(WETH)
            }
        }

        const order = new RfqOrder(
            {
                maker: new Address(await maker.getAddress()),
                makerAsset: new Address(WETH),
                takerAsset: new Address(USDC),
                makingAmount: parseEther('0.1'),
                takingAmount: parseUnits('100', 6)
            },
            {
                nonce: randBigInt(10000),
                expiration: now() + 120n
            }
        )

        const signature = await maker.signTypedData(
            patchVerifyingContract(order.getTypedData(1))
        )

        const data = LimitOrderContract.getFillOrderCalldata(
            order.build(),
            signature,
            TakerTraits.default().setAmountMode(AmountMode.maker),
            order.makingAmount
        )

        await taker.send({
            data,
            to: LOP
        })

        const finalBalances = {
            usdc: {
                maker: await maker.tokenBalance(USDC),
                taker: await taker.tokenBalance(USDC)
            },
            weth: {
                maker: await maker.tokenBalance(WETH),
                taker: await taker.tokenBalance(WETH)
            }
        }

        expect(initBalances.weth.maker - order.makingAmount).toBe(
            finalBalances.weth.maker
        )
        expect(initBalances.usdc.maker + order.takingAmount).toBe(
            finalBalances.usdc.maker
        )

        expect(initBalances.weth.taker + order.makingAmount).toBe(
            finalBalances.weth.taker
        )
        expect(initBalances.usdc.taker - order.takingAmount).toBe(
            finalBalances.usdc.taker
        )
    })
})



================================================
FILE: .github/workflows/pr-check.yml
================================================
name: PR validation

on:
  pull_request:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Linter
        run: pnpm lint

      - name: Types
        run: pnpm lint:types

      - name: Unit tests
        run: pnpm test

      - name: Security
        run: pnpm audit



================================================
FILE: .github/workflows/publish.yml
================================================
name: Publish package

on:
  push:
    tags:
      - v*.*.*
  workflow_dispatch:

jobs:
  publish-to-npm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
          scope: ${{ github.repository_owner }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Publish 🚀
        run: pnpm publish --no-git-checks --access=public
        working-directory: dist
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  publish-to-github:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Auth in GitHub private registry npm
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > .npmrc
          echo "@1inch:registry=https://npm.pkg.github.com" >> .npmrc

      - name: Publish 🚀
        run: pnpm publish --no-git-checks
        working-directory: dist



================================================
FILE: .github/workflows/release-dev.yml
================================================
name: Release DEV version

on:
  workflow_dispatch:
    inputs:
      version:
        type: choice
        description: Version
        options:
          - prerelease
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # Needed to make possible changelog generation only from latest tag
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm

      - name: Install Dev Dependencies
        run: pnpm install -D

      - name: Bump package.json version
        id: version
        run: |
          echo "OLD_VERSION=$(pnpm pkg get version | tr -d '"')" >> "$GITHUB_OUTPUT"
          pnpm version ${{ github.event.inputs.version }} --preid rc --git-tag-version=false
          echo "NEW_VERSION=$(pnpm pkg get version | tr -d '"')" >> "$GITHUB_OUTPUT"

      - name: Create github release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email ci_cd_bot@1inch.io
          git config --global user.name "CI/CD Bot"
          git add package.json
          git commit -m "version v${{ steps.version.outputs.NEW_VERSION }}"
          git tag v${{ steps.version.outputs.NEW_VERSION }}
          git push
          git push --tags
          gh release create v${{ steps.version.outputs.NEW_VERSION }}

      - name: Trigger publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run publish.yml -r v${{ steps.version.outputs.NEW_VERSION }}



================================================
FILE: .github/workflows/release.yml
================================================
name: Release new version

on:
  workflow_dispatch:
    inputs:
      version:
        type: choice
        description: Version
        options:
          - patch
          - minor
          - major
          - prerelease
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # Needed to make possible changelog generation only from latest tag
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Bump package.json version
        id: version
        run: |
          echo "OLD_VERSION=$(pnpm pkg get version | tr -d '"')" >> "$GITHUB_OUTPUT"
          pnpm version ${{ github.event.inputs.version }} --preid rc --git-tag-version=false
          echo "NEW_VERSION=$(pnpm pkg get version | tr -d '"')" >> "$GITHUB_OUTPUT"

      - name: Generate changelog
        run: pnpm changelog:generate -t v${{ steps.version.outputs.OLD_VERSION }} || pnpm changelog:generate

      - name: Create github release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email ci_cd_bot@1inch.io
          git config --global user.name "CI/CD Bot"
          git add package.json
          git commit -m "version v${{ steps.version.outputs.NEW_VERSION }}"
          git tag v${{ steps.version.outputs.NEW_VERSION }}
          git push
          git push --tags
          gh release create v${{ steps.version.outputs.NEW_VERSION }} --notes-file CHANGELOG.md

      - name: Trigger publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run publish.yml -r v${{ steps.version.outputs.NEW_VERSION }}


